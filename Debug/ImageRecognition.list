
ImageRecognition.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fc90  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000647c  0800fe60  0800fe60  0001fe60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080162dc  080162dc  00036ec4  2**0
                  CONTENTS
  4 .ARM          00000008  080162dc  080162dc  000262dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080162e4  080162e4  00036ec4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080162e4  080162e4  000262e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080162ec  080162ec  000262ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00006ec4  20000000  080162f4  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000660  20006ec4  0801d1b8  00036ec4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20007524  0801d1b8  00037524  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00036ec4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000f4c7f  00000000  00000000  00036ef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000d5fe  00000000  00000000  0012bb73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004b90  00000000  00000000  00139178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00004b00  00000000  00000000  0013dd08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dc38  00000000  00000000  00142808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003e19f  00000000  00000000  00170440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001826cb  00000000  00000000  001ae5df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00330caa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000170d8  00000000  00000000  00330d00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20006ec4 	.word	0x20006ec4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800fe48 	.word	0x0800fe48

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20006ec8 	.word	0x20006ec8
 800020c:	0800fe48 	.word	0x0800fe48

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9a4 	b.w	8001048 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	468c      	mov	ip, r1
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	f040 8083 	bne.w	8000e9a <__udivmoddi4+0x116>
 8000d94:	428a      	cmp	r2, r1
 8000d96:	4617      	mov	r7, r2
 8000d98:	d947      	bls.n	8000e2a <__udivmoddi4+0xa6>
 8000d9a:	fab2 f282 	clz	r2, r2
 8000d9e:	b142      	cbz	r2, 8000db2 <__udivmoddi4+0x2e>
 8000da0:	f1c2 0020 	rsb	r0, r2, #32
 8000da4:	fa24 f000 	lsr.w	r0, r4, r0
 8000da8:	4091      	lsls	r1, r2
 8000daa:	4097      	lsls	r7, r2
 8000dac:	ea40 0c01 	orr.w	ip, r0, r1
 8000db0:	4094      	lsls	r4, r2
 8000db2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000db6:	0c23      	lsrs	r3, r4, #16
 8000db8:	fbbc f6f8 	udiv	r6, ip, r8
 8000dbc:	fa1f fe87 	uxth.w	lr, r7
 8000dc0:	fb08 c116 	mls	r1, r8, r6, ip
 8000dc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dcc:	4299      	cmp	r1, r3
 8000dce:	d909      	bls.n	8000de4 <__udivmoddi4+0x60>
 8000dd0:	18fb      	adds	r3, r7, r3
 8000dd2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dd6:	f080 8119 	bcs.w	800100c <__udivmoddi4+0x288>
 8000dda:	4299      	cmp	r1, r3
 8000ddc:	f240 8116 	bls.w	800100c <__udivmoddi4+0x288>
 8000de0:	3e02      	subs	r6, #2
 8000de2:	443b      	add	r3, r7
 8000de4:	1a5b      	subs	r3, r3, r1
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dec:	fb08 3310 	mls	r3, r8, r0, r3
 8000df0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d909      	bls.n	8000e10 <__udivmoddi4+0x8c>
 8000dfc:	193c      	adds	r4, r7, r4
 8000dfe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e02:	f080 8105 	bcs.w	8001010 <__udivmoddi4+0x28c>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f240 8102 	bls.w	8001010 <__udivmoddi4+0x28c>
 8000e0c:	3802      	subs	r0, #2
 8000e0e:	443c      	add	r4, r7
 8000e10:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e14:	eba4 040e 	sub.w	r4, r4, lr
 8000e18:	2600      	movs	r6, #0
 8000e1a:	b11d      	cbz	r5, 8000e24 <__udivmoddi4+0xa0>
 8000e1c:	40d4      	lsrs	r4, r2
 8000e1e:	2300      	movs	r3, #0
 8000e20:	e9c5 4300 	strd	r4, r3, [r5]
 8000e24:	4631      	mov	r1, r6
 8000e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2a:	b902      	cbnz	r2, 8000e2e <__udivmoddi4+0xaa>
 8000e2c:	deff      	udf	#255	; 0xff
 8000e2e:	fab2 f282 	clz	r2, r2
 8000e32:	2a00      	cmp	r2, #0
 8000e34:	d150      	bne.n	8000ed8 <__udivmoddi4+0x154>
 8000e36:	1bcb      	subs	r3, r1, r7
 8000e38:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e3c:	fa1f f887 	uxth.w	r8, r7
 8000e40:	2601      	movs	r6, #1
 8000e42:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e46:	0c21      	lsrs	r1, r4, #16
 8000e48:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e4c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e50:	fb08 f30c 	mul.w	r3, r8, ip
 8000e54:	428b      	cmp	r3, r1
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0xe4>
 8000e58:	1879      	adds	r1, r7, r1
 8000e5a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0xe2>
 8000e60:	428b      	cmp	r3, r1
 8000e62:	f200 80e9 	bhi.w	8001038 <__udivmoddi4+0x2b4>
 8000e66:	4684      	mov	ip, r0
 8000e68:	1ac9      	subs	r1, r1, r3
 8000e6a:	b2a3      	uxth	r3, r4
 8000e6c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e70:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e74:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e78:	fb08 f800 	mul.w	r8, r8, r0
 8000e7c:	45a0      	cmp	r8, r4
 8000e7e:	d907      	bls.n	8000e90 <__udivmoddi4+0x10c>
 8000e80:	193c      	adds	r4, r7, r4
 8000e82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x10a>
 8000e88:	45a0      	cmp	r8, r4
 8000e8a:	f200 80d9 	bhi.w	8001040 <__udivmoddi4+0x2bc>
 8000e8e:	4618      	mov	r0, r3
 8000e90:	eba4 0408 	sub.w	r4, r4, r8
 8000e94:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e98:	e7bf      	b.n	8000e1a <__udivmoddi4+0x96>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d909      	bls.n	8000eb2 <__udivmoddi4+0x12e>
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	f000 80b1 	beq.w	8001006 <__udivmoddi4+0x282>
 8000ea4:	2600      	movs	r6, #0
 8000ea6:	e9c5 0100 	strd	r0, r1, [r5]
 8000eaa:	4630      	mov	r0, r6
 8000eac:	4631      	mov	r1, r6
 8000eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb2:	fab3 f683 	clz	r6, r3
 8000eb6:	2e00      	cmp	r6, #0
 8000eb8:	d14a      	bne.n	8000f50 <__udivmoddi4+0x1cc>
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	d302      	bcc.n	8000ec4 <__udivmoddi4+0x140>
 8000ebe:	4282      	cmp	r2, r0
 8000ec0:	f200 80b8 	bhi.w	8001034 <__udivmoddi4+0x2b0>
 8000ec4:	1a84      	subs	r4, r0, r2
 8000ec6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eca:	2001      	movs	r0, #1
 8000ecc:	468c      	mov	ip, r1
 8000ece:	2d00      	cmp	r5, #0
 8000ed0:	d0a8      	beq.n	8000e24 <__udivmoddi4+0xa0>
 8000ed2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ed6:	e7a5      	b.n	8000e24 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ee0:	4097      	lsls	r7, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eea:	40d9      	lsrs	r1, r3
 8000eec:	4330      	orrs	r0, r6
 8000eee:	0c03      	lsrs	r3, r0, #16
 8000ef0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ef4:	fa1f f887 	uxth.w	r8, r7
 8000ef8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000efc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f00:	fb06 f108 	mul.w	r1, r6, r8
 8000f04:	4299      	cmp	r1, r3
 8000f06:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0a:	d909      	bls.n	8000f20 <__udivmoddi4+0x19c>
 8000f0c:	18fb      	adds	r3, r7, r3
 8000f0e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f12:	f080 808d 	bcs.w	8001030 <__udivmoddi4+0x2ac>
 8000f16:	4299      	cmp	r1, r3
 8000f18:	f240 808a 	bls.w	8001030 <__udivmoddi4+0x2ac>
 8000f1c:	3e02      	subs	r6, #2
 8000f1e:	443b      	add	r3, r7
 8000f20:	1a5b      	subs	r3, r3, r1
 8000f22:	b281      	uxth	r1, r0
 8000f24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f30:	fb00 f308 	mul.w	r3, r0, r8
 8000f34:	428b      	cmp	r3, r1
 8000f36:	d907      	bls.n	8000f48 <__udivmoddi4+0x1c4>
 8000f38:	1879      	adds	r1, r7, r1
 8000f3a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f3e:	d273      	bcs.n	8001028 <__udivmoddi4+0x2a4>
 8000f40:	428b      	cmp	r3, r1
 8000f42:	d971      	bls.n	8001028 <__udivmoddi4+0x2a4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	4439      	add	r1, r7
 8000f48:	1acb      	subs	r3, r1, r3
 8000f4a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f4e:	e778      	b.n	8000e42 <__udivmoddi4+0xbe>
 8000f50:	f1c6 0c20 	rsb	ip, r6, #32
 8000f54:	fa03 f406 	lsl.w	r4, r3, r6
 8000f58:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f5c:	431c      	orrs	r4, r3
 8000f5e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f62:	fa01 f306 	lsl.w	r3, r1, r6
 8000f66:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f6a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f6e:	431f      	orrs	r7, r3
 8000f70:	0c3b      	lsrs	r3, r7, #16
 8000f72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f76:	fa1f f884 	uxth.w	r8, r4
 8000f7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f7e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f82:	fb09 fa08 	mul.w	sl, r9, r8
 8000f86:	458a      	cmp	sl, r1
 8000f88:	fa02 f206 	lsl.w	r2, r2, r6
 8000f8c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x220>
 8000f92:	1861      	adds	r1, r4, r1
 8000f94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f98:	d248      	bcs.n	800102c <__udivmoddi4+0x2a8>
 8000f9a:	458a      	cmp	sl, r1
 8000f9c:	d946      	bls.n	800102c <__udivmoddi4+0x2a8>
 8000f9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000fa2:	4421      	add	r1, r4
 8000fa4:	eba1 010a 	sub.w	r1, r1, sl
 8000fa8:	b2bf      	uxth	r7, r7
 8000faa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000fae:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fb2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000fb6:	fb00 f808 	mul.w	r8, r0, r8
 8000fba:	45b8      	cmp	r8, r7
 8000fbc:	d907      	bls.n	8000fce <__udivmoddi4+0x24a>
 8000fbe:	19e7      	adds	r7, r4, r7
 8000fc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fc4:	d22e      	bcs.n	8001024 <__udivmoddi4+0x2a0>
 8000fc6:	45b8      	cmp	r8, r7
 8000fc8:	d92c      	bls.n	8001024 <__udivmoddi4+0x2a0>
 8000fca:	3802      	subs	r0, #2
 8000fcc:	4427      	add	r7, r4
 8000fce:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fd2:	eba7 0708 	sub.w	r7, r7, r8
 8000fd6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fda:	454f      	cmp	r7, r9
 8000fdc:	46c6      	mov	lr, r8
 8000fde:	4649      	mov	r1, r9
 8000fe0:	d31a      	bcc.n	8001018 <__udivmoddi4+0x294>
 8000fe2:	d017      	beq.n	8001014 <__udivmoddi4+0x290>
 8000fe4:	b15d      	cbz	r5, 8000ffe <__udivmoddi4+0x27a>
 8000fe6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fea:	eb67 0701 	sbc.w	r7, r7, r1
 8000fee:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ff2:	40f2      	lsrs	r2, r6
 8000ff4:	ea4c 0202 	orr.w	r2, ip, r2
 8000ff8:	40f7      	lsrs	r7, r6
 8000ffa:	e9c5 2700 	strd	r2, r7, [r5]
 8000ffe:	2600      	movs	r6, #0
 8001000:	4631      	mov	r1, r6
 8001002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001006:	462e      	mov	r6, r5
 8001008:	4628      	mov	r0, r5
 800100a:	e70b      	b.n	8000e24 <__udivmoddi4+0xa0>
 800100c:	4606      	mov	r6, r0
 800100e:	e6e9      	b.n	8000de4 <__udivmoddi4+0x60>
 8001010:	4618      	mov	r0, r3
 8001012:	e6fd      	b.n	8000e10 <__udivmoddi4+0x8c>
 8001014:	4543      	cmp	r3, r8
 8001016:	d2e5      	bcs.n	8000fe4 <__udivmoddi4+0x260>
 8001018:	ebb8 0e02 	subs.w	lr, r8, r2
 800101c:	eb69 0104 	sbc.w	r1, r9, r4
 8001020:	3801      	subs	r0, #1
 8001022:	e7df      	b.n	8000fe4 <__udivmoddi4+0x260>
 8001024:	4608      	mov	r0, r1
 8001026:	e7d2      	b.n	8000fce <__udivmoddi4+0x24a>
 8001028:	4660      	mov	r0, ip
 800102a:	e78d      	b.n	8000f48 <__udivmoddi4+0x1c4>
 800102c:	4681      	mov	r9, r0
 800102e:	e7b9      	b.n	8000fa4 <__udivmoddi4+0x220>
 8001030:	4666      	mov	r6, ip
 8001032:	e775      	b.n	8000f20 <__udivmoddi4+0x19c>
 8001034:	4630      	mov	r0, r6
 8001036:	e74a      	b.n	8000ece <__udivmoddi4+0x14a>
 8001038:	f1ac 0c02 	sub.w	ip, ip, #2
 800103c:	4439      	add	r1, r7
 800103e:	e713      	b.n	8000e68 <__udivmoddi4+0xe4>
 8001040:	3802      	subs	r0, #2
 8001042:	443c      	add	r4, r7
 8001044:	e724      	b.n	8000e90 <__udivmoddi4+0x10c>
 8001046:	bf00      	nop

08001048 <__aeabi_idiv0>:
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop

0800104c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	4618      	mov	r0, r3
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <_ZNSt14numeric_limitsIsE3minEv>:
    struct numeric_limits<short>
    {
      static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;

      static _GLIBCXX_CONSTEXPR short
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
 8001068:	4b02      	ldr	r3, [pc, #8]	; (8001074 <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 800106a:	4618      	mov	r0, r3
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	ffff8000 	.word	0xffff8000

08001078 <_ZNSt14numeric_limitsIsE3maxEv>:

      static _GLIBCXX_CONSTEXPR short
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
 800107c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001080:	4618      	mov	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 800108a:	b480      	push	{r7}
 800108c:	b083      	sub	sp, #12
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4618      	mov	r0, r3
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4618      	mov	r0, r3
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80010b6:	b480      	push	{r7}
 80010b8:	b083      	sub	sp, #12
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4618      	mov	r0, r3
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d005      	beq.n	80010ee <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	6879      	ldr	r1, [r7, #4]
 80010ea:	2203      	movs	r2, #3
 80010ec:	4798      	blx	r3
    }
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4618      	mov	r0, r3
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	2b00      	cmp	r3, #0
 8001106:	bf0c      	ite	eq
 8001108:	2301      	moveq	r3, #1
 800110a:	2300      	movne	r3, #0
 800110c:	b2db      	uxtb	r3, r3
 800110e:	4618      	mov	r0, r3
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <_ZN2ei9ei_matrixC1EmmPf>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix(
 800111a:	b580      	push	{r7, lr}
 800111c:	b084      	sub	sp, #16
 800111e:	af00      	add	r7, sp, #0
 8001120:	60f8      	str	r0, [r7, #12]
 8001122:	60b9      	str	r1, [r7, #8]
 8001124:	607a      	str	r2, [r7, #4]
 8001126:	603b      	str	r3, [r7, #0]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d006      	beq.n	800113c <_ZN2ei9ei_matrixC1EmmPf+0x22>
            buffer = a_buffer;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	683a      	ldr	r2, [r7, #0]
 8001132:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	2200      	movs	r2, #0
 8001138:	731a      	strb	r2, [r3, #12]
 800113a:	e00e      	b.n	800115a <_ZN2ei9ei_matrixC1EmmPf+0x40>
        }
        else {
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	fb02 f303 	mul.w	r3, r2, r3
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	2101      	movs	r1, #1
 8001148:	4618      	mov	r0, r3
 800114a:	f004 f81d 	bl	8005188 <_Z9ei_callocjj>
 800114e:	4602      	mov	r2, r0
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	2201      	movs	r2, #1
 8001158:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	68ba      	ldr	r2, [r7, #8]
 800115e:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	609a      	str	r2, [r3, #8]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(float), buffer);
            }
#endif
        }
    }
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	4618      	mov	r0, r3
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <_ZN2ei9ei_matrixD1Ev>:

    ~ei_matrix() {
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d008      	beq.n	8001192 <_ZN2ei9ei_matrixD1Ev+0x22>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	7b1b      	ldrb	r3, [r3, #12]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d004      	beq.n	8001192 <_ZN2ei9ei_matrixD1Ev+0x22>
            ei_free(buffer);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4618      	mov	r0, r3
 800118e:	f004 f809 	bl	80051a4 <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(float), buffer);
            }
#endif
        }
    }
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4618      	mov	r0, r3
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <_ZN2ei12ei_matrix_i8C1EmmPa>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix_i8(
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
 80011a8:	603b      	str	r3, [r7, #0]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d006      	beq.n	80011be <_ZN2ei12ei_matrix_i8C1EmmPa+0x22>
            buffer = a_buffer;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	683a      	ldr	r2, [r7, #0]
 80011b4:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	2200      	movs	r2, #0
 80011ba:	731a      	strb	r2, [r3, #12]
 80011bc:	e00d      	b.n	80011da <_ZN2ei12ei_matrix_i8C1EmmPa+0x3e>
        }
        else {
            buffer = (int8_t*)ei_calloc(n_rows * n_cols * sizeof(int8_t), 1);
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	fb02 f303 	mul.w	r3, r2, r3
 80011c6:	2101      	movs	r1, #1
 80011c8:	4618      	mov	r0, r3
 80011ca:	f003 ffdd 	bl	8005188 <_Z9ei_callocjj>
 80011ce:	4602      	mov	r2, r0
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	2201      	movs	r2, #1
 80011d8:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	68ba      	ldr	r2, [r7, #8]
 80011de:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	609a      	str	r2, [r3, #8]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(int8_t), buffer);
            }
#endif
        }
    }
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	4618      	mov	r0, r3
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <_ZN2ei12ei_matrix_i8D1Ev>:

    ~ei_matrix_i8() {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d008      	beq.n	8001212 <_ZN2ei12ei_matrix_i8D1Ev+0x22>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	7b1b      	ldrb	r3, [r3, #12]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d004      	beq.n	8001212 <_ZN2ei12ei_matrix_i8D1Ev+0x22>
            ei_free(buffer);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4618      	mov	r0, r3
 800120e:	f003 ffc9 	bl	80051a4 <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(int8_t), buffer);
            }
#endif
        }
    }
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4618      	mov	r0, r3
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <_ZSt25__throw_bad_function_callv>:
#endif // __cplusplus

// required on Adafruit nRF52, it seems not to matter too much on other targets...
#ifdef __cplusplus
namespace std {
    __attribute__((weak)) void __throw_bad_function_call() { while(1); };
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
 8001220:	e7fe      	b.n	8001220 <_ZSt25__throw_bad_function_callv+0x4>

08001222 <_ZSt3expf>:
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
 8001222:	b580      	push	{r7, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	af00      	add	r7, sp, #0
 8001228:	ed87 0a01 	vstr	s0, [r7, #4]
 800122c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001230:	f00c f9e8 	bl	800d604 <expf>
 8001234:	eef0 7a40 	vmov.f32	s15, s0
 8001238:	eeb0 0a67 	vmov.f32	s0, s15
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	ed87 0a01 	vstr	s0, [r7, #4]
 800124c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001250:	f00c f904 	bl	800d45c <roundf>
 8001254:	eef0 7a40 	vmov.f32	s15, s0
 8001258:	eeb0 0a67 	vmov.f32	s0, s15
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <_ZNSt8functionIFijjPfEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8001262:	b580      	push	{r7, lr}
 8001264:	b082      	sub	sp, #8
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff ff30 	bl	80010d2 <_ZNSt14_Function_baseD1Ev>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4618      	mov	r0, r3
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <_ZN2ei11ei_signal_tC1Ev>:
typedef struct ei_signal_t {
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4618      	mov	r0, r3
 8001288:	f001 fd23 	bl	8002cd2 <_ZNSt8functionIFijjPfEEC1Ev>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4618      	mov	r0, r3
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <_ZN2ei11ei_signal_tD1Ev>:
 8001296:	b580      	push	{r7, lr}
 8001298:	b082      	sub	sp, #8
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff ffde 	bl	8001262 <_ZNSt8functionIFijjPfEED1Ev>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4618      	mov	r0, r3
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:
    output_matrix->rows = 1;

    return EIDSP_OK;
}

__attribute__((unused)) int extract_image_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
 80012b0:	b5b0      	push	{r4, r5, r7, lr}
 80012b2:	b098      	sub	sp, #96	; 0x60
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
 80012bc:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80012c8:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 80012cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012ce:	4978      	ldr	r1, [pc, #480]	; (80014b0 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x200>)
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7fe ff9d 	bl	8000210 <strcmp>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d101      	bne.n	80012e0 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x30>
 80012dc:	2301      	movs	r3, #1
 80012de:	e000      	b.n	80012e2 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x32>
 80012e0:	2303      	movs	r3, #3
 80012e2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    if (output_matrix->rows * output_matrix->cols != static_cast<uint32_t>(EI_CLASSIFIER_INPUT_WIDTH * EI_CLASSIFIER_INPUT_HEIGHT * channel_count)) {
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	6892      	ldr	r2, [r2, #8]
 80012ee:	fb02 f103 	mul.w	r1, r2, r3
 80012f2:	f9b7 2052 	ldrsh.w	r2, [r7, #82]	; 0x52
 80012f6:	4613      	mov	r3, r2
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	4413      	add	r3, r2
 80012fc:	021b      	lsls	r3, r3, #8
 80012fe:	4299      	cmp	r1, r3
 8001300:	d013      	beq.n	800132a <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x7a>
        ei_printf("out_matrix = %hu items\n", output_matrix->rows, output_matrix->cols);
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	6859      	ldr	r1, [r3, #4]
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	461a      	mov	r2, r3
 800130c:	4869      	ldr	r0, [pc, #420]	; (80014b4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x204>)
 800130e:	f001 f807 	bl	8002320 <_Z9ei_printfPKcz>
        ei_printf("calculated size = %hu items\n", static_cast<uint32_t>(EI_CLASSIFIER_INPUT_WIDTH * EI_CLASSIFIER_INPUT_HEIGHT * channel_count));
 8001312:	f9b7 2052 	ldrsh.w	r2, [r7, #82]	; 0x52
 8001316:	4613      	mov	r3, r2
 8001318:	00db      	lsls	r3, r3, #3
 800131a:	4413      	add	r3, r2
 800131c:	021b      	lsls	r3, r3, #8
 800131e:	4619      	mov	r1, r3
 8001320:	4865      	ldr	r0, [pc, #404]	; (80014b8 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x208>)
 8001322:	f000 fffd 	bl	8002320 <_Z9ei_printfPKcz>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001326:	4c65      	ldr	r4, [pc, #404]	; (80014bc <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x20c>)
 8001328:	e0bc      	b.n	80014a4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1f4>
    }

    size_t output_ix = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	65fb      	str	r3, [r7, #92]	; 0x5c

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
    const size_t page_size = EI_DSP_IMAGE_BUFFER_STATIC_SIZE;
#else
    const size_t page_size = 1024;
 800132e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001332:	64fb      	str	r3, [r7, #76]	; 0x4c
#endif

    // buffered read from the signal
    size_t bytes_left = signal->total_length;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	691b      	ldr	r3, [r3, #16]
 8001338:	627b      	str	r3, [r7, #36]	; 0x24
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 800133a:	2300      	movs	r3, #0
 800133c:	65bb      	str	r3, [r7, #88]	; 0x58
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001344:	429a      	cmp	r2, r3
 8001346:	f080 80ac 	bcs.w	80014a2 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1f2>
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
 800134a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001350:	d803      	bhi.n	800135a <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xaa>
 8001352:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	e001      	b.n	800135e <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xae>
 800135a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800135e:	64bb      	str	r3, [r7, #72]	; 0x48

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
        matrix_t input_matrix(elements_to_read, config.axes, ei_dsp_image_buffer);
#else
        matrix_t input_matrix(elements_to_read, config.axes);
 8001360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001362:	461a      	mov	r2, r3
 8001364:	f107 0014 	add.w	r0, r7, #20
 8001368:	2300      	movs	r3, #0
 800136a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800136c:	f7ff fed5 	bl	800111a <_ZN2ei9ei_matrixC1EmmPf>
#endif
        if (!input_matrix.buffer) {
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d102      	bne.n	800137c <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xcc>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001376:	4c52      	ldr	r4, [pc, #328]	; (80014c0 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x210>)
 8001378:	2500      	movs	r5, #0
 800137a:	e086      	b.n	800148a <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1da>
        }
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
 800137c:	68f8      	ldr	r0, [r7, #12]
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001382:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001384:	f001 fc77 	bl	8002c76 <_ZNKSt8functionIFijjPfEEclEjjS0_>

        for (size_t jx = 0; jx < elements_to_read; jx++) {
 8001388:	2300      	movs	r3, #0
 800138a:	657b      	str	r3, [r7, #84]	; 0x54
 800138c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800138e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001390:	429a      	cmp	r2, r3
 8001392:	d275      	bcs.n	8001480 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1d0>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 8001394:	697a      	ldr	r2, [r7, #20]
 8001396:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	4413      	add	r3, r2
 800139c:	edd3 7a00 	vldr	s15, [r3]
 80013a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013a4:	ee17 3a90 	vmov	r3, s15
 80013a8:	647b      	str	r3, [r7, #68]	; 0x44

            // rgb to 0..1
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 80013aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013ac:	0c1b      	lsrs	r3, r3, #16
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	ee07 3a90 	vmov	s15, r3
 80013b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013b8:	eddf 6a42 	vldr	s13, [pc, #264]	; 80014c4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x214>
 80013bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013c0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 80013c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013c6:	0a1b      	lsrs	r3, r3, #8
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	ee07 3a90 	vmov	s15, r3
 80013ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013d2:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80014c4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x214>
 80013d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013da:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
 80013de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	ee07 3a90 	vmov	s15, r3
 80013e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013ea:	eddf 6a36 	vldr	s13, [pc, #216]	; 80014c4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x214>
 80013ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013f2:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

            if (channel_count == 3) {
 80013f6:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80013fa:	2b03      	cmp	r3, #3
 80013fc:	d11b      	bne.n	8001436 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x186>
                output_matrix->buffer[output_ix++] = r;
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001404:	1c59      	adds	r1, r3, #1
 8001406:	65f9      	str	r1, [r7, #92]	; 0x5c
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	4413      	add	r3, r2
 800140c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800140e:	601a      	str	r2, [r3, #0]
                output_matrix->buffer[output_ix++] = g;
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001416:	1c59      	adds	r1, r3, #1
 8001418:	65f9      	str	r1, [r7, #92]	; 0x5c
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	4413      	add	r3, r2
 800141e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001420:	601a      	str	r2, [r3, #0]
                output_matrix->buffer[output_ix++] = b;
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001428:	1c59      	adds	r1, r3, #1
 800142a:	65f9      	str	r1, [r7, #92]	; 0x5c
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	4413      	add	r3, r2
 8001430:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	e020      	b.n	8001478 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c8>
            }
            else {
                // ITU-R 601-2 luma transform
                // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 8001436:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800143a:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80014c8 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x218>
 800143e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001442:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001446:	eddf 6a21 	vldr	s13, [pc, #132]	; 80014cc <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x21c>
 800144a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800144e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001452:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001456:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80014d0 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x220>
 800145a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800145e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001462:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
                output_matrix->buffer[output_ix++] = v;
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800146c:	1c59      	adds	r1, r3, #1
 800146e:	65f9      	str	r1, [r7, #92]	; 0x5c
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4413      	add	r3, r2
 8001474:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001476:	601a      	str	r2, [r3, #0]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 8001478:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800147a:	3301      	adds	r3, #1
 800147c:	657b      	str	r3, [r7, #84]	; 0x54
 800147e:	e785      	b.n	800138c <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xdc>
            }
        }

        bytes_left -= elements_to_read;
 8001480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001482:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
        matrix_t input_matrix(elements_to_read, config.axes);
 8001488:	2501      	movs	r5, #1
 800148a:	f107 0314 	add.w	r3, r7, #20
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff fe6e 	bl	8001170 <_ZN2ei9ei_matrixD1Ev>
 8001494:	2d01      	cmp	r5, #1
 8001496:	d105      	bne.n	80014a4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1f4>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 8001498:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800149a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800149e:	65bb      	str	r3, [r7, #88]	; 0x58
 80014a0:	e74d      	b.n	800133e <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x8e>
    }

    return EIDSP_OK;
 80014a2:	2400      	movs	r4, #0
 80014a4:	4623      	mov	r3, r4
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3760      	adds	r7, #96	; 0x60
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bdb0      	pop	{r4, r5, r7, pc}
 80014ae:	bf00      	nop
 80014b0:	0800ffbc 	.word	0x0800ffbc
 80014b4:	0800ffc8 	.word	0x0800ffc8
 80014b8:	0800ffe0 	.word	0x0800ffe0
 80014bc:	fffffc14 	.word	0xfffffc14
 80014c0:	fffffc16 	.word	0xfffffc16
 80014c4:	437f0000 	.word	0x437f0000
 80014c8:	3e991687 	.word	0x3e991687
 80014cc:	3f1645a2 	.word	0x3f1645a2
 80014d0:	3de978d5 	.word	0x3de978d5
 80014d4:	00000000 	.word	0x00000000

080014d8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf>:

#if EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1

__attribute__((unused)) int extract_image_features_quantized(signal_t *signal, matrix_i8_t *output_matrix, void *config_ptr, const float frequency) {
 80014d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014dc:	b098      	sub	sp, #96	; 0x60
 80014de:	af00      	add	r7, sp, #0
 80014e0:	60f8      	str	r0, [r7, #12]
 80014e2:	60b9      	str	r1, [r7, #8]
 80014e4:	607a      	str	r2, [r7, #4]
 80014e6:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80014f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 80014f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014f8:	49bd      	ldr	r1, [pc, #756]	; (80017f0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x318>)
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7fe fe88 	bl	8000210 <strcmp>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d101      	bne.n	800150a <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x32>
 8001506:	2301      	movs	r3, #1
 8001508:	e000      	b.n	800150c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x34>
 800150a:	2303      	movs	r3, #3
 800150c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    if (output_matrix->rows * output_matrix->cols != static_cast<uint32_t>(EI_CLASSIFIER_INPUT_WIDTH * EI_CLASSIFIER_INPUT_HEIGHT * channel_count)) {
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	68ba      	ldr	r2, [r7, #8]
 8001516:	6892      	ldr	r2, [r2, #8]
 8001518:	fb02 f103 	mul.w	r1, r2, r3
 800151c:	f9b7 2052 	ldrsh.w	r2, [r7, #82]	; 0x52
 8001520:	4613      	mov	r3, r2
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	4413      	add	r3, r2
 8001526:	021b      	lsls	r3, r3, #8
 8001528:	4299      	cmp	r1, r3
 800152a:	d013      	beq.n	8001554 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x7c>
        ei_printf("out_matrix = %hu items\n", output_matrix->rows, output_matrix->cols);
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	6859      	ldr	r1, [r3, #4]
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	461a      	mov	r2, r3
 8001536:	48af      	ldr	r0, [pc, #700]	; (80017f4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x31c>)
 8001538:	f000 fef2 	bl	8002320 <_Z9ei_printfPKcz>
        ei_printf("calculated size = %hu items\n", static_cast<uint32_t>(EI_CLASSIFIER_INPUT_WIDTH * EI_CLASSIFIER_INPUT_HEIGHT * channel_count));
 800153c:	f9b7 2052 	ldrsh.w	r2, [r7, #82]	; 0x52
 8001540:	4613      	mov	r3, r2
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	4413      	add	r3, r2
 8001546:	021b      	lsls	r3, r3, #8
 8001548:	4619      	mov	r1, r3
 800154a:	48ab      	ldr	r0, [pc, #684]	; (80017f8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x320>)
 800154c:	f000 fee8 	bl	8002320 <_Z9ei_printfPKcz>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001550:	4caa      	ldr	r4, [pc, #680]	; (80017fc <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x324>)
 8001552:	e141      	b.n	80017d8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x300>
    }

    size_t output_ix = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	65fb      	str	r3, [r7, #92]	; 0x5c

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
    const size_t page_size = EI_DSP_IMAGE_BUFFER_STATIC_SIZE;
#else
    const size_t page_size = 1024;
 8001558:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800155c:	64fb      	str	r3, [r7, #76]	; 0x4c
#endif

    // buffered read from the signal
    size_t bytes_left = signal->total_length;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	627b      	str	r3, [r7, #36]	; 0x24
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 8001564:	2300      	movs	r3, #0
 8001566:	65bb      	str	r3, [r7, #88]	; 0x58
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	691b      	ldr	r3, [r3, #16]
 800156c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800156e:	429a      	cmp	r2, r3
 8001570:	f080 8131 	bcs.w	80017d6 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x2fe>
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
 8001574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001576:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800157a:	d803      	bhi.n	8001584 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0xac>
 800157c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	e001      	b.n	8001588 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0xb0>
 8001584:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001588:	64bb      	str	r3, [r7, #72]	; 0x48

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
        matrix_t input_matrix(elements_to_read, config.axes, ei_dsp_image_buffer);
#else
        matrix_t input_matrix(elements_to_read, config.axes);
 800158a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800158c:	461a      	mov	r2, r3
 800158e:	f107 0014 	add.w	r0, r7, #20
 8001592:	2300      	movs	r3, #0
 8001594:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001596:	f7ff fdc0 	bl	800111a <_ZN2ei9ei_matrixC1EmmPf>
#endif
        if (!input_matrix.buffer) {
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d102      	bne.n	80015a6 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0xce>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80015a0:	4c97      	ldr	r4, [pc, #604]	; (8001800 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x328>)
 80015a2:	2500      	movs	r5, #0
 80015a4:	e10b      	b.n	80017be <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x2e6>
        }
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
 80015a6:	68f8      	ldr	r0, [r7, #12]
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80015ac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80015ae:	f001 fb62 	bl	8002c76 <_ZNKSt8functionIFijjPfEEclEjjS0_>

        for (size_t jx = 0; jx < elements_to_read; jx++) {
 80015b2:	2300      	movs	r3, #0
 80015b4:	657b      	str	r3, [r7, #84]	; 0x54
 80015b6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80015b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015ba:	429a      	cmp	r2, r3
 80015bc:	f080 80fa 	bcs.w	80017b4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x2dc>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 80015c0:	697a      	ldr	r2, [r7, #20]
 80015c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4413      	add	r3, r2
 80015c8:	edd3 7a00 	vldr	s15, [r3]
 80015cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015d0:	ee17 3a90 	vmov	r3, s15
 80015d4:	647b      	str	r3, [r7, #68]	; 0x44

            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 80015d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015d8:	0c1b      	lsrs	r3, r3, #16
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	ee07 3a90 	vmov	s15, r3
 80015e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015e4:	eddf 6a87 	vldr	s13, [pc, #540]	; 8001804 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x32c>
 80015e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015ec:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 80015f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015f2:	0a1b      	lsrs	r3, r3, #8
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	ee07 3a90 	vmov	s15, r3
 80015fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015fe:	eddf 6a81 	vldr	s13, [pc, #516]	; 8001804 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x32c>
 8001602:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001606:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
 800160a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800160c:	b2db      	uxtb	r3, r3
 800160e:	ee07 3a90 	vmov	s15, r3
 8001612:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001616:	eddf 6a7b 	vldr	s13, [pc, #492]	; 8001804 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x32c>
 800161a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800161e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

            if (channel_count == 3) {
 8001622:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8001626:	2b03      	cmp	r3, #3
 8001628:	d17e      	bne.n	8001728 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x250>
                output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(r / EI_CLASSIFIER_TFLITE_INPUT_SCALE) + EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
 800162a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800162c:	f7fe ffbc 	bl	80005a8 <__aeabi_f2d>
 8001630:	a36d      	add	r3, pc, #436	; (adr r3, 80017e8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x310>)
 8001632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001636:	f7ff f939 	bl	80008ac <__aeabi_ddiv>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	ec43 2b17 	vmov	d7, r2, r3
 8001642:	eeb0 0a47 	vmov.f32	s0, s14
 8001646:	eef0 0a67 	vmov.f32	s1, s15
 800164a:	f00b fec1 	bl	800d3d0 <round>
 800164e:	ec51 0b10 	vmov	r0, r1, d0
 8001652:	f04f 0200 	mov.w	r2, #0
 8001656:	4b6c      	ldr	r3, [pc, #432]	; (8001808 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x330>)
 8001658:	f7fe fe46 	bl	80002e8 <__aeabi_dsub>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	4690      	mov	r8, r2
 8001662:	4699      	mov	r9, r3
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800166a:	1c59      	adds	r1, r3, #1
 800166c:	65f9      	str	r1, [r7, #92]	; 0x5c
 800166e:	18d5      	adds	r5, r2, r3
 8001670:	4640      	mov	r0, r8
 8001672:	4649      	mov	r1, r9
 8001674:	f7ff faa0 	bl	8000bb8 <__aeabi_d2iz>
 8001678:	4603      	mov	r3, r0
 800167a:	b25b      	sxtb	r3, r3
 800167c:	702b      	strb	r3, [r5, #0]
                output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(g / EI_CLASSIFIER_TFLITE_INPUT_SCALE) + EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
 800167e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001680:	f7fe ff92 	bl	80005a8 <__aeabi_f2d>
 8001684:	a358      	add	r3, pc, #352	; (adr r3, 80017e8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x310>)
 8001686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168a:	f7ff f90f 	bl	80008ac <__aeabi_ddiv>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	ec43 2b17 	vmov	d7, r2, r3
 8001696:	eeb0 0a47 	vmov.f32	s0, s14
 800169a:	eef0 0a67 	vmov.f32	s1, s15
 800169e:	f00b fe97 	bl	800d3d0 <round>
 80016a2:	ec51 0b10 	vmov	r0, r1, d0
 80016a6:	f04f 0200 	mov.w	r2, #0
 80016aa:	4b57      	ldr	r3, [pc, #348]	; (8001808 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x330>)
 80016ac:	f7fe fe1c 	bl	80002e8 <__aeabi_dsub>
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	4690      	mov	r8, r2
 80016b6:	4699      	mov	r9, r3
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016be:	1c59      	adds	r1, r3, #1
 80016c0:	65f9      	str	r1, [r7, #92]	; 0x5c
 80016c2:	18d5      	adds	r5, r2, r3
 80016c4:	4640      	mov	r0, r8
 80016c6:	4649      	mov	r1, r9
 80016c8:	f7ff fa76 	bl	8000bb8 <__aeabi_d2iz>
 80016cc:	4603      	mov	r3, r0
 80016ce:	b25b      	sxtb	r3, r3
 80016d0:	702b      	strb	r3, [r5, #0]
                output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(b / EI_CLASSIFIER_TFLITE_INPUT_SCALE) + EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
 80016d2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80016d4:	f7fe ff68 	bl	80005a8 <__aeabi_f2d>
 80016d8:	a343      	add	r3, pc, #268	; (adr r3, 80017e8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x310>)
 80016da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016de:	f7ff f8e5 	bl	80008ac <__aeabi_ddiv>
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	ec43 2b17 	vmov	d7, r2, r3
 80016ea:	eeb0 0a47 	vmov.f32	s0, s14
 80016ee:	eef0 0a67 	vmov.f32	s1, s15
 80016f2:	f00b fe6d 	bl	800d3d0 <round>
 80016f6:	ec51 0b10 	vmov	r0, r1, d0
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	4b42      	ldr	r3, [pc, #264]	; (8001808 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x330>)
 8001700:	f7fe fdf2 	bl	80002e8 <__aeabi_dsub>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4690      	mov	r8, r2
 800170a:	4699      	mov	r9, r3
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001712:	1c59      	adds	r1, r3, #1
 8001714:	65f9      	str	r1, [r7, #92]	; 0x5c
 8001716:	18d5      	adds	r5, r2, r3
 8001718:	4640      	mov	r0, r8
 800171a:	4649      	mov	r1, r9
 800171c:	f7ff fa4c 	bl	8000bb8 <__aeabi_d2iz>
 8001720:	4603      	mov	r3, r0
 8001722:	b25b      	sxtb	r3, r3
 8001724:	702b      	strb	r3, [r5, #0]
 8001726:	e041      	b.n	80017ac <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x2d4>
            }
            else {
                // ITU-R 601-2 luma transform
                // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 8001728:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800172c:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800180c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x334>
 8001730:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001734:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001738:	eddf 6a35 	vldr	s13, [pc, #212]	; 8001810 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x338>
 800173c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001740:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001744:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001748:	eddf 6a32 	vldr	s13, [pc, #200]	; 8001814 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x33c>
 800174c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001750:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001754:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
                output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(v / EI_CLASSIFIER_TFLITE_INPUT_SCALE) + EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
 8001758:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800175a:	f7fe ff25 	bl	80005a8 <__aeabi_f2d>
 800175e:	a322      	add	r3, pc, #136	; (adr r3, 80017e8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x310>)
 8001760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001764:	f7ff f8a2 	bl	80008ac <__aeabi_ddiv>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	ec43 2b17 	vmov	d7, r2, r3
 8001770:	eeb0 0a47 	vmov.f32	s0, s14
 8001774:	eef0 0a67 	vmov.f32	s1, s15
 8001778:	f00b fe2a 	bl	800d3d0 <round>
 800177c:	ec51 0b10 	vmov	r0, r1, d0
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	4b20      	ldr	r3, [pc, #128]	; (8001808 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x330>)
 8001786:	f7fe fdaf 	bl	80002e8 <__aeabi_dsub>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	4690      	mov	r8, r2
 8001790:	4699      	mov	r9, r3
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001798:	1c59      	adds	r1, r3, #1
 800179a:	65f9      	str	r1, [r7, #92]	; 0x5c
 800179c:	18d5      	adds	r5, r2, r3
 800179e:	4640      	mov	r0, r8
 80017a0:	4649      	mov	r1, r9
 80017a2:	f7ff fa09 	bl	8000bb8 <__aeabi_d2iz>
 80017a6:	4603      	mov	r3, r0
 80017a8:	b25b      	sxtb	r3, r3
 80017aa:	702b      	strb	r3, [r5, #0]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 80017ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ae:	3301      	adds	r3, #1
 80017b0:	657b      	str	r3, [r7, #84]	; 0x54
 80017b2:	e700      	b.n	80015b6 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0xde>
            }
        }

        bytes_left -= elements_to_read;
 80017b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	627b      	str	r3, [r7, #36]	; 0x24
        matrix_t input_matrix(elements_to_read, config.axes);
 80017bc:	2501      	movs	r5, #1
 80017be:	f107 0314 	add.w	r3, r7, #20
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff fcd4 	bl	8001170 <_ZN2ei9ei_matrixD1Ev>
 80017c8:	2d01      	cmp	r5, #1
 80017ca:	d105      	bne.n	80017d8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x300>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 80017cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80017d4:	e6c8      	b.n	8001568 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x90>
    }

    return EIDSP_OK;
 80017d6:	2400      	movs	r4, #0
 80017d8:	4623      	mov	r3, r4
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3760      	adds	r7, #96	; 0x60
 80017de:	46bd      	mov	sp, r7
 80017e0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80017e4:	f3af 8000 	nop.w
 80017e8:	20000000 	.word	0x20000000
 80017ec:	3f701010 	.word	0x3f701010
 80017f0:	0800ffbc 	.word	0x0800ffbc
 80017f4:	0800ffc8 	.word	0x0800ffc8
 80017f8:	0800ffe0 	.word	0x0800ffe0
 80017fc:	fffffc14 	.word	0xfffffc14
 8001800:	fffffc16 	.word	0xfffffc16
 8001804:	437f0000 	.word	0x437f0000
 8001808:	40600000 	.word	0x40600000
 800180c:	3e991687 	.word	0x3e991687
 8001810:	3f1645a2 	.word	0x3f1645a2
 8001814:	3de978d5 	.word	0x3de978d5

08001818 <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhj>:

using namespace ei;

class SignalWithAxes {
public:
    SignalWithAxes(signal_t *original_signal, uint8_t *axes, size_t axes_count):
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
 8001824:	603b      	str	r3, [r7, #0]
        _original_signal(original_signal), _axes(axes), _axes_count(axes_count)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	68ba      	ldr	r2, [r7, #8]
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	330c      	adds	r3, #12
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff fd1d 	bl	800127c <_ZN2ei11ei_signal_tC1Ev>
    {

    }
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	4618      	mov	r0, r3
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>:

        wrapped_signal.total_length = _original_signal->total_length / EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME * _axes_count;
#ifdef __MBED__
        wrapped_signal.get_data = mbed::callback(this, &SignalWithAxes::get_data);
#else
        wrapped_signal.get_data = [this](size_t offset, size_t length, float *out_ptr) {
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
 8001858:	603b      	str	r3, [r7, #0]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	6818      	ldr	r0, [r3, #0]
            return this->get_data(offset, length, out_ptr);
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	68b9      	ldr	r1, [r7, #8]
 8001864:	f000 f82a 	bl	80018bc <_ZN14SignalWithAxes8get_dataEjjPf>
 8001868:	4603      	mov	r3, r0
        };
 800186a:	4618      	mov	r0, r3
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <_ZN14SignalWithAxes10get_signalEv>:
    signal_t * get_signal() {
 8001872:	b580      	push	{r7, lr}
 8001874:	b084      	sub	sp, #16
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
        if (this->_axes_count == EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME) {
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d102      	bne.n	8001888 <_ZN14SignalWithAxes10get_signalEv+0x16>
            return this->_original_signal;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	e015      	b.n	80018b4 <_ZN14SignalWithAxes10get_signalEv+0x42>
        wrapped_signal.total_length = _original_signal->total_length / EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME * _axes_count;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	6892      	ldr	r2, [r2, #8]
 8001892:	fb02 f203 	mul.w	r2, r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	61da      	str	r2, [r3, #28]
        };
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f103 020c 	add.w	r2, r3, #12
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	f107 030c 	add.w	r3, r7, #12
 80018a8:	4619      	mov	r1, r3
 80018aa:	4610      	mov	r0, r2
 80018ac:	f001 fa3e 	bl	8002d2c <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JjjS0_EEEE5valueERS2_E4typeEOS9_>
#endif
        return &wrapped_signal;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	330c      	adds	r3, #12
    }
 80018b4:	4618      	mov	r0, r3
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <_ZN14SignalWithAxes8get_dataEjjPf>:

    int get_data(size_t offset, size_t length, float *out_ptr) {
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08a      	sub	sp, #40	; 0x28
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
 80018c8:	603b      	str	r3, [r7, #0]
        size_t length_on_original_signal = length / _axes_count * EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d4:	61bb      	str	r3, [r7, #24]

        size_t out_ptr_ix = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24

        for (size_t ix = 0; ix < length_on_original_signal; ix += EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME) {
 80018da:	2300      	movs	r3, #0
 80018dc:	623b      	str	r3, [r7, #32]
 80018de:	6a3a      	ldr	r2, [r7, #32]
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d228      	bcs.n	8001938 <_ZN14SignalWithAxes8get_dataEjjPf+0x7c>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 80018e6:	2300      	movs	r3, #0
 80018e8:	61fb      	str	r3, [r7, #28]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	69fa      	ldr	r2, [r7, #28]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d21d      	bcs.n	8001930 <_ZN14SignalWithAxes8get_dataEjjPf+0x74>
                int r = _original_signal->get_data(ix + _axes[axis_ix], 1, &out_ptr[out_ptr_ix++]);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4618      	mov	r0, r3
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	685a      	ldr	r2, [r3, #4]
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	4413      	add	r3, r2
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	461a      	mov	r2, r3
 8001906:	6a3b      	ldr	r3, [r7, #32]
 8001908:	18d1      	adds	r1, r2, r3
 800190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190c:	1c5a      	adds	r2, r3, #1
 800190e:	627a      	str	r2, [r7, #36]	; 0x24
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	683a      	ldr	r2, [r7, #0]
 8001914:	4413      	add	r3, r2
 8001916:	2201      	movs	r2, #1
 8001918:	f001 f9ad 	bl	8002c76 <_ZNKSt8functionIFijjPfEEclEjjS0_>
 800191c:	6178      	str	r0, [r7, #20]
                if (r != 0) {
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <_ZN14SignalWithAxes8get_dataEjjPf+0x6c>
                    return r;
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	e008      	b.n	800193a <_ZN14SignalWithAxes8get_dataEjjPf+0x7e>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	3301      	adds	r3, #1
 800192c:	61fb      	str	r3, [r7, #28]
 800192e:	e7dc      	b.n	80018ea <_ZN14SignalWithAxes8get_dataEjjPf+0x2e>
        for (size_t ix = 0; ix < length_on_original_signal; ix += EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME) {
 8001930:	6a3b      	ldr	r3, [r7, #32]
 8001932:	3301      	adds	r3, #1
 8001934:	623b      	str	r3, [r7, #32]
 8001936:	e7d2      	b.n	80018de <_ZN14SignalWithAxes8get_dataEjjPf+0x22>
                }
            }
        }

        return 0;
 8001938:	2300      	movs	r3, #0
    }
 800193a:	4618      	mov	r0, r3
 800193c:	3728      	adds	r7, #40	; 0x28
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
	...

08001944 <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj>:
* aligned_malloc takes in the requested alignment and size
*	We will call malloc with extra bytes for our header and the offset
*	required to guarantee the desired alignment.
*/
__attribute__((unused)) void * ei_aligned_malloc(size_t align, size_t size)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
	void * ptr = NULL;
 800194e:	2300      	movs	r3, #0
 8001950:	617b      	str	r3, [r7, #20]

	//We want it to be a power of two since align_up operates on powers of two
	assert((align & (align - 1)) == 0);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	1e5a      	subs	r2, r3, #1
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4013      	ands	r3, r2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d005      	beq.n	800196a <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj+0x26>
 800195e:	4b16      	ldr	r3, [pc, #88]	; (80019b8 <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj+0x74>)
 8001960:	4a16      	ldr	r2, [pc, #88]	; (80019bc <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj+0x78>)
 8001962:	213c      	movs	r1, #60	; 0x3c
 8001964:	4816      	ldr	r0, [pc, #88]	; (80019c0 <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj+0x7c>)
 8001966:	f00d f801 	bl	800e96c <__assert_func>

	if(align && size)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d01e      	beq.n	80019ae <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj+0x6a>
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d01b      	beq.n	80019ae <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj+0x6a>
	{
		/*
		 * We know we have to fit an offset value
		 * We also allocate extra bytes to ensure we can meet the alignment
		 */
		uint32_t hdr_size = PTR_OFFSET_SZ + (align - 1);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	3301      	adds	r3, #1
 800197a:	613b      	str	r3, [r7, #16]
		void * p = ei_malloc(size + hdr_size);
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	4413      	add	r3, r2
 8001982:	4618      	mov	r0, r3
 8001984:	f003 fbf4 	bl	8005170 <_Z9ei_mallocj>
 8001988:	60f8      	str	r0, [r7, #12]

		if(p)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d00e      	beq.n	80019ae <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj+0x6a>
		{
			/*
			 * Add the offset size to malloc's pointer (we will always store that)
			 * Then align the resulting value to the arget alignment
			 */
			ptr = (void *) align_up(((uintptr_t)p + PTR_OFFSET_SZ), align);
 8001990:	68fa      	ldr	r2, [r7, #12]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	1c5a      	adds	r2, r3, #1
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	425b      	negs	r3, r3
 800199c:	4013      	ands	r3, r2
 800199e:	617b      	str	r3, [r7, #20]

			//Calculate the offset and store it behind our aligned pointer
			*((offset_t *)ptr - 1) = (offset_t)((uintptr_t)ptr - (uintptr_t)p);
 80019a0:	697a      	ldr	r2, [r7, #20]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	1ad2      	subs	r2, r2, r3
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	3b02      	subs	r3, #2
 80019aa:	b292      	uxth	r2, r2
 80019ac:	801a      	strh	r2, [r3, #0]

		} // else NULL, could not malloc
	} //else NULL, invalid arguments

	return ptr;
 80019ae:	697b      	ldr	r3, [r7, #20]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3718      	adds	r7, #24
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	08010014 	.word	0x08010014
 80019bc:	08010030 	.word	0x08010030
 80019c0:	08010068 	.word	0x08010068

080019c4 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv>:
* aligned_free works like free(), but we work backwards from the returned
* pointer to find the correct offset and pointer location to return to free()
* Note that it is VERY BAD to call free() on an aligned_malloc() pointer.
*/
__attribute__((unused)) void ei_aligned_free(void * ptr)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
	assert(ptr);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d105      	bne.n	80019de <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x1a>
 80019d2:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x3c>)
 80019d4:	4a0b      	ldr	r2, [pc, #44]	; (8001a04 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x40>)
 80019d6:	215f      	movs	r1, #95	; 0x5f
 80019d8:	480b      	ldr	r0, [pc, #44]	; (8001a08 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x44>)
 80019da:	f00c ffc7 	bl	800e96c <__assert_func>

	/*
	* Walk backwards from the passed-in pointer to get the pointer offset
	* We convert to an offset_t pointer and rely on pointer math to get the data
	*/
	offset_t offset = *((offset_t *)ptr - 1);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f833 3c02 	ldrh.w	r3, [r3, #-2]
 80019e4:	81fb      	strh	r3, [r7, #14]

	/*
	* Once we have the offset, we can get our original pointer and call free
	*/
	void * p = (void *)((uint8_t *)ptr - offset);
 80019e6:	89fb      	ldrh	r3, [r7, #14]
 80019e8:	425b      	negs	r3, r3
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	4413      	add	r3, r2
 80019ee:	60bb      	str	r3, [r7, #8]
	ei_free(p);
 80019f0:	68b8      	ldr	r0, [r7, #8]
 80019f2:	f003 fbd7 	bl	80051a4 <_Z7ei_freePv>
}
 80019f6:	bf00      	nop
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	080100f8 	.word	0x080100f8
 8001a04:	080100fc 	.word	0x080100fc
 8001a08:	08010068 	.word	0x08010068

08001a0c <_ZN14SignalWithAxesD1Ev>:
class SignalWithAxes {
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	330c      	adds	r3, #12
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff fc3c 	bl	8001296 <_ZN2ei11ei_signal_tD1Ev>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4618      	mov	r0, r3
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb>:
#else

/**
 * Fill the result structure from a quantized output tensor
 */
__attribute__((unused)) static void fill_result_struct_i8(ei_impulse_result_t *result, int8_t *data, float zero_point, float scale, bool debug) {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b088      	sub	sp, #32
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6178      	str	r0, [r7, #20]
 8001a30:	6139      	str	r1, [r7, #16]
 8001a32:	ed87 0a03 	vstr	s0, [r7, #12]
 8001a36:	edc7 0a02 	vstr	s1, [r7, #8]
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	71fb      	strb	r3, [r7, #7]
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61fb      	str	r3, [r7, #28]
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	2b04      	cmp	r3, #4
 8001a46:	d837      	bhi.n	8001ab8 <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb+0x90>
        float value = static_cast<float>(data[ix] - zero_point) * scale;
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	f993 3000 	ldrsb.w	r3, [r3]
 8001a52:	ee07 3a90 	vmov	s15, r3
 8001a56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a5a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a62:	ed97 7a02 	vldr	s14, [r7, #8]
 8001a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a6a:	edc7 7a06 	vstr	s15, [r7, #24]

        if (debug) {
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d00e      	beq.n	8001a92 <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb+0x6a>
            ei_printf("%s:\t", ei_classifier_inferencing_categories[ix]);
 8001a74:	4a12      	ldr	r2, [pc, #72]	; (8001ac0 <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb+0x98>)
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4811      	ldr	r0, [pc, #68]	; (8001ac4 <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb+0x9c>)
 8001a80:	f000 fc4e 	bl	8002320 <_Z9ei_printfPKcz>
            ei_printf_float(value);
 8001a84:	ed97 0a06 	vldr	s0, [r7, #24]
 8001a88:	f003 fa66 	bl	8004f58 <_Z15ei_printf_floatf>
            ei_printf("\n");
 8001a8c:	480e      	ldr	r0, [pc, #56]	; (8001ac8 <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb+0xa0>)
 8001a8e:	f000 fc47 	bl	8002320 <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = ei_classifier_inferencing_categories[ix];
 8001a92:	4a0b      	ldr	r2, [pc, #44]	; (8001ac0 <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb+0x98>)
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	69fa      	ldr	r2, [r7, #28]
 8001a9e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	3304      	adds	r3, #4
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	61fb      	str	r3, [r7, #28]
 8001ab6:	e7c4      	b.n	8001a42 <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb+0x1a>
    }
}
 8001ab8:	bf00      	nop
 8001aba:	3720      	adds	r7, #32
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20000000 	.word	0x20000000
 8001ac4:	08010204 	.word	0x08010204
 8001ac8:	080101e4 	.word	0x080101e4

08001acc <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb>:

/**
 * Fill the result structure from an unquantized output tensor
 */
__attribute__((unused)) static void fill_result_struct_f32(ei_impulse_result_t *result, float *data, bool debug) {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	71fb      	strb	r3, [r7, #7]
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8001ada:	2300      	movs	r3, #0
 8001adc:	617b      	str	r3, [r7, #20]
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	2b04      	cmp	r3, #4
 8001ae2:	d82a      	bhi.n	8001b3a <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb+0x6e>
        float value = data[ix];
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	68ba      	ldr	r2, [r7, #8]
 8001aea:	4413      	add	r3, r2
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	613b      	str	r3, [r7, #16]

        if (debug) {
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d00e      	beq.n	8001b14 <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb+0x48>
            ei_printf("%s:\t", ei_classifier_inferencing_categories[ix]);
 8001af6:	4a13      	ldr	r2, [pc, #76]	; (8001b44 <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb+0x78>)
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001afe:	4619      	mov	r1, r3
 8001b00:	4811      	ldr	r0, [pc, #68]	; (8001b48 <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb+0x7c>)
 8001b02:	f000 fc0d 	bl	8002320 <_Z9ei_printfPKcz>
            ei_printf_float(value);
 8001b06:	ed97 0a04 	vldr	s0, [r7, #16]
 8001b0a:	f003 fa25 	bl	8004f58 <_Z15ei_printf_floatf>
            ei_printf("\n");
 8001b0e:	480f      	ldr	r0, [pc, #60]	; (8001b4c <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb+0x80>)
 8001b10:	f000 fc06 	bl	8002320 <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = ei_classifier_inferencing_categories[ix];
 8001b14:	4a0b      	ldr	r2, [pc, #44]	; (8001b44 <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb+0x78>)
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	4413      	add	r3, r2
 8001b2c:	3304      	adds	r3, #4
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	3301      	adds	r3, #1
 8001b36:	617b      	str	r3, [r7, #20]
 8001b38:	e7d1      	b.n	8001ade <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb+0x12>
    }
}
 8001b3a:	bf00      	nop
 8001b3c:	3718      	adds	r7, #24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000000 	.word	0x20000000
 8001b48:	08010204 	.word	0x08010204
 8001b4c:	080101e4 	.word	0x080101e4

08001b50 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh>:
    TfLiteTensor** output_scores,
#endif
#if (EI_CLASSIFIER_COMPILED != 1)
    tflite::MicroInterpreter** micro_interpreter,
#endif
    uint8_t** micro_tensor_arena) {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
 8001b5c:	603b      	str	r3, [r7, #0]
#if (EI_CLASSIFIER_COMPILED == 1)
    TfLiteStatus init_status = trained_model_init(ei_aligned_malloc);
 8001b5e:	4842      	ldr	r0, [pc, #264]	; (8001c68 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x118>)
 8001b60:	f009 fe4a 	bl	800b7f8 <_Z18trained_model_initPFPvjjE>
 8001b64:	4603      	mov	r3, r0
 8001b66:	75fb      	strb	r3, [r7, #23]
    if (init_status != kTfLiteOk) {
 8001b68:	7dfb      	ldrb	r3, [r7, #23]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d007      	beq.n	8001b7e <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x2e>
        ei_printf("Failed to allocate TFLite arena (error code %d)\n", init_status);
 8001b6e:	7dfb      	ldrb	r3, [r7, #23]
 8001b70:	4619      	mov	r1, r3
 8001b72:	483e      	ldr	r0, [pc, #248]	; (8001c6c <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x11c>)
 8001b74:	f000 fbd4 	bl	8002320 <_Z9ei_printfPKcz>
        return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
 8001b78:	f06f 0305 	mvn.w	r3, #5
 8001b7c:	e070      	b.n	8001c60 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x110>
        return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
    }
    *micro_tensor_arena = tensor_arena;
#endif

    *ctx_start_ms = ei_read_timer_ms();
 8001b7e:	f003 f9dd 	bl	8004f3c <_Z16ei_read_timer_msv>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	68f9      	ldr	r1, [r7, #12]
 8001b88:	e9c1 2300 	strd	r2, r3, [r1]
    resolver.AddCustom("TFLite_Detection_PostProcess", tflite::ops::micro::Register_TFLite_Detection_PostProcess());
#endif
#endif // EI_CLASSIFIER_COMPILED != 1

#if (EI_CLASSIFIER_COMPILED == 1)
    *input = trained_model_input(0);
 8001b8c:	2000      	movs	r0, #0
 8001b8e:	f00a f849 	bl	800bc24 <_Z19trained_model_inputi>
 8001b92:	4602      	mov	r2, r0
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	601a      	str	r2, [r3, #0]
    *output = trained_model_output(0);
 8001b98:	2000      	movs	r0, #0
 8001b9a:	f00a f855 	bl	800bc48 <_Z20trained_model_outputi>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	601a      	str	r2, [r3, #0]
    *output_labels = interpreter->output(EI_CLASSIFIER_TFLITE_OUTPUT_LABELS_TENSOR);
#endif // EI_CLASSIFIER_OBJECT_DETECTION
#endif

    // Assert that our quantization parameters match the model
    if (tflite_first_run) {
 8001ba4:	4b32      	ldr	r3, [pc, #200]	; (8001c70 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x120>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d058      	beq.n	8001c5e <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x10e>
        assert((*input)->type == EI_CLASSIFIER_TFLITE_INPUT_DATATYPE);
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	2b09      	cmp	r3, #9
 8001bb4:	d006      	beq.n	8001bc4 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x74>
 8001bb6:	4b2f      	ldr	r3, [pc, #188]	; (8001c74 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x124>)
 8001bb8:	4a2f      	ldr	r2, [pc, #188]	; (8001c78 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x128>)
 8001bba:	f44f 7106 	mov.w	r1, #536	; 0x218
 8001bbe:	482f      	ldr	r0, [pc, #188]	; (8001c7c <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x12c>)
 8001bc0:	f00c fed4 	bl	800e96c <__assert_func>
        assert((*output)->type == EI_CLASSIFIER_TFLITE_OUTPUT_DATATYPE);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b09      	cmp	r3, #9
 8001bcc:	d006      	beq.n	8001bdc <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x8c>
 8001bce:	4b2c      	ldr	r3, [pc, #176]	; (8001c80 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x130>)
 8001bd0:	4a29      	ldr	r2, [pc, #164]	; (8001c78 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x128>)
 8001bd2:	f240 2119 	movw	r1, #537	; 0x219
 8001bd6:	4829      	ldr	r0, [pc, #164]	; (8001c7c <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x12c>)
 8001bd8:	f00c fec8 	bl	800e96c <__assert_func>
        assert((*output_scores)->type == EI_CLASSIFIER_TFLITE_OUTPUT_DATATYPE);
        assert((*output_labels)->type == EI_CLASSIFIER_TFLITE_OUTPUT_DATATYPE);
#endif
#if defined(EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED) || defined(EI_CLASSIFIER_TFLITE_OUTPUT_QUANTIZED)
        if (EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED) {
            assert((*input)->params.scale == EI_CLASSIFIER_TFLITE_INPUT_SCALE);
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	edd3 7a03 	vldr	s15, [r3, #12]
 8001be4:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001c84 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x134>
 8001be8:	eef4 7a47 	vcmp.f32	s15, s14
 8001bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf0:	d006      	beq.n	8001c00 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0xb0>
 8001bf2:	4b25      	ldr	r3, [pc, #148]	; (8001c88 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x138>)
 8001bf4:	4a20      	ldr	r2, [pc, #128]	; (8001c78 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x128>)
 8001bf6:	f44f 7108 	mov.w	r1, #544	; 0x220
 8001bfa:	4820      	ldr	r0, [pc, #128]	; (8001c7c <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x12c>)
 8001bfc:	f00c feb6 	bl	800e96c <__assert_func>
            assert((*input)->params.zero_point == EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8001c0a:	d006      	beq.n	8001c1a <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0xca>
 8001c0c:	4b1f      	ldr	r3, [pc, #124]	; (8001c8c <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x13c>)
 8001c0e:	4a1a      	ldr	r2, [pc, #104]	; (8001c78 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x128>)
 8001c10:	f240 2121 	movw	r1, #545	; 0x221
 8001c14:	4819      	ldr	r0, [pc, #100]	; (8001c7c <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x12c>)
 8001c16:	f00c fea9 	bl	800e96c <__assert_func>
        }
        if (EI_CLASSIFIER_TFLITE_OUTPUT_QUANTIZED) {
            assert((*output)->params.scale == EI_CLASSIFIER_TFLITE_OUTPUT_SCALE);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c22:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001c90 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x140>
 8001c26:	eef4 7a47 	vcmp.f32	s15, s14
 8001c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c2e:	d006      	beq.n	8001c3e <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0xee>
 8001c30:	4b18      	ldr	r3, [pc, #96]	; (8001c94 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x144>)
 8001c32:	4a11      	ldr	r2, [pc, #68]	; (8001c78 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x128>)
 8001c34:	f44f 7109 	mov.w	r1, #548	; 0x224
 8001c38:	4810      	ldr	r0, [pc, #64]	; (8001c7c <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x12c>)
 8001c3a:	f00c fe97 	bl	800e96c <__assert_func>
            assert((*output)->params.zero_point == EI_CLASSIFIER_TFLITE_OUTPUT_ZEROPOINT);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8001c48:	d006      	beq.n	8001c58 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x108>
 8001c4a:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x148>)
 8001c4c:	4a0a      	ldr	r2, [pc, #40]	; (8001c78 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x128>)
 8001c4e:	f240 2125 	movw	r1, #549	; 0x225
 8001c52:	480a      	ldr	r0, [pc, #40]	; (8001c7c <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x12c>)
 8001c54:	f00c fe8a 	bl	800e96c <__assert_func>
        }
#endif
        tflite_first_run = false;
 8001c58:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x120>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	701a      	strb	r2, [r3, #0]
    }
    return EI_IMPULSE_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	08001945 	.word	0x08001945
 8001c6c:	0801020c 	.word	0x0801020c
 8001c70:	20000034 	.word	0x20000034
 8001c74:	08010240 	.word	0x08010240
 8001c78:	08010278 	.word	0x08010278
 8001c7c:	080102e4 	.word	0x080102e4
 8001c80:	08010374 	.word	0x08010374
 8001c84:	3b808081 	.word	0x3b808081
 8001c88:	080103ac 	.word	0x080103ac
 8001c8c:	080103e8 	.word	0x080103e8
 8001c90:	3b800000 	.word	0x3b800000
 8001c94:	0801042c 	.word	0x0801042c
 8001c98:	0801046c 	.word	0x0801046c

08001c9c <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb>:
#if (EI_CLASSIFIER_COMPILED != 1)
    tflite::MicroInterpreter* interpreter,
#endif
    uint8_t* tensor_arena,
    ei_impulse_result_t *result,
    bool debug) {
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b088      	sub	sp, #32
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
 8001ca8:	603b      	str	r3, [r7, #0]
#if (EI_CLASSIFIER_COMPILED == 1)
    trained_model_invoke();
 8001caa:	f009 ffdf 	bl	800bc6c <_Z20trained_model_invokev>
        return EI_IMPULSE_TFLITE_ERROR;
    }
    delete interpreter;
#endif

    uint64_t ctx_end_ms = ei_read_timer_ms();
 8001cae:	f003 f945 	bl	8004f3c <_Z16ei_read_timer_msv>
 8001cb2:	e9c7 0106 	strd	r0, r1, [r7, #24]

    result->timing.classification = ctx_end_ms - ctx_start_ms;
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cc0:	635a      	str	r2, [r3, #52]	; 0x34

    // Read the predicted y value from the model's output tensor
    if (debug) {
 8001cc2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d005      	beq.n	8001cd6 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb+0x3a>
        ei_printf("Predictions (time: %d ms.):\n", result->timing.classification);
 8001cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4820      	ldr	r0, [pc, #128]	; (8001d54 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb+0xb8>)
 8001cd2:	f000 fb25 	bl	8002320 <_Z9ei_printfPKcz>
    }
#if EI_CLASSIFIER_OBJECT_DETECTION == 1
    fill_result_struct_f32(result, tflite::post_process_boxes, tflite::post_process_scores, tflite::post_process_classes, debug);
    // fill_result_struct_f32(result, output->data.f, scores_tensor->data.f, labels_tensor->data.f, debug);
#else
    bool int8_output = output->type == TfLiteType::kTfLiteInt8;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	2b09      	cmp	r3, #9
 8001cdc:	bf0c      	ite	eq
 8001cde:	2301      	moveq	r3, #1
 8001ce0:	2300      	movne	r3, #0
 8001ce2:	75fb      	strb	r3, [r7, #23]
    if (int8_output) {
 8001ce4:	7dfb      	ldrb	r3, [r7, #23]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d015      	beq.n	8001d16 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb+0x7a>
        fill_result_struct_i8(result, output->data.int8, output->params.zero_point, output->params.scale, debug);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6859      	ldr	r1, [r3, #4]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	ee07 3a90 	vmov	s15, r3
 8001cf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	ed93 7a03 	vldr	s14, [r3, #12]
 8001d00:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001d04:	461a      	mov	r2, r3
 8001d06:	eef0 0a47 	vmov.f32	s1, s14
 8001d0a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d10:	f7ff fe8a 	bl	8001a28 <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb>
 8001d14:	e007      	b.n	8001d26 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb+0x8a>
    }
    else {
        fill_result_struct_f32(result, output->data.f, debug);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001d1e:	4619      	mov	r1, r3
 8001d20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d22:	f7ff fed3 	bl	8001acc <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb>
    }
#endif

#if (EI_CLASSIFIER_COMPILED == 1)
    trained_model_reset(ei_aligned_free);
 8001d26:	480c      	ldr	r0, [pc, #48]	; (8001d58 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb+0xbc>)
 8001d28:	f009 ffd6 	bl	800bcd8 <_Z19trained_model_resetPFvPvE>
#else
    ei_aligned_free(tensor_arena);
#endif

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8001d2c:	f003 f8fe 	bl	8004f2c <_Z29ei_run_impulse_check_canceledv>
 8001d30:	4603      	mov	r3, r0
 8001d32:	f113 0f02 	cmn.w	r3, #2
 8001d36:	bf0c      	ite	eq
 8001d38:	2301      	moveq	r3, #1
 8001d3a:	2300      	movne	r3, #0
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d002      	beq.n	8001d48 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb+0xac>
        return EI_IMPULSE_CANCELED;
 8001d42:	f06f 0301 	mvn.w	r3, #1
 8001d46:	e000      	b.n	8001d4a <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb+0xae>
    }

    return EI_IMPULSE_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3720      	adds	r7, #32
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	080104b4 	.word	0x080104b4
 8001d58:	080019c5 	.word	0x080019c5

08001d5c <run_inference>:
 */
extern "C" EI_IMPULSE_ERROR run_inference(
    ei::matrix_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8001d5c:	b590      	push	{r4, r7, lr}
 8001d5e:	b08f      	sub	sp, #60	; 0x3c
 8001d60:	af02      	add	r7, sp, #8
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	4613      	mov	r3, r2
 8001d68:	71fb      	strb	r3, [r7, #7]
        TfLiteTensor* output_labels;
#endif
        uint8_t* tensor_arena;

#if (EI_CLASSIFIER_COMPILED == 1)
        EI_IMPULSE_ERROR init_res = inference_tflite_setup(&ctx_start_ms, &input, &output,
 8001d6a:	f107 0314 	add.w	r3, r7, #20
 8001d6e:	f107 0218 	add.w	r2, r7, #24
 8001d72:	f107 011c 	add.w	r1, r7, #28
 8001d76:	f107 0020 	add.w	r0, r7, #32
 8001d7a:	f7ff fee9 	bl	8001b50 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            &output_labels,
            &output_scores,
    #endif
            &interpreter, &tensor_arena);
#endif
        if (init_res != EI_IMPULSE_OK) {
 8001d84:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d002      	beq.n	8001d92 <run_inference+0x36>
            return init_res;
 8001d8c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8001d90:	e070      	b.n	8001e74 <run_inference+0x118>
            else {
                input->data.f[ix] = fmatrix->buffer[ix];
            }
        }
#else
        bool int8_input = input->type == TfLiteType::kTfLiteInt8;
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b09      	cmp	r3, #9
 8001d98:	bf0c      	ite	eq
 8001d9a:	2301      	moveq	r3, #1
 8001d9c:	2300      	movne	r3, #0
 8001d9e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8001da2:	2300      	movs	r3, #0
 8001da4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	6892      	ldr	r2, [r2, #8]
 8001dae:	fb02 f303 	mul.w	r3, r2, r3
 8001db2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d239      	bcs.n	8001e2c <run_inference+0xd0>
            // Quantize the input if it is int8
            if (int8_input) {
 8001db8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d025      	beq.n	8001e0c <run_inference+0xb0>
                input->data.int8[ix] = static_cast<int8_t>(round(fmatrix->buffer[ix] / input->params.scale) + input->params.zero_point);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	4413      	add	r3, r2
 8001dca:	ed93 7a00 	vldr	s14, [r3]
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	edd3 7a03 	vldr	s15, [r3, #12]
 8001dd4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001dd8:	eeb0 0a66 	vmov.f32	s0, s13
 8001ddc:	f7ff fa31 	bl	8001242 <_ZSt5roundf>
 8001de0:	eeb0 7a40 	vmov.f32	s14, s0
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	ee07 3a90 	vmov	s15, r3
 8001dec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001df0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dfa:	4413      	add	r3, r2
 8001dfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e00:	edc7 7a00 	vstr	s15, [r7]
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	b252      	sxtb	r2, r2
 8001e08:	701a      	strb	r2, [r3, #0]
 8001e0a:	e00b      	b.n	8001e24 <run_inference+0xc8>
                // printf("float %ld : %d\r\n", ix, input->data.int8[ix]);
            } else {
                input->data.f[ix] = fmatrix->buffer[ix];
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	441a      	add	r2, r3
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	6859      	ldr	r1, [r3, #4]
 8001e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	440b      	add	r3, r1
 8001e20:	6812      	ldr	r2, [r2, #0]
 8001e22:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8001e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e26:	3301      	adds	r3, #1
 8001e28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e2a:	e7bc      	b.n	8001da6 <run_inference+0x4a>
            }
        }
#endif

#if (EI_CLASSIFIER_COMPILED == 1)
        EI_IMPULSE_ERROR run_res = inference_tflite_run(ctx_start_ms, output,
 8001e2c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	697c      	ldr	r4, [r7, #20]
 8001e34:	79fb      	ldrb	r3, [r7, #7]
 8001e36:	9301      	str	r3, [sp, #4]
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	4623      	mov	r3, r4
 8001e3e:	f7ff ff2d 	bl	8001c9c <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb>
 8001e42:	4603      	mov	r3, r0
 8001e44:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
            output_scores,
    #endif
            interpreter, tensor_arena, result, debug);
#endif

        if (run_res != EI_IMPULSE_OK) {
 8001e48:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d002      	beq.n	8001e56 <run_inference+0xfa>
            return run_res;
 8001e50:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
 8001e54:	e00e      	b.n	8001e74 <run_inference+0x118>
        result->anomaly = anomaly;
    }

#endif

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8001e56:	f003 f869 	bl	8004f2c <_Z29ei_run_impulse_check_canceledv>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	f113 0f02 	cmn.w	r3, #2
 8001e60:	bf0c      	ite	eq
 8001e62:	2301      	moveq	r3, #1
 8001e64:	2300      	movne	r3, #0
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d002      	beq.n	8001e72 <run_inference+0x116>
        return EI_IMPULSE_CANCELED;
 8001e6c:	f06f 0301 	mvn.w	r3, #1
 8001e70:	e000      	b.n	8001e74 <run_inference+0x118>
    }

    return EI_IMPULSE_OK;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3734      	adds	r7, #52	; 0x34
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd90      	pop	{r4, r7, pc}

08001e7c <run_classifier>:
 */
extern "C" EI_IMPULSE_ERROR run_classifier(
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8001e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e7e:	b0a1      	sub	sp, #132	; 0x84
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	4613      	mov	r3, r2
 8001e88:	71fb      	strb	r3, [r7, #7]
 8001e8a:	2600      	movs	r6, #0
#if EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1 && EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TFLITE
    // Shortcut for quantized image models
    if (can_run_classifier_image_quantized() == EI_IMPULSE_OK) {
 8001e8c:	f000 f8ee 	bl	800206c <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEv>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	bf0c      	ite	eq
 8001e96:	2301      	moveq	r3, #1
 8001e98:	2300      	movne	r3, #0
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d008      	beq.n	8001eb2 <run_classifier+0x36>
        return run_classifier_image_quantized(signal, result, debug);
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	68b9      	ldr	r1, [r7, #8]
 8001ea6:	68f8      	ldr	r0, [r7, #12]
 8001ea8:	f000 f8f6 	bl	8002098 <run_classifier_image_quantized>
 8001eac:	4603      	mov	r3, r0
 8001eae:	461e      	mov	r6, r3
 8001eb0:	e0c7      	b.n	8002042 <run_classifier+0x1c6>
    //     }
    // }
    // printf("\n");
    // }

    memset(result, 0, sizeof(ei_impulse_result_t));
 8001eb2:	223c      	movs	r2, #60	; 0x3c
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	68b8      	ldr	r0, [r7, #8]
 8001eb8:	f00c fdf6 	bl	800eaa8 <memset>

    ei::matrix_t features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE);
 8001ebc:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	f44f 52d8 	mov.w	r2, #6912	; 0x1b00
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	f7ff f927 	bl	800111a <_ZN2ei9ei_matrixC1EmmPf>

    uint64_t dsp_start_ms = ei_read_timer_ms();
 8001ecc:	f003 f836 	bl	8004f3c <_Z16ei_read_timer_msv>
 8001ed0:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68

    size_t out_features_index = 0;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	67fb      	str	r3, [r7, #124]	; 0x7c

    for (size_t ix = 0; ix < ei_dsp_blocks_size; ix++) {
 8001ed8:	2300      	movs	r3, #0
 8001eda:	67bb      	str	r3, [r7, #120]	; 0x78
 8001edc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d16d      	bne.n	8001fbe <run_classifier+0x142>
        ei_model_dsp_t block = ei_dsp_blocks[ix];
 8001ee2:	495a      	ldr	r1, [pc, #360]	; (800204c <run_classifier+0x1d0>)
 8001ee4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	4413      	add	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	440b      	add	r3, r1
 8001ef0:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001ef4:	461d      	mov	r5, r3
 8001ef6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ef8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001efa:	682b      	ldr	r3, [r5, #0]
 8001efc:	6023      	str	r3, [r4, #0]

        if (out_features_index + block.n_output_features > EI_CLASSIFIER_NN_INPUT_FRAME_SIZE) {
 8001efe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001f00:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f02:	4413      	add	r3, r2
 8001f04:	f5b3 5fd8 	cmp.w	r3, #6912	; 0x1b00
 8001f08:	d905      	bls.n	8001f16 <run_classifier+0x9a>
            ei_printf("ERR: Would write outside feature buffer\n");
 8001f0a:	4851      	ldr	r0, [pc, #324]	; (8002050 <run_classifier+0x1d4>)
 8001f0c:	f000 fa08 	bl	8002320 <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 8001f10:	f06f 0604 	mvn.w	r6, #4
 8001f14:	e08f      	b.n	8002036 <run_classifier+0x1ba>
        }

        ei::matrix_t fm(1, block.n_output_features, features_matrix.buffer + out_features_index);
 8001f16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001f18:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4413      	add	r3, r2
 8001f20:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001f24:	460a      	mov	r2, r1
 8001f26:	2101      	movs	r1, #1
 8001f28:	f7ff f8f7 	bl	800111a <_ZN2ei9ei_matrixC1EmmPf>
            ei_printf("ERR: EIDSP_SIGNAL_C_FN_POINTER can only be used when all axes are selected for DSP blocks\n");
            return EI_IMPULSE_DSP_ERROR;
        }
        int ret = block.extract_fn(signal, &fm, block.config, EI_CLASSIFIER_FREQUENCY);
#else
        SignalWithAxes swa(signal, block.axes, block.axes_size);
 8001f2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f30:	f107 0010 	add.w	r0, r7, #16
 8001f34:	68f9      	ldr	r1, [r7, #12]
 8001f36:	f7ff fc6f 	bl	8001818 <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhj>
        int ret = block.extract_fn(swa.get_signal(), &fm, block.config, EI_CLASSIFIER_FREQUENCY);
 8001f3a:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8001f3c:	f107 0310 	add.w	r3, r7, #16
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff fc96 	bl	8001872 <_ZN14SignalWithAxes10get_signalEv>
 8001f46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001f48:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f4c:	ed9f 0a41 	vldr	s0, [pc, #260]	; 8002054 <run_classifier+0x1d8>
 8001f50:	4619      	mov	r1, r3
 8001f52:	47a0      	blx	r4
 8001f54:	6678      	str	r0, [r7, #100]	; 0x64
#endif

        if (ret != EIDSP_OK) {
 8001f56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d007      	beq.n	8001f6c <run_classifier+0xf0>
            ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 8001f5c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001f5e:	483e      	ldr	r0, [pc, #248]	; (8002058 <run_classifier+0x1dc>)
 8001f60:	f000 f9de 	bl	8002320 <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 8001f64:	f06f 0604 	mvn.w	r6, #4
 8001f68:	2400      	movs	r4, #0
 8001f6a:	e013      	b.n	8001f94 <run_classifier+0x118>
        }

        if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8001f6c:	f002 ffde 	bl	8004f2c <_Z29ei_run_impulse_check_canceledv>
 8001f70:	4603      	mov	r3, r0
 8001f72:	f113 0f02 	cmn.w	r3, #2
 8001f76:	bf0c      	ite	eq
 8001f78:	2301      	moveq	r3, #1
 8001f7a:	2300      	movne	r3, #0
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <run_classifier+0x10e>
            return EI_IMPULSE_CANCELED;
 8001f82:	f06f 0601 	mvn.w	r6, #1
 8001f86:	2400      	movs	r4, #0
 8001f88:	e004      	b.n	8001f94 <run_classifier+0x118>
        }

        out_features_index += block.n_output_features;
 8001f8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f8c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001f8e:	4413      	add	r3, r2
 8001f90:	67fb      	str	r3, [r7, #124]	; 0x7c
        SignalWithAxes swa(signal, block.axes, block.axes_size);
 8001f92:	2401      	movs	r4, #1
 8001f94:	f107 0310 	add.w	r3, r7, #16
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff fd37 	bl	8001a0c <_ZN14SignalWithAxesD1Ev>
 8001f9e:	2c01      	cmp	r4, #1
 8001fa0:	d001      	beq.n	8001fa6 <run_classifier+0x12a>
 8001fa2:	2400      	movs	r4, #0
 8001fa4:	e000      	b.n	8001fa8 <run_classifier+0x12c>
        ei::matrix_t fm(1, block.n_output_features, features_matrix.buffer + out_features_index);
 8001fa6:	2401      	movs	r4, #1
 8001fa8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff f8df 	bl	8001170 <_ZN2ei9ei_matrixD1Ev>
 8001fb2:	2c01      	cmp	r4, #1
 8001fb4:	d13f      	bne.n	8002036 <run_classifier+0x1ba>
    for (size_t ix = 0; ix < ei_dsp_blocks_size; ix++) {
 8001fb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fb8:	3301      	adds	r3, #1
 8001fba:	67bb      	str	r3, [r7, #120]	; 0x78
 8001fbc:	e78e      	b.n	8001edc <run_classifier+0x60>
    }

    result->timing.dsp = ei_read_timer_ms() - dsp_start_ms;
 8001fbe:	f002 ffbd 	bl	8004f3c <_Z16ei_read_timer_msv>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	461a      	mov	r2, r3
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	631a      	str	r2, [r3, #48]	; 0x30

    if (debug) {
 8001fd0:	79fb      	ldrb	r3, [r7, #7]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d01f      	beq.n	8002016 <run_classifier+0x19a>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	4619      	mov	r1, r3
 8001fdc:	481f      	ldr	r0, [pc, #124]	; (800205c <run_classifier+0x1e0>)
 8001fde:	f000 f99f 	bl	8002320 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	677b      	str	r3, [r7, #116]	; 0x74
 8001fe6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fe8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d210      	bcs.n	8002010 <run_classifier+0x194>
            ei_printf_float(features_matrix.buffer[ix]);
 8001fee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001ff0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	4413      	add	r3, r2
 8001ff6:	edd3 7a00 	vldr	s15, [r3]
 8001ffa:	eeb0 0a67 	vmov.f32	s0, s15
 8001ffe:	f002 ffab 	bl	8004f58 <_Z15ei_printf_floatf>
            ei_printf(" ");
 8002002:	4817      	ldr	r0, [pc, #92]	; (8002060 <run_classifier+0x1e4>)
 8002004:	f000 f98c 	bl	8002320 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 8002008:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800200a:	3301      	adds	r3, #1
 800200c:	677b      	str	r3, [r7, #116]	; 0x74
 800200e:	e7ea      	b.n	8001fe6 <run_classifier+0x16a>
        }
        ei_printf("\n");
 8002010:	4814      	ldr	r0, [pc, #80]	; (8002064 <run_classifier+0x1e8>)
 8002012:	f000 f985 	bl	8002320 <_Z9ei_printfPKcz>
    }

#if EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_NONE
    if (debug) {
 8002016:	79fb      	ldrb	r3, [r7, #7]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d002      	beq.n	8002022 <run_classifier+0x1a6>
        ei_printf("Running neural network...\n");
 800201c:	4812      	ldr	r0, [pc, #72]	; (8002068 <run_classifier+0x1ec>)
 800201e:	f000 f97f 	bl	8002320 <_Z9ei_printfPKcz>
    }
#endif

    return run_inference(&features_matrix, result, debug);
 8002022:	79fa      	ldrb	r2, [r7, #7]
 8002024:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002028:	68b9      	ldr	r1, [r7, #8]
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff fe96 	bl	8001d5c <run_inference>
 8002030:	4603      	mov	r3, r0
 8002032:	461e      	mov	r6, r3
 8002034:	e000      	b.n	8002038 <run_classifier+0x1bc>
            return EI_IMPULSE_DSP_ERROR;
 8002036:	bf00      	nop
    ei::matrix_t features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE);
 8002038:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff f897 	bl	8001170 <_ZN2ei9ei_matrixD1Ev>
 8002042:	4633      	mov	r3, r6
}
 8002044:	4618      	mov	r0, r3
 8002046:	3784      	adds	r7, #132	; 0x84
 8002048:	46bd      	mov	sp, r7
 800204a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800204c:	20000020 	.word	0x20000020
 8002050:	08010128 	.word	0x08010128
 8002054:	00000000 	.word	0x00000000
 8002058:	080101a0 	.word	0x080101a0
 800205c:	080104d4 	.word	0x080104d4
 8002060:	080101e0 	.word	0x080101e0
 8002064:	080101e4 	.word	0x080101e4
 8002068:	080101e8 	.word	0x080101e8

0800206c <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEv>:
}

/**
 * Check if the current impulse could be used by 'run_classifier_image_quantized'
 */
__attribute__((unused)) static EI_IMPULSE_ERROR can_run_classifier_image_quantized() {
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
#if EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED != 1
    return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
#endif

    // And if we have one DSP block which operates on images...
    if (ei_dsp_blocks_size != 1 || ei_dsp_blocks[0].extract_fn != extract_image_features) {
 8002070:	4b06      	ldr	r3, [pc, #24]	; (800208c <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEv+0x20>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	4a06      	ldr	r2, [pc, #24]	; (8002090 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEv+0x24>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d002      	beq.n	8002080 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEv+0x14>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 800207a:	f06f 0308 	mvn.w	r3, #8
 800207e:	e000      	b.n	8002082 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEv+0x16>
    }

    return EI_IMPULSE_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	20000020 	.word	0x20000020
 8002090:	080012b1 	.word	0x080012b1
 8002094:	00000000 	.word	0x00000000

08002098 <run_classifier_image_quantized>:
 */
extern "C" EI_IMPULSE_ERROR run_classifier_image_quantized(
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8002098:	b590      	push	{r4, r7, lr}
 800209a:	b097      	sub	sp, #92	; 0x5c
 800209c:	af02      	add	r7, sp, #8
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	4613      	mov	r3, r2
 80020a4:	71fb      	strb	r3, [r7, #7]
    EI_IMPULSE_ERROR verify_res = can_run_classifier_image_quantized();
 80020a6:	f7ff ffe1 	bl	800206c <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEv>
 80020aa:	4603      	mov	r3, r0
 80020ac:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    if (verify_res != EI_IMPULSE_OK) {
 80020b0:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d002      	beq.n	80020be <run_classifier_image_quantized+0x26>
        return verify_res;
 80020b8:	f997 404b 	ldrsb.w	r4, [r7, #75]	; 0x4b
 80020bc:	e0ab      	b.n	8002216 <run_classifier_image_quantized+0x17e>
    }

    memset(result, 0, sizeof(ei_impulse_result_t));
 80020be:	223c      	movs	r2, #60	; 0x3c
 80020c0:	2100      	movs	r1, #0
 80020c2:	68b8      	ldr	r0, [r7, #8]
 80020c4:	f00c fcf0 	bl	800eaa8 <memset>
    TfLiteTensor* output_labels;
#endif
    uint8_t* tensor_arena;

#if (EI_CLASSIFIER_COMPILED == 1)
    EI_IMPULSE_ERROR init_res = inference_tflite_setup(&ctx_start_ms, &input, &output,
 80020c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020cc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020d0:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80020d4:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80020d8:	f7ff fd3a 	bl	8001b50 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh>
 80020dc:	4603      	mov	r3, r0
 80020de:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
        &output_scores,
    #endif
        &interpreter,
        &tensor_arena);
#endif
    if (init_res != EI_IMPULSE_OK) {
 80020e2:	f997 304a 	ldrsb.w	r3, [r7, #74]	; 0x4a
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d002      	beq.n	80020f0 <run_classifier_image_quantized+0x58>
        return init_res;
 80020ea:	f997 404a 	ldrsb.w	r4, [r7, #74]	; 0x4a
 80020ee:	e092      	b.n	8002216 <run_classifier_image_quantized+0x17e>
    }

    if (input->type != TfLiteType::kTfLiteInt8) {
 80020f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b09      	cmp	r3, #9
 80020f6:	d002      	beq.n	80020fe <run_classifier_image_quantized+0x66>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 80020f8:	f06f 0408 	mvn.w	r4, #8
 80020fc:	e08b      	b.n	8002216 <run_classifier_image_quantized+0x17e>
    }

    uint64_t dsp_start_ms = ei_read_timer_ms();
 80020fe:	f002 ff1d 	bl	8004f3c <_Z16ei_read_timer_msv>
 8002102:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40

    // features matrix maps around the input tensor to not allocate any memory
    ei::matrix_i8_t features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE, input->data.int8);
 8002106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f107 0014 	add.w	r0, r7, #20
 800210e:	f44f 52d8 	mov.w	r2, #6912	; 0x1b00
 8002112:	2101      	movs	r1, #1
 8002114:	f7ff f842 	bl	800119c <_ZN2ei12ei_matrix_i8C1EmmPa>

    // run DSP process and quantize automatically
    int ret = extract_image_features_quantized(signal, &features_matrix, ei_dsp_blocks[0].config, EI_CLASSIFIER_FREQUENCY);
 8002118:	4b43      	ldr	r3, [pc, #268]	; (8002228 <run_classifier_image_quantized+0x190>)
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	f107 0314 	add.w	r3, r7, #20
 8002120:	ed9f 0a42 	vldr	s0, [pc, #264]	; 800222c <run_classifier_image_quantized+0x194>
 8002124:	4619      	mov	r1, r3
 8002126:	68f8      	ldr	r0, [r7, #12]
 8002128:	f7ff f9d6 	bl	80014d8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf>
 800212c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (ret != EIDSP_OK) {
 800212e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002130:	2b00      	cmp	r3, #0
 8002132:	d006      	beq.n	8002142 <run_classifier_image_quantized+0xaa>
        ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 8002134:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002136:	483e      	ldr	r0, [pc, #248]	; (8002230 <run_classifier_image_quantized+0x198>)
 8002138:	f000 f8f2 	bl	8002320 <_Z9ei_printfPKcz>
        return EI_IMPULSE_DSP_ERROR;
 800213c:	f06f 0404 	mvn.w	r4, #4
 8002140:	e064      	b.n	800220c <run_classifier_image_quantized+0x174>
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8002142:	f002 fef3 	bl	8004f2c <_Z29ei_run_impulse_check_canceledv>
 8002146:	4603      	mov	r3, r0
 8002148:	f113 0f02 	cmn.w	r3, #2
 800214c:	bf0c      	ite	eq
 800214e:	2301      	moveq	r3, #1
 8002150:	2300      	movne	r3, #0
 8002152:	b2db      	uxtb	r3, r3
 8002154:	2b00      	cmp	r3, #0
 8002156:	d002      	beq.n	800215e <run_classifier_image_quantized+0xc6>
        return EI_IMPULSE_CANCELED;
 8002158:	f06f 0401 	mvn.w	r4, #1
 800215c:	e056      	b.n	800220c <run_classifier_image_quantized+0x174>
    }

    result->timing.dsp = ei_read_timer_ms() - dsp_start_ms;
 800215e:	f002 feed 	bl	8004f3c <_Z16ei_read_timer_msv>
 8002162:	4602      	mov	r2, r0
 8002164:	460b      	mov	r3, r1
 8002166:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	461a      	mov	r2, r3
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	631a      	str	r2, [r3, #48]	; 0x30

    if (debug) {
 8002170:	79fb      	ldrb	r3, [r7, #7]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d02e      	beq.n	80021d4 <run_classifier_image_quantized+0x13c>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	4619      	mov	r1, r3
 800217c:	482d      	ldr	r0, [pc, #180]	; (8002234 <run_classifier_image_quantized+0x19c>)
 800217e:	f000 f8cf 	bl	8002320 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 8002182:	2300      	movs	r3, #0
 8002184:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800218a:	429a      	cmp	r2, r3
 800218c:	d21f      	bcs.n	80021ce <run_classifier_image_quantized+0x136>
            ei_printf_float((features_matrix.buffer[ix] - EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT) * EI_CLASSIFIER_TFLITE_INPUT_SCALE);
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002192:	4413      	add	r3, r2
 8002194:	f993 3000 	ldrsb.w	r3, [r3]
 8002198:	3380      	adds	r3, #128	; 0x80
 800219a:	4618      	mov	r0, r3
 800219c:	f7fe f9f2 	bl	8000584 <__aeabi_i2d>
 80021a0:	a31f      	add	r3, pc, #124	; (adr r3, 8002220 <run_classifier_image_quantized+0x188>)
 80021a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a6:	f7fe fa57 	bl	8000658 <__aeabi_dmul>
 80021aa:	4602      	mov	r2, r0
 80021ac:	460b      	mov	r3, r1
 80021ae:	4610      	mov	r0, r2
 80021b0:	4619      	mov	r1, r3
 80021b2:	f7fe fd49 	bl	8000c48 <__aeabi_d2f>
 80021b6:	4603      	mov	r3, r0
 80021b8:	ee00 3a10 	vmov	s0, r3
 80021bc:	f002 fecc 	bl	8004f58 <_Z15ei_printf_floatf>
            ei_printf(" ");
 80021c0:	481d      	ldr	r0, [pc, #116]	; (8002238 <run_classifier_image_quantized+0x1a0>)
 80021c2:	f000 f8ad 	bl	8002320 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 80021c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021c8:	3301      	adds	r3, #1
 80021ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021cc:	e7db      	b.n	8002186 <run_classifier_image_quantized+0xee>
        }
        ei_printf("\n");
 80021ce:	481b      	ldr	r0, [pc, #108]	; (800223c <run_classifier_image_quantized+0x1a4>)
 80021d0:	f000 f8a6 	bl	8002320 <_Z9ei_printfPKcz>
    }

    ctx_start_ms = ei_read_timer_ms();
 80021d4:	f002 feb2 	bl	8004f3c <_Z16ei_read_timer_msv>
 80021d8:	4602      	mov	r2, r0
 80021da:	460b      	mov	r3, r1
 80021dc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

#if (EI_CLASSIFIER_COMPILED == 1)
    EI_IMPULSE_ERROR run_res = inference_tflite_run(ctx_start_ms, output,
 80021e0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80021e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021e6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80021e8:	79fb      	ldrb	r3, [r7, #7]
 80021ea:	9301      	str	r3, [sp, #4]
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	9300      	str	r3, [sp, #0]
 80021f0:	4623      	mov	r3, r4
 80021f2:	f7ff fd53 	bl	8001c9c <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb>
 80021f6:	4603      	mov	r3, r0
 80021f8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        output_scores,
    #endif
        interpreter, tensor_arena, result, debug);
#endif

    if (run_res != EI_IMPULSE_OK) {
 80021fc:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8002200:	2b00      	cmp	r3, #0
 8002202:	d002      	beq.n	800220a <run_classifier_image_quantized+0x172>
        return run_res;
 8002204:	f997 403b 	ldrsb.w	r4, [r7, #59]	; 0x3b
 8002208:	e000      	b.n	800220c <run_classifier_image_quantized+0x174>
    }

    return EI_IMPULSE_OK;
 800220a:	2400      	movs	r4, #0
    ei::matrix_i8_t features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE, input->data.int8);
 800220c:	f107 0314 	add.w	r3, r7, #20
 8002210:	4618      	mov	r0, r3
 8002212:	f7fe ffed 	bl	80011f0 <_ZN2ei12ei_matrix_i8D1Ev>
 8002216:	4623      	mov	r3, r4
#endif // EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_TFLITE
}
 8002218:	4618      	mov	r0, r3
 800221a:	3754      	adds	r7, #84	; 0x54
 800221c:	46bd      	mov	sp, r7
 800221e:	bd90      	pop	{r4, r7, pc}
 8002220:	20000000 	.word	0x20000000
 8002224:	3f701010 	.word	0x3f701010
 8002228:	20000020 	.word	0x20000020
 800222c:	00000000 	.word	0x00000000
 8002230:	080101a0 	.word	0x080101a0
 8002234:	080104d4 	.word	0x080104d4
 8002238:	080101e0 	.word	0x080101e0
 800223c:	080101e4 	.word	0x080101e4

08002240 <_Z17get_feature_data0jjPf>:
		0xf0b07, 0x100f06, 0x140908, 0x462611, 0x785434, 0x523630, 0x402b27, 0x31100b, 0x351b11, 0x301c14, 0x341e16, 0x3b211d, 0x432922, 0x432921, 0x51342e, 0x502e27, 0x4b2922, 0x3a1f1b, 0x3c2520, 0x4b2f28, 0x39211c, 0x3a231d, 0x3c2922, 0x3a2720, 0x311d1a, 0x281c16, 0x251916, 0x381917, 0x582120, 0x782021, 0x4d1d1d, 0x2f221f, 0x352321, 0x36241e, 0x3e2824, 0x452e27, 0x4d372e, 0x4b332c, 0x462f2a, 0x311e1b, 0x2c1a18, 0x2e1c1a, 0x352120, 0x34201f, 0x2c1a14, 0x3a2520, 0x472f2b, 0x48302c, 0xf0b07, 0xf0d04, 0xc0903, 0x36220f, 0x6a4d2e, 0x4b322c, 0x9a7a66, 0x836758, 0x3e201a, 0x331912, 0x331912, 0x311b16, 0x452922, 0x512c28, 0x562b2b, 0x5d312d, 0x5f322e, 0x5a272a, 0x5b2b29, 0x643a34, 0x442925, 0x37241d, 0x39251e, 0x36241d, 0x351d1a, 0x5c1c1e, 0x441c18, 0x2f2017, 0x271e1a, 0x301d19, 0x331a19, 0x261916, 0x291c19, 0x34231c, 0x422c27, 0x513933, 0x5d463e, 0x5a423a, 0x48322c, 0x362320, 0x2c1a18, 0x2e1d1b, 0x321e1e, 0x301c1b, 0x2f1d17, 0x36201b, 0x442c28, 0x48302c, 0xf0c07, 0x120e09, 0xc0a05, 0x32260f, 0x67482e, 0x30221d, 0x3a2719, 0x604234, 0x42251e, 0x381d15, 0x382218, 0x342016, 0x472a22, 0x4f2a25, 0x4f221f, 0x532422, 0x572926, 0x532526, 0x5c2f32, 0x51302d, 0x39231b, 0x3a241c, 0x3b281f, 0x321e1a, 0x2e201a, 0x4b231e, 0x642322, 0x6e2522, 0x642a28, 0x422721, 0x2c201a, 0x2d1d17, 0x30201a, 0x3b2722, 0x3a2520, 0x472e29, 0x4d362e, 0x4b352e, 0x4a322d, 0x422e27, 0x3f2d25, 0x36201d, 0x2f1c16, 0x301d1b, 0x32221b, 0x37241e, 0x3f2824, 0x412923, 0xf0c07, 0xf0c07, 0xe0707, 0x392112, 0x543a21, 0x33231d, 0x18110f, 0x190e0c, 0x42241e, 0x3f231a, 0x362015, 0x311b15, 0x361e19, 0x452820, 0x4a241e, 0x4e231f, 0x502320, 0x532726, 0x4f2e2c, 0x3c2720, 0x36241a, 0x3b291f, 0x4e392a, 0x453020, 0x3e1c1c, 0x251813, 0x201714, 0x321b18, 0x602823, 0x632e28, 0x34241d, 0x35241d, 0x38261f, 0x45302b, 0x422d28, 0x48312c, 0x3c2822, 0x34221c, 0x382421, 0x37241f, 0x44312a, 0x533d35, 0x38251e, 0x2e1b19, 0x3a2622, 0x452d29, 0x513934, 0x4a342d, 0xf0c07, 0x110d08, 0xc0807, 0x2f230e, 0x50351a, 0x2a1e17, 0x331719, 0x381714, 0x3e251e, 0x40231b, 0x3f241c, 0x3f241f, 0x2f1b16, 0x2e1b12, 0x3e221b, 0x46241d, 0x48271f, 0x492923, 0x2e1a13, 0x21170d, 0x2c1c16, 0x36241c, 0x432d1e, 0x332115, 0x592120, 0x6a2c25, 0x43281a, 0x311815, 0x241b16, 0x31221c, 0x392822, 0x3a2920, 0x34231d, 0x311f19, 0x3a2721, 0x3f2c29, 0x33211e, 0x2d1d1a, 0x2b1c19, 0x2b1b18, 0x37251e, 0x49372e, 0x54413a, 0x3c2924, 0x37221d, 0x46302a, 0x4d3631, 0x49332c, 0x100d08, 0x100e07, 0xd0604, 0x3f2614, 0x553c1d, 0x36261c, 0x221712, 0x2c1a11, 0x472722, 0x44271f, 0x44271f, 0x422520, 0x321e1a, 0x311e19, 0x2a1b12, 0x201610, 0x1f1712, 0x211611, 0x241710, 0x1f160f, 0x20150f, 0x271711, 0x392a18, 0x504925, 0x52502f, 0x686338, 0x7d6f48, 0x69563b, 0x473824, 0x2c1f19, 0x30221a, 0x3d2c22, 0x392723, 0x34201b, 0x3b2621, 0x32201d, 0x2c1a19, 0x301e1b, 0x31211b, 0x31201a, 0x31211a, 0x32221b, 0x402d26, 0x433029, 0x3c2922, 0x3d2a23, 0x412b25, 0x48312b, 0xe0c08, 0xf0d08, 0xa0805, 0x2d220c, 0x71462b, 0x3c291e, 0x2e1511, 0x451f1a, 0x4e2a25, 0x482a22, 0x4a2b24, 0x432620, 0x311c18, 0x2f1c17, 0x311d18, 0x201410, 0x160f0a, 0x19110b, 0x19110c, 0x19100b, 0x170f0b, 0x2a2111, 0x484622, 0x60612a, 0x60602d, 0x767641, 0x858057, 0x887e62, 0x867d56, 0x52492c, 0x281a15, 0x3a2a1f, 0x35251e, 0x3b2621, 0x3f2a25, 0x311e1a, 0x301e1b, 0x38251f, 0x4b362d, 0x503a33, 0x3a2820, 0x39261f, 0x3b271f, 0x47322b, 0x48332b, 0x46312a, 0x432c26, 0x47302a, 0x120f09, 0xf0b06, 0x70503, 0x341d0b, 0x9a5743, 0x452b25, 0x1c110e, 0x49231f, 0x60312a, 0x59312d, 0x5c332f, 0x563831, 0x38221c, 0x2a1812, 0x311c17, 0x3f2f20, 0x574c31, 0x6b623c, 0x6a6039, 0x665b3d, 0x49402d, 0x4c4621, 0x545621, 0x5f6325, 0x5f5c2d, 0x878352, 0x8f8959, 0x8f8962, 0xa39871, 0x8a845c, 0x3f3023, 0x453027, 0x33241b, 0x2e1e17, 0x301f18, 0x2e1f18, 0x2f2119, 0x34241c, 0x402c24, 0x4a332e, 0x56423d, 0x503a35, 0x4c352c, 0x503830, 0x513a31, 0x4d362d, 0x4b342d, 0x4a332d, 0x161009, 0x19120b, 0x120f09, 0x24160d, 0x703b35, 0x402824, 0x2c1315, 0x44221f, 0x532c29, 0x572d29, 0x5f3832, 0x53352d, 0x412524, 0x462e22, 0x5a4e31, 0x706c3e, 0x827e4d, 0x7f7a49, 0x8d8557, 0x867c59, 0x7e7357, 0x70624c, 0x5e5537, 0x62622f, 0x676637, 0x8a865b, 0xaba175, 0x928a64, 0x96926a, 0x88855e, 0x5c5437, 0x543f37, 0x3d2a25, 0x36251f, 0x33221c, 0x2a1e16, 0x281c15, 0x261813, 0x281613, 0x301c1a, 0x594544, 0x4b3632, 0x5b453e, 0x533d36, 0x4b342d, 0x432c24, 0x4d362f, 0x503934, 0xd0a06, 0x100b09, 0x130d09, 0x25170d, 0x4e2c26, 0x3f2928, 0x2c1712, 0x482422, 0x492a22, 0x492a23, 0x51342b, 0x56362e, 0x5b3b2e, 0x695e3b, 0x73703d, 0x757340, 0x746f44, 0x6d6b3e, 0x73704b, 0x82795d, 0x8c7c6a, 0x97826c, 0x9f846d, 0x726648, 0x6f6941, 0xb5a484, 0xc8b69d, 0x9f937a, 0xa29e6d, 0x727041, 0x5b5633, 0x291e13, 0x2f1d1b, 0x362420, 0x2b1f1a, 0x2e1d1a, 0x3b2a1d, 0x53422b, 0x695741, 0x604e3d, 0x4f3c31, 0x3c2924, 0x46312d, 0x503b37, 0x4d3630, 0x4d3630, 0x523b34, 0x4d362e, 0x90905, 0x80804, 0x80904, 0x1d0d08, 0x5c2d26, 0x35211a, 0x2b1c17, 0x462a24, 0x502f28, 0x4b2f26, 0x4f302a, 0x553526, 0x625829, 0x6b6a35, 0x646236, 0x7c7b44, 0x929150, 0x89884d, 0x827e54, 0x8d8661, 0x887f63, 0x938568, 0xab9477, 0x877866, 0x79734b, 0xaea07d, 0xc4b09b, 0xc5b2a7, 0xb7b07d, 0x7c7c45, 0x585431, 0x33291a, 0x382720, 0x3e2c26, 0x1d120e, 0x513e21, 0x6e5f31, 0x8f7d46, 0xa89163, 0xb69d79, 0x957e63, 0x695848, 0x503c32, 0x432f27, 0x422b25, 0x462f29, 0x4e372f, 0x4e3a32, 0x80804, 0x80804, 0x80904, 0x210c09, 0x441c1b, 0x21130d, 0x180d09, 0x2a1a14, 0x3a241e, 0x472d27, 0x593832, 0x624f2d, 0x64602d, 0x67672f, 0x77763b, 0x939551, 0x918f59, 0x8d8760, 0x928866, 0x9d976c, 0x989664, 0x8a8662, 0x928c66, 0xa09570, 0x837a54, 0x928c61, 0x978b72, 0xb5a696, 0xbeb97c, 0x86844f, 0x57562d, 0x473829, 0x38251f, 0x443523, 0x5e542f, 0x7d7147, 0x776c3f, 0x81764b, 0x897b52, 0x9d8d5e, 0xaa9963, 0xa7906a, 0x776651, 0x503d30, 0x3e2923, 0x3c2720, 0x37251e, 0x56322e, 0xd0906, 0x80703, 0x70803, 0x1c0e07, 0x301a13, 0x21160e, 0x210e0d, 0x291712, 0x27170f, 0x2a1818, 0x44371c, 0x574f21, 0x64612c, 0x848734, 0x7f8038, 0x65613d, 0x8d8b55, 0xaaa36f, 0xcdb99d, 0xd1c59a, 0xa7a474, 0x9e996a, 0x939065, 0x9b936f, 0x968d6e, 0x8e8464, 0x706a4f, 0x6f6f46, 0x8d8f52, 0x575d2b, 0x6c6333, 0x66513d, 0x554c2b, 0x847c46, 0x9a9056, 0x857b5c, 0x93895e, 0x978c61, 0x8c8260, 0x72684c, 0x736740, 0x9e8d70, 0xc9b2b2, 0x695447, 0x3e2b23, 0x47322c, 0x402e28, 0x6b322f, 0x10400, 0x90703, 0xc0805, 0x1a0e09, 0x2a1610, 0x161009, 0x170c07, 0x26170f, 0x291913, 0x2e2113, 0x524b20, 0x524d19, 0x717523, 0x696d26, 0x5b5b32, 0x636339, 0x7b7653, 0x958b69, 0xccc091, 0xc6b79f, 0xc5bb94, 0xada77e, 0xa9a472, 0xa8a175, 0x969167, 0x827e58, 0x656440, 0x4b511f, 0x343c17, 0x494910, 0x70632b, 0x645f33, 0x535228, 0x828040, 0x918a57, 0xada75a, 0x877f4f, 0x8f8361, 0x9c9164, 0xa29a69, 0x7b754b, 0x867964, 0xf6dedf, 0x97806e, 0x4e3a2c, 0x402623, 0x502d2b, 0x432d27, 0x4b2822, 0xa0904, 0x0, 0x100a04, 0x1e130a, 0x100c05, 0x110a04, 0x1e1309, 0x21110e, 0x403416, 0x5d5525, 0x615e21, 0x585a19, 0x484824, 0x646830, 0x7e8142, 0x6f6949, 0x847b5a, 0x918a62, 0xafa87b, 0xc5bb96, 0xc3b59e, 0xb8b08b, 0xb1aa79, 0x999761, 0x858355, 0x6b693c, 0x31330f, 0x272909, 0x5c4c0d, 0x584f23, 0x777430, 0x6d6b38, 0x918e4e, 0xaba659, 0xafab55, 0x787545, 0x868154, 0x848353, 0x999369, 0xaea280, 0x7b7546, 0x6d6646, 0x726646, 0x69563b, 0x3d251f, 0x752e2b, 0x793633, 0xf1a6a6, 0xba7e7a, 0x5c3c33, 0x19110c, 0x120d06, 0xe0c06, 0x130c06, 0x1c130d, 0x1f120d, 0x4d421a, 0x675b27, 0x666326, 0x474518, 0x595d26, 0x7e8334, 0x696833, 0x747246, 0x7e7758, 0x817c58, 0xb3b36b, 0xaaa47e, 0xb8b08d, 0xb6b08c, 0xa7a178, 0x92925a, 0xa5a371, 0x757144, 0x281f09, 0x3c3414, 0x6b612a, 0x807b3d, 0x848431, 0x9e9747, 0xb0a560, 0xb6ac64, 0x9d9868, 0xbbaa91, 0xb5a185, 0xa99c78, 0xb0a771, 0xa19b68, 0x868354, 0x56502f, 0x514829, 0x665539, 0x4b2f2c, 0x452b27, 0x693f3c, 0xea9ea0, 0xeda4a7, 0xf2b0a0, 0x775a42, 0x80500, 0xb0a05, 0xc0401, 0x100905, 0x302013, 0x645226, 0x6e5e26, 0x584e21, 0x4b451b, 0x686e1f, 0x545622, 0x616724, 0x6e6f2c, 0x726c4b, 0x97975e, 0xa2a263, 0x827e60, 0x9f9d6f, 0x9f9c71, 0xa7a86a, 0x898b58, 0x77744e, 0x71683c, 0x736533, 0x75703b, 0xcdc26b, 0xe1d367, 0xd3cc53, 0xf4e487, 0xf3d768, 0xdbc05f, 0xc9b67c, 0xcbb3a1, 0xbead97, 0xd2bda9, 0xbfb093, 0x94906c, 0x767356, 0x635d41, 0x4c432b, 0x675336, 0x742b2d, 0x673130, 0x572e2d, 0xe88683, 0xfdc1b5, 0xcbaa91, 0x342916, 0x170d09, 0x1e1110, 0x392b19, 0x494222, 0x5f552b, 0x675d2a, 0x564e1f, 0x4f4120, 0x615a23, 0x4a461a, 0x42431a, 0x626626, 0x514f29, 0x636335, 0x99a056, 0x72754a, 0x7e7d52, 0x999e5f, 0x70724c, 0x8b9050, 0x565630, 0x4d4922, 0x817a3f, 0xaca85c, 0x95975a, 0xcec673, 0xd9d15e, 0xf5ea84, 0xf5ea73, 0xf0e168, 0xfdef80, 0xf7e165, 0xd4be5f, 0xb3a480, 0xc8b7ac, 0xb29f8f, 0x9d9477, 0x8e8a5b, 0x7e7a43, 0x59502c, 0x51442f, 0x563c2c, 0x653a2f, 0x74332d, 0xf8bfa6, 0xbd9c80, 0x3e301f, 0x40101, 0x241913, 0x524824, 0x7d7244, 0x8a8150, 0x5d5a2b, 0x4b4e1d, 0x434417, 0x3d3415, 0x766f30, 0x595626, 0x4e501d, 0x4b4620, 0x454326, 0x6d7333, 0x838a44, 0x57573c, 0x939355, 0x808545, 0x565d2d, 0x595f23, 0x4c4921, 0x7a7636, 0x6a6a37, 0xa19e59, 0xb1a96a, 0xbebc69, 0xc4c36c, 0xf7ec92, 0xfaf88d, 0xfdfea8, 0xf8ef7e, 0xf7e751, 0xece05a, 0xc4b86e, 0x91866b, 0xa99a7d, 0x9f9a68, 0x847f52, 0x6c6543, 0x5d582d, 0x5b552e, 0x716b3e, 0x665b3c, 0x574c30, 0x48372b, 0x1a0c02, 0x3c2214, 0x674c39, 0x80733b, 0x746e33, 0x645f3a, 0x7a7748, 0x7c7d3f, 0x6f6f2c, 0x51501e, 0x26250c, 0x514b19, 0x4c471e, 0x44431e, 0x4a4424, 0x656827, 0x6a7527, 0x505329, 0x626238, 0x838a3e, 0x484f24, 0x373e16, 0x3f4310, 0x686728, 0x6c6d27, 0x7c803a, 0xa8aa55, 0xa4a75a, 0xb3b467, 0xbbb96b, 0xdfd77e, 0xeeee92, 0xf0e46d, 0xfdf585, 0xffff9a, 0xfffd9b, 0xeee890, 0xb1aa70, 0x9d9266, 0x727641, 0x74793e, 0x646235, 0x4c4c1f, 0x575227, 0x655b35, 0x6a5941, 0x614e36, 0xf0703, 0x5b392d, 0xa66657, 0x9e7c51, 0x827c3e, 0x978d44, 0xa7a156, 0x888452, 0x746f50, 0x7e7a49, 0x767a32, 0x333a13, 0x2e250d, 0x4e421b, 0x4a4026, 0x534f23, 0x6a7120, 0x555b23, 0x444324, 0x737d2a, 0x545921, 0x1c1e0e, 0x2e370b, 0x3e3f13, 0x565620, 0x545b1c, 0x747d30, 0xb5b55f, 0xb9bb69, 0xb2b468, 0xb8b867, 0xbcbc6b, 0xd1cc78, 0xe7e387, 0xe6e690, 0xcdd07d, 0xced084, 0xbcba7b, 0xa89f73, 0x918466, 0x6c6e41, 0x5c5e2c, 0x454520, 0x464720, 0x585727, 0x565126, 0x4b421e, 0x3b3414, 0x935a49, 0xcc746c, 0xb1755b, 0x92854c, 0x615e35, 0x817c41, 0xc7bc68, 0xc6bd73, 0xab9f7a, 0x8f8270, 0x827c5e, 0x626535, 0x33310f, 0x343014, 0x484422, 0x4c5218, 0x414717, 0x3a3a1d, 0x404c15, 0x4d5612, 0x211f0b, 0x272c0a, 0x292d05, 0x403c1b, 0x625e27, 0x707329, 0x869038, 0xb0b35a, 0xcdcb7c, 0xc9c37c, 0xaaaa61, 0xbcbb6f, 0xdad297, 0xeee2ad, 0xdcd692, 0xc5c582, 0xb7b878, 0xb0af75, 0xa9a577, 0xa09574, 0x777447, 0x4c4927, 0x323118, 0x3f401a, 0x545324, 0x564f28, 0x382f13, 0x28210a, 0xd5786e, 0xd76965, 0x8a683e, 0x7d7643, 0xb6aa5f, 0x888244, 0x826f4b, 0xaca465, 0xe4d89b, 0xdacaa3, 0xa5977e, 0x817d61, 0x5b5e36, 0x2b300d, 0x27290e, 0x23270c, 0x232711, 0x313a11, 0x243107, 0x161e05, 0x17180a, 0x181c07, 0x121404, 0x504c1b, 0x837e35, 0x8b8c3a, 0x9ba14c, 0xb0b35b, 0xd3d181, 0xc8b87f, 0xa29b57, 0xacad69, 0xdbcca5, 0xe9d9b2, 0xddd0a6, 0xe2d6ab, 0xd6d09e, 0xd7d58c, 0xceca86, 0xbbb578, 0x7a714b, 0x372e17, 0x413a1f, 0x2d2d11, 0x3b3917, 0x4f4a1e, 0x4d421e, 0x403619, 0xdd6c6a, 0xba5852, 0x826f36, 0x5f542e, 0x938a48, 0xc1b75d, 0x827b45, 0x7d7652, 0xcac184, 0xe7d99f, 0xd9ce9d, 0xbbb090, 0x938a71, 0x6c6a46, 0x24280d, 0x90d01, 0x121604, 0x161b06, 0xb0d04, 0xd1005, 0xf1206, 0x90a02, 0x20230c, 0x5d5b20, 0x706d2e, 0x7a7e2f, 0xa5aa4b, 0xbabc64, 0xc0bf74, 0xcbc580, 0xbbb66f, 0xbab575, 0xd8d298, 0xdcd0a2, 0xd6c8a5, 0xdacbb7, 0xbfb6a0, 0xa29d7a, 0xa5a275, 0xa6a36a, 0x978f5c, 0x7e6f4b, 0x897957, 0xa09270, 0x9a8b6b, 0x6c6048, 0x483b23, 0x392e16, 0xd86c6a, 0xae5a50, 0x766430, 0x827736, 0x5a5a28, 0x91913f, 0x9c9d4a, 0x7b7949, 0x88815d, 0x97906a, 0xc0bc82, 0xe5d9ab, 0xd4c6a7, 0x8b8666, 0x40471f, 0x1d2408, 0x90b03, 0x40600, 0x80904, 0xe1003, 0xc0d03, 0x131405, 0x23240c, 0x423f15, 0x5d5822, 0x868838, 0x8d9338, 0x767e36, 0xaeb25f, 0xb4b570, 0xcac584, 0xc9c188, 0xbdb781, 0xe1d69c, 0xe8dca7, 0xece1b4, 0xdfd6a1, 0xa59d78, 0x817966, 0x897f69, 0xa49771, 0xa5956a, 0xb2a575, 0xc9b98b, 0xd3bf95, 0xd4c09c, 0xbcaf83, 0x766c3e, 0xdb857e, 0xb36959, 0x63502c, 0x9f9353, 0x77713a, 0x4b4b21, 0x7b7d39, 0xadac56, 0x85814c, 0x6f6d4d, 0x828153, 0xb4b272, 0xc4bf8d, 0x9b9774, 0x444b23, 0x262f0b, 0x191e08, 0x90b01, 0x70802, 0x141707, 0xf1104, 0x1c1f0a, 0x2a2e0d, 0x434213, 0x73711f, 0x8f8c3c, 0x676c2c, 0x737931, 0xa2a451, 0xa9aa65, 0xb8b678, 0xc7c385, 0xd0c78b, 0xbcb188, 0xc8be8d, 0xd6cd8f, 0xd7ce8e, 0xcfc988, 0xa29b6b, 0x8e826a, 0x92866a, 0x8a7b58, 0xc4b188, 0xe8d6aa, 0xf5e6b8, 0xe6d6ad, 0xecddb0, 0xded19f, 0xc8977c, 0xbc8a6e, 0x6c582e, 0x65582b, 0x656324, 0x4b4d20, 0x464a1b, 0x6e762e, 0x878d41, 0x787c45, 0x7a7852, 0x6f6d4a, 0x72754a, 0x81854f, 0x596324, 0x373f13, 0x20230d, 0xd0e07, 0x40400, 0x111207, 0x1b1d0a, 0x272913, 0x181a07, 0x2d2e09, 0x5d5a16, 0x696a27, 0x666732, 0x969846, 0x798238, 0x919449, 0xb8b86f, 0xa6a66c, 0xc3be77, 0xccc783, 0xb7b281, 0x9d9570, 0x978d6d, 0xccc580, 0xcdc67a, 0xb8ae74, 0xcdbe8d, 0xdfcb9f, 0xc9b88c, 0xa89a77, 0xc9be9a, 0xe9e0b6, 0xecdeb3, 0xe3d3a4, 0x876f3f, 0x867145, 0x67582e, 0x5d512b, 0x525020, 0x777c28, 0x626727, 0x394415, 0x697133, 0x909844, 0x9da14f, 0x727546, 0x6a6c45, 0x636c37, 0x787930, 0x757320, 0x2f3209, 0x40601, 0x30501, 0x50502, 0x1e1e0c, 0x26280e, 0xb0d04, 0x1e2006, 0x545212, 0x4b471b, 0x77772f, 0x828634, 0x626924, 0x737737, 0xb1af66, 0xb6b46e, 0x9b9c60, 0xb5b475, 0xdad68f, 0xb5b179, 0x908567, 0xa79c6c, 0xc7c06f, 0xc4ba79, 0xc6b581, 0xcab68a, 0xd3c190, 0xe0cf9f, 0xd5caa6, 0xdfd5b2, 0xf7ebc1, 0xf5e3b9, 0x6b6936, 0x57532e, 0x5a5433, 0x70683a, 0x797340, 0x868149, 0x7c7d32, 0x485416, 0x34401a, 0x5a642c, 0x737e37, 0x7a853b, 0xa5aa54, 0x6d783e, 0x515e20, 0x585911, 0x242208, 0x80706, 0x100d09, 0x1c1e07, 0x1f240c, 0x384012, 0x222707, 0x111304, 0x36370d, 0x4c4617, 0x767227, 0x595e21, 0x6e7228, 0x6a6d37, 0xa09e57, 0xa6a85d, 0xaead6a, 0x838258, 0xb1ad6e, 0xd1cb79, 0xb3aa6d, 0x87785a, 0xada36f, 0x9f9962, 0x6f6842, 0x7c7053, 0x988d6e, 0xc3b597, 0xdcd2b3, 0xe4deb5, 0xd5cba2, 0xe6d4b1, 0x514e2a, 0x797442, 0xaaa359, 0xa39e52, 0x898147, 0x837d4b, 0x827b47, 0x79753a, 0x565c1e, 0x596123, 0x4e5628, 0x5a662e, 0x7a813e, 0x7c843d, 0x63661c, 0x222005, 0x80406, 0x201b12, 0x212011, 0x414c0f, 0x616d1c, 0x404718, 0x323914, 0x101305, 0xe1204, 0x474416, 0x625d1b, 0x3c3d14, 0x70722f, 0x676937, 0x9e9c54, 0x96945f, 0x807a5e, 0x726c51, 0x766f51, 0xb9af71, 0xc7c173, 0xa29866, 0x807359, 0x716a42, 0xa69b6c, 0xe4d29f, 0xf8e7b7, 0xf8efd3, 0xf3eacc, 0xe3d5bc, 0xcfc7a3, 0xe4d8ac, 0xa6a158, 0xc7c070, 0xaea565, 0x7f7a4a, 0x817c4e, 0x9a995c, 0x8d8d53, 0x8d8a52, 0x757539, 0x6e712b, 0x555f24, 0x5c6330, 0x596231, 0x5d5c1b, 0x47340e, 0xf0905, 0x1a190d, 0x3f4218, 0x3d4316, 0x454e1e, 0x8f9438, 0x7d8139, 0x454923, 0x393c1a, 0x50801, 0x27250d, 0x5e582b, 0x484126, 0x4a4b1e, 0x58592c, 0x848245, 0x92924c, 0x716b52, 0x7d795d, 0x888359, 0x7f7b55, 0xa19c67, 0x9e9657, 0x998d4e, 0xc9b975, 0xc1b174, 0xa69c6f, 0xb1a185, 0xbaa495, 0xc1aa9d, 0xeee5d2, 0xfaf9dd, 0xe8ddb3, 0xbab569, 0x9b9760, 0x7e7657, 0x8e8953, 0xb8b26c, 0x9e996a, 0xa19f66, 0x928f50, 0x797a3e, 0x676435, 0x3c3e1c, 0x3e3f1b, 0x333314, 0x151204, 0x190c0b, 0x1c130d, 0x363915, 0x444d17, 0x4f561e, 0x504f2d, 0x727448, 0x858852, 0x8a8c4f, 0x686738, 0x3a3e1d, 0x60a00, 0x242413, 0x594c39, 0x3a381e, 0x282b15, 0x515428, 0x7d7f30, 0x626233, 0x6f6a55, 0x7f7b5b, 0x726f4c, 0x5d5631, 0x666420, 0x8f8743, 0xa69e59, 0x776f3f, 0x6c6846, 0x918868, 0xa2947d, 0xb3a394, 0xfaf5d3, 0xe4dcc9, 0xd8caac, 0x9b9166, 0x827b57, 0x857d5d, 0x979160, 0x948f62, 0x7e755b, 0x948f5e, 0x8d8a54, 0x898c48, 0x737335, 0x363416, 0x0, 0x0, 0xe0905, 0x261611, 0x231f0e, 0x3f4514, 0x434a19, 0x5a6224, 0x595933, 0x6f6f46, 0x91945b, 0xacac6b, 0xa09e6b, 0x8e8b67, 0x63693e, 0x161d0c, 0x2d2f17, 0x545429, 0x32351b, 0x292c10, 0x464d17, 0x4d4d25, 0x4d4b37, 0x383629, 0x21210d, 0x36350e, 0x31320d, 0x262c0f, 0x4f511e, 0x626336, 0x7e7d52, 0x87855a, 0x8b8367, 0xccbd9d, 0xcfbe9d, 0xc8ba98, 0xd5c7a8, 0xbead8f, 0xbdad86, 0x847865, 0x7b735b, 0x878059, 0x88835d, 0x67614e, 0x9e995d, 0x828746, 0x687030, 0x393f18, 0xf0b06, 0x60804, 0x241711, 0x1c110a, 0x313116, 0x4f5219, 0x43481d, 0x696f2f, 0x757848, 0x74734c, 0xafaf6b, 0xb5ab84, 0xbcaa9d, 0xb8a494, 0xa39d7b, 0x797d54, 0x747353, 0x89894f, 0x36391d, 0xf1104, 0x141608, 0x312d12, 0xf0d04, 0xc0c04, 0x272711, 0x32321e, 0x424028, 0x4a4928, 0x616133, 0x797745, 0x6b6945, 0x938e64, 0xccc08f, 0xcdbf92, 0xae9f7d, 0xe1d49e, 0xd9cc9e, 0xdac3ac, 0xccb4a3, 0xa99686, 0xa9997d, 0xd6cd88, 0xa7a06b, 0x706952, 0x80834c, 0x707243, 0x7c7f40, 0x595a29, 0x392817, 0x170e0a, 0x2a1a16, 0x160f0a, 0x3b381b, 0x4a4d1b, 0x474a23, 0x5d6032, 0x7a7d4d, 0x7d755b, 0x9a9071, 0xbbac8e, 0xdfcbc4, 0xdfcfcb, 0xb2a496, 0xaea588, 0x8d8868, 0x686637, 0x2a300b, 0xc0e03, 0x3b3617, 0x433e1f, 0x2b2c11, 0x393a14, 0x524f2a, 0x696643, 0x79754b, 0x878450, 0x938f5d, 0x8d8760, 0x928b63, 0xd9cf8f, 0xd4c890, 0x9d916f, 0xb9b27c, 0xd0c78c, 0xa39972, 0xc3ad95, 0xd1baa8, 0xbea89f, 0xe0d0a9, 0xddd19f, 0x9f936e, 0x877e60, 0x85855a, 0x6d6c4b, 0x898a4c, 0x575530, 0x382b21, 0x351d1a, 0x23170f, 0x17120c, 0x38321a, 0x404018, 0x434423, 0x6a6d3c, 0x777a48, 0x767158, 0x908070, 0xa8a48d, 0xddebdd, 0xffffff, 0xefebe9, 0xdac4c2, 0x7c7457, 0x625e2c, 0x67672d, 0x272512, 0x443f23, 0x3d3e1d, 0x23290b, 0x31390e, 0x474c1d, 0x6d6f3d, 0x797748, 0x7d7b4e, 0xa1a061, 0xa6a364, 0xa09b6a, 0xb1a977, 0x99906a, 0xaca073, 0xafa76d, 0x95905c, 0x90875e, 0xc5b58d, 0xb7a392, 0xb09b94, 0xe1cdc3, 0xcbb6b2, 0x9c8c7f, 0x99906f, 0x87835c, 0x686846, 0x727645, 0x424423, 0x675843, 0x624a3f, 0x170f0a, 0x1e1412, 0x332c18, 0x3e3d1a, 0x40411b, 0x5c5b36, 0x767943, 0x8e915c, 0x97866f, 0x97997f, 0xd6f1de, 0xfffcfa, 0xfaf2f2, 0xb7a9a0, 0x67613e, 0x4a491e, 0x585c23, 0x42401f, 0x444320, 0x383b19, 0x383c12, 0x3c3f15, 0x56572d, 0x757148, 0x827d56, 0x817d5a, 0x86815b, 0xa5a365, 0xaba96d, 0xa8a377, 0xa8a377, 0xbcb282, 0x969068, 0x958c65, 0xb1a97c, 0x998d6c, 0x978a78, 0xafa086, 0xd4c3b1, 0xbca9a7, 0xb1a294, 0xaba478, 0x7d7959, 0x6c6d43, 0x666d36, 0x45482a, 0x907b6a, 0x523c38, 0x160d0d, 0x1a1212, 0x242010, 0x3b351c, 0x484a21, 0x515035, 0x787b44, 0x929356, 0x837b5f, 0x8a7b69, 0xc2b9ab, 0xddc2b4, 0xb69f90, 0x655e43, 0x555426, 0x41451f, 0x343513, 0x4c4a24, 0x484820, 0x393d1b, 0x4b4c25, 0x5a592c, 0x777640, 0x9d9a62, 0x8d895e, 0x828052, 0x969463, 0x9e9b6f, 0x9e9b6e, 0xa7a17a, 0xaaa47d, 0xaba576, 0x948e64, 0x89805f, 0xa29a67, 0x958069, 0x9f976a, 0xb7b177, 0xa1967a, 0x958a7c, 0xaba380, 0xa59f73, 0x746f52, 0x7d7e4d, 0x6e6f3e, 0x4f4c32, 0x402e23, 0x1f120f, 0x2a1f1e, 0xf0b08, 0x141209, 0x3d331f, 0x44431f, 0x4c4b2b, 0x64643d, 0x797b40, 0x6c6c41, 0x6f6b4a, 0x796f54, 0x958c65, 0x8c8755, 0x55502e, 0x46451f, 0x323412, 0x453f23, 0x636032, 0x4e511c, 0x434614, 0x63602b, 0x736d42, 0x696243, 0x76714f, 0x8f8a61, 0x999463, 0x928d61, 0x968f6a, 0x9f9972, 0xb0a974, 0xbbb679, 0xa49e6a, 0xa19a69, 0x827b60, 0x8b8452, 0xd6c8c8, 0x817d4b, 0x8f8c53, 0x746f54, 0x807a59, 0x9a9b5b, 0x797551, 0x736e4e, 0x83854b, 0x636238, 0x443c29, 0x241712, 0x15100b, 0x221816, 0xd0906, 0xc0c04, 0x261e10, 0x38341d, 0x434423, 0x464629, 0x666a39, 0x636934, 0x606539, 0x6b6a4a, 0x746f4a, 0x787638, 0x585325, 0x353419, 0x2c2c0e, 0x625c2f, 0x6f6c38, 0x626519, 0x7e7d24, 0xa49d45, 0x9e9948, 0x8a8847, 0x7a7350, 0x81755e, 0x96896f, 0x9b8f76, 0xa99e82, 0xa39a75, 0xa4a068, 0xb6b670, 0xb3af78, 0x9f9a6b, 0xaea878, 0xaca470, 0xc2d1b4, 0x908e3c, 0x626232, 0x595a36, 0x86864d, 0x7d7c43, 0x5b5a37, 0x797a3e, 0x666732, 0x47462b, 0x2b2216, 0x231817, 0x1e1512, 0xf0c09, 0x120908, 0x241c10, 0x27270b, 0x393813, 0x37331d, 0x54522b, 0x6a693a, 0x5e622a, 0x50591e, 0x4f5528, 0x4d4929, 0x5a5a1f, 0x7a752e, 0x323215, 0x2e2b12, 0x4b471e, 0x555420, 0x65621f, 0x88852f, 0x898336, 0x7b7735, 0x8b8a48, 0xa9a462, 0xada171, 0xb9ab84, 0xbcae8e, 0xaca087, 0xb3a592, 0xb4ab8c, 0xa3a073, 0xb2ae77, 0xafa881, 0xc1b986, 0xa49c6d, 0x8c9e56, 0x666a2b, 0x565734, 0x848650, 0x8b8956, 0x5e5b39, 0x626730, 0x6f7533, 0x444523, 0x261d13, 0x1f130e, 0x13100a, 0x1c1313, 0x131007, 0x302c14, 0x333116, 0x44451b, 0x504e29, 0x4b432c, 0x706c32, 0x8d894e, 0xbebba2, 0x969170, 0x414118, 0x312f12, 0x474419, 0x767028, 0x413d19, 0x292611, 0x39371a, 0x43421c, 0x444020, 0x585127, 0x575425, 0x56572d, 0x6c6842, 0x9d985c, 0xc5ba7b, 0xe3d3a4, 0xe1d1aa, 0xd1c39f, 0xc7b6a6, 0xd7c5c1, 0xa89e7e, 0xa69a7a, 0xbaac8d, 0xbfb48f, 0xa69b77, 0x67682f, 0x3a4023, 0x747547, 0x929144, 0x757144, 0x595736, 0x6a6f3b, 0x605e2c, 0x201d0f, 0x231311, 0x180f0e, 0x18150e, 0x221e13, 0x4b4c1a, 0x4b4c1e, 0x46451c, 0x6e6e2e, 0x6b683b, 0x4e4830, 0x787339, 0x939b49, 0xccdcc5, 0xffffff, 0xa5a690, 0x35351a, 0x231f0e, 0x464014, 0x1e1d08, 0x25250f, 0x4c4c1a, 0x4d491f, 0x514c2a, 0x4f4b27, 0x635f32, 0x67623c, 0x6a6541, 0x776e4f, 0x93846b, 0xc6b29c, 0xdbc7b0, 0xd7c7b0, 0xe5d4c6, 0xdccabe, 0x9f9376, 0x8b8461, 0xab9f81, 0xbbac92, 0xb4a584, 0x666341, 0x73704a, 0x969541, 0x616028, 0x524d39, 0x898459, 0x7e794c, 0x222113, 0x1c110e, 0x2b1b17, 0xe0a08, 0x262412, 0x3a3b12, 0x6f7125, 0x535021, 0x78712f, 0xa39f45, 0x6f6b40, 0x534e37, 0x9a9653, 0xafab53, 0xb0b375, 0xe2cccb, 0xdfbeb3, 0x7d7c51, 0x2e2c18, 0xf0d02, 0x50503, 0x2d2d0f, 0x4f5112, 0x62601f, 0x6b642c, 0x7b7734, 0x8d8a47, 0x7f7949, 0x8d884e, 0x918758, 0xa49572, 0xb4a189, 0xbfaa9b, 0xcbbaab, 0xecd9d3, 0xe1d0be, 0xb2a785, 0xa59c73, 0xbcae84, 0xb9a890, 0xb5a589, 0x918851, 0x8a873c, 0x6f6e2d, 0x565034, 0x847c58, 0x877e4d, 0x2c2a17, 0x80904, 0x281914, 0x160c0b, 0x1e2108, 0x403e16, 0x5a5722, 0x7e7930, 0x5e5c28, 0x97923f, 0x99934e, 0x5f583f, 0x6b6640, 0xa5a254, 0xb0ac5a, 0x959649, 0x675d3f, 0x756848, 0x868951, 0x5f5f3a, 0x2b2a13, 0x30500, 0x1b1b09, 0x3f3e14, 0x57541f, 0x736d2e, 0x807b3b, 0x84813f, 0x7c7644, 0xafa561, 0xc2b570, 0xc4bb78, 0xc0b881, 0xb7a989, 0xc8b9a1, 0xe7d6c8, 0xc3b3a2, 0xb5a989, 0xe6cca6, 0xdfbfa0, 0xb8a886, 0xb9a885, 0x8d844d, 0x5d5836, 0x5d543d, 0x776f4d, 0x736944, 0x292414, 0x40300, 0x19110b, 0x2a1919, 0x17130b, 0x424414, 0x4d4a20, 0x69642f, 0x635e2d, 0x656328, 0x9b973a, 0x747042, 0x57523e, 0x767242, 0xafac5a, 0xbbb461, 0xadab5e, 0x676441, 0x787749, 0x898b54, 0x636243, 0x545230, 0xa0d00, 0x111207, 0x24240d, 0x3e3c1d, 0x534d2c, 0x5d5735, 0x726d3c, 0x6a6143, 0x7d7255, 0x8f835f, 0x8f875f, 0x948f69, 0xa79c7f, 0xb1a18d, 0xc3b2a8, 0xbaaa9c, 0xb0a287, 0xc8b08d, 0xcbb398, 0xb9a788, 0xc8b485, 0x796349, 0x755d44, 0x735f41, 0x55462f, 0x1f160f, 0xb0806, 0x110b04, 0x261610, 0x21120f, 0x2d2811, 0x514f19, 0x4a4421, 0x6e6c2f, 0x545128, 0x757033, 0xa7a248, 0x868647, 0x5d553d, 0x726e46, 0xb3ae60, 0xbeb764, 0xb0ab6b, 0x797357, 0x858650, 0x939356, 0x666346, 0x5e5f33, 0x1b1c08, 0xb0c02, 0x30300c, 0x55511f, 0x514e25, 0x5b572e, 0x726a3d, 0x79704c, 0x797052, 0x88805e, 0xa29a66, 0x9f9767, 0x948e6a, 0xb6ac80, 0xb4a88d, 0xa29683, 0xb2a58d, 0xbdae86, 0xc2b394, 0xbdaa91, 0xc0ab8c, 0x362920, 0x2f2218, 0x1e1311, 0xe0803, 0xe0a05, 0xf0b07, 0x1e130e, 0x321c16, 0x23170e, 0x423c16, 0x4f4b1e, 0x4f4926, 0x6d6a32, 0x585532, 0x847f43, 0xaaa450, 0x83804c, 0x655a45, 0x736d4e, 0xa8a35b, 0xb1ae5f, 0x908e5c, 0x79715b, 0x898b52, 0xa3a063, 0x6d6b47, 0x727837, 0x37381d, 0x70803, 0x1f1d0c, 0x504b1b, 0x58571c, 0x5f5f1d, 0x91863c, 0x998d47, 0xa29854, 0xb2a86c, 0xccc07d, 0xa79f68, 0x7b755a, 0x8a826b, 0x8c8564, 0x726e49, 0xa0986d, 0xbeaf80, 0xb5a583, 0xaf9d80, 0xd3c199
};
*/

//Apple
int get_feature_data0(size_t offset, size_t length, float *out_ptr) {
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
    memcpy(out_ptr, features0 + offset, length * sizeof(float));
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4a06      	ldr	r2, [pc, #24]	; (800226c <_Z17get_feature_data0jjPf+0x2c>)
 8002252:	1899      	adds	r1, r3, r2
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	461a      	mov	r2, r3
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f00c fbfc 	bl	800ea58 <memcpy>
    return 0;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	20000038 	.word	0x20000038

08002270 <_Z17get_feature_data1jjPf>:
//Banana
int get_feature_data1(size_t offset, size_t length, float *out_ptr) {
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
    memcpy(out_ptr, features1 + offset, length * sizeof(float));
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4a06      	ldr	r2, [pc, #24]	; (800229c <_Z17get_feature_data1jjPf+0x2c>)
 8002282:	1899      	adds	r1, r3, r2
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	461a      	mov	r2, r3
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f00c fbe4 	bl	800ea58 <memcpy>
    return 0;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	20002438 	.word	0x20002438

080022a0 <_Z17get_feature_data2jjPf>:
//Orange
int get_feature_data2(size_t offset, size_t length, float *out_ptr) {
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
    memcpy(out_ptr, features2 + offset, length * sizeof(float));
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4a06      	ldr	r2, [pc, #24]	; (80022cc <_Z17get_feature_data2jjPf+0x2c>)
 80022b2:	1899      	adds	r1, r3, r2
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	461a      	mov	r2, r3
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f00c fbcc 	bl	800ea58 <memcpy>
    return 0;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	20004838 	.word	0x20004838

080022d0 <_Z6vprintPKcSt9__va_list>:
/* USER CODE BEGIN 0 */
#include <stdarg.h>
//#include "edge-impulse-sdk/classifier/ei_run_classifier.h"

void vprint(const char *fmt, va_list argp)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b0b4      	sub	sp, #208	; 0xd0
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
    char string[200];
    if(0 < vsprintf(string, fmt, argp)) // build string
 80022da:	f107 0308 	add.w	r3, r7, #8
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	6879      	ldr	r1, [r7, #4]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f00d f888 	bl	800f3f8 <vsiprintf>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	bfcc      	ite	gt
 80022ee:	2301      	movgt	r3, #1
 80022f0:	2300      	movle	r3, #0
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00d      	beq.n	8002314 <_Z6vprintPKcSt9__va_list+0x44>
    {
        HAL_UART_Transmit(&huart2, (uint8_t*)string, strlen(string), 0xffffff); // send message via UART
 80022f8:	f107 0308 	add.w	r3, r7, #8
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7fd ff91 	bl	8000224 <strlen>
 8002302:	4603      	mov	r3, r0
 8002304:	b29a      	uxth	r2, r3
 8002306:	f107 0108 	add.w	r1, r7, #8
 800230a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800230e:	4803      	ldr	r0, [pc, #12]	; (800231c <_Z6vprintPKcSt9__va_list+0x4c>)
 8002310:	f002 fb27 	bl	8004962 <HAL_UART_Transmit>
    }
}
 8002314:	bf00      	nop
 8002316:	37d0      	adds	r7, #208	; 0xd0
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	20006eec 	.word	0x20006eec

08002320 <_Z9ei_printfPKcz>:

void ei_printf(const char *format, ...) {
 8002320:	b40f      	push	{r0, r1, r2, r3}
 8002322:	b580      	push	{r7, lr}
 8002324:	b082      	sub	sp, #8
 8002326:	af00      	add	r7, sp, #0
    va_list myargs;
    va_start(myargs, format);
 8002328:	f107 0314 	add.w	r3, r7, #20
 800232c:	607b      	str	r3, [r7, #4]
    vprint(format, myargs);
 800232e:	6879      	ldr	r1, [r7, #4]
 8002330:	6938      	ldr	r0, [r7, #16]
 8002332:	f7ff ffcd 	bl	80022d0 <_Z6vprintPKcSt9__va_list>
    va_end(myargs);
}
 8002336:	bf00      	nop
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002340:	b004      	add	sp, #16
 8002342:	4770      	bx	lr

08002344 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b0c4      	sub	sp, #272	; 0x110
 8002348:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800234a:	f001 fa0d 	bl	8003768 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800234e:	f000 fb5f 	bl	8002a10 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002352:	f000 fc1b 	bl	8002b8c <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8002356:	f000 fbeb 	bl	8002b30 <_ZL19MX_USART2_UART_Initv>
  MX_CRC_Init();
 800235a:	f000 fbd1 	bl	8002b00 <_ZL11MX_CRC_Initv>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  //Apple
	  signal_t signal0;
 800235e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002362:	4618      	mov	r0, r3
 8002364:	f7fe ff8a 	bl	800127c <_ZN2ei11ei_signal_tC1Ev>
	  signal0.total_length = sizeof(features0) / sizeof(features0[0]);
 8002368:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800236c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	  signal0.get_data = &get_feature_data0;
 8002370:	4bde      	ldr	r3, [pc, #888]	; (80026ec <main+0x3a8>)
 8002372:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002376:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 800237a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800237e:	4611      	mov	r1, r2
 8002380:	4618      	mov	r0, r3
 8002382:	f000 fcb3 	bl	8002cec <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_>
	  ei_impulse_result_t result0 = { 0 };
 8002386:	1d3b      	adds	r3, r7, #4
 8002388:	4618      	mov	r0, r3
 800238a:	233c      	movs	r3, #60	; 0x3c
 800238c:	461a      	mov	r2, r3
 800238e:	2100      	movs	r1, #0
 8002390:	f00c fb8a 	bl	800eaa8 <memset>
			EI_IMPULSE_ERROR res0 = run_classifier(&signal0, &result0, false);
 8002394:	1d39      	adds	r1, r7, #4
 8002396:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800239a:	2200      	movs	r2, #0
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff fd6d 	bl	8001e7c <run_classifier>
 80023a2:	4603      	mov	r3, r0
 80023a4:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
			ei_printf("run_classifier returned: %d\n", res0);
 80023a8:	f997 3103 	ldrsb.w	r3, [r7, #259]	; 0x103
 80023ac:	4619      	mov	r1, r3
 80023ae:	48d0      	ldr	r0, [pc, #832]	; (80026f0 <main+0x3ac>)
 80023b0:	f7ff ffb6 	bl	8002320 <_Z9ei_printfPKcz>
			ei_printf("Predictions (Classification: %d ms.):",
 80023b4:	1d3b      	adds	r3, r7, #4
 80023b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023b8:	4619      	mov	r1, r3
 80023ba:	48ce      	ldr	r0, [pc, #824]	; (80026f4 <main+0x3b0>)
 80023bc:	f7ff ffb0 	bl	8002320 <_Z9ei_printfPKcz>
				result0.timing.classification);

			// print the predictions
			ei_printf("[");
 80023c0:	48cd      	ldr	r0, [pc, #820]	; (80026f8 <main+0x3b4>)
 80023c2:	f7ff ffad 	bl	8002320 <_Z9ei_printfPKcz>
			for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 80023c6:	2300      	movs	r3, #0
 80023c8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80023cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80023d0:	2b04      	cmp	r3, #4
 80023d2:	d818      	bhi.n	8002406 <main+0xc2>
				ei_printf_float(result0.classification[ix].value);
 80023d4:	1d3a      	adds	r2, r7, #4
 80023d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	4413      	add	r3, r2
 80023de:	3304      	adds	r3, #4
 80023e0:	edd3 7a00 	vldr	s15, [r3]
 80023e4:	eeb0 0a67 	vmov.f32	s0, s15
 80023e8:	f002 fdb6 	bl	8004f58 <_Z15ei_printf_floatf>
		#if EI_CLASSIFIER_HAS_ANOMALY == 1
				ei_printf(", ");
		#else
				if (ix != EI_CLASSIFIER_LABEL_COUNT - 1) {
 80023ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80023f0:	2b04      	cmp	r3, #4
 80023f2:	d002      	beq.n	80023fa <main+0xb6>
					ei_printf(", ");
 80023f4:	48c1      	ldr	r0, [pc, #772]	; (80026fc <main+0x3b8>)
 80023f6:	f7ff ff93 	bl	8002320 <_Z9ei_printfPKcz>
			for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 80023fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80023fe:	3301      	adds	r3, #1
 8002400:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002404:	e7e2      	b.n	80023cc <main+0x88>
		#endif
			}
		#if EI_CLASSIFIER_HAS_ANOMALY == 1
			ei_printf_float(result0.anomaly);
		#endif
			ei_printf("]\n");
 8002406:	48be      	ldr	r0, [pc, #760]	; (8002700 <main+0x3bc>)
 8002408:	f7ff ff8a 	bl	8002320 <_Z9ei_printfPKcz>

		if(result0.classification[0].value > result0.classification[1].value && result0.classification[0].value > result0.classification[2].value && result0.classification[0].value > result0.classification[3].value && result0.classification[0].value > result0.classification[4].value)
 800240c:	1d3b      	adds	r3, r7, #4
 800240e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002412:	1d3b      	adds	r3, r7, #4
 8002414:	edd3 7a03 	vldr	s15, [r3, #12]
 8002418:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800241c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002420:	dd24      	ble.n	800246c <main+0x128>
 8002422:	1d3b      	adds	r3, r7, #4
 8002424:	ed93 7a01 	vldr	s14, [r3, #4]
 8002428:	1d3b      	adds	r3, r7, #4
 800242a:	edd3 7a05 	vldr	s15, [r3, #20]
 800242e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002436:	dd19      	ble.n	800246c <main+0x128>
 8002438:	1d3b      	adds	r3, r7, #4
 800243a:	ed93 7a01 	vldr	s14, [r3, #4]
 800243e:	1d3b      	adds	r3, r7, #4
 8002440:	edd3 7a07 	vldr	s15, [r3, #28]
 8002444:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800244c:	dd0e      	ble.n	800246c <main+0x128>
 800244e:	1d3b      	adds	r3, r7, #4
 8002450:	ed93 7a01 	vldr	s14, [r3, #4]
 8002454:	1d3b      	adds	r3, r7, #4
 8002456:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800245a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800245e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002462:	dd03      	ble.n	800246c <main+0x128>
			ei_printf("This is an APPLE!\n");
 8002464:	48a7      	ldr	r0, [pc, #668]	; (8002704 <main+0x3c0>)
 8002466:	f7ff ff5b 	bl	8002320 <_Z9ei_printfPKcz>
 800246a:	e092      	b.n	8002592 <main+0x24e>
		else if(result0.classification[1].value > result0.classification[0].value && result0.classification[1].value > result0.classification[2].value && result0.classification[1].value > result0.classification[3].value && result0.classification[1].value > result0.classification[4].value)
 800246c:	1d3b      	adds	r3, r7, #4
 800246e:	ed93 7a03 	vldr	s14, [r3, #12]
 8002472:	1d3b      	adds	r3, r7, #4
 8002474:	edd3 7a01 	vldr	s15, [r3, #4]
 8002478:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800247c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002480:	dd24      	ble.n	80024cc <main+0x188>
 8002482:	1d3b      	adds	r3, r7, #4
 8002484:	ed93 7a03 	vldr	s14, [r3, #12]
 8002488:	1d3b      	adds	r3, r7, #4
 800248a:	edd3 7a05 	vldr	s15, [r3, #20]
 800248e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002496:	dd19      	ble.n	80024cc <main+0x188>
 8002498:	1d3b      	adds	r3, r7, #4
 800249a:	ed93 7a03 	vldr	s14, [r3, #12]
 800249e:	1d3b      	adds	r3, r7, #4
 80024a0:	edd3 7a07 	vldr	s15, [r3, #28]
 80024a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ac:	dd0e      	ble.n	80024cc <main+0x188>
 80024ae:	1d3b      	adds	r3, r7, #4
 80024b0:	ed93 7a03 	vldr	s14, [r3, #12]
 80024b4:	1d3b      	adds	r3, r7, #4
 80024b6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80024ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c2:	dd03      	ble.n	80024cc <main+0x188>
			ei_printf("This is a BANANA!\n");
 80024c4:	4890      	ldr	r0, [pc, #576]	; (8002708 <main+0x3c4>)
 80024c6:	f7ff ff2b 	bl	8002320 <_Z9ei_printfPKcz>
 80024ca:	e062      	b.n	8002592 <main+0x24e>
		else if(result0.classification[2].value > result0.classification[0].value && result0.classification[2].value > result0.classification[1].value && result0.classification[2].value > result0.classification[3].value && result0.classification[2].value > result0.classification[4].value)
 80024cc:	1d3b      	adds	r3, r7, #4
 80024ce:	ed93 7a05 	vldr	s14, [r3, #20]
 80024d2:	1d3b      	adds	r3, r7, #4
 80024d4:	edd3 7a01 	vldr	s15, [r3, #4]
 80024d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024e0:	dd24      	ble.n	800252c <main+0x1e8>
 80024e2:	1d3b      	adds	r3, r7, #4
 80024e4:	ed93 7a05 	vldr	s14, [r3, #20]
 80024e8:	1d3b      	adds	r3, r7, #4
 80024ea:	edd3 7a03 	vldr	s15, [r3, #12]
 80024ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f6:	dd19      	ble.n	800252c <main+0x1e8>
 80024f8:	1d3b      	adds	r3, r7, #4
 80024fa:	ed93 7a05 	vldr	s14, [r3, #20]
 80024fe:	1d3b      	adds	r3, r7, #4
 8002500:	edd3 7a07 	vldr	s15, [r3, #28]
 8002504:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250c:	dd0e      	ble.n	800252c <main+0x1e8>
 800250e:	1d3b      	adds	r3, r7, #4
 8002510:	ed93 7a05 	vldr	s14, [r3, #20]
 8002514:	1d3b      	adds	r3, r7, #4
 8002516:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800251a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800251e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002522:	dd03      	ble.n	800252c <main+0x1e8>
			ei_printf("This is an ORANGE!\n");
 8002524:	4879      	ldr	r0, [pc, #484]	; (800270c <main+0x3c8>)
 8002526:	f7ff fefb 	bl	8002320 <_Z9ei_printfPKcz>
 800252a:	e032      	b.n	8002592 <main+0x24e>
		else if(result0.classification[3].value > result0.classification[0].value && result0.classification[3].value > result0.classification[1].value && result0.classification[3].value > result0.classification[2].value && result0.classification[3].value > result0.classification[4].value)
 800252c:	1d3b      	adds	r3, r7, #4
 800252e:	ed93 7a07 	vldr	s14, [r3, #28]
 8002532:	1d3b      	adds	r3, r7, #4
 8002534:	edd3 7a01 	vldr	s15, [r3, #4]
 8002538:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800253c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002540:	dd24      	ble.n	800258c <main+0x248>
 8002542:	1d3b      	adds	r3, r7, #4
 8002544:	ed93 7a07 	vldr	s14, [r3, #28]
 8002548:	1d3b      	adds	r3, r7, #4
 800254a:	edd3 7a03 	vldr	s15, [r3, #12]
 800254e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002556:	dd19      	ble.n	800258c <main+0x248>
 8002558:	1d3b      	adds	r3, r7, #4
 800255a:	ed93 7a07 	vldr	s14, [r3, #28]
 800255e:	1d3b      	adds	r3, r7, #4
 8002560:	edd3 7a05 	vldr	s15, [r3, #20]
 8002564:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800256c:	dd0e      	ble.n	800258c <main+0x248>
 800256e:	1d3b      	adds	r3, r7, #4
 8002570:	ed93 7a07 	vldr	s14, [r3, #28]
 8002574:	1d3b      	adds	r3, r7, #4
 8002576:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800257a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800257e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002582:	dd03      	ble.n	800258c <main+0x248>
			ei_printf("This is a PINEAPPLE!\n");
 8002584:	4862      	ldr	r0, [pc, #392]	; (8002710 <main+0x3cc>)
 8002586:	f7ff fecb 	bl	8002320 <_Z9ei_printfPKcz>
 800258a:	e002      	b.n	8002592 <main+0x24e>
		else
			ei_printf("This is a BANANA!\n");
 800258c:	485e      	ldr	r0, [pc, #376]	; (8002708 <main+0x3c4>)
 800258e:	f7ff fec7 	bl	8002320 <_Z9ei_printfPKcz>
		HAL_Delay(5000);
 8002592:	f241 3088 	movw	r0, #5000	; 0x1388
 8002596:	f001 f959 	bl	800384c <HAL_Delay>

		//Banana
		signal_t signal1;
 800259a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800259e:	4618      	mov	r0, r3
 80025a0:	f7fe fe6c 	bl	800127c <_ZN2ei11ei_signal_tC1Ev>
	    signal1.total_length = sizeof(features1) / sizeof(features1[0]);
 80025a4:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80025a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	    signal1.get_data = &get_feature_data1;
 80025ac:	4b59      	ldr	r3, [pc, #356]	; (8002714 <main+0x3d0>)
 80025ae:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80025b2:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80025b6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80025ba:	4611      	mov	r1, r2
 80025bc:	4618      	mov	r0, r3
 80025be:	f000 fb95 	bl	8002cec <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_>
		ei_impulse_result_t result1 = { 0 };
 80025c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80025c6:	223c      	movs	r2, #60	; 0x3c
 80025c8:	2100      	movs	r1, #0
 80025ca:	4618      	mov	r0, r3
 80025cc:	f00c fa6c 	bl	800eaa8 <memset>
			EI_IMPULSE_ERROR res1 = run_classifier(&signal1, &result1, false);
 80025d0:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80025d4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80025d8:	2200      	movs	r2, #0
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff fc4e 	bl	8001e7c <run_classifier>
 80025e0:	4603      	mov	r3, r0
 80025e2:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
			ei_printf("run_classifier returned: %d\n", res1);
 80025e6:	f997 3102 	ldrsb.w	r3, [r7, #258]	; 0x102
 80025ea:	4619      	mov	r1, r3
 80025ec:	4840      	ldr	r0, [pc, #256]	; (80026f0 <main+0x3ac>)
 80025ee:	f7ff fe97 	bl	8002320 <_Z9ei_printfPKcz>
			ei_printf("Predictions (Classification: %d ms.):",
 80025f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025f4:	4619      	mov	r1, r3
 80025f6:	483f      	ldr	r0, [pc, #252]	; (80026f4 <main+0x3b0>)
 80025f8:	f7ff fe92 	bl	8002320 <_Z9ei_printfPKcz>
				result1.timing.classification);

			// print the predictions
			ei_printf("[");
 80025fc:	483e      	ldr	r0, [pc, #248]	; (80026f8 <main+0x3b4>)
 80025fe:	f7ff fe8f 	bl	8002320 <_Z9ei_printfPKcz>
			for (size_t ix = 1; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8002602:	2301      	movs	r3, #1
 8002604:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002608:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800260c:	2b04      	cmp	r3, #4
 800260e:	d819      	bhi.n	8002644 <main+0x300>
				ei_printf_float(result1.classification[ix].value);
 8002610:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800261a:	4413      	add	r3, r2
 800261c:	3bcc      	subs	r3, #204	; 0xcc
 800261e:	edd3 7a00 	vldr	s15, [r3]
 8002622:	eeb0 0a67 	vmov.f32	s0, s15
 8002626:	f002 fc97 	bl	8004f58 <_Z15ei_printf_floatf>
		#if EI_CLASSIFIER_HAS_ANOMALY == 1
				ei_printf(", ");
		#else
				if (ix != EI_CLASSIFIER_LABEL_COUNT - 1) {
 800262a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800262e:	2b04      	cmp	r3, #4
 8002630:	d002      	beq.n	8002638 <main+0x2f4>
					ei_printf(", ");
 8002632:	4832      	ldr	r0, [pc, #200]	; (80026fc <main+0x3b8>)
 8002634:	f7ff fe74 	bl	8002320 <_Z9ei_printfPKcz>
			for (size_t ix = 1; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8002638:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800263c:	3301      	adds	r3, #1
 800263e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002642:	e7e1      	b.n	8002608 <main+0x2c4>
		#endif
			}
		#if EI_CLASSIFIER_HAS_ANOMALY == 1
			ei_printf_float(result1.anomaly);
		#endif
			ei_printf("]\n");
 8002644:	482e      	ldr	r0, [pc, #184]	; (8002700 <main+0x3bc>)
 8002646:	f7ff fe6b 	bl	8002320 <_Z9ei_printfPKcz>

		if(result1.classification[0].value > result1.classification[1].value && result1.classification[0].value > result1.classification[2].value && result1.classification[0].value > result1.classification[3].value && result1.classification[0].value > result1.classification[4].value)
 800264a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800264e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002652:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800265a:	dd1e      	ble.n	800269a <main+0x356>
 800265c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002660:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002664:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800266c:	dd15      	ble.n	800269a <main+0x356>
 800266e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002672:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002676:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800267a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800267e:	dd0c      	ble.n	800269a <main+0x356>
 8002680:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002684:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002688:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800268c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002690:	dd03      	ble.n	800269a <main+0x356>
			ei_printf("This is an APPLE!\n");
 8002692:	481c      	ldr	r0, [pc, #112]	; (8002704 <main+0x3c0>)
 8002694:	f7ff fe44 	bl	8002320 <_Z9ei_printfPKcz>
 8002698:	e091      	b.n	80027be <main+0x47a>
		else if(result1.classification[1].value > result1.classification[0].value && result1.classification[1].value > result1.classification[2].value && result1.classification[1].value > result1.classification[3].value && result1.classification[1].value > result1.classification[4].value)
 800269a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800269e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80026a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026aa:	dd35      	ble.n	8002718 <main+0x3d4>
 80026ac:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80026b0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80026b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026bc:	dd2c      	ble.n	8002718 <main+0x3d4>
 80026be:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80026c2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80026c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ce:	dd23      	ble.n	8002718 <main+0x3d4>
 80026d0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80026d4:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80026d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026e0:	dd1a      	ble.n	8002718 <main+0x3d4>
			ei_printf("This is a BANANA!\n");
 80026e2:	4809      	ldr	r0, [pc, #36]	; (8002708 <main+0x3c4>)
 80026e4:	f7ff fe1c 	bl	8002320 <_Z9ei_printfPKcz>
 80026e8:	e069      	b.n	80027be <main+0x47a>
 80026ea:	bf00      	nop
 80026ec:	08002241 	.word	0x08002241
 80026f0:	08010530 	.word	0x08010530
 80026f4:	08010550 	.word	0x08010550
 80026f8:	08010578 	.word	0x08010578
 80026fc:	0801057c 	.word	0x0801057c
 8002700:	08010580 	.word	0x08010580
 8002704:	08010584 	.word	0x08010584
 8002708:	08010598 	.word	0x08010598
 800270c:	080105ac 	.word	0x080105ac
 8002710:	080105c0 	.word	0x080105c0
 8002714:	08002271 	.word	0x08002271
		else if(result1.classification[2].value > result1.classification[0].value && result1.classification[2].value > result1.classification[1].value && result1.classification[2].value > result1.classification[3].value && result1.classification[2].value > result1.classification[4].value)
 8002718:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800271c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002720:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002728:	dd1e      	ble.n	8002768 <main+0x424>
 800272a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800272e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002732:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800273a:	dd15      	ble.n	8002768 <main+0x424>
 800273c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002740:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002744:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800274c:	dd0c      	ble.n	8002768 <main+0x424>
 800274e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002752:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002756:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800275a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800275e:	dd03      	ble.n	8002768 <main+0x424>
			ei_printf("This is an ORANGE!\n");
 8002760:	48a1      	ldr	r0, [pc, #644]	; (80029e8 <main+0x6a4>)
 8002762:	f7ff fddd 	bl	8002320 <_Z9ei_printfPKcz>
 8002766:	e02a      	b.n	80027be <main+0x47a>
		else if(result1.classification[3].value > result1.classification[0].value && result1.classification[3].value > result1.classification[1].value && result1.classification[3].value > result1.classification[2].value && result1.classification[3].value > result1.classification[4].value)
 8002768:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800276c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002770:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002778:	dd1e      	ble.n	80027b8 <main+0x474>
 800277a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800277e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002782:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800278a:	dd15      	ble.n	80027b8 <main+0x474>
 800278c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002790:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002794:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800279c:	dd0c      	ble.n	80027b8 <main+0x474>
 800279e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80027a2:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80027a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ae:	dd03      	ble.n	80027b8 <main+0x474>
			ei_printf("This is a PINEAPPLE!\n");
 80027b0:	488e      	ldr	r0, [pc, #568]	; (80029ec <main+0x6a8>)
 80027b2:	f7ff fdb5 	bl	8002320 <_Z9ei_printfPKcz>
 80027b6:	e002      	b.n	80027be <main+0x47a>
		else
			ei_printf("This is a BANANA!\n");
 80027b8:	488d      	ldr	r0, [pc, #564]	; (80029f0 <main+0x6ac>)
 80027ba:	f7ff fdb1 	bl	8002320 <_Z9ei_printfPKcz>
		HAL_Delay(5000);
 80027be:	f241 3088 	movw	r0, #5000	; 0x1388
 80027c2:	f001 f843 	bl	800384c <HAL_Delay>

		//Orange
		signal_t signal2;
 80027c6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7fe fd56 	bl	800127c <_ZN2ei11ei_signal_tC1Ev>
		signal2.total_length = sizeof(features2) / sizeof(features2[0]);
 80027d0:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80027d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
		signal2.get_data = &get_feature_data2;
 80027d8:	4b86      	ldr	r3, [pc, #536]	; (80029f4 <main+0x6b0>)
 80027da:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80027de:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 80027e2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80027e6:	4611      	mov	r1, r2
 80027e8:	4618      	mov	r0, r3
 80027ea:	f000 fa7f 	bl	8002cec <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_>
		ei_impulse_result_t result2 = { 0 };
 80027ee:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80027f2:	223c      	movs	r2, #60	; 0x3c
 80027f4:	2100      	movs	r1, #0
 80027f6:	4618      	mov	r0, r3
 80027f8:	f00c f956 	bl	800eaa8 <memset>
			EI_IMPULSE_ERROR res2 = run_classifier(&signal2, &result2, false);
 80027fc:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8002800:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002804:	2200      	movs	r2, #0
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff fb38 	bl	8001e7c <run_classifier>
 800280c:	4603      	mov	r3, r0
 800280e:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
			ei_printf("run_classifier returned: %d\n", res2);
 8002812:	f997 3101 	ldrsb.w	r3, [r7, #257]	; 0x101
 8002816:	4619      	mov	r1, r3
 8002818:	4877      	ldr	r0, [pc, #476]	; (80029f8 <main+0x6b4>)
 800281a:	f7ff fd81 	bl	8002320 <_Z9ei_printfPKcz>
			ei_printf("Predictions (Classification: %d ms.):",
 800281e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002822:	4619      	mov	r1, r3
 8002824:	4875      	ldr	r0, [pc, #468]	; (80029fc <main+0x6b8>)
 8002826:	f7ff fd7b 	bl	8002320 <_Z9ei_printfPKcz>
				result2.timing.classification);

			// print the predictions
			ei_printf("[");
 800282a:	4875      	ldr	r0, [pc, #468]	; (8002a00 <main+0x6bc>)
 800282c:	f7ff fd78 	bl	8002320 <_Z9ei_printfPKcz>
			for (size_t ix = 1; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8002830:	2301      	movs	r3, #1
 8002832:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002836:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800283a:	2b04      	cmp	r3, #4
 800283c:	d819      	bhi.n	8002872 <main+0x52e>
				ei_printf_float(result2.classification[ix].value);
 800283e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002848:	4413      	add	r3, r2
 800284a:	3b90      	subs	r3, #144	; 0x90
 800284c:	edd3 7a00 	vldr	s15, [r3]
 8002850:	eeb0 0a67 	vmov.f32	s0, s15
 8002854:	f002 fb80 	bl	8004f58 <_Z15ei_printf_floatf>
		#if EI_CLASSIFIER_HAS_ANOMALY == 1
				ei_printf(", ");
		#else
				if (ix != EI_CLASSIFIER_LABEL_COUNT - 1) {
 8002858:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800285c:	2b04      	cmp	r3, #4
 800285e:	d002      	beq.n	8002866 <main+0x522>
					ei_printf(", ");
 8002860:	4868      	ldr	r0, [pc, #416]	; (8002a04 <main+0x6c0>)
 8002862:	f7ff fd5d 	bl	8002320 <_Z9ei_printfPKcz>
			for (size_t ix = 1; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8002866:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800286a:	3301      	adds	r3, #1
 800286c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002870:	e7e1      	b.n	8002836 <main+0x4f2>
		#endif
			}
		#if EI_CLASSIFIER_HAS_ANOMALY == 1
			ei_printf_float(result2.anomaly);
		#endif
			ei_printf("]\n");
 8002872:	4865      	ldr	r0, [pc, #404]	; (8002a08 <main+0x6c4>)
 8002874:	f7ff fd54 	bl	8002320 <_Z9ei_printfPKcz>

		if(result2.classification[0].value > result2.classification[1].value && result2.classification[0].value > result2.classification[2].value && result2.classification[0].value > result2.classification[3].value && result2.classification[0].value > result2.classification[4].value)
 8002878:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800287c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002880:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002888:	dd1e      	ble.n	80028c8 <main+0x584>
 800288a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800288e:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002892:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800289a:	dd15      	ble.n	80028c8 <main+0x584>
 800289c:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80028a0:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80028a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ac:	dd0c      	ble.n	80028c8 <main+0x584>
 80028ae:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80028b2:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80028b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028be:	dd03      	ble.n	80028c8 <main+0x584>
			ei_printf("This is an APPLE!\n");
 80028c0:	4852      	ldr	r0, [pc, #328]	; (8002a0c <main+0x6c8>)
 80028c2:	f7ff fd2d 	bl	8002320 <_Z9ei_printfPKcz>
 80028c6:	e07a      	b.n	80029be <main+0x67a>
		else if(result2.classification[1].value > result2.classification[0].value && result2.classification[1].value > result2.classification[2].value && result2.classification[1].value > result2.classification[3].value && result2.classification[1].value > result2.classification[4].value)
 80028c8:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80028cc:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80028d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028d8:	dd1e      	ble.n	8002918 <main+0x5d4>
 80028da:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80028de:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80028e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ea:	dd15      	ble.n	8002918 <main+0x5d4>
 80028ec:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80028f0:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80028f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028fc:	dd0c      	ble.n	8002918 <main+0x5d4>
 80028fe:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8002902:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002906:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800290a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800290e:	dd03      	ble.n	8002918 <main+0x5d4>
			ei_printf("This is a BANANA!\n");
 8002910:	4837      	ldr	r0, [pc, #220]	; (80029f0 <main+0x6ac>)
 8002912:	f7ff fd05 	bl	8002320 <_Z9ei_printfPKcz>
 8002916:	e052      	b.n	80029be <main+0x67a>
		else if(result2.classification[2].value > result2.classification[0].value && result2.classification[2].value > result2.classification[1].value && result2.classification[2].value > result2.classification[3].value && result2.classification[2].value > result2.classification[4].value)
 8002918:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800291c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002920:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002928:	dd1e      	ble.n	8002968 <main+0x624>
 800292a:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800292e:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002932:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800293a:	dd15      	ble.n	8002968 <main+0x624>
 800293c:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002940:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002944:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800294c:	dd0c      	ble.n	8002968 <main+0x624>
 800294e:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002952:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002956:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800295a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800295e:	dd03      	ble.n	8002968 <main+0x624>
			ei_printf("This is an ORANGE!\n");
 8002960:	4821      	ldr	r0, [pc, #132]	; (80029e8 <main+0x6a4>)
 8002962:	f7ff fcdd 	bl	8002320 <_Z9ei_printfPKcz>
 8002966:	e02a      	b.n	80029be <main+0x67a>
		else if(result2.classification[3].value > result2.classification[0].value && result2.classification[3].value > result2.classification[1].value && result2.classification[3].value > result2.classification[2].value && result2.classification[3].value > result2.classification[4].value)
 8002968:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800296c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002970:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002978:	dd1e      	ble.n	80029b8 <main+0x674>
 800297a:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800297e:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002982:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800298a:	dd15      	ble.n	80029b8 <main+0x674>
 800298c:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002990:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002994:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800299c:	dd0c      	ble.n	80029b8 <main+0x674>
 800299e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80029a2:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80029a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ae:	dd03      	ble.n	80029b8 <main+0x674>
			ei_printf("This is a PINEAPPLE!\n");
 80029b0:	480e      	ldr	r0, [pc, #56]	; (80029ec <main+0x6a8>)
 80029b2:	f7ff fcb5 	bl	8002320 <_Z9ei_printfPKcz>
 80029b6:	e002      	b.n	80029be <main+0x67a>
		else
			ei_printf("This is a BANANA!\n");
 80029b8:	480d      	ldr	r0, [pc, #52]	; (80029f0 <main+0x6ac>)
 80029ba:	f7ff fcb1 	bl	8002320 <_Z9ei_printfPKcz>
		HAL_Delay(5000);
 80029be:	f241 3088 	movw	r0, #5000	; 0x1388
 80029c2:	f000 ff43 	bl	800384c <HAL_Delay>
		signal_t signal2;
 80029c6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7fe fc63 	bl	8001296 <_ZN2ei11ei_signal_tD1Ev>
		signal_t signal1;
 80029d0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7fe fc5e 	bl	8001296 <_ZN2ei11ei_signal_tD1Ev>
	  signal_t signal0;
 80029da:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80029de:	4618      	mov	r0, r3
 80029e0:	f7fe fc59 	bl	8001296 <_ZN2ei11ei_signal_tD1Ev>
    /* USER CODE BEGIN 3 */
  }
 80029e4:	e4bb      	b.n	800235e <main+0x1a>
 80029e6:	bf00      	nop
 80029e8:	080105ac 	.word	0x080105ac
 80029ec:	080105c0 	.word	0x080105c0
 80029f0:	08010598 	.word	0x08010598
 80029f4:	080022a1 	.word	0x080022a1
 80029f8:	08010530 	.word	0x08010530
 80029fc:	08010550 	.word	0x08010550
 8002a00:	08010578 	.word	0x08010578
 8002a04:	0801057c 	.word	0x0801057c
 8002a08:	08010580 	.word	0x08010580
 8002a0c:	08010584 	.word	0x08010584

08002a10 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b094      	sub	sp, #80	; 0x50
 8002a14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a16:	f107 031c 	add.w	r3, r7, #28
 8002a1a:	2234      	movs	r2, #52	; 0x34
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f00c f842 	bl	800eaa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a24:	f107 0308 	add.w	r3, r7, #8
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	605a      	str	r2, [r3, #4]
 8002a2e:	609a      	str	r2, [r3, #8]
 8002a30:	60da      	str	r2, [r3, #12]
 8002a32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a34:	2300      	movs	r3, #0
 8002a36:	607b      	str	r3, [r7, #4]
 8002a38:	4b2f      	ldr	r3, [pc, #188]	; (8002af8 <_Z18SystemClock_Configv+0xe8>)
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3c:	4a2e      	ldr	r2, [pc, #184]	; (8002af8 <_Z18SystemClock_Configv+0xe8>)
 8002a3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a42:	6413      	str	r3, [r2, #64]	; 0x40
 8002a44:	4b2c      	ldr	r3, [pc, #176]	; (8002af8 <_Z18SystemClock_Configv+0xe8>)
 8002a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4c:	607b      	str	r3, [r7, #4]
 8002a4e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002a50:	2300      	movs	r3, #0
 8002a52:	603b      	str	r3, [r7, #0]
 8002a54:	4b29      	ldr	r3, [pc, #164]	; (8002afc <_Z18SystemClock_Configv+0xec>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002a5c:	4a27      	ldr	r2, [pc, #156]	; (8002afc <_Z18SystemClock_Configv+0xec>)
 8002a5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a62:	6013      	str	r3, [r2, #0]
 8002a64:	4b25      	ldr	r3, [pc, #148]	; (8002afc <_Z18SystemClock_Configv+0xec>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a6c:	603b      	str	r3, [r7, #0]
 8002a6e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a70:	2302      	movs	r3, #2
 8002a72:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a74:	2301      	movs	r3, #1
 8002a76:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a78:	2310      	movs	r3, #16
 8002a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a80:	2300      	movs	r3, #0
 8002a82:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002a84:	2310      	movs	r3, #16
 8002a86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002a88:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002a8c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002a8e:	2304      	movs	r3, #4
 8002a90:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002a92:	2302      	movs	r3, #2
 8002a94:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002a96:	2302      	movs	r3, #2
 8002a98:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a9a:	f107 031c 	add.w	r3, r7, #28
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f001 fc74 	bl	800438c <HAL_RCC_OscConfig>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	bf14      	ite	ne
 8002aaa:	2301      	movne	r3, #1
 8002aac:	2300      	moveq	r3, #0
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <_Z18SystemClock_Configv+0xa8>
  {
    Error_Handler();
 8002ab4:	f000 f8da 	bl	8002c6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ab8:	230f      	movs	r3, #15
 8002aba:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002abc:	2302      	movs	r3, #2
 8002abe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ac4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ac8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002aca:	2300      	movs	r3, #0
 8002acc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002ace:	f107 0308 	add.w	r3, r7, #8
 8002ad2:	2102      	movs	r1, #2
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f001 f98d 	bl	8003df4 <HAL_RCC_ClockConfig>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	bf14      	ite	ne
 8002ae0:	2301      	movne	r3, #1
 8002ae2:	2300      	moveq	r3, #0
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <_Z18SystemClock_Configv+0xde>
  {
    Error_Handler();
 8002aea:	f000 f8bf 	bl	8002c6c <Error_Handler>
  }
}
 8002aee:	bf00      	nop
 8002af0:	3750      	adds	r7, #80	; 0x50
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40023800 	.word	0x40023800
 8002afc:	40007000 	.word	0x40007000

08002b00 <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002b04:	4b08      	ldr	r3, [pc, #32]	; (8002b28 <_ZL11MX_CRC_Initv+0x28>)
 8002b06:	4a09      	ldr	r2, [pc, #36]	; (8002b2c <_ZL11MX_CRC_Initv+0x2c>)
 8002b08:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002b0a:	4807      	ldr	r0, [pc, #28]	; (8002b28 <_ZL11MX_CRC_Initv+0x28>)
 8002b0c:	f000 ffa7 	bl	8003a5e <HAL_CRC_Init>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	bf14      	ite	ne
 8002b16:	2301      	movne	r3, #1
 8002b18:	2300      	moveq	r3, #0
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <_ZL11MX_CRC_Initv+0x24>
  {
    Error_Handler();
 8002b20:	f000 f8a4 	bl	8002c6c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002b24:	bf00      	nop
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	20006ee4 	.word	0x20006ee4
 8002b2c:	40023000 	.word	0x40023000

08002b30 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002b34:	4b13      	ldr	r3, [pc, #76]	; (8002b84 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002b36:	4a14      	ldr	r2, [pc, #80]	; (8002b88 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002b38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002b3a:	4b12      	ldr	r3, [pc, #72]	; (8002b84 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002b3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b42:	4b10      	ldr	r3, [pc, #64]	; (8002b84 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b48:	4b0e      	ldr	r3, [pc, #56]	; (8002b84 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b4e:	4b0d      	ldr	r3, [pc, #52]	; (8002b84 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b54:	4b0b      	ldr	r3, [pc, #44]	; (8002b84 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002b56:	220c      	movs	r2, #12
 8002b58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b5a:	4b0a      	ldr	r3, [pc, #40]	; (8002b84 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b60:	4b08      	ldr	r3, [pc, #32]	; (8002b84 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b66:	4807      	ldr	r0, [pc, #28]	; (8002b84 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002b68:	f001 feae 	bl	80048c8 <HAL_UART_Init>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	bf14      	ite	ne
 8002b72:	2301      	movne	r3, #1
 8002b74:	2300      	moveq	r3, #0
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8002b7c:	f000 f876 	bl	8002c6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b80:	bf00      	nop
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	20006eec 	.word	0x20006eec
 8002b88:	40004400 	.word	0x40004400

08002b8c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b08a      	sub	sp, #40	; 0x28
 8002b90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b92:	f107 0314 	add.w	r3, r7, #20
 8002b96:	2200      	movs	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	605a      	str	r2, [r3, #4]
 8002b9c:	609a      	str	r2, [r3, #8]
 8002b9e:	60da      	str	r2, [r3, #12]
 8002ba0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	613b      	str	r3, [r7, #16]
 8002ba6:	4b2d      	ldr	r3, [pc, #180]	; (8002c5c <_ZL12MX_GPIO_Initv+0xd0>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	4a2c      	ldr	r2, [pc, #176]	; (8002c5c <_ZL12MX_GPIO_Initv+0xd0>)
 8002bac:	f043 0304 	orr.w	r3, r3, #4
 8002bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bb2:	4b2a      	ldr	r3, [pc, #168]	; (8002c5c <_ZL12MX_GPIO_Initv+0xd0>)
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb6:	f003 0304 	and.w	r3, r3, #4
 8002bba:	613b      	str	r3, [r7, #16]
 8002bbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	4b26      	ldr	r3, [pc, #152]	; (8002c5c <_ZL12MX_GPIO_Initv+0xd0>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc6:	4a25      	ldr	r2, [pc, #148]	; (8002c5c <_ZL12MX_GPIO_Initv+0xd0>)
 8002bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bce:	4b23      	ldr	r3, [pc, #140]	; (8002c5c <_ZL12MX_GPIO_Initv+0xd0>)
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd6:	60fb      	str	r3, [r7, #12]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bda:	2300      	movs	r3, #0
 8002bdc:	60bb      	str	r3, [r7, #8]
 8002bde:	4b1f      	ldr	r3, [pc, #124]	; (8002c5c <_ZL12MX_GPIO_Initv+0xd0>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	4a1e      	ldr	r2, [pc, #120]	; (8002c5c <_ZL12MX_GPIO_Initv+0xd0>)
 8002be4:	f043 0301 	orr.w	r3, r3, #1
 8002be8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bea:	4b1c      	ldr	r3, [pc, #112]	; (8002c5c <_ZL12MX_GPIO_Initv+0xd0>)
 8002bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	60bb      	str	r3, [r7, #8]
 8002bf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	607b      	str	r3, [r7, #4]
 8002bfa:	4b18      	ldr	r3, [pc, #96]	; (8002c5c <_ZL12MX_GPIO_Initv+0xd0>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	4a17      	ldr	r2, [pc, #92]	; (8002c5c <_ZL12MX_GPIO_Initv+0xd0>)
 8002c00:	f043 0302 	orr.w	r3, r3, #2
 8002c04:	6313      	str	r3, [r2, #48]	; 0x30
 8002c06:	4b15      	ldr	r3, [pc, #84]	; (8002c5c <_ZL12MX_GPIO_Initv+0xd0>)
 8002c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	607b      	str	r3, [r7, #4]
 8002c10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002c12:	2200      	movs	r2, #0
 8002c14:	2120      	movs	r1, #32
 8002c16:	4812      	ldr	r0, [pc, #72]	; (8002c60 <_ZL12MX_GPIO_Initv+0xd4>)
 8002c18:	f001 f8d2 	bl	8003dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002c1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002c22:	4b10      	ldr	r3, [pc, #64]	; (8002c64 <_ZL12MX_GPIO_Initv+0xd8>)
 8002c24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c26:	2300      	movs	r3, #0
 8002c28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002c2a:	f107 0314 	add.w	r3, r7, #20
 8002c2e:	4619      	mov	r1, r3
 8002c30:	480d      	ldr	r0, [pc, #52]	; (8002c68 <_ZL12MX_GPIO_Initv+0xdc>)
 8002c32:	f000 ff31 	bl	8003a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002c36:	2320      	movs	r3, #32
 8002c38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c42:	2300      	movs	r3, #0
 8002c44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002c46:	f107 0314 	add.w	r3, r7, #20
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	4804      	ldr	r0, [pc, #16]	; (8002c60 <_ZL12MX_GPIO_Initv+0xd4>)
 8002c4e:	f000 ff23 	bl	8003a98 <HAL_GPIO_Init>

}
 8002c52:	bf00      	nop
 8002c54:	3728      	adds	r7, #40	; 0x28
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40023800 	.word	0x40023800
 8002c60:	40020000 	.word	0x40020000
 8002c64:	10210000 	.word	0x10210000
 8002c68:	40020800 	.word	0x40020800

08002c6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c70:	b672      	cpsid	i
}
 8002c72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c74:	e7fe      	b.n	8002c74 <Error_Handler+0x8>

08002c76 <_ZNKSt8functionIFijjPfEEclEjjS0_>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8002c76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
 8002c84:	603b      	str	r3, [r7, #0]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7fe fa35 	bl	80010f8 <_ZNKSt14_Function_base8_M_emptyEv>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <_ZNKSt8functionIFijjPfEEclEjjS0_+0x22>
	__throw_bad_function_call();
 8002c94:	f7fe fac2 	bl	800121c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	68dc      	ldr	r4, [r3, #12]
 8002c9c:	68fd      	ldr	r5, [r7, #12]
 8002c9e:	f107 0308 	add.w	r3, r7, #8
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 f882 	bl	8002dac <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8002ca8:	4606      	mov	r6, r0
 8002caa:	1d3b      	adds	r3, r7, #4
 8002cac:	4618      	mov	r0, r3
 8002cae:	f000 f87d 	bl	8002dac <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8002cb2:	4680      	mov	r8, r0
 8002cb4:	463b      	mov	r3, r7
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f000 f883 	bl	8002dc2 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	4642      	mov	r2, r8
 8002cc0:	4631      	mov	r1, r6
 8002cc2:	4628      	mov	r0, r5
 8002cc4:	47a0      	blx	r4
 8002cc6:	4603      	mov	r3, r0
    }
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002cd2 <_ZNSt8functionIFijjPfEEC1Ev>:
      function() noexcept
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b082      	sub	sp, #8
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7fe f9ea 	bl	80010b6 <_ZNSt14_Function_baseC1Ev>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3708      	adds	r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_>:
	operator=(_Functor&& __f)
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 8002cf6:	6838      	ldr	r0, [r7, #0]
 8002cf8:	f000 f86e 	bl	8002dd8 <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	f107 0308 	add.w	r3, r7, #8
 8002d04:	4611      	mov	r1, r2
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 f872 	bl	8002df0 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_>
 8002d0c:	f107 0308 	add.w	r3, r7, #8
 8002d10:	6879      	ldr	r1, [r7, #4]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f000 f829 	bl	8002d6a <_ZNSt8functionIFijjPfEE4swapERS2_>
 8002d18:	f107 0308 	add.w	r3, r7, #8
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7fe faa0 	bl	8001262 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 8002d22:	687b      	ldr	r3, [r7, #4]
	}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3718      	adds	r7, #24
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JjjS0_EEEE5valueERS2_E4typeEOS9_>:
	operator=(_Functor&& __f)
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 8002d36:	6838      	ldr	r0, [r7, #0]
 8002d38:	f000 f884 	bl	8002e44 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	f107 0308 	add.w	r3, r7, #8
 8002d42:	6811      	ldr	r1, [r2, #0]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f000 f889 	bl	8002e5c <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_>
 8002d4a:	f107 0308 	add.w	r3, r7, #8
 8002d4e:	6879      	ldr	r1, [r7, #4]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f000 f80a 	bl	8002d6a <_ZNSt8functionIFijjPfEE4swapERS2_>
 8002d56:	f107 0308 	add.w	r3, r7, #8
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7fe fa81 	bl	8001262 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 8002d60:	687b      	ldr	r3, [r7, #4]
	}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3718      	adds	r7, #24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <_ZNSt8functionIFijjPfEE4swapERS2_>:
      void swap(function& __x) noexcept
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b082      	sub	sp, #8
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
 8002d72:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	683a      	ldr	r2, [r7, #0]
 8002d78:	4611      	mov	r1, r2
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f000 f8a3 	bl	8002ec6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f103 0208 	add.w	r2, r3, #8
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	3308      	adds	r3, #8
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	4610      	mov	r0, r2
 8002d8e:	f000 f8cc 	bl	8002f2a <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f103 020c 	add.w	r2, r3, #12
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	330c      	adds	r3, #12
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	4610      	mov	r0, r2
 8002da0:	f000 f8ed 	bl	8002f7e <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
 8002da4:	bf00      	nop
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4618      	mov	r0, r3
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr

08002dc2 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002dc2:	b480      	push	{r7}
 8002dc4:	b083      	sub	sp, #12
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4618      	mov	r0, r3
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
	...

08002df0 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8002df0:	b590      	push	{r4, r7, lr}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7fe f95a 	bl	80010b6 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f000 f8d9 	bl	8002fbc <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00f      	beq.n	8002e30 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8002e10:	687c      	ldr	r4, [r7, #4]
 8002e12:	463b      	mov	r3, r7
 8002e14:	4618      	mov	r0, r3
 8002e16:	f000 f8e1 	bl	8002fdc <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4620      	mov	r0, r4
 8002e20:	f000 f8e7 	bl	8002ff2 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_>
	    _M_invoker = &_My_handler::_M_invoke;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a05      	ldr	r2, [pc, #20]	; (8002e3c <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x4c>)
 8002e28:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a04      	ldr	r2, [pc, #16]	; (8002e40 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x50>)
 8002e2e:	609a      	str	r2, [r3, #8]
      }
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4618      	mov	r0, r3
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd90      	pop	{r4, r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	08003017 	.word	0x08003017
 8002e40:	0800305f 	.word	0x0800305f

08002e44 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
	...

08002e5c <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8002e5c:	b590      	push	{r4, r7, lr}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7fe f924 	bl	80010b6 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8002e6e:	463b      	mov	r3, r7
 8002e70:	4618      	mov	r0, r3
 8002e72:	f000 f91f 	bl	80030b4 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00f      	beq.n	8002e9c <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8002e7c:	687c      	ldr	r4, [r7, #4]
 8002e7e:	463b      	mov	r3, r7
 8002e80:	4618      	mov	r0, r3
 8002e82:	f000 f922 	bl	80030ca <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 8002e86:	4603      	mov	r3, r0
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4620      	mov	r0, r4
 8002e8c:	f000 f928 	bl	80030e0 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_>
	    _M_invoker = &_My_handler::_M_invoke;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a05      	ldr	r2, [pc, #20]	; (8002ea8 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x4c>)
 8002e94:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a04      	ldr	r2, [pc, #16]	; (8002eac <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x50>)
 8002e9a:	609a      	str	r2, [r3, #8]
      }
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd90      	pop	{r4, r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	08003105 	.word	0x08003105
 8002eac:	0800314d 	.word	0x0800314d

08002eb0 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b084      	sub	sp, #16
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
 8002ece:	6039      	str	r1, [r7, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f7ff ffed 	bl	8002eb0 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	f107 0308 	add.w	r3, r7, #8
 8002edc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ee0:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8002ee4:	6838      	ldr	r0, [r7, #0]
 8002ee6:	f7ff ffe3 	bl	8002eb0 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8002eea:	4602      	mov	r2, r0
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ef2:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8002ef6:	f107 0308 	add.w	r3, r7, #8
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7ff ffd8 	bl	8002eb0 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8002f00:	4602      	mov	r2, r0
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f08:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8002f0c:	bf00      	nop
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b084      	sub	sp, #16
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
 8002f32:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f7ff ffed 	bl	8002f14 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8002f40:	6838      	ldr	r0, [r7, #0]
 8002f42:	f7ff ffe7 	bl	8002f14 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8002f46:	4603      	mov	r3, r0
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8002f4e:	f107 030c 	add.w	r3, r7, #12
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7ff ffde 	bl	8002f14 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	601a      	str	r2, [r3, #0]
    }
 8002f60:	bf00      	nop
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4618      	mov	r0, r3
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b084      	sub	sp, #16
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
 8002f86:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f7ff ffed 	bl	8002f68 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8002f94:	6838      	ldr	r0, [r7, #0]
 8002f96:	f7ff ffe7 	bl	8002f68 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8002fa2:	f107 030c 	add.w	r3, r7, #12
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7ff ffde 	bl	8002f68 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 8002fac:	4603      	mov	r3, r0
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	601a      	str	r2, [r3, #0]
    }
 8002fb4:	bf00      	nop
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	bf14      	ite	ne
 8002fca:	2301      	movne	r3, #1
 8002fcc:	2300      	moveq	r3, #0
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr

08002ff2 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8002ff2:	b590      	push	{r4, r7, lr}
 8002ff4:	b085      	sub	sp, #20
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
 8002ffa:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8002ffc:	6838      	ldr	r0, [r7, #0]
 8002ffe:	f7ff ffed 	bl	8002fdc <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 8003002:	4603      	mov	r3, r0
 8003004:	4622      	mov	r2, r4
 8003006:	4619      	mov	r1, r3
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 f8de 	bl	80031ca <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>
 800300e:	bf00      	nop
 8003010:	3714      	adds	r7, #20
 8003012:	46bd      	mov	sp, r7
 8003014:	bd90      	pop	{r4, r7, pc}

08003016 <_ZNSt17_Function_handlerIFijjPfEPS1_E9_M_invokeERKSt9_Any_dataOjS7_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8003016:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003018:	b085      	sub	sp, #20
 800301a:	af00      	add	r7, sp, #0
 800301c:	60f8      	str	r0, [r7, #12]
 800301e:	60b9      	str	r1, [r7, #8]
 8003020:	607a      	str	r2, [r7, #4]
 8003022:	603b      	str	r3, [r7, #0]
	return (*_Base::_M_get_pointer(__functor))(
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f000 f8e9 	bl	80031fc <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 800302a:	4603      	mov	r3, r0
 800302c:	681c      	ldr	r4, [r3, #0]
	    std::forward<_ArgTypes>(__args)...);
 800302e:	68b8      	ldr	r0, [r7, #8]
 8003030:	f7ff febc 	bl	8002dac <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8003034:	4603      	mov	r3, r0
	return (*_Base::_M_get_pointer(__functor))(
 8003036:	681d      	ldr	r5, [r3, #0]
	    std::forward<_ArgTypes>(__args)...);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f7ff feb7 	bl	8002dac <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800303e:	4603      	mov	r3, r0
	return (*_Base::_M_get_pointer(__functor))(
 8003040:	681e      	ldr	r6, [r3, #0]
	    std::forward<_ArgTypes>(__args)...);
 8003042:	6838      	ldr	r0, [r7, #0]
 8003044:	f7ff febd 	bl	8002dc2 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8003048:	4603      	mov	r3, r0
	return (*_Base::_M_get_pointer(__functor))(
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	461a      	mov	r2, r3
 800304e:	4631      	mov	r1, r6
 8003050:	4628      	mov	r0, r5
 8003052:	47a0      	blx	r4
 8003054:	4603      	mov	r3, r0
      }
 8003056:	4618      	mov	r0, r3
 8003058:	3714      	adds	r7, #20
 800305a:	46bd      	mov	sp, r7
 800305c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800305e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800305e:	b5b0      	push	{r4, r5, r7, lr}
 8003060:	b086      	sub	sp, #24
 8003062:	af00      	add	r7, sp, #0
 8003064:	60f8      	str	r0, [r7, #12]
 8003066:	60b9      	str	r1, [r7, #8]
 8003068:	4613      	mov	r3, r2
 800306a:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800306c:	79fb      	ldrb	r3, [r7, #7]
 800306e:	2b03      	cmp	r3, #3
 8003070:	d016      	beq.n	80030a0 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x42>
 8003072:	2b03      	cmp	r3, #3
 8003074:	dc19      	bgt.n	80030aa <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
 8003076:	2b01      	cmp	r3, #1
 8003078:	d002      	beq.n	8003080 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x22>
 800307a:	2b02      	cmp	r3, #2
 800307c:	d00a      	beq.n	8003094 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x36>
 800307e:	e014      	b.n	80030aa <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	f000 f8cc 	bl	800321e <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>
 8003086:	4604      	mov	r4, r0
 8003088:	68b8      	ldr	r0, [r7, #8]
 800308a:	f000 f8b7 	bl	80031fc <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 800308e:	4603      	mov	r3, r0
 8003090:	6023      	str	r3, [r4, #0]
	      break;
 8003092:	e00a      	b.n	80030aa <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8003094:	462a      	mov	r2, r5
 8003096:	68b9      	ldr	r1, [r7, #8]
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f000 f8cc 	bl	8003236 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>
	      break;
 800309e:	e004      	b.n	80030aa <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 80030a0:	4621      	mov	r1, r4
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f000 f8e0 	bl	8003268 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 80030a8:	bf00      	nop
	  return false;
 80030aa:	2300      	movs	r3, #0
	}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3718      	adds	r7, #24
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bdb0      	pop	{r4, r5, r7, pc}

080030b4 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
	  { return true; }
 80030bc:	2301      	movs	r3, #1
 80030be:	4618      	mov	r0, r3
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80030ca:	b480      	push	{r7}
 80030cc:	b083      	sub	sp, #12
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4618      	mov	r0, r3
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 80030e0:	b590      	push	{r4, r7, lr}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 80030ea:	6838      	ldr	r0, [r7, #0]
 80030ec:	f7ff ffed 	bl	80030ca <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 80030f0:	4603      	mov	r3, r0
 80030f2:	4622      	mov	r2, r4
 80030f4:	4619      	mov	r1, r3
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 f8c2 	bl	8003280 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>
 80030fc:	bf00      	nop
 80030fe:	3714      	adds	r7, #20
 8003100:	46bd      	mov	sp, r7
 8003102:	bd90      	pop	{r4, r7, pc}

08003104 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8003104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
 8003110:	603b      	str	r3, [r7, #0]
	return (*_Base::_M_get_pointer(__functor))(
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f000 f8cd 	bl	80032b2 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 8003118:	4606      	mov	r6, r0
	    std::forward<_ArgTypes>(__args)...);
 800311a:	68b8      	ldr	r0, [r7, #8]
 800311c:	f7ff fe46 	bl	8002dac <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8003120:	4603      	mov	r3, r0
	return (*_Base::_M_get_pointer(__functor))(
 8003122:	681c      	ldr	r4, [r3, #0]
	    std::forward<_ArgTypes>(__args)...);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f7ff fe41 	bl	8002dac <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800312a:	4603      	mov	r3, r0
	return (*_Base::_M_get_pointer(__functor))(
 800312c:	681d      	ldr	r5, [r3, #0]
	    std::forward<_ArgTypes>(__args)...);
 800312e:	6838      	ldr	r0, [r7, #0]
 8003130:	f7ff fe47 	bl	8002dc2 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8003134:	4603      	mov	r3, r0
	return (*_Base::_M_get_pointer(__functor))(
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	462a      	mov	r2, r5
 800313a:	4621      	mov	r1, r4
 800313c:	4630      	mov	r0, r6
 800313e:	f7fe fb85 	bl	800184c <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>
 8003142:	4603      	mov	r3, r0
      }
 8003144:	4618      	mov	r0, r3
 8003146:	3714      	adds	r7, #20
 8003148:	46bd      	mov	sp, r7
 800314a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800314c <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800314c:	b5b0      	push	{r4, r5, r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	4613      	mov	r3, r2
 8003158:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800315a:	79fb      	ldrb	r3, [r7, #7]
 800315c:	2b03      	cmp	r3, #3
 800315e:	d016      	beq.n	800318e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x42>
 8003160:	2b03      	cmp	r3, #3
 8003162:	dc19      	bgt.n	8003198 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
 8003164:	2b01      	cmp	r3, #1
 8003166:	d002      	beq.n	800316e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x22>
 8003168:	2b02      	cmp	r3, #2
 800316a:	d00a      	beq.n	8003182 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x36>
 800316c:	e014      	b.n	8003198 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f000 f8b0 	bl	80032d4 <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
 8003174:	4604      	mov	r4, r0
 8003176:	68b8      	ldr	r0, [r7, #8]
 8003178:	f000 f89b 	bl	80032b2 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 800317c:	4603      	mov	r3, r0
 800317e:	6023      	str	r3, [r4, #0]
	      break;
 8003180:	e00a      	b.n	8003198 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8003182:	462a      	mov	r2, r5
 8003184:	68b9      	ldr	r1, [r7, #8]
 8003186:	68f8      	ldr	r0, [r7, #12]
 8003188:	f000 f8b0 	bl	80032ec <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>
	      break;
 800318c:	e004      	b.n	8003198 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 800318e:	4621      	mov	r1, r4
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f000 f8c4 	bl	800331e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8003196:	bf00      	nop
	  return false;
 8003198:	2300      	movs	r3, #0
	}
 800319a:	4618      	mov	r0, r3
 800319c:	3718      	adds	r7, #24
 800319e:	46bd      	mov	sp, r7
 80031a0:	bdb0      	pop	{r4, r5, r7, pc}

080031a2 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 80031a2:	b480      	push	{r7}
 80031a4:	b083      	sub	sp, #12
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
 80031aa:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d201      	bcs.n	80031bc <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	e000      	b.n	80031be <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 80031bc:	687b      	ldr	r3, [r7, #4]
    }
 80031be:	4618      	mov	r0, r3
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr

080031ca <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 80031ca:	b590      	push	{r4, r7, lr}
 80031cc:	b085      	sub	sp, #20
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	60f8      	str	r0, [r7, #12]
 80031d2:	60b9      	str	r1, [r7, #8]
 80031d4:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 80031d6:	68b8      	ldr	r0, [r7, #8]
 80031d8:	f7ff ff00 	bl	8002fdc <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 80031dc:	4603      	mov	r3, r0
 80031de:	681c      	ldr	r4, [r3, #0]
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f7fd ff52 	bl	800108a <_ZNSt9_Any_data9_M_accessEv>
 80031e6:	4603      	mov	r3, r0
 80031e8:	4619      	mov	r1, r3
 80031ea:	2004      	movs	r0, #4
 80031ec:	f7fd ff2e 	bl	800104c <_ZnwjPv>
 80031f0:	4603      	mov	r3, r0
 80031f2:	601c      	str	r4, [r3, #0]
 80031f4:	bf00      	nop
 80031f6:	3714      	adds	r7, #20
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd90      	pop	{r4, r7, pc}

080031fc <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f000 f8aa 	bl	800335e <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>
 800320a:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f000 f8b2 	bl	8003376 <_ZSt11__addressofIKPFijjPfEEPT_RS4_>
 8003212:	4603      	mov	r3, r0
 8003214:	bf00      	nop
	}
 8003216:	4618      	mov	r0, r3
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>:
      _M_access()
 800321e:	b580      	push	{r7, lr}
 8003220:	b082      	sub	sp, #8
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f7fd ff2f 	bl	800108a <_ZNSt9_Any_data9_M_accessEv>
 800322c:	4603      	mov	r3, r0
 800322e:	4618      	mov	r0, r3
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8003236:	b590      	push	{r4, r7, lr}
 8003238:	b085      	sub	sp, #20
 800323a:	af00      	add	r7, sp, #0
 800323c:	60f8      	str	r0, [r7, #12]
 800323e:	60b9      	str	r1, [r7, #8]
 8003240:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8003242:	68b8      	ldr	r0, [r7, #8]
 8003244:	f000 f88b 	bl	800335e <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>
 8003248:	4603      	mov	r3, r0
 800324a:	681c      	ldr	r4, [r3, #0]
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f7fd ff1c 	bl	800108a <_ZNSt9_Any_data9_M_accessEv>
 8003252:	4603      	mov	r3, r0
 8003254:	4619      	mov	r1, r3
 8003256:	2004      	movs	r0, #4
 8003258:	f7fd fef8 	bl	800104c <_ZnwjPv>
 800325c:	4603      	mov	r3, r0
 800325e:	601c      	str	r4, [r3, #0]
	}
 8003260:	bf00      	nop
 8003262:	3714      	adds	r7, #20
 8003264:	46bd      	mov	sp, r7
 8003266:	bd90      	pop	{r4, r7, pc}

08003268 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f88a 	bl	800338c <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>
	}
 8003278:	bf00      	nop
 800327a:	3708      	adds	r7, #8
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8003280:	b590      	push	{r4, r7, lr}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 800328c:	68b8      	ldr	r0, [r7, #8]
 800328e:	f7ff ff1c 	bl	80030ca <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 8003292:	4604      	mov	r4, r0
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f7fd fef8 	bl	800108a <_ZNSt9_Any_data9_M_accessEv>
 800329a:	4603      	mov	r3, r0
 800329c:	4619      	mov	r1, r3
 800329e:	2004      	movs	r0, #4
 80032a0:	f7fd fed4 	bl	800104c <_ZnwjPv>
 80032a4:	4602      	mov	r2, r0
 80032a6:	6823      	ldr	r3, [r4, #0]
 80032a8:	6013      	str	r3, [r2, #0]
 80032aa:	bf00      	nop
 80032ac:	3714      	adds	r7, #20
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd90      	pop	{r4, r7, pc}

080032b2 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b084      	sub	sp, #16
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f872 	bl	80033a4 <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>
 80032c0:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f000 f87a 	bl	80033bc <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>
 80032c8:	4603      	mov	r3, r0
 80032ca:	bf00      	nop
	}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access()
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f7fd fed4 	bl	800108a <_ZNSt9_Any_data9_M_accessEv>
 80032e2:	4603      	mov	r3, r0
 80032e4:	4618      	mov	r0, r3
 80032e6:	3708      	adds	r7, #8
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 80032ec:	b590      	push	{r4, r7, lr}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80032f8:	68b8      	ldr	r0, [r7, #8]
 80032fa:	f000 f853 	bl	80033a4 <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>
 80032fe:	4604      	mov	r4, r0
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	f7fd fec2 	bl	800108a <_ZNSt9_Any_data9_M_accessEv>
 8003306:	4603      	mov	r3, r0
 8003308:	4619      	mov	r1, r3
 800330a:	2004      	movs	r0, #4
 800330c:	f7fd fe9e 	bl	800104c <_ZnwjPv>
 8003310:	4602      	mov	r2, r0
 8003312:	6823      	ldr	r3, [r4, #0]
 8003314:	6013      	str	r3, [r2, #0]
	}
 8003316:	bf00      	nop
 8003318:	3714      	adds	r7, #20
 800331a:	46bd      	mov	sp, r7
 800331c:	bd90      	pop	{r4, r7, pc}

0800331e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800331e:	b580      	push	{r7, lr}
 8003320:	b082      	sub	sp, #8
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
 8003326:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 f852 	bl	80033d2 <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
	}
 800332e:	bf00      	nop
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8003336:	b480      	push	{r7}
 8003338:	b083      	sub	sp, #12
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
 800333e:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	429a      	cmp	r2, r3
 800334a:	d201      	bcs.n	8003350 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	e000      	b.n	8003352 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8003350:	687b      	ldr	r3, [r7, #4]
    }
 8003352:	4618      	mov	r0, r3
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr

0800335e <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>:
      _M_access() const
 800335e:	b580      	push	{r7, lr}
 8003360:	b082      	sub	sp, #8
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7fd fe9a 	bl	80010a0 <_ZNKSt9_Any_data9_M_accessEv>
 800336c:	4603      	mov	r3, r0
 800336e:	4618      	mov	r0, r3
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <_ZSt11__addressofIKPFijjPfEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8003376:	b480      	push	{r7}
 8003378:	b083      	sub	sp, #12
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4618      	mov	r0, r3
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>:
      _M_access()
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f7fd fe78 	bl	800108a <_ZNSt9_Any_data9_M_accessEv>
 800339a:	4603      	mov	r3, r0
 800339c:	4618      	mov	r0, r3
 800339e:	3708      	adds	r7, #8
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>:
      _M_access() const
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f7fd fe77 	bl	80010a0 <_ZNKSt9_Any_data9_M_accessEv>
 80033b2:	4603      	mov	r3, r0
 80033b4:	4618      	mov	r0, r3
 80033b6:	3708      	adds	r7, #8
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4618      	mov	r0, r3
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access()
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b082      	sub	sp, #8
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f7fd fe55 	bl	800108a <_ZNSt9_Any_data9_M_accessEv>
 80033e0:	4603      	mov	r3, r0
 80033e2:	4618      	mov	r0, r3
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
	...

080033ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033f2:	2300      	movs	r3, #0
 80033f4:	607b      	str	r3, [r7, #4]
 80033f6:	4b10      	ldr	r3, [pc, #64]	; (8003438 <HAL_MspInit+0x4c>)
 80033f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033fa:	4a0f      	ldr	r2, [pc, #60]	; (8003438 <HAL_MspInit+0x4c>)
 80033fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003400:	6453      	str	r3, [r2, #68]	; 0x44
 8003402:	4b0d      	ldr	r3, [pc, #52]	; (8003438 <HAL_MspInit+0x4c>)
 8003404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800340a:	607b      	str	r3, [r7, #4]
 800340c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800340e:	2300      	movs	r3, #0
 8003410:	603b      	str	r3, [r7, #0]
 8003412:	4b09      	ldr	r3, [pc, #36]	; (8003438 <HAL_MspInit+0x4c>)
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	4a08      	ldr	r2, [pc, #32]	; (8003438 <HAL_MspInit+0x4c>)
 8003418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800341c:	6413      	str	r3, [r2, #64]	; 0x40
 800341e:	4b06      	ldr	r3, [pc, #24]	; (8003438 <HAL_MspInit+0x4c>)
 8003420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003426:	603b      	str	r3, [r7, #0]
 8003428:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800342a:	2007      	movs	r0, #7
 800342c:	f000 fae4 	bl	80039f8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003430:	bf00      	nop
 8003432:	3708      	adds	r7, #8
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	40023800 	.word	0x40023800

0800343c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a0b      	ldr	r2, [pc, #44]	; (8003478 <HAL_CRC_MspInit+0x3c>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d10d      	bne.n	800346a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800344e:	2300      	movs	r3, #0
 8003450:	60fb      	str	r3, [r7, #12]
 8003452:	4b0a      	ldr	r3, [pc, #40]	; (800347c <HAL_CRC_MspInit+0x40>)
 8003454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003456:	4a09      	ldr	r2, [pc, #36]	; (800347c <HAL_CRC_MspInit+0x40>)
 8003458:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800345c:	6313      	str	r3, [r2, #48]	; 0x30
 800345e:	4b07      	ldr	r3, [pc, #28]	; (800347c <HAL_CRC_MspInit+0x40>)
 8003460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003462:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003466:	60fb      	str	r3, [r7, #12]
 8003468:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800346a:	bf00      	nop
 800346c:	3714      	adds	r7, #20
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	40023000 	.word	0x40023000
 800347c:	40023800 	.word	0x40023800

08003480 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b08a      	sub	sp, #40	; 0x28
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003488:	f107 0314 	add.w	r3, r7, #20
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]
 8003490:	605a      	str	r2, [r3, #4]
 8003492:	609a      	str	r2, [r3, #8]
 8003494:	60da      	str	r2, [r3, #12]
 8003496:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a19      	ldr	r2, [pc, #100]	; (8003504 <HAL_UART_MspInit+0x84>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d12b      	bne.n	80034fa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80034a2:	2300      	movs	r3, #0
 80034a4:	613b      	str	r3, [r7, #16]
 80034a6:	4b18      	ldr	r3, [pc, #96]	; (8003508 <HAL_UART_MspInit+0x88>)
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	4a17      	ldr	r2, [pc, #92]	; (8003508 <HAL_UART_MspInit+0x88>)
 80034ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034b0:	6413      	str	r3, [r2, #64]	; 0x40
 80034b2:	4b15      	ldr	r3, [pc, #84]	; (8003508 <HAL_UART_MspInit+0x88>)
 80034b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ba:	613b      	str	r3, [r7, #16]
 80034bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034be:	2300      	movs	r3, #0
 80034c0:	60fb      	str	r3, [r7, #12]
 80034c2:	4b11      	ldr	r3, [pc, #68]	; (8003508 <HAL_UART_MspInit+0x88>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	4a10      	ldr	r2, [pc, #64]	; (8003508 <HAL_UART_MspInit+0x88>)
 80034c8:	f043 0301 	orr.w	r3, r3, #1
 80034cc:	6313      	str	r3, [r2, #48]	; 0x30
 80034ce:	4b0e      	ldr	r3, [pc, #56]	; (8003508 <HAL_UART_MspInit+0x88>)
 80034d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	60fb      	str	r3, [r7, #12]
 80034d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80034da:	230c      	movs	r3, #12
 80034dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034de:	2302      	movs	r3, #2
 80034e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e2:	2300      	movs	r3, #0
 80034e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034e6:	2303      	movs	r3, #3
 80034e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80034ea:	2307      	movs	r3, #7
 80034ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034ee:	f107 0314 	add.w	r3, r7, #20
 80034f2:	4619      	mov	r1, r3
 80034f4:	4805      	ldr	r0, [pc, #20]	; (800350c <HAL_UART_MspInit+0x8c>)
 80034f6:	f000 facf 	bl	8003a98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80034fa:	bf00      	nop
 80034fc:	3728      	adds	r7, #40	; 0x28
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	40004400 	.word	0x40004400
 8003508:	40023800 	.word	0x40023800
 800350c:	40020000 	.word	0x40020000

08003510 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003514:	e7fe      	b.n	8003514 <NMI_Handler+0x4>

08003516 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003516:	b480      	push	{r7}
 8003518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800351a:	e7fe      	b.n	800351a <HardFault_Handler+0x4>

0800351c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003520:	e7fe      	b.n	8003520 <MemManage_Handler+0x4>

08003522 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003522:	b480      	push	{r7}
 8003524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003526:	e7fe      	b.n	8003526 <BusFault_Handler+0x4>

08003528 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800352c:	e7fe      	b.n	800352c <UsageFault_Handler+0x4>

0800352e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800352e:	b480      	push	{r7}
 8003530:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003532:	bf00      	nop
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800353c:	b480      	push	{r7}
 800353e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003540:	bf00      	nop
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800354a:	b480      	push	{r7}
 800354c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800354e:	bf00      	nop
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800355c:	f000 f956 	bl	800380c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003560:	bf00      	nop
 8003562:	bd80      	pop	{r7, pc}

08003564 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0
	return 1;
 8003568:	2301      	movs	r3, #1
}
 800356a:	4618      	mov	r0, r3
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <_kill>:

int _kill(int pid, int sig)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800357e:	f00b fa1b 	bl	800e9b8 <__errno>
 8003582:	4603      	mov	r3, r0
 8003584:	2216      	movs	r2, #22
 8003586:	601a      	str	r2, [r3, #0]
	return -1;
 8003588:	f04f 33ff 	mov.w	r3, #4294967295
}
 800358c:	4618      	mov	r0, r3
 800358e:	3708      	adds	r7, #8
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <_exit>:

void _exit (int status)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800359c:	f04f 31ff 	mov.w	r1, #4294967295
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f7ff ffe7 	bl	8003574 <_kill>
	while (1) {}		/* Make sure we hang here */
 80035a6:	e7fe      	b.n	80035a6 <_exit+0x12>

080035a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035b4:	2300      	movs	r3, #0
 80035b6:	617b      	str	r3, [r7, #20]
 80035b8:	e00a      	b.n	80035d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80035ba:	f3af 8000 	nop.w
 80035be:	4601      	mov	r1, r0
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	1c5a      	adds	r2, r3, #1
 80035c4:	60ba      	str	r2, [r7, #8]
 80035c6:	b2ca      	uxtb	r2, r1
 80035c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	3301      	adds	r3, #1
 80035ce:	617b      	str	r3, [r7, #20]
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	dbf0      	blt.n	80035ba <_read+0x12>
	}

return len;
 80035d8:	687b      	ldr	r3, [r7, #4]
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3718      	adds	r7, #24
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b086      	sub	sp, #24
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	60f8      	str	r0, [r7, #12]
 80035ea:	60b9      	str	r1, [r7, #8]
 80035ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035ee:	2300      	movs	r3, #0
 80035f0:	617b      	str	r3, [r7, #20]
 80035f2:	e009      	b.n	8003608 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	1c5a      	adds	r2, r3, #1
 80035f8:	60ba      	str	r2, [r7, #8]
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	3301      	adds	r3, #1
 8003606:	617b      	str	r3, [r7, #20]
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	429a      	cmp	r2, r3
 800360e:	dbf1      	blt.n	80035f4 <_write+0x12>
	}
	return len;
 8003610:	687b      	ldr	r3, [r7, #4]
}
 8003612:	4618      	mov	r0, r3
 8003614:	3718      	adds	r7, #24
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <_close>:

int _close(int file)
{
 800361a:	b480      	push	{r7}
 800361c:	b083      	sub	sp, #12
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
	return -1;
 8003622:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003626:	4618      	mov	r0, r3
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr

08003632 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003632:	b480      	push	{r7}
 8003634:	b083      	sub	sp, #12
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
 800363a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003642:	605a      	str	r2, [r3, #4]
	return 0;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <_isatty>:

int _isatty(int file)
{
 8003652:	b480      	push	{r7}
 8003654:	b083      	sub	sp, #12
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
	return 1;
 800365a:	2301      	movs	r3, #1
}
 800365c:	4618      	mov	r0, r3
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
	return 0;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3714      	adds	r7, #20
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
	...

08003684 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800368c:	4a14      	ldr	r2, [pc, #80]	; (80036e0 <_sbrk+0x5c>)
 800368e:	4b15      	ldr	r3, [pc, #84]	; (80036e4 <_sbrk+0x60>)
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003698:	4b13      	ldr	r3, [pc, #76]	; (80036e8 <_sbrk+0x64>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d102      	bne.n	80036a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036a0:	4b11      	ldr	r3, [pc, #68]	; (80036e8 <_sbrk+0x64>)
 80036a2:	4a12      	ldr	r2, [pc, #72]	; (80036ec <_sbrk+0x68>)
 80036a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036a6:	4b10      	ldr	r3, [pc, #64]	; (80036e8 <_sbrk+0x64>)
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4413      	add	r3, r2
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d207      	bcs.n	80036c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036b4:	f00b f980 	bl	800e9b8 <__errno>
 80036b8:	4603      	mov	r3, r0
 80036ba:	220c      	movs	r2, #12
 80036bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036be:	f04f 33ff 	mov.w	r3, #4294967295
 80036c2:	e009      	b.n	80036d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036c4:	4b08      	ldr	r3, [pc, #32]	; (80036e8 <_sbrk+0x64>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036ca:	4b07      	ldr	r3, [pc, #28]	; (80036e8 <_sbrk+0x64>)
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4413      	add	r3, r2
 80036d2:	4a05      	ldr	r2, [pc, #20]	; (80036e8 <_sbrk+0x64>)
 80036d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036d6:	68fb      	ldr	r3, [r7, #12]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3718      	adds	r7, #24
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	20020000 	.word	0x20020000
 80036e4:	00000400 	.word	0x00000400
 80036e8:	20006f30 	.word	0x20006f30
 80036ec:	20007528 	.word	0x20007528

080036f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80036f4:	4b06      	ldr	r3, [pc, #24]	; (8003710 <SystemInit+0x20>)
 80036f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036fa:	4a05      	ldr	r2, [pc, #20]	; (8003710 <SystemInit+0x20>)
 80036fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003700:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003704:	bf00      	nop
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	e000ed00 	.word	0xe000ed00

08003714 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003714:	f8df d034 	ldr.w	sp, [pc, #52]	; 800374c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003718:	480d      	ldr	r0, [pc, #52]	; (8003750 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800371a:	490e      	ldr	r1, [pc, #56]	; (8003754 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800371c:	4a0e      	ldr	r2, [pc, #56]	; (8003758 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800371e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003720:	e002      	b.n	8003728 <LoopCopyDataInit>

08003722 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003722:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003724:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003726:	3304      	adds	r3, #4

08003728 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003728:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800372a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800372c:	d3f9      	bcc.n	8003722 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800372e:	4a0b      	ldr	r2, [pc, #44]	; (800375c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003730:	4c0b      	ldr	r4, [pc, #44]	; (8003760 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003732:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003734:	e001      	b.n	800373a <LoopFillZerobss>

08003736 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003736:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003738:	3204      	adds	r2, #4

0800373a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800373a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800373c:	d3fb      	bcc.n	8003736 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800373e:	f7ff ffd7 	bl	80036f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003742:	f00b f951 	bl	800e9e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003746:	f7fe fdfd 	bl	8002344 <main>
  bx  lr    
 800374a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800374c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003750:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003754:	20006ec4 	.word	0x20006ec4
  ldr r2, =_sidata
 8003758:	080162f4 	.word	0x080162f4
  ldr r2, =_sbss
 800375c:	20006ec4 	.word	0x20006ec4
  ldr r4, =_ebss
 8003760:	20007524 	.word	0x20007524

08003764 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003764:	e7fe      	b.n	8003764 <ADC_IRQHandler>
	...

08003768 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800376c:	4b0e      	ldr	r3, [pc, #56]	; (80037a8 <HAL_Init+0x40>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a0d      	ldr	r2, [pc, #52]	; (80037a8 <HAL_Init+0x40>)
 8003772:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003776:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003778:	4b0b      	ldr	r3, [pc, #44]	; (80037a8 <HAL_Init+0x40>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a0a      	ldr	r2, [pc, #40]	; (80037a8 <HAL_Init+0x40>)
 800377e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003782:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003784:	4b08      	ldr	r3, [pc, #32]	; (80037a8 <HAL_Init+0x40>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a07      	ldr	r2, [pc, #28]	; (80037a8 <HAL_Init+0x40>)
 800378a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800378e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003790:	2003      	movs	r0, #3
 8003792:	f000 f931 	bl	80039f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003796:	2000      	movs	r0, #0
 8003798:	f000 f808 	bl	80037ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800379c:	f7ff fe26 	bl	80033ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	40023c00 	.word	0x40023c00

080037ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037b4:	4b12      	ldr	r3, [pc, #72]	; (8003800 <HAL_InitTick+0x54>)
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	4b12      	ldr	r3, [pc, #72]	; (8003804 <HAL_InitTick+0x58>)
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	4619      	mov	r1, r3
 80037be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80037c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ca:	4618      	mov	r0, r3
 80037cc:	f000 f93b 	bl	8003a46 <HAL_SYSTICK_Config>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e00e      	b.n	80037f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2b0f      	cmp	r3, #15
 80037de:	d80a      	bhi.n	80037f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037e0:	2200      	movs	r2, #0
 80037e2:	6879      	ldr	r1, [r7, #4]
 80037e4:	f04f 30ff 	mov.w	r0, #4294967295
 80037e8:	f000 f911 	bl	8003a0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037ec:	4a06      	ldr	r2, [pc, #24]	; (8003808 <HAL_InitTick+0x5c>)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
 80037f4:	e000      	b.n	80037f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3708      	adds	r7, #8
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	20006c38 	.word	0x20006c38
 8003804:	20006c40 	.word	0x20006c40
 8003808:	20006c3c 	.word	0x20006c3c

0800380c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003810:	4b06      	ldr	r3, [pc, #24]	; (800382c <HAL_IncTick+0x20>)
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	461a      	mov	r2, r3
 8003816:	4b06      	ldr	r3, [pc, #24]	; (8003830 <HAL_IncTick+0x24>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4413      	add	r3, r2
 800381c:	4a04      	ldr	r2, [pc, #16]	; (8003830 <HAL_IncTick+0x24>)
 800381e:	6013      	str	r3, [r2, #0]
}
 8003820:	bf00      	nop
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	20006c40 	.word	0x20006c40
 8003830:	20007510 	.word	0x20007510

08003834 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
  return uwTick;
 8003838:	4b03      	ldr	r3, [pc, #12]	; (8003848 <HAL_GetTick+0x14>)
 800383a:	681b      	ldr	r3, [r3, #0]
}
 800383c:	4618      	mov	r0, r3
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	20007510 	.word	0x20007510

0800384c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003854:	f7ff ffee 	bl	8003834 <HAL_GetTick>
 8003858:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003864:	d005      	beq.n	8003872 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003866:	4b0a      	ldr	r3, [pc, #40]	; (8003890 <HAL_Delay+0x44>)
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	461a      	mov	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	4413      	add	r3, r2
 8003870:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003872:	bf00      	nop
 8003874:	f7ff ffde 	bl	8003834 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	429a      	cmp	r2, r3
 8003882:	d8f7      	bhi.n	8003874 <HAL_Delay+0x28>
  {
  }
}
 8003884:	bf00      	nop
 8003886:	bf00      	nop
 8003888:	3710      	adds	r7, #16
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	20006c40 	.word	0x20006c40

08003894 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f003 0307 	and.w	r3, r3, #7
 80038a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038a4:	4b0c      	ldr	r3, [pc, #48]	; (80038d8 <__NVIC_SetPriorityGrouping+0x44>)
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038aa:	68ba      	ldr	r2, [r7, #8]
 80038ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038b0:	4013      	ands	r3, r2
 80038b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038c6:	4a04      	ldr	r2, [pc, #16]	; (80038d8 <__NVIC_SetPriorityGrouping+0x44>)
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	60d3      	str	r3, [r2, #12]
}
 80038cc:	bf00      	nop
 80038ce:	3714      	adds	r7, #20
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr
 80038d8:	e000ed00 	.word	0xe000ed00

080038dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038e0:	4b04      	ldr	r3, [pc, #16]	; (80038f4 <__NVIC_GetPriorityGrouping+0x18>)
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	0a1b      	lsrs	r3, r3, #8
 80038e6:	f003 0307 	and.w	r3, r3, #7
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr
 80038f4:	e000ed00 	.word	0xe000ed00

080038f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	4603      	mov	r3, r0
 8003900:	6039      	str	r1, [r7, #0]
 8003902:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003908:	2b00      	cmp	r3, #0
 800390a:	db0a      	blt.n	8003922 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	b2da      	uxtb	r2, r3
 8003910:	490c      	ldr	r1, [pc, #48]	; (8003944 <__NVIC_SetPriority+0x4c>)
 8003912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003916:	0112      	lsls	r2, r2, #4
 8003918:	b2d2      	uxtb	r2, r2
 800391a:	440b      	add	r3, r1
 800391c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003920:	e00a      	b.n	8003938 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	b2da      	uxtb	r2, r3
 8003926:	4908      	ldr	r1, [pc, #32]	; (8003948 <__NVIC_SetPriority+0x50>)
 8003928:	79fb      	ldrb	r3, [r7, #7]
 800392a:	f003 030f 	and.w	r3, r3, #15
 800392e:	3b04      	subs	r3, #4
 8003930:	0112      	lsls	r2, r2, #4
 8003932:	b2d2      	uxtb	r2, r2
 8003934:	440b      	add	r3, r1
 8003936:	761a      	strb	r2, [r3, #24]
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr
 8003944:	e000e100 	.word	0xe000e100
 8003948:	e000ed00 	.word	0xe000ed00

0800394c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800394c:	b480      	push	{r7}
 800394e:	b089      	sub	sp, #36	; 0x24
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f003 0307 	and.w	r3, r3, #7
 800395e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	f1c3 0307 	rsb	r3, r3, #7
 8003966:	2b04      	cmp	r3, #4
 8003968:	bf28      	it	cs
 800396a:	2304      	movcs	r3, #4
 800396c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	3304      	adds	r3, #4
 8003972:	2b06      	cmp	r3, #6
 8003974:	d902      	bls.n	800397c <NVIC_EncodePriority+0x30>
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	3b03      	subs	r3, #3
 800397a:	e000      	b.n	800397e <NVIC_EncodePriority+0x32>
 800397c:	2300      	movs	r3, #0
 800397e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003980:	f04f 32ff 	mov.w	r2, #4294967295
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	fa02 f303 	lsl.w	r3, r2, r3
 800398a:	43da      	mvns	r2, r3
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	401a      	ands	r2, r3
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003994:	f04f 31ff 	mov.w	r1, #4294967295
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	fa01 f303 	lsl.w	r3, r1, r3
 800399e:	43d9      	mvns	r1, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039a4:	4313      	orrs	r3, r2
         );
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3724      	adds	r7, #36	; 0x24
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
	...

080039b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	3b01      	subs	r3, #1
 80039c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039c4:	d301      	bcc.n	80039ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039c6:	2301      	movs	r3, #1
 80039c8:	e00f      	b.n	80039ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039ca:	4a0a      	ldr	r2, [pc, #40]	; (80039f4 <SysTick_Config+0x40>)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	3b01      	subs	r3, #1
 80039d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039d2:	210f      	movs	r1, #15
 80039d4:	f04f 30ff 	mov.w	r0, #4294967295
 80039d8:	f7ff ff8e 	bl	80038f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039dc:	4b05      	ldr	r3, [pc, #20]	; (80039f4 <SysTick_Config+0x40>)
 80039de:	2200      	movs	r2, #0
 80039e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039e2:	4b04      	ldr	r3, [pc, #16]	; (80039f4 <SysTick_Config+0x40>)
 80039e4:	2207      	movs	r2, #7
 80039e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	e000e010 	.word	0xe000e010

080039f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f7ff ff47 	bl	8003894 <__NVIC_SetPriorityGrouping>
}
 8003a06:	bf00      	nop
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b086      	sub	sp, #24
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	4603      	mov	r3, r0
 8003a16:	60b9      	str	r1, [r7, #8]
 8003a18:	607a      	str	r2, [r7, #4]
 8003a1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a20:	f7ff ff5c 	bl	80038dc <__NVIC_GetPriorityGrouping>
 8003a24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	68b9      	ldr	r1, [r7, #8]
 8003a2a:	6978      	ldr	r0, [r7, #20]
 8003a2c:	f7ff ff8e 	bl	800394c <NVIC_EncodePriority>
 8003a30:	4602      	mov	r2, r0
 8003a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a36:	4611      	mov	r1, r2
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7ff ff5d 	bl	80038f8 <__NVIC_SetPriority>
}
 8003a3e:	bf00      	nop
 8003a40:	3718      	adds	r7, #24
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b082      	sub	sp, #8
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f7ff ffb0 	bl	80039b4 <SysTick_Config>
 8003a54:	4603      	mov	r3, r0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b082      	sub	sp, #8
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d101      	bne.n	8003a70 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e00e      	b.n	8003a8e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	795b      	ldrb	r3, [r3, #5]
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d105      	bne.n	8003a86 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f7ff fcdb 	bl	800343c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3708      	adds	r7, #8
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
	...

08003a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b089      	sub	sp, #36	; 0x24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aae:	2300      	movs	r3, #0
 8003ab0:	61fb      	str	r3, [r7, #28]
 8003ab2:	e165      	b.n	8003d80 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	f040 8154 	bne.w	8003d7a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f003 0303 	and.w	r3, r3, #3
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d005      	beq.n	8003aea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d130      	bne.n	8003b4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	2203      	movs	r2, #3
 8003af6:	fa02 f303 	lsl.w	r3, r2, r3
 8003afa:	43db      	mvns	r3, r3
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	4013      	ands	r3, r2
 8003b00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	68da      	ldr	r2, [r3, #12]
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	69ba      	ldr	r2, [r7, #24]
 8003b18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b20:	2201      	movs	r2, #1
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	fa02 f303 	lsl.w	r3, r2, r3
 8003b28:	43db      	mvns	r3, r3
 8003b2a:	69ba      	ldr	r2, [r7, #24]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	091b      	lsrs	r3, r3, #4
 8003b36:	f003 0201 	and.w	r2, r3, #1
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f003 0303 	and.w	r3, r3, #3
 8003b54:	2b03      	cmp	r3, #3
 8003b56:	d017      	beq.n	8003b88 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	2203      	movs	r2, #3
 8003b64:	fa02 f303 	lsl.w	r3, r2, r3
 8003b68:	43db      	mvns	r3, r3
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	689a      	ldr	r2, [r3, #8]
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f003 0303 	and.w	r3, r3, #3
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d123      	bne.n	8003bdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	08da      	lsrs	r2, r3, #3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	3208      	adds	r2, #8
 8003b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	f003 0307 	and.w	r3, r3, #7
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	220f      	movs	r2, #15
 8003bac:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb0:	43db      	mvns	r3, r3
 8003bb2:	69ba      	ldr	r2, [r7, #24]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	691a      	ldr	r2, [r3, #16]
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	f003 0307 	and.w	r3, r3, #7
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	08da      	lsrs	r2, r3, #3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	3208      	adds	r2, #8
 8003bd6:	69b9      	ldr	r1, [r7, #24]
 8003bd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	2203      	movs	r2, #3
 8003be8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bec:	43db      	mvns	r3, r3
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f003 0203 	and.w	r2, r3, #3
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	fa02 f303 	lsl.w	r3, r2, r3
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 80ae 	beq.w	8003d7a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c1e:	2300      	movs	r3, #0
 8003c20:	60fb      	str	r3, [r7, #12]
 8003c22:	4b5d      	ldr	r3, [pc, #372]	; (8003d98 <HAL_GPIO_Init+0x300>)
 8003c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c26:	4a5c      	ldr	r2, [pc, #368]	; (8003d98 <HAL_GPIO_Init+0x300>)
 8003c28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8003c2e:	4b5a      	ldr	r3, [pc, #360]	; (8003d98 <HAL_GPIO_Init+0x300>)
 8003c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c36:	60fb      	str	r3, [r7, #12]
 8003c38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c3a:	4a58      	ldr	r2, [pc, #352]	; (8003d9c <HAL_GPIO_Init+0x304>)
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	089b      	lsrs	r3, r3, #2
 8003c40:	3302      	adds	r3, #2
 8003c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	f003 0303 	and.w	r3, r3, #3
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	220f      	movs	r2, #15
 8003c52:	fa02 f303 	lsl.w	r3, r2, r3
 8003c56:	43db      	mvns	r3, r3
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a4f      	ldr	r2, [pc, #316]	; (8003da0 <HAL_GPIO_Init+0x308>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d025      	beq.n	8003cb2 <HAL_GPIO_Init+0x21a>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a4e      	ldr	r2, [pc, #312]	; (8003da4 <HAL_GPIO_Init+0x30c>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d01f      	beq.n	8003cae <HAL_GPIO_Init+0x216>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a4d      	ldr	r2, [pc, #308]	; (8003da8 <HAL_GPIO_Init+0x310>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d019      	beq.n	8003caa <HAL_GPIO_Init+0x212>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a4c      	ldr	r2, [pc, #304]	; (8003dac <HAL_GPIO_Init+0x314>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d013      	beq.n	8003ca6 <HAL_GPIO_Init+0x20e>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a4b      	ldr	r2, [pc, #300]	; (8003db0 <HAL_GPIO_Init+0x318>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d00d      	beq.n	8003ca2 <HAL_GPIO_Init+0x20a>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a4a      	ldr	r2, [pc, #296]	; (8003db4 <HAL_GPIO_Init+0x31c>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d007      	beq.n	8003c9e <HAL_GPIO_Init+0x206>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a49      	ldr	r2, [pc, #292]	; (8003db8 <HAL_GPIO_Init+0x320>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d101      	bne.n	8003c9a <HAL_GPIO_Init+0x202>
 8003c96:	2306      	movs	r3, #6
 8003c98:	e00c      	b.n	8003cb4 <HAL_GPIO_Init+0x21c>
 8003c9a:	2307      	movs	r3, #7
 8003c9c:	e00a      	b.n	8003cb4 <HAL_GPIO_Init+0x21c>
 8003c9e:	2305      	movs	r3, #5
 8003ca0:	e008      	b.n	8003cb4 <HAL_GPIO_Init+0x21c>
 8003ca2:	2304      	movs	r3, #4
 8003ca4:	e006      	b.n	8003cb4 <HAL_GPIO_Init+0x21c>
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e004      	b.n	8003cb4 <HAL_GPIO_Init+0x21c>
 8003caa:	2302      	movs	r3, #2
 8003cac:	e002      	b.n	8003cb4 <HAL_GPIO_Init+0x21c>
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e000      	b.n	8003cb4 <HAL_GPIO_Init+0x21c>
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	69fa      	ldr	r2, [r7, #28]
 8003cb6:	f002 0203 	and.w	r2, r2, #3
 8003cba:	0092      	lsls	r2, r2, #2
 8003cbc:	4093      	lsls	r3, r2
 8003cbe:	69ba      	ldr	r2, [r7, #24]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cc4:	4935      	ldr	r1, [pc, #212]	; (8003d9c <HAL_GPIO_Init+0x304>)
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	089b      	lsrs	r3, r3, #2
 8003cca:	3302      	adds	r3, #2
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cd2:	4b3a      	ldr	r3, [pc, #232]	; (8003dbc <HAL_GPIO_Init+0x324>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	43db      	mvns	r3, r3
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	4013      	ands	r3, r2
 8003ce0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d003      	beq.n	8003cf6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003cf6:	4a31      	ldr	r2, [pc, #196]	; (8003dbc <HAL_GPIO_Init+0x324>)
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003cfc:	4b2f      	ldr	r3, [pc, #188]	; (8003dbc <HAL_GPIO_Init+0x324>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	43db      	mvns	r3, r3
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	4013      	ands	r3, r2
 8003d0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d003      	beq.n	8003d20 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003d18:	69ba      	ldr	r2, [r7, #24]
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d20:	4a26      	ldr	r2, [pc, #152]	; (8003dbc <HAL_GPIO_Init+0x324>)
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d26:	4b25      	ldr	r3, [pc, #148]	; (8003dbc <HAL_GPIO_Init+0x324>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	43db      	mvns	r3, r3
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	4013      	ands	r3, r2
 8003d34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d003      	beq.n	8003d4a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d4a:	4a1c      	ldr	r2, [pc, #112]	; (8003dbc <HAL_GPIO_Init+0x324>)
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d50:	4b1a      	ldr	r3, [pc, #104]	; (8003dbc <HAL_GPIO_Init+0x324>)
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	43db      	mvns	r3, r3
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d003      	beq.n	8003d74 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d74:	4a11      	ldr	r2, [pc, #68]	; (8003dbc <HAL_GPIO_Init+0x324>)
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	61fb      	str	r3, [r7, #28]
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	2b0f      	cmp	r3, #15
 8003d84:	f67f ae96 	bls.w	8003ab4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d88:	bf00      	nop
 8003d8a:	bf00      	nop
 8003d8c:	3724      	adds	r7, #36	; 0x24
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	40023800 	.word	0x40023800
 8003d9c:	40013800 	.word	0x40013800
 8003da0:	40020000 	.word	0x40020000
 8003da4:	40020400 	.word	0x40020400
 8003da8:	40020800 	.word	0x40020800
 8003dac:	40020c00 	.word	0x40020c00
 8003db0:	40021000 	.word	0x40021000
 8003db4:	40021400 	.word	0x40021400
 8003db8:	40021800 	.word	0x40021800
 8003dbc:	40013c00 	.word	0x40013c00

08003dc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	460b      	mov	r3, r1
 8003dca:	807b      	strh	r3, [r7, #2]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003dd0:	787b      	ldrb	r3, [r7, #1]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d003      	beq.n	8003dde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003dd6:	887a      	ldrh	r2, [r7, #2]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ddc:	e003      	b.n	8003de6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003dde:	887b      	ldrh	r3, [r7, #2]
 8003de0:	041a      	lsls	r2, r3, #16
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	619a      	str	r2, [r3, #24]
}
 8003de6:	bf00      	nop
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
	...

08003df4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d101      	bne.n	8003e08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e0cc      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e08:	4b68      	ldr	r3, [pc, #416]	; (8003fac <HAL_RCC_ClockConfig+0x1b8>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 030f 	and.w	r3, r3, #15
 8003e10:	683a      	ldr	r2, [r7, #0]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d90c      	bls.n	8003e30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e16:	4b65      	ldr	r3, [pc, #404]	; (8003fac <HAL_RCC_ClockConfig+0x1b8>)
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	b2d2      	uxtb	r2, r2
 8003e1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e1e:	4b63      	ldr	r3, [pc, #396]	; (8003fac <HAL_RCC_ClockConfig+0x1b8>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 030f 	and.w	r3, r3, #15
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d001      	beq.n	8003e30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e0b8      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0302 	and.w	r3, r3, #2
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d020      	beq.n	8003e7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0304 	and.w	r3, r3, #4
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d005      	beq.n	8003e54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e48:	4b59      	ldr	r3, [pc, #356]	; (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	4a58      	ldr	r2, [pc, #352]	; (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0308 	and.w	r3, r3, #8
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d005      	beq.n	8003e6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e60:	4b53      	ldr	r3, [pc, #332]	; (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	4a52      	ldr	r2, [pc, #328]	; (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e6c:	4b50      	ldr	r3, [pc, #320]	; (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	494d      	ldr	r1, [pc, #308]	; (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d044      	beq.n	8003f14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d107      	bne.n	8003ea2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e92:	4b47      	ldr	r3, [pc, #284]	; (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d119      	bne.n	8003ed2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e07f      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d003      	beq.n	8003eb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eae:	2b03      	cmp	r3, #3
 8003eb0:	d107      	bne.n	8003ec2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eb2:	4b3f      	ldr	r3, [pc, #252]	; (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d109      	bne.n	8003ed2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e06f      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ec2:	4b3b      	ldr	r3, [pc, #236]	; (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e067      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ed2:	4b37      	ldr	r3, [pc, #220]	; (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f023 0203 	bic.w	r2, r3, #3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	4934      	ldr	r1, [pc, #208]	; (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ee4:	f7ff fca6 	bl	8003834 <HAL_GetTick>
 8003ee8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eea:	e00a      	b.n	8003f02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eec:	f7ff fca2 	bl	8003834 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e04f      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f02:	4b2b      	ldr	r3, [pc, #172]	; (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f003 020c 	and.w	r2, r3, #12
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d1eb      	bne.n	8003eec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f14:	4b25      	ldr	r3, [pc, #148]	; (8003fac <HAL_RCC_ClockConfig+0x1b8>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 030f 	and.w	r3, r3, #15
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d20c      	bcs.n	8003f3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f22:	4b22      	ldr	r3, [pc, #136]	; (8003fac <HAL_RCC_ClockConfig+0x1b8>)
 8003f24:	683a      	ldr	r2, [r7, #0]
 8003f26:	b2d2      	uxtb	r2, r2
 8003f28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f2a:	4b20      	ldr	r3, [pc, #128]	; (8003fac <HAL_RCC_ClockConfig+0x1b8>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 030f 	and.w	r3, r3, #15
 8003f32:	683a      	ldr	r2, [r7, #0]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d001      	beq.n	8003f3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e032      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0304 	and.w	r3, r3, #4
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d008      	beq.n	8003f5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f48:	4b19      	ldr	r3, [pc, #100]	; (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	4916      	ldr	r1, [pc, #88]	; (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0308 	and.w	r3, r3, #8
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d009      	beq.n	8003f7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f66:	4b12      	ldr	r3, [pc, #72]	; (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	490e      	ldr	r1, [pc, #56]	; (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f7a:	f000 f855 	bl	8004028 <HAL_RCC_GetSysClockFreq>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	4b0b      	ldr	r3, [pc, #44]	; (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	091b      	lsrs	r3, r3, #4
 8003f86:	f003 030f 	and.w	r3, r3, #15
 8003f8a:	490a      	ldr	r1, [pc, #40]	; (8003fb4 <HAL_RCC_ClockConfig+0x1c0>)
 8003f8c:	5ccb      	ldrb	r3, [r1, r3]
 8003f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f92:	4a09      	ldr	r2, [pc, #36]	; (8003fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f96:	4b09      	ldr	r3, [pc, #36]	; (8003fbc <HAL_RCC_ClockConfig+0x1c8>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7ff fc06 	bl	80037ac <HAL_InitTick>

  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	40023c00 	.word	0x40023c00
 8003fb0:	40023800 	.word	0x40023800
 8003fb4:	08011764 	.word	0x08011764
 8003fb8:	20006c38 	.word	0x20006c38
 8003fbc:	20006c3c 	.word	0x20006c3c

08003fc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fc4:	4b03      	ldr	r3, [pc, #12]	; (8003fd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	20006c38 	.word	0x20006c38

08003fd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003fdc:	f7ff fff0 	bl	8003fc0 <HAL_RCC_GetHCLKFreq>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	4b05      	ldr	r3, [pc, #20]	; (8003ff8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	0a9b      	lsrs	r3, r3, #10
 8003fe8:	f003 0307 	and.w	r3, r3, #7
 8003fec:	4903      	ldr	r1, [pc, #12]	; (8003ffc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fee:	5ccb      	ldrb	r3, [r1, r3]
 8003ff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	40023800 	.word	0x40023800
 8003ffc:	08011774 	.word	0x08011774

08004000 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004004:	f7ff ffdc 	bl	8003fc0 <HAL_RCC_GetHCLKFreq>
 8004008:	4602      	mov	r2, r0
 800400a:	4b05      	ldr	r3, [pc, #20]	; (8004020 <HAL_RCC_GetPCLK2Freq+0x20>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	0b5b      	lsrs	r3, r3, #13
 8004010:	f003 0307 	and.w	r3, r3, #7
 8004014:	4903      	ldr	r1, [pc, #12]	; (8004024 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004016:	5ccb      	ldrb	r3, [r1, r3]
 8004018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800401c:	4618      	mov	r0, r3
 800401e:	bd80      	pop	{r7, pc}
 8004020:	40023800 	.word	0x40023800
 8004024:	08011774 	.word	0x08011774

08004028 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800402c:	b088      	sub	sp, #32
 800402e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004030:	2300      	movs	r3, #0
 8004032:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8004034:	2300      	movs	r3, #0
 8004036:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8004038:	2300      	movs	r3, #0
 800403a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 800403c:	2300      	movs	r3, #0
 800403e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8004040:	2300      	movs	r3, #0
 8004042:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004044:	4bce      	ldr	r3, [pc, #824]	; (8004380 <HAL_RCC_GetSysClockFreq+0x358>)
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f003 030c 	and.w	r3, r3, #12
 800404c:	2b0c      	cmp	r3, #12
 800404e:	f200 818d 	bhi.w	800436c <HAL_RCC_GetSysClockFreq+0x344>
 8004052:	a201      	add	r2, pc, #4	; (adr r2, 8004058 <HAL_RCC_GetSysClockFreq+0x30>)
 8004054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004058:	0800408d 	.word	0x0800408d
 800405c:	0800436d 	.word	0x0800436d
 8004060:	0800436d 	.word	0x0800436d
 8004064:	0800436d 	.word	0x0800436d
 8004068:	08004093 	.word	0x08004093
 800406c:	0800436d 	.word	0x0800436d
 8004070:	0800436d 	.word	0x0800436d
 8004074:	0800436d 	.word	0x0800436d
 8004078:	08004099 	.word	0x08004099
 800407c:	0800436d 	.word	0x0800436d
 8004080:	0800436d 	.word	0x0800436d
 8004084:	0800436d 	.word	0x0800436d
 8004088:	0800420d 	.word	0x0800420d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800408c:	4bbd      	ldr	r3, [pc, #756]	; (8004384 <HAL_RCC_GetSysClockFreq+0x35c>)
 800408e:	61bb      	str	r3, [r7, #24]
       break;
 8004090:	e16f      	b.n	8004372 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004092:	4bbd      	ldr	r3, [pc, #756]	; (8004388 <HAL_RCC_GetSysClockFreq+0x360>)
 8004094:	61bb      	str	r3, [r7, #24]
      break;
 8004096:	e16c      	b.n	8004372 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004098:	4bb9      	ldr	r3, [pc, #740]	; (8004380 <HAL_RCC_GetSysClockFreq+0x358>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040a0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040a2:	4bb7      	ldr	r3, [pc, #732]	; (8004380 <HAL_RCC_GetSysClockFreq+0x358>)
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d053      	beq.n	8004156 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040ae:	4bb4      	ldr	r3, [pc, #720]	; (8004380 <HAL_RCC_GetSysClockFreq+0x358>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	099b      	lsrs	r3, r3, #6
 80040b4:	461a      	mov	r2, r3
 80040b6:	f04f 0300 	mov.w	r3, #0
 80040ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80040be:	f04f 0100 	mov.w	r1, #0
 80040c2:	ea02 0400 	and.w	r4, r2, r0
 80040c6:	603c      	str	r4, [r7, #0]
 80040c8:	400b      	ands	r3, r1
 80040ca:	607b      	str	r3, [r7, #4]
 80040cc:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040d0:	4620      	mov	r0, r4
 80040d2:	4629      	mov	r1, r5
 80040d4:	f04f 0200 	mov.w	r2, #0
 80040d8:	f04f 0300 	mov.w	r3, #0
 80040dc:	014b      	lsls	r3, r1, #5
 80040de:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80040e2:	0142      	lsls	r2, r0, #5
 80040e4:	4610      	mov	r0, r2
 80040e6:	4619      	mov	r1, r3
 80040e8:	4623      	mov	r3, r4
 80040ea:	1ac0      	subs	r0, r0, r3
 80040ec:	462b      	mov	r3, r5
 80040ee:	eb61 0103 	sbc.w	r1, r1, r3
 80040f2:	f04f 0200 	mov.w	r2, #0
 80040f6:	f04f 0300 	mov.w	r3, #0
 80040fa:	018b      	lsls	r3, r1, #6
 80040fc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004100:	0182      	lsls	r2, r0, #6
 8004102:	1a12      	subs	r2, r2, r0
 8004104:	eb63 0301 	sbc.w	r3, r3, r1
 8004108:	f04f 0000 	mov.w	r0, #0
 800410c:	f04f 0100 	mov.w	r1, #0
 8004110:	00d9      	lsls	r1, r3, #3
 8004112:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004116:	00d0      	lsls	r0, r2, #3
 8004118:	4602      	mov	r2, r0
 800411a:	460b      	mov	r3, r1
 800411c:	4621      	mov	r1, r4
 800411e:	1852      	adds	r2, r2, r1
 8004120:	4629      	mov	r1, r5
 8004122:	eb43 0101 	adc.w	r1, r3, r1
 8004126:	460b      	mov	r3, r1
 8004128:	f04f 0000 	mov.w	r0, #0
 800412c:	f04f 0100 	mov.w	r1, #0
 8004130:	0259      	lsls	r1, r3, #9
 8004132:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004136:	0250      	lsls	r0, r2, #9
 8004138:	4602      	mov	r2, r0
 800413a:	460b      	mov	r3, r1
 800413c:	4610      	mov	r0, r2
 800413e:	4619      	mov	r1, r3
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	461a      	mov	r2, r3
 8004144:	f04f 0300 	mov.w	r3, #0
 8004148:	f7fc fdce 	bl	8000ce8 <__aeabi_uldivmod>
 800414c:	4602      	mov	r2, r0
 800414e:	460b      	mov	r3, r1
 8004150:	4613      	mov	r3, r2
 8004152:	61fb      	str	r3, [r7, #28]
 8004154:	e04c      	b.n	80041f0 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004156:	4b8a      	ldr	r3, [pc, #552]	; (8004380 <HAL_RCC_GetSysClockFreq+0x358>)
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	099b      	lsrs	r3, r3, #6
 800415c:	461a      	mov	r2, r3
 800415e:	f04f 0300 	mov.w	r3, #0
 8004162:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004166:	f04f 0100 	mov.w	r1, #0
 800416a:	ea02 0a00 	and.w	sl, r2, r0
 800416e:	ea03 0b01 	and.w	fp, r3, r1
 8004172:	4650      	mov	r0, sl
 8004174:	4659      	mov	r1, fp
 8004176:	f04f 0200 	mov.w	r2, #0
 800417a:	f04f 0300 	mov.w	r3, #0
 800417e:	014b      	lsls	r3, r1, #5
 8004180:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004184:	0142      	lsls	r2, r0, #5
 8004186:	4610      	mov	r0, r2
 8004188:	4619      	mov	r1, r3
 800418a:	ebb0 000a 	subs.w	r0, r0, sl
 800418e:	eb61 010b 	sbc.w	r1, r1, fp
 8004192:	f04f 0200 	mov.w	r2, #0
 8004196:	f04f 0300 	mov.w	r3, #0
 800419a:	018b      	lsls	r3, r1, #6
 800419c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80041a0:	0182      	lsls	r2, r0, #6
 80041a2:	1a12      	subs	r2, r2, r0
 80041a4:	eb63 0301 	sbc.w	r3, r3, r1
 80041a8:	f04f 0000 	mov.w	r0, #0
 80041ac:	f04f 0100 	mov.w	r1, #0
 80041b0:	00d9      	lsls	r1, r3, #3
 80041b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041b6:	00d0      	lsls	r0, r2, #3
 80041b8:	4602      	mov	r2, r0
 80041ba:	460b      	mov	r3, r1
 80041bc:	eb12 020a 	adds.w	r2, r2, sl
 80041c0:	eb43 030b 	adc.w	r3, r3, fp
 80041c4:	f04f 0000 	mov.w	r0, #0
 80041c8:	f04f 0100 	mov.w	r1, #0
 80041cc:	0299      	lsls	r1, r3, #10
 80041ce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80041d2:	0290      	lsls	r0, r2, #10
 80041d4:	4602      	mov	r2, r0
 80041d6:	460b      	mov	r3, r1
 80041d8:	4610      	mov	r0, r2
 80041da:	4619      	mov	r1, r3
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	461a      	mov	r2, r3
 80041e0:	f04f 0300 	mov.w	r3, #0
 80041e4:	f7fc fd80 	bl	8000ce8 <__aeabi_uldivmod>
 80041e8:	4602      	mov	r2, r0
 80041ea:	460b      	mov	r3, r1
 80041ec:	4613      	mov	r3, r2
 80041ee:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041f0:	4b63      	ldr	r3, [pc, #396]	; (8004380 <HAL_RCC_GetSysClockFreq+0x358>)
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	0c1b      	lsrs	r3, r3, #16
 80041f6:	f003 0303 	and.w	r3, r3, #3
 80041fa:	3301      	adds	r3, #1
 80041fc:	005b      	lsls	r3, r3, #1
 80041fe:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8004200:	69fa      	ldr	r2, [r7, #28]
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	fbb2 f3f3 	udiv	r3, r2, r3
 8004208:	61bb      	str	r3, [r7, #24]
      break;
 800420a:	e0b2      	b.n	8004372 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800420c:	4b5c      	ldr	r3, [pc, #368]	; (8004380 <HAL_RCC_GetSysClockFreq+0x358>)
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004214:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004216:	4b5a      	ldr	r3, [pc, #360]	; (8004380 <HAL_RCC_GetSysClockFreq+0x358>)
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d04d      	beq.n	80042be <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004222:	4b57      	ldr	r3, [pc, #348]	; (8004380 <HAL_RCC_GetSysClockFreq+0x358>)
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	099b      	lsrs	r3, r3, #6
 8004228:	461a      	mov	r2, r3
 800422a:	f04f 0300 	mov.w	r3, #0
 800422e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004232:	f04f 0100 	mov.w	r1, #0
 8004236:	ea02 0800 	and.w	r8, r2, r0
 800423a:	ea03 0901 	and.w	r9, r3, r1
 800423e:	4640      	mov	r0, r8
 8004240:	4649      	mov	r1, r9
 8004242:	f04f 0200 	mov.w	r2, #0
 8004246:	f04f 0300 	mov.w	r3, #0
 800424a:	014b      	lsls	r3, r1, #5
 800424c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004250:	0142      	lsls	r2, r0, #5
 8004252:	4610      	mov	r0, r2
 8004254:	4619      	mov	r1, r3
 8004256:	ebb0 0008 	subs.w	r0, r0, r8
 800425a:	eb61 0109 	sbc.w	r1, r1, r9
 800425e:	f04f 0200 	mov.w	r2, #0
 8004262:	f04f 0300 	mov.w	r3, #0
 8004266:	018b      	lsls	r3, r1, #6
 8004268:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800426c:	0182      	lsls	r2, r0, #6
 800426e:	1a12      	subs	r2, r2, r0
 8004270:	eb63 0301 	sbc.w	r3, r3, r1
 8004274:	f04f 0000 	mov.w	r0, #0
 8004278:	f04f 0100 	mov.w	r1, #0
 800427c:	00d9      	lsls	r1, r3, #3
 800427e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004282:	00d0      	lsls	r0, r2, #3
 8004284:	4602      	mov	r2, r0
 8004286:	460b      	mov	r3, r1
 8004288:	eb12 0208 	adds.w	r2, r2, r8
 800428c:	eb43 0309 	adc.w	r3, r3, r9
 8004290:	f04f 0000 	mov.w	r0, #0
 8004294:	f04f 0100 	mov.w	r1, #0
 8004298:	0259      	lsls	r1, r3, #9
 800429a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800429e:	0250      	lsls	r0, r2, #9
 80042a0:	4602      	mov	r2, r0
 80042a2:	460b      	mov	r3, r1
 80042a4:	4610      	mov	r0, r2
 80042a6:	4619      	mov	r1, r3
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	461a      	mov	r2, r3
 80042ac:	f04f 0300 	mov.w	r3, #0
 80042b0:	f7fc fd1a 	bl	8000ce8 <__aeabi_uldivmod>
 80042b4:	4602      	mov	r2, r0
 80042b6:	460b      	mov	r3, r1
 80042b8:	4613      	mov	r3, r2
 80042ba:	61fb      	str	r3, [r7, #28]
 80042bc:	e04a      	b.n	8004354 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042be:	4b30      	ldr	r3, [pc, #192]	; (8004380 <HAL_RCC_GetSysClockFreq+0x358>)
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	099b      	lsrs	r3, r3, #6
 80042c4:	461a      	mov	r2, r3
 80042c6:	f04f 0300 	mov.w	r3, #0
 80042ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80042ce:	f04f 0100 	mov.w	r1, #0
 80042d2:	ea02 0400 	and.w	r4, r2, r0
 80042d6:	ea03 0501 	and.w	r5, r3, r1
 80042da:	4620      	mov	r0, r4
 80042dc:	4629      	mov	r1, r5
 80042de:	f04f 0200 	mov.w	r2, #0
 80042e2:	f04f 0300 	mov.w	r3, #0
 80042e6:	014b      	lsls	r3, r1, #5
 80042e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80042ec:	0142      	lsls	r2, r0, #5
 80042ee:	4610      	mov	r0, r2
 80042f0:	4619      	mov	r1, r3
 80042f2:	1b00      	subs	r0, r0, r4
 80042f4:	eb61 0105 	sbc.w	r1, r1, r5
 80042f8:	f04f 0200 	mov.w	r2, #0
 80042fc:	f04f 0300 	mov.w	r3, #0
 8004300:	018b      	lsls	r3, r1, #6
 8004302:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004306:	0182      	lsls	r2, r0, #6
 8004308:	1a12      	subs	r2, r2, r0
 800430a:	eb63 0301 	sbc.w	r3, r3, r1
 800430e:	f04f 0000 	mov.w	r0, #0
 8004312:	f04f 0100 	mov.w	r1, #0
 8004316:	00d9      	lsls	r1, r3, #3
 8004318:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800431c:	00d0      	lsls	r0, r2, #3
 800431e:	4602      	mov	r2, r0
 8004320:	460b      	mov	r3, r1
 8004322:	1912      	adds	r2, r2, r4
 8004324:	eb45 0303 	adc.w	r3, r5, r3
 8004328:	f04f 0000 	mov.w	r0, #0
 800432c:	f04f 0100 	mov.w	r1, #0
 8004330:	0299      	lsls	r1, r3, #10
 8004332:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004336:	0290      	lsls	r0, r2, #10
 8004338:	4602      	mov	r2, r0
 800433a:	460b      	mov	r3, r1
 800433c:	4610      	mov	r0, r2
 800433e:	4619      	mov	r1, r3
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	461a      	mov	r2, r3
 8004344:	f04f 0300 	mov.w	r3, #0
 8004348:	f7fc fcce 	bl	8000ce8 <__aeabi_uldivmod>
 800434c:	4602      	mov	r2, r0
 800434e:	460b      	mov	r3, r1
 8004350:	4613      	mov	r3, r2
 8004352:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004354:	4b0a      	ldr	r3, [pc, #40]	; (8004380 <HAL_RCC_GetSysClockFreq+0x358>)
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	0f1b      	lsrs	r3, r3, #28
 800435a:	f003 0307 	and.w	r3, r3, #7
 800435e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8004360:	69fa      	ldr	r2, [r7, #28]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	fbb2 f3f3 	udiv	r3, r2, r3
 8004368:	61bb      	str	r3, [r7, #24]
      break;
 800436a:	e002      	b.n	8004372 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800436c:	4b05      	ldr	r3, [pc, #20]	; (8004384 <HAL_RCC_GetSysClockFreq+0x35c>)
 800436e:	61bb      	str	r3, [r7, #24]
      break;
 8004370:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004372:	69bb      	ldr	r3, [r7, #24]
}
 8004374:	4618      	mov	r0, r3
 8004376:	3720      	adds	r7, #32
 8004378:	46bd      	mov	sp, r7
 800437a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800437e:	bf00      	nop
 8004380:	40023800 	.word	0x40023800
 8004384:	00f42400 	.word	0x00f42400
 8004388:	007a1200 	.word	0x007a1200

0800438c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b086      	sub	sp, #24
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e28d      	b.n	80048ba <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	f000 8083 	beq.w	80044b2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80043ac:	4b94      	ldr	r3, [pc, #592]	; (8004600 <HAL_RCC_OscConfig+0x274>)
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f003 030c 	and.w	r3, r3, #12
 80043b4:	2b04      	cmp	r3, #4
 80043b6:	d019      	beq.n	80043ec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80043b8:	4b91      	ldr	r3, [pc, #580]	; (8004600 <HAL_RCC_OscConfig+0x274>)
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80043c0:	2b08      	cmp	r3, #8
 80043c2:	d106      	bne.n	80043d2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80043c4:	4b8e      	ldr	r3, [pc, #568]	; (8004600 <HAL_RCC_OscConfig+0x274>)
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043d0:	d00c      	beq.n	80043ec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043d2:	4b8b      	ldr	r3, [pc, #556]	; (8004600 <HAL_RCC_OscConfig+0x274>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80043da:	2b0c      	cmp	r3, #12
 80043dc:	d112      	bne.n	8004404 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043de:	4b88      	ldr	r3, [pc, #544]	; (8004600 <HAL_RCC_OscConfig+0x274>)
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043ea:	d10b      	bne.n	8004404 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043ec:	4b84      	ldr	r3, [pc, #528]	; (8004600 <HAL_RCC_OscConfig+0x274>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d05b      	beq.n	80044b0 <HAL_RCC_OscConfig+0x124>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d157      	bne.n	80044b0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e25a      	b.n	80048ba <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800440c:	d106      	bne.n	800441c <HAL_RCC_OscConfig+0x90>
 800440e:	4b7c      	ldr	r3, [pc, #496]	; (8004600 <HAL_RCC_OscConfig+0x274>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a7b      	ldr	r2, [pc, #492]	; (8004600 <HAL_RCC_OscConfig+0x274>)
 8004414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004418:	6013      	str	r3, [r2, #0]
 800441a:	e01d      	b.n	8004458 <HAL_RCC_OscConfig+0xcc>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004424:	d10c      	bne.n	8004440 <HAL_RCC_OscConfig+0xb4>
 8004426:	4b76      	ldr	r3, [pc, #472]	; (8004600 <HAL_RCC_OscConfig+0x274>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a75      	ldr	r2, [pc, #468]	; (8004600 <HAL_RCC_OscConfig+0x274>)
 800442c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004430:	6013      	str	r3, [r2, #0]
 8004432:	4b73      	ldr	r3, [pc, #460]	; (8004600 <HAL_RCC_OscConfig+0x274>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a72      	ldr	r2, [pc, #456]	; (8004600 <HAL_RCC_OscConfig+0x274>)
 8004438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800443c:	6013      	str	r3, [r2, #0]
 800443e:	e00b      	b.n	8004458 <HAL_RCC_OscConfig+0xcc>
 8004440:	4b6f      	ldr	r3, [pc, #444]	; (8004600 <HAL_RCC_OscConfig+0x274>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a6e      	ldr	r2, [pc, #440]	; (8004600 <HAL_RCC_OscConfig+0x274>)
 8004446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800444a:	6013      	str	r3, [r2, #0]
 800444c:	4b6c      	ldr	r3, [pc, #432]	; (8004600 <HAL_RCC_OscConfig+0x274>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a6b      	ldr	r2, [pc, #428]	; (8004600 <HAL_RCC_OscConfig+0x274>)
 8004452:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004456:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d013      	beq.n	8004488 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004460:	f7ff f9e8 	bl	8003834 <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004468:	f7ff f9e4 	bl	8003834 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b64      	cmp	r3, #100	; 0x64
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e21f      	b.n	80048ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800447a:	4b61      	ldr	r3, [pc, #388]	; (8004600 <HAL_RCC_OscConfig+0x274>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d0f0      	beq.n	8004468 <HAL_RCC_OscConfig+0xdc>
 8004486:	e014      	b.n	80044b2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004488:	f7ff f9d4 	bl	8003834 <HAL_GetTick>
 800448c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800448e:	e008      	b.n	80044a2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004490:	f7ff f9d0 	bl	8003834 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b64      	cmp	r3, #100	; 0x64
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e20b      	b.n	80048ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044a2:	4b57      	ldr	r3, [pc, #348]	; (8004600 <HAL_RCC_OscConfig+0x274>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1f0      	bne.n	8004490 <HAL_RCC_OscConfig+0x104>
 80044ae:	e000      	b.n	80044b2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d06f      	beq.n	800459e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80044be:	4b50      	ldr	r3, [pc, #320]	; (8004600 <HAL_RCC_OscConfig+0x274>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f003 030c 	and.w	r3, r3, #12
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d017      	beq.n	80044fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80044ca:	4b4d      	ldr	r3, [pc, #308]	; (8004600 <HAL_RCC_OscConfig+0x274>)
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80044d2:	2b08      	cmp	r3, #8
 80044d4:	d105      	bne.n	80044e2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80044d6:	4b4a      	ldr	r3, [pc, #296]	; (8004600 <HAL_RCC_OscConfig+0x274>)
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00b      	beq.n	80044fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044e2:	4b47      	ldr	r3, [pc, #284]	; (8004600 <HAL_RCC_OscConfig+0x274>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80044ea:	2b0c      	cmp	r3, #12
 80044ec:	d11c      	bne.n	8004528 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044ee:	4b44      	ldr	r3, [pc, #272]	; (8004600 <HAL_RCC_OscConfig+0x274>)
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d116      	bne.n	8004528 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044fa:	4b41      	ldr	r3, [pc, #260]	; (8004600 <HAL_RCC_OscConfig+0x274>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d005      	beq.n	8004512 <HAL_RCC_OscConfig+0x186>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d001      	beq.n	8004512 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e1d3      	b.n	80048ba <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004512:	4b3b      	ldr	r3, [pc, #236]	; (8004600 <HAL_RCC_OscConfig+0x274>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	00db      	lsls	r3, r3, #3
 8004520:	4937      	ldr	r1, [pc, #220]	; (8004600 <HAL_RCC_OscConfig+0x274>)
 8004522:	4313      	orrs	r3, r2
 8004524:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004526:	e03a      	b.n	800459e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d020      	beq.n	8004572 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004530:	4b34      	ldr	r3, [pc, #208]	; (8004604 <HAL_RCC_OscConfig+0x278>)
 8004532:	2201      	movs	r2, #1
 8004534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004536:	f7ff f97d 	bl	8003834 <HAL_GetTick>
 800453a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800453c:	e008      	b.n	8004550 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800453e:	f7ff f979 	bl	8003834 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	2b02      	cmp	r3, #2
 800454a:	d901      	bls.n	8004550 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e1b4      	b.n	80048ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004550:	4b2b      	ldr	r3, [pc, #172]	; (8004600 <HAL_RCC_OscConfig+0x274>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0302 	and.w	r3, r3, #2
 8004558:	2b00      	cmp	r3, #0
 800455a:	d0f0      	beq.n	800453e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800455c:	4b28      	ldr	r3, [pc, #160]	; (8004600 <HAL_RCC_OscConfig+0x274>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	00db      	lsls	r3, r3, #3
 800456a:	4925      	ldr	r1, [pc, #148]	; (8004600 <HAL_RCC_OscConfig+0x274>)
 800456c:	4313      	orrs	r3, r2
 800456e:	600b      	str	r3, [r1, #0]
 8004570:	e015      	b.n	800459e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004572:	4b24      	ldr	r3, [pc, #144]	; (8004604 <HAL_RCC_OscConfig+0x278>)
 8004574:	2200      	movs	r2, #0
 8004576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004578:	f7ff f95c 	bl	8003834 <HAL_GetTick>
 800457c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800457e:	e008      	b.n	8004592 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004580:	f7ff f958 	bl	8003834 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b02      	cmp	r3, #2
 800458c:	d901      	bls.n	8004592 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e193      	b.n	80048ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004592:	4b1b      	ldr	r3, [pc, #108]	; (8004600 <HAL_RCC_OscConfig+0x274>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1f0      	bne.n	8004580 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0308 	and.w	r3, r3, #8
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d036      	beq.n	8004618 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d016      	beq.n	80045e0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045b2:	4b15      	ldr	r3, [pc, #84]	; (8004608 <HAL_RCC_OscConfig+0x27c>)
 80045b4:	2201      	movs	r2, #1
 80045b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b8:	f7ff f93c 	bl	8003834 <HAL_GetTick>
 80045bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045be:	e008      	b.n	80045d2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045c0:	f7ff f938 	bl	8003834 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e173      	b.n	80048ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045d2:	4b0b      	ldr	r3, [pc, #44]	; (8004600 <HAL_RCC_OscConfig+0x274>)
 80045d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d0f0      	beq.n	80045c0 <HAL_RCC_OscConfig+0x234>
 80045de:	e01b      	b.n	8004618 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045e0:	4b09      	ldr	r3, [pc, #36]	; (8004608 <HAL_RCC_OscConfig+0x27c>)
 80045e2:	2200      	movs	r2, #0
 80045e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e6:	f7ff f925 	bl	8003834 <HAL_GetTick>
 80045ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045ec:	e00e      	b.n	800460c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045ee:	f7ff f921 	bl	8003834 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d907      	bls.n	800460c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e15c      	b.n	80048ba <HAL_RCC_OscConfig+0x52e>
 8004600:	40023800 	.word	0x40023800
 8004604:	42470000 	.word	0x42470000
 8004608:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800460c:	4b8a      	ldr	r3, [pc, #552]	; (8004838 <HAL_RCC_OscConfig+0x4ac>)
 800460e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1ea      	bne.n	80045ee <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0304 	and.w	r3, r3, #4
 8004620:	2b00      	cmp	r3, #0
 8004622:	f000 8097 	beq.w	8004754 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004626:	2300      	movs	r3, #0
 8004628:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800462a:	4b83      	ldr	r3, [pc, #524]	; (8004838 <HAL_RCC_OscConfig+0x4ac>)
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10f      	bne.n	8004656 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004636:	2300      	movs	r3, #0
 8004638:	60bb      	str	r3, [r7, #8]
 800463a:	4b7f      	ldr	r3, [pc, #508]	; (8004838 <HAL_RCC_OscConfig+0x4ac>)
 800463c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463e:	4a7e      	ldr	r2, [pc, #504]	; (8004838 <HAL_RCC_OscConfig+0x4ac>)
 8004640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004644:	6413      	str	r3, [r2, #64]	; 0x40
 8004646:	4b7c      	ldr	r3, [pc, #496]	; (8004838 <HAL_RCC_OscConfig+0x4ac>)
 8004648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800464e:	60bb      	str	r3, [r7, #8]
 8004650:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004652:	2301      	movs	r3, #1
 8004654:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004656:	4b79      	ldr	r3, [pc, #484]	; (800483c <HAL_RCC_OscConfig+0x4b0>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800465e:	2b00      	cmp	r3, #0
 8004660:	d118      	bne.n	8004694 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004662:	4b76      	ldr	r3, [pc, #472]	; (800483c <HAL_RCC_OscConfig+0x4b0>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a75      	ldr	r2, [pc, #468]	; (800483c <HAL_RCC_OscConfig+0x4b0>)
 8004668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800466c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800466e:	f7ff f8e1 	bl	8003834 <HAL_GetTick>
 8004672:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004674:	e008      	b.n	8004688 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004676:	f7ff f8dd 	bl	8003834 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	2b02      	cmp	r3, #2
 8004682:	d901      	bls.n	8004688 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e118      	b.n	80048ba <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004688:	4b6c      	ldr	r3, [pc, #432]	; (800483c <HAL_RCC_OscConfig+0x4b0>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004690:	2b00      	cmp	r3, #0
 8004692:	d0f0      	beq.n	8004676 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d106      	bne.n	80046aa <HAL_RCC_OscConfig+0x31e>
 800469c:	4b66      	ldr	r3, [pc, #408]	; (8004838 <HAL_RCC_OscConfig+0x4ac>)
 800469e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a0:	4a65      	ldr	r2, [pc, #404]	; (8004838 <HAL_RCC_OscConfig+0x4ac>)
 80046a2:	f043 0301 	orr.w	r3, r3, #1
 80046a6:	6713      	str	r3, [r2, #112]	; 0x70
 80046a8:	e01c      	b.n	80046e4 <HAL_RCC_OscConfig+0x358>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	2b05      	cmp	r3, #5
 80046b0:	d10c      	bne.n	80046cc <HAL_RCC_OscConfig+0x340>
 80046b2:	4b61      	ldr	r3, [pc, #388]	; (8004838 <HAL_RCC_OscConfig+0x4ac>)
 80046b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b6:	4a60      	ldr	r2, [pc, #384]	; (8004838 <HAL_RCC_OscConfig+0x4ac>)
 80046b8:	f043 0304 	orr.w	r3, r3, #4
 80046bc:	6713      	str	r3, [r2, #112]	; 0x70
 80046be:	4b5e      	ldr	r3, [pc, #376]	; (8004838 <HAL_RCC_OscConfig+0x4ac>)
 80046c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c2:	4a5d      	ldr	r2, [pc, #372]	; (8004838 <HAL_RCC_OscConfig+0x4ac>)
 80046c4:	f043 0301 	orr.w	r3, r3, #1
 80046c8:	6713      	str	r3, [r2, #112]	; 0x70
 80046ca:	e00b      	b.n	80046e4 <HAL_RCC_OscConfig+0x358>
 80046cc:	4b5a      	ldr	r3, [pc, #360]	; (8004838 <HAL_RCC_OscConfig+0x4ac>)
 80046ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d0:	4a59      	ldr	r2, [pc, #356]	; (8004838 <HAL_RCC_OscConfig+0x4ac>)
 80046d2:	f023 0301 	bic.w	r3, r3, #1
 80046d6:	6713      	str	r3, [r2, #112]	; 0x70
 80046d8:	4b57      	ldr	r3, [pc, #348]	; (8004838 <HAL_RCC_OscConfig+0x4ac>)
 80046da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046dc:	4a56      	ldr	r2, [pc, #344]	; (8004838 <HAL_RCC_OscConfig+0x4ac>)
 80046de:	f023 0304 	bic.w	r3, r3, #4
 80046e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d015      	beq.n	8004718 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ec:	f7ff f8a2 	bl	8003834 <HAL_GetTick>
 80046f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046f2:	e00a      	b.n	800470a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046f4:	f7ff f89e 	bl	8003834 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004702:	4293      	cmp	r3, r2
 8004704:	d901      	bls.n	800470a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e0d7      	b.n	80048ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800470a:	4b4b      	ldr	r3, [pc, #300]	; (8004838 <HAL_RCC_OscConfig+0x4ac>)
 800470c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d0ee      	beq.n	80046f4 <HAL_RCC_OscConfig+0x368>
 8004716:	e014      	b.n	8004742 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004718:	f7ff f88c 	bl	8003834 <HAL_GetTick>
 800471c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800471e:	e00a      	b.n	8004736 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004720:	f7ff f888 	bl	8003834 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	f241 3288 	movw	r2, #5000	; 0x1388
 800472e:	4293      	cmp	r3, r2
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e0c1      	b.n	80048ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004736:	4b40      	ldr	r3, [pc, #256]	; (8004838 <HAL_RCC_OscConfig+0x4ac>)
 8004738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1ee      	bne.n	8004720 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004742:	7dfb      	ldrb	r3, [r7, #23]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d105      	bne.n	8004754 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004748:	4b3b      	ldr	r3, [pc, #236]	; (8004838 <HAL_RCC_OscConfig+0x4ac>)
 800474a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474c:	4a3a      	ldr	r2, [pc, #232]	; (8004838 <HAL_RCC_OscConfig+0x4ac>)
 800474e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004752:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	2b00      	cmp	r3, #0
 800475a:	f000 80ad 	beq.w	80048b8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800475e:	4b36      	ldr	r3, [pc, #216]	; (8004838 <HAL_RCC_OscConfig+0x4ac>)
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f003 030c 	and.w	r3, r3, #12
 8004766:	2b08      	cmp	r3, #8
 8004768:	d060      	beq.n	800482c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	2b02      	cmp	r3, #2
 8004770:	d145      	bne.n	80047fe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004772:	4b33      	ldr	r3, [pc, #204]	; (8004840 <HAL_RCC_OscConfig+0x4b4>)
 8004774:	2200      	movs	r2, #0
 8004776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004778:	f7ff f85c 	bl	8003834 <HAL_GetTick>
 800477c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800477e:	e008      	b.n	8004792 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004780:	f7ff f858 	bl	8003834 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b02      	cmp	r3, #2
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e093      	b.n	80048ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004792:	4b29      	ldr	r3, [pc, #164]	; (8004838 <HAL_RCC_OscConfig+0x4ac>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1f0      	bne.n	8004780 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	69da      	ldr	r2, [r3, #28]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	431a      	orrs	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ac:	019b      	lsls	r3, r3, #6
 80047ae:	431a      	orrs	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b4:	085b      	lsrs	r3, r3, #1
 80047b6:	3b01      	subs	r3, #1
 80047b8:	041b      	lsls	r3, r3, #16
 80047ba:	431a      	orrs	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c0:	061b      	lsls	r3, r3, #24
 80047c2:	431a      	orrs	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c8:	071b      	lsls	r3, r3, #28
 80047ca:	491b      	ldr	r1, [pc, #108]	; (8004838 <HAL_RCC_OscConfig+0x4ac>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047d0:	4b1b      	ldr	r3, [pc, #108]	; (8004840 <HAL_RCC_OscConfig+0x4b4>)
 80047d2:	2201      	movs	r2, #1
 80047d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d6:	f7ff f82d 	bl	8003834 <HAL_GetTick>
 80047da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047dc:	e008      	b.n	80047f0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047de:	f7ff f829 	bl	8003834 <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d901      	bls.n	80047f0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e064      	b.n	80048ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047f0:	4b11      	ldr	r3, [pc, #68]	; (8004838 <HAL_RCC_OscConfig+0x4ac>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d0f0      	beq.n	80047de <HAL_RCC_OscConfig+0x452>
 80047fc:	e05c      	b.n	80048b8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047fe:	4b10      	ldr	r3, [pc, #64]	; (8004840 <HAL_RCC_OscConfig+0x4b4>)
 8004800:	2200      	movs	r2, #0
 8004802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004804:	f7ff f816 	bl	8003834 <HAL_GetTick>
 8004808:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800480a:	e008      	b.n	800481e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800480c:	f7ff f812 	bl	8003834 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b02      	cmp	r3, #2
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e04d      	b.n	80048ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800481e:	4b06      	ldr	r3, [pc, #24]	; (8004838 <HAL_RCC_OscConfig+0x4ac>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1f0      	bne.n	800480c <HAL_RCC_OscConfig+0x480>
 800482a:	e045      	b.n	80048b8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	2b01      	cmp	r3, #1
 8004832:	d107      	bne.n	8004844 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e040      	b.n	80048ba <HAL_RCC_OscConfig+0x52e>
 8004838:	40023800 	.word	0x40023800
 800483c:	40007000 	.word	0x40007000
 8004840:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004844:	4b1f      	ldr	r3, [pc, #124]	; (80048c4 <HAL_RCC_OscConfig+0x538>)
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d030      	beq.n	80048b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800485c:	429a      	cmp	r2, r3
 800485e:	d129      	bne.n	80048b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800486a:	429a      	cmp	r2, r3
 800486c:	d122      	bne.n	80048b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004874:	4013      	ands	r3, r2
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800487a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800487c:	4293      	cmp	r3, r2
 800487e:	d119      	bne.n	80048b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488a:	085b      	lsrs	r3, r3, #1
 800488c:	3b01      	subs	r3, #1
 800488e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004890:	429a      	cmp	r2, r3
 8004892:	d10f      	bne.n	80048b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d107      	bne.n	80048b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d001      	beq.n	80048b8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e000      	b.n	80048ba <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3718      	adds	r7, #24
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	40023800 	.word	0x40023800

080048c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e03f      	b.n	800495a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d106      	bne.n	80048f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f7fe fdc6 	bl	8003480 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2224      	movs	r2, #36	; 0x24
 80048f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68da      	ldr	r2, [r3, #12]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800490a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 f905 	bl	8004b1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	691a      	ldr	r2, [r3, #16]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004920:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	695a      	ldr	r2, [r3, #20]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004930:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68da      	ldr	r2, [r3, #12]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004940:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2220      	movs	r2, #32
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2220      	movs	r2, #32
 8004954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3708      	adds	r7, #8
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004962:	b580      	push	{r7, lr}
 8004964:	b08a      	sub	sp, #40	; 0x28
 8004966:	af02      	add	r7, sp, #8
 8004968:	60f8      	str	r0, [r7, #12]
 800496a:	60b9      	str	r1, [r7, #8]
 800496c:	603b      	str	r3, [r7, #0]
 800496e:	4613      	mov	r3, r2
 8004970:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004972:	2300      	movs	r3, #0
 8004974:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800497c:	b2db      	uxtb	r3, r3
 800497e:	2b20      	cmp	r3, #32
 8004980:	d17c      	bne.n	8004a7c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d002      	beq.n	800498e <HAL_UART_Transmit+0x2c>
 8004988:	88fb      	ldrh	r3, [r7, #6]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d101      	bne.n	8004992 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e075      	b.n	8004a7e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004998:	2b01      	cmp	r3, #1
 800499a:	d101      	bne.n	80049a0 <HAL_UART_Transmit+0x3e>
 800499c:	2302      	movs	r3, #2
 800499e:	e06e      	b.n	8004a7e <HAL_UART_Transmit+0x11c>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2221      	movs	r2, #33	; 0x21
 80049b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049b6:	f7fe ff3d 	bl	8003834 <HAL_GetTick>
 80049ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	88fa      	ldrh	r2, [r7, #6]
 80049c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	88fa      	ldrh	r2, [r7, #6]
 80049c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049d0:	d108      	bne.n	80049e4 <HAL_UART_Transmit+0x82>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d104      	bne.n	80049e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80049da:	2300      	movs	r3, #0
 80049dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	61bb      	str	r3, [r7, #24]
 80049e2:	e003      	b.n	80049ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049e8:	2300      	movs	r3, #0
 80049ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80049f4:	e02a      	b.n	8004a4c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	9300      	str	r3, [sp, #0]
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	2200      	movs	r2, #0
 80049fe:	2180      	movs	r1, #128	; 0x80
 8004a00:	68f8      	ldr	r0, [r7, #12]
 8004a02:	f000 f840 	bl	8004a86 <UART_WaitOnFlagUntilTimeout>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d001      	beq.n	8004a10 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e036      	b.n	8004a7e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d10b      	bne.n	8004a2e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	881b      	ldrh	r3, [r3, #0]
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a24:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	3302      	adds	r3, #2
 8004a2a:	61bb      	str	r3, [r7, #24]
 8004a2c:	e007      	b.n	8004a3e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	781a      	ldrb	r2, [r3, #0]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	3b01      	subs	r3, #1
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1cf      	bne.n	80049f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	9300      	str	r3, [sp, #0]
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	2140      	movs	r1, #64	; 0x40
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f000 f810 	bl	8004a86 <UART_WaitOnFlagUntilTimeout>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d001      	beq.n	8004a70 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e006      	b.n	8004a7e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2220      	movs	r2, #32
 8004a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	e000      	b.n	8004a7e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004a7c:	2302      	movs	r3, #2
  }
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3720      	adds	r7, #32
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b084      	sub	sp, #16
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	60f8      	str	r0, [r7, #12]
 8004a8e:	60b9      	str	r1, [r7, #8]
 8004a90:	603b      	str	r3, [r7, #0]
 8004a92:	4613      	mov	r3, r2
 8004a94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a96:	e02c      	b.n	8004af2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a9e:	d028      	beq.n	8004af2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d007      	beq.n	8004ab6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004aa6:	f7fe fec5 	bl	8003834 <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	69ba      	ldr	r2, [r7, #24]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d21d      	bcs.n	8004af2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68da      	ldr	r2, [r3, #12]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ac4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	695a      	ldr	r2, [r3, #20]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f022 0201 	bic.w	r2, r2, #1
 8004ad4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2220      	movs	r2, #32
 8004ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e00f      	b.n	8004b12 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	4013      	ands	r3, r2
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	bf0c      	ite	eq
 8004b02:	2301      	moveq	r3, #1
 8004b04:	2300      	movne	r3, #0
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	461a      	mov	r2, r3
 8004b0a:	79fb      	ldrb	r3, [r7, #7]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d0c3      	beq.n	8004a98 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3710      	adds	r7, #16
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
	...

08004b1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b20:	b09f      	sub	sp, #124	; 0x7c
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004b30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b32:	68d9      	ldr	r1, [r3, #12]
 8004b34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	ea40 0301 	orr.w	r3, r0, r1
 8004b3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b40:	689a      	ldr	r2, [r3, #8]
 8004b42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	431a      	orrs	r2, r3
 8004b48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b4a:	695b      	ldr	r3, [r3, #20]
 8004b4c:	431a      	orrs	r2, r3
 8004b4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b50:	69db      	ldr	r3, [r3, #28]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004b56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004b60:	f021 010c 	bic.w	r1, r1, #12
 8004b64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b6a:	430b      	orrs	r3, r1
 8004b6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	695b      	ldr	r3, [r3, #20]
 8004b74:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004b78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b7a:	6999      	ldr	r1, [r3, #24]
 8004b7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	ea40 0301 	orr.w	r3, r0, r1
 8004b84:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	4bc5      	ldr	r3, [pc, #788]	; (8004ea0 <UART_SetConfig+0x384>)
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d004      	beq.n	8004b9a <UART_SetConfig+0x7e>
 8004b90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	4bc3      	ldr	r3, [pc, #780]	; (8004ea4 <UART_SetConfig+0x388>)
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d103      	bne.n	8004ba2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b9a:	f7ff fa31 	bl	8004000 <HAL_RCC_GetPCLK2Freq>
 8004b9e:	6778      	str	r0, [r7, #116]	; 0x74
 8004ba0:	e002      	b.n	8004ba8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ba2:	f7ff fa19 	bl	8003fd8 <HAL_RCC_GetPCLK1Freq>
 8004ba6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ba8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004baa:	69db      	ldr	r3, [r3, #28]
 8004bac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bb0:	f040 80b6 	bne.w	8004d20 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004bb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bb6:	461c      	mov	r4, r3
 8004bb8:	f04f 0500 	mov.w	r5, #0
 8004bbc:	4622      	mov	r2, r4
 8004bbe:	462b      	mov	r3, r5
 8004bc0:	1891      	adds	r1, r2, r2
 8004bc2:	6439      	str	r1, [r7, #64]	; 0x40
 8004bc4:	415b      	adcs	r3, r3
 8004bc6:	647b      	str	r3, [r7, #68]	; 0x44
 8004bc8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004bcc:	1912      	adds	r2, r2, r4
 8004bce:	eb45 0303 	adc.w	r3, r5, r3
 8004bd2:	f04f 0000 	mov.w	r0, #0
 8004bd6:	f04f 0100 	mov.w	r1, #0
 8004bda:	00d9      	lsls	r1, r3, #3
 8004bdc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004be0:	00d0      	lsls	r0, r2, #3
 8004be2:	4602      	mov	r2, r0
 8004be4:	460b      	mov	r3, r1
 8004be6:	1911      	adds	r1, r2, r4
 8004be8:	6639      	str	r1, [r7, #96]	; 0x60
 8004bea:	416b      	adcs	r3, r5
 8004bec:	667b      	str	r3, [r7, #100]	; 0x64
 8004bee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	f04f 0300 	mov.w	r3, #0
 8004bf8:	1891      	adds	r1, r2, r2
 8004bfa:	63b9      	str	r1, [r7, #56]	; 0x38
 8004bfc:	415b      	adcs	r3, r3
 8004bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c04:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004c08:	f7fc f86e 	bl	8000ce8 <__aeabi_uldivmod>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	460b      	mov	r3, r1
 8004c10:	4ba5      	ldr	r3, [pc, #660]	; (8004ea8 <UART_SetConfig+0x38c>)
 8004c12:	fba3 2302 	umull	r2, r3, r3, r2
 8004c16:	095b      	lsrs	r3, r3, #5
 8004c18:	011e      	lsls	r6, r3, #4
 8004c1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c1c:	461c      	mov	r4, r3
 8004c1e:	f04f 0500 	mov.w	r5, #0
 8004c22:	4622      	mov	r2, r4
 8004c24:	462b      	mov	r3, r5
 8004c26:	1891      	adds	r1, r2, r2
 8004c28:	6339      	str	r1, [r7, #48]	; 0x30
 8004c2a:	415b      	adcs	r3, r3
 8004c2c:	637b      	str	r3, [r7, #52]	; 0x34
 8004c2e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004c32:	1912      	adds	r2, r2, r4
 8004c34:	eb45 0303 	adc.w	r3, r5, r3
 8004c38:	f04f 0000 	mov.w	r0, #0
 8004c3c:	f04f 0100 	mov.w	r1, #0
 8004c40:	00d9      	lsls	r1, r3, #3
 8004c42:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c46:	00d0      	lsls	r0, r2, #3
 8004c48:	4602      	mov	r2, r0
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	1911      	adds	r1, r2, r4
 8004c4e:	65b9      	str	r1, [r7, #88]	; 0x58
 8004c50:	416b      	adcs	r3, r5
 8004c52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	461a      	mov	r2, r3
 8004c5a:	f04f 0300 	mov.w	r3, #0
 8004c5e:	1891      	adds	r1, r2, r2
 8004c60:	62b9      	str	r1, [r7, #40]	; 0x28
 8004c62:	415b      	adcs	r3, r3
 8004c64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c6a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004c6e:	f7fc f83b 	bl	8000ce8 <__aeabi_uldivmod>
 8004c72:	4602      	mov	r2, r0
 8004c74:	460b      	mov	r3, r1
 8004c76:	4b8c      	ldr	r3, [pc, #560]	; (8004ea8 <UART_SetConfig+0x38c>)
 8004c78:	fba3 1302 	umull	r1, r3, r3, r2
 8004c7c:	095b      	lsrs	r3, r3, #5
 8004c7e:	2164      	movs	r1, #100	; 0x64
 8004c80:	fb01 f303 	mul.w	r3, r1, r3
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	00db      	lsls	r3, r3, #3
 8004c88:	3332      	adds	r3, #50	; 0x32
 8004c8a:	4a87      	ldr	r2, [pc, #540]	; (8004ea8 <UART_SetConfig+0x38c>)
 8004c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c90:	095b      	lsrs	r3, r3, #5
 8004c92:	005b      	lsls	r3, r3, #1
 8004c94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c98:	441e      	add	r6, r3
 8004c9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f04f 0100 	mov.w	r1, #0
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	1894      	adds	r4, r2, r2
 8004ca8:	623c      	str	r4, [r7, #32]
 8004caa:	415b      	adcs	r3, r3
 8004cac:	627b      	str	r3, [r7, #36]	; 0x24
 8004cae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004cb2:	1812      	adds	r2, r2, r0
 8004cb4:	eb41 0303 	adc.w	r3, r1, r3
 8004cb8:	f04f 0400 	mov.w	r4, #0
 8004cbc:	f04f 0500 	mov.w	r5, #0
 8004cc0:	00dd      	lsls	r5, r3, #3
 8004cc2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004cc6:	00d4      	lsls	r4, r2, #3
 8004cc8:	4622      	mov	r2, r4
 8004cca:	462b      	mov	r3, r5
 8004ccc:	1814      	adds	r4, r2, r0
 8004cce:	653c      	str	r4, [r7, #80]	; 0x50
 8004cd0:	414b      	adcs	r3, r1
 8004cd2:	657b      	str	r3, [r7, #84]	; 0x54
 8004cd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	461a      	mov	r2, r3
 8004cda:	f04f 0300 	mov.w	r3, #0
 8004cde:	1891      	adds	r1, r2, r2
 8004ce0:	61b9      	str	r1, [r7, #24]
 8004ce2:	415b      	adcs	r3, r3
 8004ce4:	61fb      	str	r3, [r7, #28]
 8004ce6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cea:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004cee:	f7fb fffb 	bl	8000ce8 <__aeabi_uldivmod>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	4b6c      	ldr	r3, [pc, #432]	; (8004ea8 <UART_SetConfig+0x38c>)
 8004cf8:	fba3 1302 	umull	r1, r3, r3, r2
 8004cfc:	095b      	lsrs	r3, r3, #5
 8004cfe:	2164      	movs	r1, #100	; 0x64
 8004d00:	fb01 f303 	mul.w	r3, r1, r3
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	00db      	lsls	r3, r3, #3
 8004d08:	3332      	adds	r3, #50	; 0x32
 8004d0a:	4a67      	ldr	r2, [pc, #412]	; (8004ea8 <UART_SetConfig+0x38c>)
 8004d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d10:	095b      	lsrs	r3, r3, #5
 8004d12:	f003 0207 	and.w	r2, r3, #7
 8004d16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4432      	add	r2, r6
 8004d1c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d1e:	e0b9      	b.n	8004e94 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d22:	461c      	mov	r4, r3
 8004d24:	f04f 0500 	mov.w	r5, #0
 8004d28:	4622      	mov	r2, r4
 8004d2a:	462b      	mov	r3, r5
 8004d2c:	1891      	adds	r1, r2, r2
 8004d2e:	6139      	str	r1, [r7, #16]
 8004d30:	415b      	adcs	r3, r3
 8004d32:	617b      	str	r3, [r7, #20]
 8004d34:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004d38:	1912      	adds	r2, r2, r4
 8004d3a:	eb45 0303 	adc.w	r3, r5, r3
 8004d3e:	f04f 0000 	mov.w	r0, #0
 8004d42:	f04f 0100 	mov.w	r1, #0
 8004d46:	00d9      	lsls	r1, r3, #3
 8004d48:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d4c:	00d0      	lsls	r0, r2, #3
 8004d4e:	4602      	mov	r2, r0
 8004d50:	460b      	mov	r3, r1
 8004d52:	eb12 0804 	adds.w	r8, r2, r4
 8004d56:	eb43 0905 	adc.w	r9, r3, r5
 8004d5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f04f 0100 	mov.w	r1, #0
 8004d64:	f04f 0200 	mov.w	r2, #0
 8004d68:	f04f 0300 	mov.w	r3, #0
 8004d6c:	008b      	lsls	r3, r1, #2
 8004d6e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004d72:	0082      	lsls	r2, r0, #2
 8004d74:	4640      	mov	r0, r8
 8004d76:	4649      	mov	r1, r9
 8004d78:	f7fb ffb6 	bl	8000ce8 <__aeabi_uldivmod>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	460b      	mov	r3, r1
 8004d80:	4b49      	ldr	r3, [pc, #292]	; (8004ea8 <UART_SetConfig+0x38c>)
 8004d82:	fba3 2302 	umull	r2, r3, r3, r2
 8004d86:	095b      	lsrs	r3, r3, #5
 8004d88:	011e      	lsls	r6, r3, #4
 8004d8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f04f 0100 	mov.w	r1, #0
 8004d92:	4602      	mov	r2, r0
 8004d94:	460b      	mov	r3, r1
 8004d96:	1894      	adds	r4, r2, r2
 8004d98:	60bc      	str	r4, [r7, #8]
 8004d9a:	415b      	adcs	r3, r3
 8004d9c:	60fb      	str	r3, [r7, #12]
 8004d9e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004da2:	1812      	adds	r2, r2, r0
 8004da4:	eb41 0303 	adc.w	r3, r1, r3
 8004da8:	f04f 0400 	mov.w	r4, #0
 8004dac:	f04f 0500 	mov.w	r5, #0
 8004db0:	00dd      	lsls	r5, r3, #3
 8004db2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004db6:	00d4      	lsls	r4, r2, #3
 8004db8:	4622      	mov	r2, r4
 8004dba:	462b      	mov	r3, r5
 8004dbc:	1814      	adds	r4, r2, r0
 8004dbe:	64bc      	str	r4, [r7, #72]	; 0x48
 8004dc0:	414b      	adcs	r3, r1
 8004dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f04f 0100 	mov.w	r1, #0
 8004dce:	f04f 0200 	mov.w	r2, #0
 8004dd2:	f04f 0300 	mov.w	r3, #0
 8004dd6:	008b      	lsls	r3, r1, #2
 8004dd8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004ddc:	0082      	lsls	r2, r0, #2
 8004dde:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004de2:	f7fb ff81 	bl	8000ce8 <__aeabi_uldivmod>
 8004de6:	4602      	mov	r2, r0
 8004de8:	460b      	mov	r3, r1
 8004dea:	4b2f      	ldr	r3, [pc, #188]	; (8004ea8 <UART_SetConfig+0x38c>)
 8004dec:	fba3 1302 	umull	r1, r3, r3, r2
 8004df0:	095b      	lsrs	r3, r3, #5
 8004df2:	2164      	movs	r1, #100	; 0x64
 8004df4:	fb01 f303 	mul.w	r3, r1, r3
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	011b      	lsls	r3, r3, #4
 8004dfc:	3332      	adds	r3, #50	; 0x32
 8004dfe:	4a2a      	ldr	r2, [pc, #168]	; (8004ea8 <UART_SetConfig+0x38c>)
 8004e00:	fba2 2303 	umull	r2, r3, r2, r3
 8004e04:	095b      	lsrs	r3, r3, #5
 8004e06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e0a:	441e      	add	r6, r3
 8004e0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f04f 0100 	mov.w	r1, #0
 8004e14:	4602      	mov	r2, r0
 8004e16:	460b      	mov	r3, r1
 8004e18:	1894      	adds	r4, r2, r2
 8004e1a:	603c      	str	r4, [r7, #0]
 8004e1c:	415b      	adcs	r3, r3
 8004e1e:	607b      	str	r3, [r7, #4]
 8004e20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e24:	1812      	adds	r2, r2, r0
 8004e26:	eb41 0303 	adc.w	r3, r1, r3
 8004e2a:	f04f 0400 	mov.w	r4, #0
 8004e2e:	f04f 0500 	mov.w	r5, #0
 8004e32:	00dd      	lsls	r5, r3, #3
 8004e34:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004e38:	00d4      	lsls	r4, r2, #3
 8004e3a:	4622      	mov	r2, r4
 8004e3c:	462b      	mov	r3, r5
 8004e3e:	eb12 0a00 	adds.w	sl, r2, r0
 8004e42:	eb43 0b01 	adc.w	fp, r3, r1
 8004e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f04f 0100 	mov.w	r1, #0
 8004e50:	f04f 0200 	mov.w	r2, #0
 8004e54:	f04f 0300 	mov.w	r3, #0
 8004e58:	008b      	lsls	r3, r1, #2
 8004e5a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004e5e:	0082      	lsls	r2, r0, #2
 8004e60:	4650      	mov	r0, sl
 8004e62:	4659      	mov	r1, fp
 8004e64:	f7fb ff40 	bl	8000ce8 <__aeabi_uldivmod>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	4b0e      	ldr	r3, [pc, #56]	; (8004ea8 <UART_SetConfig+0x38c>)
 8004e6e:	fba3 1302 	umull	r1, r3, r3, r2
 8004e72:	095b      	lsrs	r3, r3, #5
 8004e74:	2164      	movs	r1, #100	; 0x64
 8004e76:	fb01 f303 	mul.w	r3, r1, r3
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	011b      	lsls	r3, r3, #4
 8004e7e:	3332      	adds	r3, #50	; 0x32
 8004e80:	4a09      	ldr	r2, [pc, #36]	; (8004ea8 <UART_SetConfig+0x38c>)
 8004e82:	fba2 2303 	umull	r2, r3, r2, r3
 8004e86:	095b      	lsrs	r3, r3, #5
 8004e88:	f003 020f 	and.w	r2, r3, #15
 8004e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4432      	add	r2, r6
 8004e92:	609a      	str	r2, [r3, #8]
}
 8004e94:	bf00      	nop
 8004e96:	377c      	adds	r7, #124	; 0x7c
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e9e:	bf00      	nop
 8004ea0:	40011000 	.word	0x40011000
 8004ea4:	40011400 	.word	0x40011400
 8004ea8:	51eb851f 	.word	0x51eb851f

08004eac <_ZSt5log10f>:
  { return __builtin_log10f(__x); }
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	ed87 0a01 	vstr	s0, [r7, #4]
 8004eb6:	ed97 0a01 	vldr	s0, [r7, #4]
 8004eba:	f008 fbe1 	bl	800d680 <log10f>
 8004ebe:	eef0 7a40 	vmov.f32	s15, s0
 8004ec2:	eeb0 0a67 	vmov.f32	s0, s15
 8004ec6:	3708      	adds	r7, #8
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <_ZSt5isinfd>:
  { return __builtin_isinf(__x); }
 8004ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	ed87 0b00 	vstr	d0, [r7]
 8004ed6:	683c      	ldr	r4, [r7, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8004ede:	2301      	movs	r3, #1
 8004ee0:	461e      	mov	r6, r3
 8004ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ee6:	4b10      	ldr	r3, [pc, #64]	; (8004f28 <_ZSt5isinfd+0x5c>)
 8004ee8:	4620      	mov	r0, r4
 8004eea:	4629      	mov	r1, r5
 8004eec:	f7fb fe4e 	bl	8000b8c <__aeabi_dcmpun>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d10b      	bne.n	8004f0e <_ZSt5isinfd+0x42>
 8004ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8004efa:	4b0b      	ldr	r3, [pc, #44]	; (8004f28 <_ZSt5isinfd+0x5c>)
 8004efc:	4620      	mov	r0, r4
 8004efe:	4629      	mov	r1, r5
 8004f00:	f7fb fe26 	bl	8000b50 <__aeabi_dcmple>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <_ZSt5isinfd+0x42>
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	461e      	mov	r6, r3
 8004f0e:	b2f3      	uxtb	r3, r6
 8004f10:	f083 0301 	eor.w	r3, r3, #1
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	bf14      	ite	ne
 8004f1a:	2301      	movne	r3, #1
 8004f1c:	2300      	moveq	r3, #0
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	4618      	mov	r0, r3
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f28:	7fefffff 	.word	0x7fefffff

08004f2c <_Z29ei_run_impulse_check_canceledv>:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

__attribute__((weak)) EI_IMPULSE_ERROR ei_run_impulse_check_canceled() {
 8004f2c:	b480      	push	{r7}
 8004f2e:	af00      	add	r7, sp, #0
    return EI_IMPULSE_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <_Z16ei_read_timer_msv>:
__attribute__((weak)) EI_IMPULSE_ERROR ei_sleep(int32_t time_ms) {
    HAL_Delay(time_ms);
    return EI_IMPULSE_OK;
}

uint64_t ei_read_timer_ms() {
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 8004f40:	f7fe fc78 	bl	8003834 <HAL_GetTick>
 8004f44:	4603      	mov	r3, r0
 8004f46:	461a      	mov	r2, r3
 8004f48:	f04f 0300 	mov.w	r3, #0
}
 8004f4c:	4610      	mov	r0, r2
 8004f4e:	4619      	mov	r1, r3
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	0000      	movs	r0, r0
 8004f54:	0000      	movs	r0, r0
	...

08004f58 <_Z15ei_printf_floatf>:
    va_start(myargs, format);
    vprintf(format, myargs);
    va_end(myargs);
}

__attribute__((weak)) void ei_printf_float(float f) {
 8004f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f5a:	b08d      	sub	sp, #52	; 0x34
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	ed87 0a01 	vstr	s0, [r7, #4]
        }
        *(c) = '\0';
    }


    ei_printf("%s", s);
 8004f62:	466b      	mov	r3, sp
 8004f64:	461e      	mov	r6, r3
    float n = f;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	627b      	str	r3, [r7, #36]	; 0x24
    char s[MAX_NUMBER_STRING_SIZE];
 8004f6a:	4b7d      	ldr	r3, [pc, #500]	; (8005160 <_Z15ei_printf_floatf+0x208>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	1e5c      	subs	r4, r3, #1
 8004f70:	623c      	str	r4, [r7, #32]
 8004f72:	4623      	mov	r3, r4
 8004f74:	3301      	adds	r3, #1
 8004f76:	4618      	mov	r0, r3
 8004f78:	f04f 0100 	mov.w	r1, #0
 8004f7c:	f04f 0200 	mov.w	r2, #0
 8004f80:	f04f 0300 	mov.w	r3, #0
 8004f84:	00cb      	lsls	r3, r1, #3
 8004f86:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004f8a:	00c2      	lsls	r2, r0, #3
 8004f8c:	4623      	mov	r3, r4
 8004f8e:	3301      	adds	r3, #1
 8004f90:	4618      	mov	r0, r3
 8004f92:	f04f 0100 	mov.w	r1, #0
 8004f96:	f04f 0200 	mov.w	r2, #0
 8004f9a:	f04f 0300 	mov.w	r3, #0
 8004f9e:	00cb      	lsls	r3, r1, #3
 8004fa0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004fa4:	00c2      	lsls	r2, r0, #3
 8004fa6:	4623      	mov	r3, r4
 8004fa8:	3301      	adds	r3, #1
 8004faa:	3307      	adds	r3, #7
 8004fac:	08db      	lsrs	r3, r3, #3
 8004fae:	00db      	lsls	r3, r3, #3
 8004fb0:	ebad 0d03 	sub.w	sp, sp, r3
 8004fb4:	466b      	mov	r3, sp
 8004fb6:	3300      	adds	r3, #0
 8004fb8:	61fb      	str	r3, [r7, #28]
    if (n == 0.0) {
 8004fba:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004fbe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fc6:	d106      	bne.n	8004fd6 <_Z15ei_printf_floatf+0x7e>
        strcpy(s, "0");
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	4966      	ldr	r1, [pc, #408]	; (8005164 <_Z15ei_printf_floatf+0x20c>)
 8004fcc:	461a      	mov	r2, r3
 8004fce:	460b      	mov	r3, r1
 8004fd0:	881b      	ldrh	r3, [r3, #0]
 8004fd2:	8013      	strh	r3, [r2, #0]
 8004fd4:	e0b6      	b.n	8005144 <_Z15ei_printf_floatf+0x1ec>
        char *c = s;
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        int neg = (n < 0);
 8004fda:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004fde:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fe6:	bf4c      	ite	mi
 8004fe8:	2301      	movmi	r3, #1
 8004fea:	2300      	movpl	r3, #0
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	61bb      	str	r3, [r7, #24]
        if (neg) {
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d005      	beq.n	8005002 <_Z15ei_printf_floatf+0xaa>
            n = -n;
 8004ff6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004ffa:	eef1 7a67 	vneg.f32	s15, s15
 8004ffe:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        m = log10(n);
 8005002:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8005006:	f7ff ff51 	bl	8004eac <_ZSt5log10f>
 800500a:	eef0 7a40 	vmov.f32	s15, s0
 800500e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005012:	ee17 3a90 	vmov	r3, s15
 8005016:	62bb      	str	r3, [r7, #40]	; 0x28
        if (neg) {
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d004      	beq.n	8005028 <_Z15ei_printf_floatf+0xd0>
            *(c++) = '-';
 800501e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005020:	1c5a      	adds	r2, r3, #1
 8005022:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005024:	222d      	movs	r2, #45	; 0x2d
 8005026:	701a      	strb	r2, [r3, #0]
        if (m < 1.0) {
 8005028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502a:	2b00      	cmp	r3, #0
 800502c:	dc01      	bgt.n	8005032 <_Z15ei_printf_floatf+0xda>
            m = 0;
 800502e:	2300      	movs	r3, #0
 8005030:	62bb      	str	r3, [r7, #40]	; 0x28
        while (n > PRECISION || m >= 0) {
 8005032:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005034:	f7fb fab8 	bl	80005a8 <__aeabi_f2d>
 8005038:	4b4b      	ldr	r3, [pc, #300]	; (8005168 <_Z15ei_printf_floatf+0x210>)
 800503a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503e:	2401      	movs	r4, #1
 8005040:	f7fb fd9a 	bl	8000b78 <__aeabi_dcmpgt>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d101      	bne.n	800504e <_Z15ei_printf_floatf+0xf6>
 800504a:	2300      	movs	r3, #0
 800504c:	461c      	mov	r4, r3
 800504e:	b2e3      	uxtb	r3, r4
 8005050:	f083 0301 	eor.w	r3, r3, #1
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d002      	beq.n	8005060 <_Z15ei_printf_floatf+0x108>
 800505a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505c:	2b00      	cmp	r3, #0
 800505e:	db6e      	blt.n	800513e <_Z15ei_printf_floatf+0x1e6>
            double weight = pow(10.0, m);
 8005060:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005062:	ed9f 0b3d 	vldr	d0, [pc, #244]	; 8005158 <_Z15ei_printf_floatf+0x200>
 8005066:	f000 f8a8 	bl	80051ba <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800506a:	ed87 0b04 	vstr	d0, [r7, #16]
            if (weight > 0 && !isinf(weight)) {
 800506e:	f04f 0200 	mov.w	r2, #0
 8005072:	f04f 0300 	mov.w	r3, #0
 8005076:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800507a:	f7fb fd7d 	bl	8000b78 <__aeabi_dcmpgt>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d00b      	beq.n	800509c <_Z15ei_printf_floatf+0x144>
 8005084:	ed97 0b04 	vldr	d0, [r7, #16]
 8005088:	f7ff ff20 	bl	8004ecc <_ZSt5isinfd>
 800508c:	4603      	mov	r3, r0
 800508e:	f083 0301 	eor.w	r3, r3, #1
 8005092:	b2db      	uxtb	r3, r3
 8005094:	2b00      	cmp	r3, #0
 8005096:	d001      	beq.n	800509c <_Z15ei_printf_floatf+0x144>
 8005098:	2301      	movs	r3, #1
 800509a:	e000      	b.n	800509e <_Z15ei_printf_floatf+0x146>
 800509c:	2300      	movs	r3, #0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d03a      	beq.n	8005118 <_Z15ei_printf_floatf+0x1c0>
                digit = floor(n / weight);
 80050a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050a4:	f7fb fa80 	bl	80005a8 <__aeabi_f2d>
 80050a8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80050ac:	f7fb fbfe 	bl	80008ac <__aeabi_ddiv>
 80050b0:	4602      	mov	r2, r0
 80050b2:	460b      	mov	r3, r1
 80050b4:	ec43 2b17 	vmov	d7, r2, r3
 80050b8:	eeb0 0a47 	vmov.f32	s0, s14
 80050bc:	eef0 0a67 	vmov.f32	s1, s15
 80050c0:	f008 f8ce 	bl	800d260 <floor>
 80050c4:	ec53 2b10 	vmov	r2, r3, d0
 80050c8:	4610      	mov	r0, r2
 80050ca:	4619      	mov	r1, r3
 80050cc:	f7fb fd74 	bl	8000bb8 <__aeabi_d2iz>
 80050d0:	4603      	mov	r3, r0
 80050d2:	60fb      	str	r3, [r7, #12]
                n -= (digit * weight);
 80050d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050d6:	f7fb fa67 	bl	80005a8 <__aeabi_f2d>
 80050da:	4604      	mov	r4, r0
 80050dc:	460d      	mov	r5, r1
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	f7fb fa50 	bl	8000584 <__aeabi_i2d>
 80050e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80050e8:	f7fb fab6 	bl	8000658 <__aeabi_dmul>
 80050ec:	4602      	mov	r2, r0
 80050ee:	460b      	mov	r3, r1
 80050f0:	4620      	mov	r0, r4
 80050f2:	4629      	mov	r1, r5
 80050f4:	f7fb f8f8 	bl	80002e8 <__aeabi_dsub>
 80050f8:	4602      	mov	r2, r0
 80050fa:	460b      	mov	r3, r1
 80050fc:	4610      	mov	r0, r2
 80050fe:	4619      	mov	r1, r3
 8005100:	f7fb fda2 	bl	8000c48 <__aeabi_d2f>
 8005104:	4603      	mov	r3, r0
 8005106:	627b      	str	r3, [r7, #36]	; 0x24
                *(c++) = '0' + digit;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	b2da      	uxtb	r2, r3
 800510c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800510e:	1c59      	adds	r1, r3, #1
 8005110:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005112:	3230      	adds	r2, #48	; 0x30
 8005114:	b2d2      	uxtb	r2, r2
 8005116:	701a      	strb	r2, [r3, #0]
            if (m == 0 && n > 0) {
 8005118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800511a:	2b00      	cmp	r3, #0
 800511c:	d10b      	bne.n	8005136 <_Z15ei_printf_floatf+0x1de>
 800511e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005122:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800512a:	dd04      	ble.n	8005136 <_Z15ei_printf_floatf+0x1de>
                *(c++) = '.';
 800512c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800512e:	1c5a      	adds	r2, r3, #1
 8005130:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005132:	222e      	movs	r2, #46	; 0x2e
 8005134:	701a      	strb	r2, [r3, #0]
            m--;
 8005136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005138:	3b01      	subs	r3, #1
 800513a:	62bb      	str	r3, [r7, #40]	; 0x28
        while (n > PRECISION || m >= 0) {
 800513c:	e779      	b.n	8005032 <_Z15ei_printf_floatf+0xda>
        *(c) = '\0';
 800513e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005140:	2200      	movs	r2, #0
 8005142:	701a      	strb	r2, [r3, #0]
    ei_printf("%s", s);
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	4619      	mov	r1, r3
 8005148:	4808      	ldr	r0, [pc, #32]	; (800516c <_Z15ei_printf_floatf+0x214>)
 800514a:	f7fd f8e9 	bl	8002320 <_Z9ei_printfPKcz>
 800514e:	46b5      	mov	sp, r6
}
 8005150:	bf00      	nop
 8005152:	3734      	adds	r7, #52	; 0x34
 8005154:	46bd      	mov	sp, r7
 8005156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005158:	00000000 	.word	0x00000000
 800515c:	40240000 	.word	0x40240000
 8005160:	20006c50 	.word	0x20006c50
 8005164:	080106a8 	.word	0x080106a8
 8005168:	20006c48 	.word	0x20006c48
 800516c:	080106ac 	.word	0x080106ac

08005170 <_Z9ei_mallocj>:

__attribute__((weak)) void *ei_malloc(size_t size) {
 8005170:	b580      	push	{r7, lr}
 8005172:	b082      	sub	sp, #8
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
    return malloc(size);
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f009 fc5d 	bl	800ea38 <malloc>
 800517e:	4603      	mov	r3, r0
}
 8005180:	4618      	mov	r0, r3
 8005182:	3708      	adds	r7, #8
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <_Z9ei_callocjj>:

__attribute__((weak)) void *ei_calloc(size_t nitems, size_t size) {
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
    return calloc(nitems, size);
 8005192:	6839      	ldr	r1, [r7, #0]
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f009 fc07 	bl	800e9a8 <calloc>
 800519a:	4603      	mov	r3, r0
}
 800519c:	4618      	mov	r0, r3
 800519e:	3708      	adds	r7, #8
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <_Z7ei_freePv>:

__attribute__((weak)) void ei_free(void *ptr) {
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
    free(ptr);
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f009 fc4b 	bl	800ea48 <free>
}
 80051b2:	bf00      	nop
 80051b4:	3708      	adds	r7, #8
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b084      	sub	sp, #16
 80051be:	af00      	add	r7, sp, #0
 80051c0:	ed87 0b02 	vstr	d0, [r7, #8]
 80051c4:	6078      	str	r0, [r7, #4]
      return pow(__type(__x), __type(__y));
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f7fb f9dc 	bl	8000584 <__aeabi_i2d>
 80051cc:	4602      	mov	r2, r0
 80051ce:	460b      	mov	r3, r1
 80051d0:	ec43 2b11 	vmov	d1, r2, r3
 80051d4:	ed97 0b02 	vldr	d0, [r7, #8]
 80051d8:	f008 f966 	bl	800d4a8 <pow>
 80051dc:	eeb0 7a40 	vmov.f32	s14, s0
 80051e0:	eef0 7a60 	vmov.f32	s15, s1
    }
 80051e4:	eeb0 0a47 	vmov.f32	s0, s14
 80051e8:	eef0 0a67 	vmov.f32	s1, s15
 80051ec:	3710      	adds	r7, #16
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
	...

080051f4 <TfLiteTypeGetName>:
  }
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	4603      	mov	r3, r0
 80051fc:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 80051fe:	79fb      	ldrb	r3, [r7, #7]
 8005200:	2b0b      	cmp	r3, #11
 8005202:	d833      	bhi.n	800526c <TfLiteTypeGetName+0x78>
 8005204:	a201      	add	r2, pc, #4	; (adr r2, 800520c <TfLiteTypeGetName+0x18>)
 8005206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800520a:	bf00      	nop
 800520c:	0800523d 	.word	0x0800523d
 8005210:	08005241 	.word	0x08005241
 8005214:	08005249 	.word	0x08005249
 8005218:	0800524d 	.word	0x0800524d
 800521c:	08005255 	.word	0x08005255
 8005220:	08005261 	.word	0x08005261
 8005224:	08005259 	.word	0x08005259
 8005228:	08005245 	.word	0x08005245
 800522c:	0800525d 	.word	0x0800525d
 8005230:	08005251 	.word	0x08005251
 8005234:	08005265 	.word	0x08005265
 8005238:	08005269 	.word	0x08005269
    case kTfLiteNoType:
      return "NOTYPE";
 800523c:	4b0f      	ldr	r3, [pc, #60]	; (800527c <TfLiteTypeGetName+0x88>)
 800523e:	e016      	b.n	800526e <TfLiteTypeGetName+0x7a>
    case kTfLiteFloat32:
      return "FLOAT32";
 8005240:	4b0f      	ldr	r3, [pc, #60]	; (8005280 <TfLiteTypeGetName+0x8c>)
 8005242:	e014      	b.n	800526e <TfLiteTypeGetName+0x7a>
    case kTfLiteInt16:
      return "INT16";
 8005244:	4b0f      	ldr	r3, [pc, #60]	; (8005284 <TfLiteTypeGetName+0x90>)
 8005246:	e012      	b.n	800526e <TfLiteTypeGetName+0x7a>
    case kTfLiteInt32:
      return "INT32";
 8005248:	4b0f      	ldr	r3, [pc, #60]	; (8005288 <TfLiteTypeGetName+0x94>)
 800524a:	e010      	b.n	800526e <TfLiteTypeGetName+0x7a>
    case kTfLiteUInt8:
      return "UINT8";
 800524c:	4b0f      	ldr	r3, [pc, #60]	; (800528c <TfLiteTypeGetName+0x98>)
 800524e:	e00e      	b.n	800526e <TfLiteTypeGetName+0x7a>
    case kTfLiteInt8:
      return "INT8";
 8005250:	4b0f      	ldr	r3, [pc, #60]	; (8005290 <TfLiteTypeGetName+0x9c>)
 8005252:	e00c      	b.n	800526e <TfLiteTypeGetName+0x7a>
    case kTfLiteInt64:
      return "INT64";
 8005254:	4b0f      	ldr	r3, [pc, #60]	; (8005294 <TfLiteTypeGetName+0xa0>)
 8005256:	e00a      	b.n	800526e <TfLiteTypeGetName+0x7a>
    case kTfLiteBool:
      return "BOOL";
 8005258:	4b0f      	ldr	r3, [pc, #60]	; (8005298 <TfLiteTypeGetName+0xa4>)
 800525a:	e008      	b.n	800526e <TfLiteTypeGetName+0x7a>
    case kTfLiteComplex64:
      return "COMPLEX64";
 800525c:	4b0f      	ldr	r3, [pc, #60]	; (800529c <TfLiteTypeGetName+0xa8>)
 800525e:	e006      	b.n	800526e <TfLiteTypeGetName+0x7a>
    case kTfLiteString:
      return "STRING";
 8005260:	4b0f      	ldr	r3, [pc, #60]	; (80052a0 <TfLiteTypeGetName+0xac>)
 8005262:	e004      	b.n	800526e <TfLiteTypeGetName+0x7a>
    case kTfLiteFloat16:
      return "FLOAT16";
 8005264:	4b0f      	ldr	r3, [pc, #60]	; (80052a4 <TfLiteTypeGetName+0xb0>)
 8005266:	e002      	b.n	800526e <TfLiteTypeGetName+0x7a>
    case kTfLiteFloat64:
      return "FLOAT64";
 8005268:	4b0f      	ldr	r3, [pc, #60]	; (80052a8 <TfLiteTypeGetName+0xb4>)
 800526a:	e000      	b.n	800526e <TfLiteTypeGetName+0x7a>
  }
  return "Unknown type";
 800526c:	4b0f      	ldr	r3, [pc, #60]	; (80052ac <TfLiteTypeGetName+0xb8>)
}
 800526e:	4618      	mov	r0, r3
 8005270:	370c      	adds	r7, #12
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	080106b0 	.word	0x080106b0
 8005280:	080106b8 	.word	0x080106b8
 8005284:	080106c0 	.word	0x080106c0
 8005288:	080106c8 	.word	0x080106c8
 800528c:	080106d0 	.word	0x080106d0
 8005290:	080106d8 	.word	0x080106d8
 8005294:	080106e0 	.word	0x080106e0
 8005298:	080106e8 	.word	0x080106e8
 800529c:	080106f0 	.word	0x080106f0
 80052a0:	080106fc 	.word	0x080106fc
 80052a4:	08010704 	.word	0x08010704
 80052a8:	0801070c 	.word	0x0801070c
 80052ac:	08010714 	.word	0x08010714

080052b0 <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 80052b0:	b480      	push	{r7}
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80052b8:	4618      	mov	r0, r3
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
	...

080052c4 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 80052c4:	b5b0      	push	{r4, r5, r7, lr}
 80052c6:	b088      	sub	sp, #32
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	ed87 0b02 	vstr	d0, [r7, #8]
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  if (double_multiplier == 0.) {
 80052d2:	f04f 0200 	mov.w	r2, #0
 80052d6:	f04f 0300 	mov.w	r3, #0
 80052da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80052de:	f7fb fc23 	bl	8000b28 <__aeabi_dcmpeq>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d006      	beq.n	80052f6 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x32>
    *quantized_multiplier = 0;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	601a      	str	r2, [r3, #0]
    *shift = 0;
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	2200      	movs	r2, #0
 80052f2:	601a      	str	r2, [r3, #0]
    return;
 80052f4:	e06b      	b.n	80053ce <_ZN6tflite18QuantizeMultiplierEdPlPi+0x10a>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 80052f6:	6838      	ldr	r0, [r7, #0]
 80052f8:	ed97 0b02 	vldr	d0, [r7, #8]
 80052fc:	f008 f830 	bl	800d360 <frexp>
 8005300:	ed87 0b04 	vstr	d0, [r7, #16]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 8005304:	f04f 0200 	mov.w	r2, #0
 8005308:	4b32      	ldr	r3, [pc, #200]	; (80053d4 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x110>)
 800530a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800530e:	f7fb f9a3 	bl	8000658 <__aeabi_dmul>
 8005312:	4602      	mov	r2, r0
 8005314:	460b      	mov	r3, r1
 8005316:	ec43 2b17 	vmov	d7, r2, r3
 800531a:	eeb0 0a47 	vmov.f32	s0, s14
 800531e:	eef0 0a67 	vmov.f32	s1, s15
 8005322:	f000 f97a 	bl	800561a <_ZN6tflite11TfLiteRoundIdEET_S1_>
 8005326:	ec53 2b10 	vmov	r2, r3, d0
 800532a:	4610      	mov	r0, r2
 800532c:	4619      	mov	r1, r3
 800532e:	f7fb fcf3 	bl	8000d18 <__aeabi_d2lz>
 8005332:	4602      	mov	r2, r0
 8005334:	460b      	mov	r3, r1
 8005336:	e9c7 2306 	strd	r2, r3, [r7, #24]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 800533a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800533e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8005342:	f04f 0100 	mov.w	r1, #0
 8005346:	4290      	cmp	r0, r2
 8005348:	eb71 0303 	sbcs.w	r3, r1, r3
 800534c:	da01      	bge.n	8005352 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x8e>
 800534e:	f009 fb05 	bl	800e95c <abort>
  if (q_fixed == (1ll << 31)) {
 8005352:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005356:	2b00      	cmp	r3, #0
 8005358:	bf08      	it	eq
 800535a:	f1b2 4f00 	cmpeq.w	r2, #2147483648	; 0x80000000
 800535e:	d117      	bne.n	8005390 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xcc>
    q_fixed /= 2;
 8005360:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005364:	0fd9      	lsrs	r1, r3, #31
 8005366:	4608      	mov	r0, r1
 8005368:	f04f 0100 	mov.w	r1, #0
 800536c:	1884      	adds	r4, r0, r2
 800536e:	eb41 0503 	adc.w	r5, r1, r3
 8005372:	f04f 0200 	mov.w	r2, #0
 8005376:	f04f 0300 	mov.w	r3, #0
 800537a:	0862      	lsrs	r2, r4, #1
 800537c:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8005380:	106b      	asrs	r3, r5, #1
 8005382:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ++*shift;
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	1c5a      	adds	r2, r3, #1
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 8005390:	f7ff ff8e 	bl	80052b0 <_ZNSt14numeric_limitsIlE3maxEv>
 8005394:	4603      	mov	r3, r0
 8005396:	4618      	mov	r0, r3
 8005398:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800539c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053a0:	4290      	cmp	r0, r2
 80053a2:	eb71 0303 	sbcs.w	r3, r1, r3
 80053a6:	da01      	bge.n	80053ac <_ZN6tflite18QuantizeMultiplierEdPlPi+0xe8>
 80053a8:	f009 fad8 	bl	800e95c <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f113 0f1f 	cmn.w	r3, #31
 80053b4:	da08      	bge.n	80053c8 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x104>
    *shift = 0;
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	2200      	movs	r2, #0
 80053ba:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 80053bc:	f04f 0200 	mov.w	r2, #0
 80053c0:	f04f 0300 	mov.w	r3, #0
 80053c4:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 80053c8:	69ba      	ldr	r2, [r7, #24]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	601a      	str	r2, [r3, #0]
}
 80053ce:	3720      	adds	r7, #32
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bdb0      	pop	{r4, r5, r7, pc}
 80053d4:	41e00000 	.word	0x41e00000

080053d8 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>:

void QuantizeMultiplierGreaterThanOne(double double_multiplier,
                                      int32_t* quantized_multiplier,
                                      int* left_shift) {
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	ed87 0b02 	vstr	d0, [r7, #8]
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  TFLITE_CHECK_GT(double_multiplier, 1.);
 80053e6:	f04f 0200 	mov.w	r2, #0
 80053ea:	4b0d      	ldr	r3, [pc, #52]	; (8005420 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x48>)
 80053ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80053f0:	f7fb fbc2 	bl	8000b78 <__aeabi_dcmpgt>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d101      	bne.n	80053fe <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x26>
 80053fa:	f009 faaf 	bl	800e95c <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
 80053fe:	6839      	ldr	r1, [r7, #0]
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	ed97 0b02 	vldr	d0, [r7, #8]
 8005406:	f7ff ff5d 	bl	80052c4 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_GE(*left_shift, 0);
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2b00      	cmp	r3, #0
 8005410:	da01      	bge.n	8005416 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x3e>
 8005412:	f009 faa3 	bl	800e95c <abort>
}
 8005416:	bf00      	nop
 8005418:	3710      	adds	r7, #16
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	3ff00000 	.word	0x3ff00000

08005424 <_ZSt3minIdERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8005424:	b580      	push	{r7, lr}
 8005426:	b082      	sub	sp, #8
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543a:	f7fb fb7f 	bl	8000b3c <__aeabi_dcmplt>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d001      	beq.n	8005448 <_ZSt3minIdERKT_S2_S2_+0x24>
	return __b;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	e000      	b.n	800544a <_ZSt3minIdERKT_S2_S2_+0x26>
      return __a;
 8005448:	687b      	ldr	r3, [r7, #4]
    }
 800544a:	4618      	mov	r0, r3
 800544c:	3708      	adds	r7, #8
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	0000      	movs	r0, r0
 8005454:	0000      	movs	r0, r0
	...

08005458 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
 8005458:	b5b0      	push	{r4, r5, r7, lr}
 800545a:	b08e      	sub	sp, #56	; 0x38
 800545c:	af00      	add	r7, sp, #0
 800545e:	ed87 0b06 	vstr	d0, [r7, #24]
 8005462:	ed87 1b04 	vstr	d1, [r7, #16]
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  // Patched by Edge Impulse, cast double to std::min/std::max calls
  const double input_beta_real_multiplier = std::min<double>(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
 800546c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005470:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005474:	f7fb f8f0 	bl	8000658 <__aeabi_dmul>
 8005478:	4602      	mov	r2, r0
 800547a:	460b      	mov	r3, r1
 800547c:	4614      	mov	r4, r2
 800547e:	461d      	mov	r5, r3
 8005480:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	fa22 f303 	lsr.w	r3, r2, r3
 800548a:	4618      	mov	r0, r3
 800548c:	f7fb f87a 	bl	8000584 <__aeabi_i2d>
 8005490:	4602      	mov	r2, r0
 8005492:	460b      	mov	r3, r1
 8005494:	4620      	mov	r0, r4
 8005496:	4629      	mov	r1, r5
 8005498:	f7fb f8de 	bl	8000658 <__aeabi_dmul>
 800549c:	4602      	mov	r2, r0
 800549e:	460b      	mov	r3, r1
 80054a0:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80054a4:	a30e      	add	r3, pc, #56	; (adr r3, 80054e0 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x88>)
 80054a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054aa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80054ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80054b2:	f107 0320 	add.w	r3, r7, #32
 80054b6:	4611      	mov	r1, r2
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7ff ffb3 	bl	8005424 <_ZSt3minIdERKT_S2_S2_>
 80054be:	4603      	mov	r3, r0
 80054c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
 80054c8:	6879      	ldr	r1, [r7, #4]
 80054ca:	68b8      	ldr	r0, [r7, #8]
 80054cc:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 80054d0:	f7ff ff82 	bl	80053d8 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>
                                   quantized_multiplier, left_shift);
}
 80054d4:	bf00      	nop
 80054d6:	3738      	adds	r7, #56	; 0x38
 80054d8:	46bd      	mov	sp, r7
 80054da:	bdb0      	pop	{r4, r5, r7, pc}
 80054dc:	f3af 8000 	nop.w
 80054e0:	ffc00000 	.word	0xffc00000
 80054e4:	41dfffff 	.word	0x41dfffff

080054e8 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
 80054e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054ec:	b087      	sub	sp, #28
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	60f8      	str	r0, [r7, #12]
 80054f2:	60b9      	str	r1, [r7, #8]
 80054f4:	607a      	str	r2, [r7, #4]
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
 80054f6:	2201      	movs	r2, #1
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	fa02 f303 	lsl.w	r3, r2, r3
 80054fe:	3b01      	subs	r3, #1
 8005500:	4618      	mov	r0, r3
 8005502:	f7fb f83f 	bl	8000584 <__aeabi_i2d>
 8005506:	4682      	mov	sl, r0
 8005508:	468b      	mov	fp, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	1ad1      	subs	r1, r2, r3
 8005510:	f04f 0201 	mov.w	r2, #1
 8005514:	f04f 0300 	mov.w	r3, #0
 8005518:	f1a1 0620 	sub.w	r6, r1, #32
 800551c:	f1c1 0020 	rsb	r0, r1, #32
 8005520:	fa03 f901 	lsl.w	r9, r3, r1
 8005524:	fa02 f606 	lsl.w	r6, r2, r6
 8005528:	ea49 0906 	orr.w	r9, r9, r6
 800552c:	fa22 f000 	lsr.w	r0, r2, r0
 8005530:	ea49 0900 	orr.w	r9, r9, r0
 8005534:	fa02 f801 	lsl.w	r8, r2, r1
      1.0 * ((1 << input_integer_bits) - 1) *
 8005538:	4640      	mov	r0, r8
 800553a:	4649      	mov	r1, r9
 800553c:	f7fb f85e 	bl	80005fc <__aeabi_l2d>
 8005540:	4602      	mov	r2, r0
 8005542:	460b      	mov	r3, r1
 8005544:	4650      	mov	r0, sl
 8005546:	4659      	mov	r1, fp
 8005548:	f7fb f886 	bl	8000658 <__aeabi_dmul>
 800554c:	4602      	mov	r2, r0
 800554e:	460b      	mov	r3, r1
 8005550:	4690      	mov	r8, r2
 8005552:	4699      	mov	r9, r3
      (1ll << input_left_shift);
 8005554:	f04f 0201 	mov.w	r2, #1
 8005558:	f04f 0300 	mov.w	r3, #0
 800555c:	68b9      	ldr	r1, [r7, #8]
 800555e:	f1a1 0620 	sub.w	r6, r1, #32
 8005562:	f1c1 0020 	rsb	r0, r1, #32
 8005566:	fa03 f501 	lsl.w	r5, r3, r1
 800556a:	fa02 f606 	lsl.w	r6, r2, r6
 800556e:	4335      	orrs	r5, r6
 8005570:	fa22 f000 	lsr.w	r0, r2, r0
 8005574:	4305      	orrs	r5, r0
 8005576:	fa02 f401 	lsl.w	r4, r2, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 800557a:	4620      	mov	r0, r4
 800557c:	4629      	mov	r1, r5
 800557e:	f7fb f83d 	bl	80005fc <__aeabi_l2d>
 8005582:	4602      	mov	r2, r0
 8005584:	460b      	mov	r3, r1
  const double max_input_rescaled =
 8005586:	4640      	mov	r0, r8
 8005588:	4649      	mov	r1, r9
 800558a:	f7fb f98f 	bl	80008ac <__aeabi_ddiv>
 800558e:	4602      	mov	r2, r0
 8005590:	460b      	mov	r3, r1
 8005592:	e9c7 2304 	strd	r2, r3, [r7, #16]
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
 8005596:	ed97 0b04 	vldr	d0, [r7, #16]
 800559a:	f007 fe61 	bl	800d260 <floor>
 800559e:	ec53 2b10 	vmov	r2, r3, d0
 80055a2:	4610      	mov	r0, r2
 80055a4:	4619      	mov	r1, r3
 80055a6:	f7fb fb07 	bl	8000bb8 <__aeabi_d2iz>
 80055aa:	4603      	mov	r3, r0
#endif  // TFLITE_EMULATE_FLOAT
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	371c      	adds	r7, #28
 80055b0:	46bd      	mov	sp, r7
 80055b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080055b6 <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80055b6:	b480      	push	{r7}
 80055b8:	b083      	sub	sp, #12
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
 80055be:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	ed93 7a00 	vldr	s14, [r3]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	edd3 7a00 	vldr	s15, [r3]
 80055cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80055d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055d4:	d501      	bpl.n	80055da <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	e000      	b.n	80055dc <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 80055da:	687b      	ldr	r3, [r7, #4]
    }
 80055dc:	4618      	mov	r0, r3
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <_ZSt3maxIfERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	ed93 7a00 	vldr	s14, [r3]
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	edd3 7a00 	vldr	s15, [r3]
 80055fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005606:	d501      	bpl.n	800560c <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	e000      	b.n	800560e <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 800560c:	687b      	ldr	r3, [r7, #4]
    }
 800560e:	4618      	mov	r0, r3
 8005610:	370c      	adds	r7, #12
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr

0800561a <_ZN6tflite11TfLiteRoundIdEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 800561a:	b580      	push	{r7, lr}
 800561c:	b082      	sub	sp, #8
 800561e:	af00      	add	r7, sp, #0
 8005620:	ed87 0b00 	vstr	d0, [r7]
 8005624:	ed97 0b00 	vldr	d0, [r7]
 8005628:	f007 fed2 	bl	800d3d0 <round>
 800562c:	eeb0 7a40 	vmov.f32	s14, s0
 8005630:	eef0 7a60 	vmov.f32	s15, s1
 8005634:	eeb0 0a47 	vmov.f32	s0, s14
 8005638:	eef0 0a67 	vmov.f32	s1, s15
 800563c:	3708      	adds	r7, #8
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}

08005642 <_ZN6tflite11TfLiteRoundIfEET_S1_>:
 8005642:	b580      	push	{r7, lr}
 8005644:	b082      	sub	sp, #8
 8005646:	af00      	add	r7, sp, #0
 8005648:	ed87 0a01 	vstr	s0, [r7, #4]
 800564c:	ed97 0a01 	vldr	s0, [r7, #4]
 8005650:	f7fb fdf7 	bl	8001242 <_ZSt5roundf>
 8005654:	eef0 7a40 	vmov.f32	s15, s0
 8005658:	eeb0 0a67 	vmov.f32	s0, s15
 800565c:	3708      	adds	r7, #8
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <_ZNSt14numeric_limitsIaE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 8005662:	b480      	push	{r7}
 8005664:	af00      	add	r7, sp, #0
 8005666:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800566a:	4618      	mov	r0, r3
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <_ZNSt14numeric_limitsIaE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 8005674:	b480      	push	{r7}
 8005676:	af00      	add	r7, sp, #0
 8005678:	237f      	movs	r3, #127	; 0x7f
 800567a:	4618      	mov	r0, r3
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 8005684:	b480      	push	{r7}
 8005686:	af00      	add	r7, sp, #0
 8005688:	2300      	movs	r3, #0
 800568a:	4618      	mov	r0, r3
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 8005694:	b480      	push	{r7}
 8005696:	af00      	add	r7, sp, #0
 8005698:	23ff      	movs	r3, #255	; 0xff
 800569a:	4618      	mov	r0, r3
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>:
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"

namespace tflite {

inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4618      	mov	r0, r3
 80056b4:	370c      	adds	r7, #12
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr

080056be <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>:
inline int SizeOfDimension(const TfLiteTensor* t, int dim) {
 80056be:	b480      	push	{r7}
 80056c0:	b083      	sub	sp, #12
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
 80056c6:	6039      	str	r1, [r7, #0]
  return t->dims->data[dim];
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	689a      	ldr	r2, [r3, #8]
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	4413      	add	r3, r2
 80056d2:	685b      	ldr	r3, [r3, #4]
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <_ZN6tflite11NumElementsEPK14TfLiteIntArray>:
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
inline int NumIntermediates(const TfLiteNode* node) {
  return node->intermediates->size;
}

inline int64_t NumElements(const TfLiteIntArray* dims) {
 80056e0:	b480      	push	{r7}
 80056e2:	b087      	sub	sp, #28
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  int64_t count = 1;
 80056e8:	f04f 0201 	mov.w	r2, #1
 80056ec:	f04f 0300 	mov.w	r3, #0
 80056f0:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for (int i = 0; i < dims->size; ++i) {
 80056f4:	2300      	movs	r3, #0
 80056f6:	60fb      	str	r3, [r7, #12]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	429a      	cmp	r2, r3
 8005700:	da1b      	bge.n	800573a <_ZN6tflite11NumElementsEPK14TfLiteIntArray+0x5a>
    count *= dims->data[i];
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	4413      	add	r3, r2
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	461a      	mov	r2, r3
 800570e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005712:	6979      	ldr	r1, [r7, #20]
 8005714:	fb02 f001 	mul.w	r0, r2, r1
 8005718:	6939      	ldr	r1, [r7, #16]
 800571a:	fb03 f101 	mul.w	r1, r3, r1
 800571e:	4401      	add	r1, r0
 8005720:	6938      	ldr	r0, [r7, #16]
 8005722:	fba0 2302 	umull	r2, r3, r0, r2
 8005726:	4419      	add	r1, r3
 8005728:	460b      	mov	r3, r1
 800572a:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800572e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for (int i = 0; i < dims->size; ++i) {
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	3301      	adds	r3, #1
 8005736:	60fb      	str	r3, [r7, #12]
 8005738:	e7de      	b.n	80056f8 <_ZN6tflite11NumElementsEPK14TfLiteIntArray+0x18>
  }
  return count;
 800573a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 800573e:	4610      	mov	r0, r2
 8005740:	4619      	mov	r1, r3
 8005742:	371c      	adds	r7, #28
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <_ZN6tflite11NumElementsEPK12TfLiteTensor>:

inline int64_t NumElements(const TfLiteTensor* t) {
 800574c:	b580      	push	{r7, lr}
 800574e:	b082      	sub	sp, #8
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  return NumElements(t->dims);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	4618      	mov	r0, r3
 800575a:	f7ff ffc1 	bl	80056e0 <_ZN6tflite11NumElementsEPK14TfLiteIntArray>
 800575e:	4602      	mov	r2, r0
 8005760:	460b      	mov	r3, r1
}
 8005762:	4610      	mov	r0, r2
 8005764:	4619      	mov	r1, r3
 8005766:	3708      	adds	r7, #8
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	ed87 0b00 	vstr	d0, [r7]
 8005776:	683a      	ldr	r2, [r7, #0]
 8005778:	6879      	ldr	r1, [r7, #4]
 800577a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800577e:	ec43 2b17 	vmov	d7, r2, r3
 8005782:	eeb0 0a47 	vmov.f32	s0, s14
 8005786:	eef0 0a67 	vmov.f32	s1, s15
 800578a:	370c      	adds	r7, #12
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i>:
TfLiteStatus PopulateConvolutionQuantizationParams(
    TfLiteContext* context, const TfLiteTensor* input,
    const TfLiteTensor* filter, const TfLiteTensor* bias, TfLiteTensor* output,
    const TfLiteFusedActivation& activation, int32_t* multiplier, int* shift,
    int32_t* output_activation_min, int32_t* output_activation_max,
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
 8005794:	b5b0      	push	{r4, r5, r7, lr}
 8005796:	b09c      	sub	sp, #112	; 0x70
 8005798:	af04      	add	r7, sp, #16
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
 80057a0:	603b      	str	r3, [r7, #0]
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d013      	beq.n	80057d4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x40>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	695c      	ldr	r4, [r3, #20]
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80057b6:	461a      	mov	r2, r3
 80057b8:	2301      	movs	r3, #1
 80057ba:	9303      	str	r3, [sp, #12]
 80057bc:	9202      	str	r2, [sp, #8]
 80057be:	4b98      	ldr	r3, [pc, #608]	; (8005a20 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x28c>)
 80057c0:	9301      	str	r3, [sp, #4]
 80057c2:	4b98      	ldr	r3, [pc, #608]	; (8005a24 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x290>)
 80057c4:	9300      	str	r3, [sp, #0]
 80057c6:	2335      	movs	r3, #53	; 0x35
 80057c8:	4a97      	ldr	r2, [pc, #604]	; (8005a28 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 80057ca:	4998      	ldr	r1, [pc, #608]	; (8005a2c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 80057cc:	68f8      	ldr	r0, [r7, #12]
 80057ce:	47a0      	blx	r4
 80057d0:	2301      	movs	r3, #1
 80057d2:	e173      	b.n	8005abc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
                    kTfLiteAffineQuantization);
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d013      	beq.n	8005806 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x72>
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	695c      	ldr	r4, [r3, #20]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80057e8:	461a      	mov	r2, r3
 80057ea:	2301      	movs	r3, #1
 80057ec:	9303      	str	r3, [sp, #12]
 80057ee:	9202      	str	r2, [sp, #8]
 80057f0:	4b8b      	ldr	r3, [pc, #556]	; (8005a20 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x28c>)
 80057f2:	9301      	str	r3, [sp, #4]
 80057f4:	4b8e      	ldr	r3, [pc, #568]	; (8005a30 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x29c>)
 80057f6:	9300      	str	r3, [sp, #0]
 80057f8:	2337      	movs	r3, #55	; 0x37
 80057fa:	4a8b      	ldr	r2, [pc, #556]	; (8005a28 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 80057fc:	498b      	ldr	r1, [pc, #556]	; (8005a2c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 80057fe:	68f8      	ldr	r0, [r7, #12]
 8005800:	47a0      	blx	r4
 8005802:	2301      	movs	r3, #1
 8005804:	e15a      	b.n	8005abc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
  // quantization is properly populated.
  // TF_LITE_ENSURE_EQ(context, bias->quantization.type,
  // kTfLiteAffineQuantization);

  // Check data type.
  const auto* affine_quantization =
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800580a:	65bb      	str	r3, [r7, #88]	; 0x58
      reinterpret_cast<TfLiteAffineQuantization*>(filter->quantization.params);
  TF_LITE_ENSURE(context, affine_quantization);
 800580c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800580e:	2b00      	cmp	r3, #0
 8005810:	d10a      	bne.n	8005828 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x94>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	695c      	ldr	r4, [r3, #20]
 8005816:	4b87      	ldr	r3, [pc, #540]	; (8005a34 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a0>)
 8005818:	9300      	str	r3, [sp, #0]
 800581a:	2342      	movs	r3, #66	; 0x42
 800581c:	4a82      	ldr	r2, [pc, #520]	; (8005a28 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800581e:	4986      	ldr	r1, [pc, #536]	; (8005a38 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a4>)
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	47a0      	blx	r4
 8005824:	2301      	movs	r3, #1
 8005826:	e149      	b.n	8005abc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
  TF_LITE_ENSURE(context, affine_quantization->scale);
 8005828:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d10a      	bne.n	8005846 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xb2>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	695c      	ldr	r4, [r3, #20]
 8005834:	4b81      	ldr	r3, [pc, #516]	; (8005a3c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a8>)
 8005836:	9300      	str	r3, [sp, #0]
 8005838:	2343      	movs	r3, #67	; 0x43
 800583a:	4a7b      	ldr	r2, [pc, #492]	; (8005a28 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800583c:	497e      	ldr	r1, [pc, #504]	; (8005a38 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a4>)
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	47a0      	blx	r4
 8005842:	2301      	movs	r3, #1
 8005844:	e13a      	b.n	8005abc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
  const bool is_per_channel = affine_quantization->scale->size > 1;
 8005846:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2b01      	cmp	r3, #1
 800584e:	bfcc      	ite	gt
 8005850:	2301      	movgt	r3, #1
 8005852:	2300      	movle	r3, #0
 8005854:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (is_per_channel) {
 8005858:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800585c:	2b00      	cmp	r3, #0
 800585e:	d067      	beq.n	8005930 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x19c>
    //  Currently only Int8/Int16 is supported for per channel quantization.
    TF_LITE_ENSURE(context,
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	2b09      	cmp	r3, #9
 8005866:	d00e      	beq.n	8005886 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xf2>
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	2b07      	cmp	r3, #7
 800586e:	d00a      	beq.n	8005886 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xf2>
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	695c      	ldr	r4, [r3, #20]
 8005874:	4b72      	ldr	r3, [pc, #456]	; (8005a40 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2ac>)
 8005876:	9300      	str	r3, [sp, #0]
 8005878:	2347      	movs	r3, #71	; 0x47
 800587a:	4a6b      	ldr	r2, [pc, #428]	; (8005a28 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800587c:	496e      	ldr	r1, [pc, #440]	; (8005a38 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a4>)
 800587e:	68f8      	ldr	r0, [r7, #12]
 8005880:	47a0      	blx	r4
 8005882:	2301      	movs	r3, #1
 8005884:	e11a      	b.n	8005abc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
                   input->type == kTfLiteInt8 || input->type == kTfLiteInt16);
    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	2b09      	cmp	r3, #9
 800588c:	d012      	beq.n	80058b4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x120>
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	695c      	ldr	r4, [r3, #20]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	461a      	mov	r2, r3
 8005898:	2309      	movs	r3, #9
 800589a:	9303      	str	r3, [sp, #12]
 800589c:	9202      	str	r2, [sp, #8]
 800589e:	4b69      	ldr	r3, [pc, #420]	; (8005a44 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b0>)
 80058a0:	9301      	str	r3, [sp, #4]
 80058a2:	4b69      	ldr	r3, [pc, #420]	; (8005a48 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b4>)
 80058a4:	9300      	str	r3, [sp, #0]
 80058a6:	2349      	movs	r3, #73	; 0x49
 80058a8:	4a5f      	ldr	r2, [pc, #380]	; (8005a28 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 80058aa:	4960      	ldr	r1, [pc, #384]	; (8005a2c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	47a0      	blx	r4
 80058b0:	2301      	movs	r3, #1
 80058b2:	e103      	b.n	8005abc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
 80058b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80058be:	429a      	cmp	r2, r3
 80058c0:	d013      	beq.n	80058ea <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x156>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	695c      	ldr	r4, [r3, #20]
 80058c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80058d0:	9203      	str	r2, [sp, #12]
 80058d2:	9302      	str	r3, [sp, #8]
 80058d4:	4b5d      	ldr	r3, [pc, #372]	; (8005a4c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b8>)
 80058d6:	9301      	str	r3, [sp, #4]
 80058d8:	4b5d      	ldr	r3, [pc, #372]	; (8005a50 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2bc>)
 80058da:	9300      	str	r3, [sp, #0]
 80058dc:	234a      	movs	r3, #74	; 0x4a
 80058de:	4a52      	ldr	r2, [pc, #328]	; (8005a28 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 80058e0:	4952      	ldr	r1, [pc, #328]	; (8005a2c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	47a0      	blx	r4
 80058e6:	2301      	movs	r3, #1
 80058e8:	e0e8      	b.n	8005abc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
    TF_LITE_ENSURE_EQ(
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	689a      	ldr	r2, [r3, #8]
 80058ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	4413      	add	r3, r2
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d017      	beq.n	8005930 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x19c>
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	695c      	ldr	r4, [r3, #20]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	689a      	ldr	r2, [r3, #8]
 8005908:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	4413      	add	r3, r2
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	9303      	str	r3, [sp, #12]
 8005914:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005918:	9302      	str	r3, [sp, #8]
 800591a:	4b4e      	ldr	r3, [pc, #312]	; (8005a54 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2c0>)
 800591c:	9301      	str	r3, [sp, #4]
 800591e:	4b4b      	ldr	r3, [pc, #300]	; (8005a4c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b8>)
 8005920:	9300      	str	r3, [sp, #0]
 8005922:	234b      	movs	r3, #75	; 0x4b
 8005924:	4a40      	ldr	r2, [pc, #256]	; (8005a28 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 8005926:	4941      	ldr	r1, [pc, #260]	; (8005a2c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	47a0      	blx	r4
 800592c:	2301      	movs	r3, #1
 800592e:	e0c5      	b.n	8005abc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
        context, num_channels,
        filter->dims->data[affine_quantization->quantized_dimension]);
  }

  // Populate multiplier and shift using affine quantization.
  const float input_scale = input->params.scale;
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	653b      	str	r3, [r7, #80]	; 0x50
  const float output_scale = output->params.scale;
 8005936:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	64fb      	str	r3, [r7, #76]	; 0x4c
  const float* filter_scales = affine_quantization->scale->data;
 800593c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	3304      	adds	r3, #4
 8005942:	64bb      	str	r3, [r7, #72]	; 0x48
  for (int i = 0; i < num_channels; ++i) {
 8005944:	2300      	movs	r3, #0
 8005946:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005948:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800594a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800594e:	429a      	cmp	r2, r3
 8005950:	da47      	bge.n	80059e2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x24e>
    // If per-tensor quantization parameter is specified, broadcast it along the
    // quantization dimension (channels_out).
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
 8005952:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005956:	2b00      	cmp	r3, #0
 8005958:	d005      	beq.n	8005966 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1d2>
 800595a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005960:	4413      	add	r3, r2
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	e001      	b.n	800596a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1d6>
 8005966:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	647b      	str	r3, [r7, #68]	; 0x44
    const double filter_scale = static_cast<double>(scale);
 800596c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800596e:	f7fa fe1b 	bl	80005a8 <__aeabi_f2d>
 8005972:	4602      	mov	r2, r0
 8005974:	460b      	mov	r3, r1
 8005976:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    const double effective_output_scale = static_cast<double>(input_scale) *
 800597a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800597c:	f7fa fe14 	bl	80005a8 <__aeabi_f2d>
 8005980:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005984:	f7fa fe68 	bl	8000658 <__aeabi_dmul>
 8005988:	4602      	mov	r2, r0
 800598a:	460b      	mov	r3, r1
 800598c:	4614      	mov	r4, r2
 800598e:	461d      	mov	r5, r3
                                          filter_scale /
                                          static_cast<double>(output_scale);
 8005990:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005992:	f7fa fe09 	bl	80005a8 <__aeabi_f2d>
 8005996:	4602      	mov	r2, r0
 8005998:	460b      	mov	r3, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
 800599a:	4620      	mov	r0, r4
 800599c:	4629      	mov	r1, r5
 800599e:	f7fa ff85 	bl	80008ac <__aeabi_ddiv>
 80059a2:	4602      	mov	r2, r0
 80059a4:	460b      	mov	r3, r1
 80059a6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    int32_t significand;
    int channel_shift;
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
 80059aa:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80059ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80059b2:	4611      	mov	r1, r2
 80059b4:	4618      	mov	r0, r3
 80059b6:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 80059ba:	f7ff fc83 	bl	80052c4 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    per_channel_multiplier[i] = significand;
 80059be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80059c6:	4413      	add	r3, r2
 80059c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059ca:	601a      	str	r2, [r3, #0]
    per_channel_shift[i] = channel_shift;
 80059cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80059d4:	4413      	add	r3, r2
 80059d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059d8:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < num_channels; ++i) {
 80059da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059dc:	3301      	adds	r3, #1
 80059de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059e0:	e7b2      	b.n	8005948 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1b4>
  }

  // Populate scalar quantization parameters.
  // This check on legacy quantization parameters is kept only for backward
  // compatibility.
  if (input->type == kTfLiteUInt8) {
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	2b03      	cmp	r3, #3
 80059e8:	d146      	bne.n	8005a78 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2e4>
    // Check bias scale == input scale * filter scale.
    double real_multiplier = 0.0;
 80059ea:	f04f 0200 	mov.w	r2, #0
 80059ee:	f04f 0300 	mov.w	r3, #0
 80059f2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 80059f6:	f107 0318 	add.w	r3, r7, #24
 80059fa:	9301      	str	r3, [sp, #4]
 80059fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059fe:	9300      	str	r3, [sp, #0]
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	68b9      	ldr	r1, [r7, #8]
 8005a06:	68f8      	ldr	r0, [r7, #12]
 8005a08:	f000 f85e 	bl	8005ac8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005a12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d01e      	beq.n	8005a58 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2c4>
 8005a1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005a1e:	e04d      	b.n	8005abc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
 8005a20:	080107dc 	.word	0x080107dc
 8005a24:	080107f8 	.word	0x080107f8
 8005a28:	08010724 	.word	0x08010724
 8005a2c:	080107c0 	.word	0x080107c0
 8005a30:	08010814 	.word	0x08010814
 8005a34:	08010848 	.word	0x08010848
 8005a38:	08010830 	.word	0x08010830
 8005a3c:	0801085c 	.word	0x0801085c
 8005a40:	08010878 	.word	0x08010878
 8005a44:	080108b4 	.word	0x080108b4
 8005a48:	080108c0 	.word	0x080108c0
 8005a4c:	080108d0 	.word	0x080108d0
 8005a50:	080108e0 	.word	0x080108e0
 8005a54:	08010904 	.word	0x08010904
        context, input, filter, bias, output, &real_multiplier));
    int exponent;

    // Populate quantization parameters with multiplier and shift.
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
 8005a58:	ed97 7b06 	vldr	d7, [r7, #24]
 8005a5c:	f107 0314 	add.w	r3, r7, #20
 8005a60:	4619      	mov	r1, r3
 8005a62:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8005a64:	eeb0 0a47 	vmov.f32	s0, s14
 8005a68:	eef0 0a67 	vmov.f32	s1, s15
 8005a6c:	f7ff fc2a 	bl	80052c4 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    *shift = -exponent;
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	425a      	negs	r2, r3
 8005a74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005a76:	601a      	str	r2, [r3, #0]
  }
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	2b09      	cmp	r3, #9
 8005a7e:	d007      	beq.n	8005a90 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2fc>
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	2b03      	cmp	r3, #3
 8005a86:	d003      	beq.n	8005a90 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2fc>
      input->type == kTfLiteInt16) {
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	781b      	ldrb	r3, [r3, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 8005a8c:	2b07      	cmp	r3, #7
 8005a8e:	d114      	bne.n	8005aba <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x326>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 8005a90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a92:	7819      	ldrb	r1, [r3, #0]
 8005a94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a98:	9300      	str	r3, [sp, #0]
 8005a9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005a9e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	f000 f99b 	bl	8005ddc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005aac:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d002      	beq.n	8005aba <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x326>
 8005ab4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005ab8:	e000      	b.n	8005abc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
        context, activation, output, output_activation_min,
        output_activation_max));
  }
  return kTfLiteOk;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3760      	adds	r7, #96	; 0x60
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bdb0      	pop	{r4, r5, r7, pc}
 8005ac4:	0000      	movs	r0, r0
	...

08005ac8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 8005ac8:	b5b0      	push	{r4, r5, r7, lr}
 8005aca:	b08e      	sub	sp, #56	; 0x38
 8005acc:	af02      	add	r7, sp, #8
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	607a      	str	r2, [r7, #4]
 8005ad4:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7fa fd64 	bl	80005a8 <__aeabi_f2d>
 8005ae0:	4604      	mov	r4, r0
 8005ae2:	460d      	mov	r5, r1
                                     static_cast<double>(filter->params.scale);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f7fa fd5d 	bl	80005a8 <__aeabi_f2d>
 8005aee:	4602      	mov	r2, r0
 8005af0:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 8005af2:	4620      	mov	r0, r4
 8005af4:	4629      	mov	r1, r5
 8005af6:	f7fa fdaf 	bl	8000658 <__aeabi_dmul>
 8005afa:	4602      	mov	r2, r0
 8005afc:	460b      	mov	r3, r1
 8005afe:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // TODO(ahentz): The following conditions must be guaranteed by the training
  // pipeline.
  if (bias) {
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d04a      	beq.n	8005b9e <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd6>
    const double bias_scale = static_cast<double>(bias->params.scale);
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f7fa fd4b 	bl	80005a8 <__aeabi_f2d>
 8005b12:	4602      	mov	r2, r0
 8005b14:	460b      	mov	r3, r1
 8005b16:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 8005b1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b1e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005b22:	f7fa fbe1 	bl	80002e8 <__aeabi_dsub>
 8005b26:	4602      	mov	r2, r0
 8005b28:	460b      	mov	r3, r1
 8005b2a:	ec43 2b17 	vmov	d7, r2, r3
 8005b2e:	eeb0 0a47 	vmov.f32	s0, s14
 8005b32:	eef0 0a67 	vmov.f32	s1, s15
 8005b36:	f7ff fe19 	bl	800576c <_ZSt3absd>
 8005b3a:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 8005b3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	4618      	mov	r0, r3
 8005b44:	f7fa fd30 	bl	80005a8 <__aeabi_f2d>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	460b      	mov	r3, r1
 8005b4c:	e9c7 2304 	strd	r2, r3, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 8005b50:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005b54:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005b58:	f7fa fea8 	bl	80008ac <__aeabi_ddiv>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	460b      	mov	r3, r1
 8005b60:	4610      	mov	r0, r2
 8005b62:	4619      	mov	r1, r3
 8005b64:	2301      	movs	r3, #1
 8005b66:	461c      	mov	r4, r3
 8005b68:	a318      	add	r3, pc, #96	; (adr r3, 8005bcc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x104>)
 8005b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b6e:	f7fa ffef 	bl	8000b50 <__aeabi_dcmple>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d101      	bne.n	8005b7c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>
 8005b78:	2300      	movs	r3, #0
 8005b7a:	461c      	mov	r4, r3
 8005b7c:	b2e3      	uxtb	r3, r4
 8005b7e:	f083 0301 	eor.w	r3, r3, #1
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d00a      	beq.n	8005b9e <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd6>
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	695c      	ldr	r4, [r3, #20]
 8005b8c:	4b0c      	ldr	r3, [pc, #48]	; (8005bc0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 8005b8e:	9300      	str	r3, [sp, #0]
 8005b90:	239a      	movs	r3, #154	; 0x9a
 8005b92:	4a0c      	ldr	r2, [pc, #48]	; (8005bc4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 8005b94:	490c      	ldr	r1, [pc, #48]	; (8005bc8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	47a0      	blx	r4
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e009      	b.n	8005bb2 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xea>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 8005b9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ba0:	9300      	str	r3, [sp, #0]
 8005ba2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	68b9      	ldr	r1, [r7, #8]
 8005ba8:	68f8      	ldr	r0, [r7, #12]
 8005baa:	f000 f813 	bl	8005bd4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 8005bae:	4603      	mov	r3, r0
                                          multiplier);
 8005bb0:	bf00      	nop
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3730      	adds	r7, #48	; 0x30
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bdb0      	pop	{r4, r5, r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	f3af 8000 	nop.w
 8005bc0:	08010944 	.word	0x08010944
 8005bc4:	08010724 	.word	0x08010724
 8005bc8:	08010830 	.word	0x08010830
 8005bcc:	47ae147b 	.word	0x47ae147b
 8005bd0:	3f947ae1 	.word	0x3f947ae1

08005bd4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 8005bd4:	b590      	push	{r4, r7, lr}
 8005bd6:	b089      	sub	sp, #36	; 0x24
 8005bd8:	af02      	add	r7, sp, #8
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
 8005be0:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	ed93 7a03 	vldr	s14, [r3, #12]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	edd3 7a03 	vldr	s15, [r3, #12]
 8005bee:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 8005bf2:	ee17 0a90 	vmov	r0, s15
 8005bf6:	f7fa fcd7 	bl	80005a8 <__aeabi_f2d>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	e9c7 2304 	strd	r2, r3, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 8005c02:	2301      	movs	r3, #1
 8005c04:	461c      	mov	r4, r3
 8005c06:	f04f 0200 	mov.w	r2, #0
 8005c0a:	f04f 0300 	mov.w	r3, #0
 8005c0e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005c12:	f7fa ffa7 	bl	8000b64 <__aeabi_dcmpge>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d101      	bne.n	8005c20 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4c>
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	461c      	mov	r4, r3
 8005c20:	b2e3      	uxtb	r3, r4
 8005c22:	f083 0301 	eor.w	r3, r3, #1
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d00a      	beq.n	8005c42 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x6e>
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	695c      	ldr	r4, [r3, #20]
 8005c30:	4b0e      	ldr	r3, [pc, #56]	; (8005c6c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x98>)
 8005c32:	9300      	str	r3, [sp, #0]
 8005c34:	23a7      	movs	r3, #167	; 0xa7
 8005c36:	4a0e      	ldr	r2, [pc, #56]	; (8005c70 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x9c>)
 8005c38:	490e      	ldr	r1, [pc, #56]	; (8005c74 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa0>)
 8005c3a:	68f8      	ldr	r0, [r7, #12]
 8005c3c:	47a0      	blx	r4
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e010      	b.n	8005c64 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x90>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	4618      	mov	r0, r3
 8005c48:	f7fa fcae 	bl	80005a8 <__aeabi_f2d>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	460b      	mov	r3, r1
 8005c50:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005c54:	f7fa fe2a 	bl	80008ac <__aeabi_ddiv>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c5e:	e9c1 2300 	strd	r2, r3, [r1]

  return kTfLiteOk;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	371c      	adds	r7, #28
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd90      	pop	{r4, r7, pc}
 8005c6c:	08010968 	.word	0x08010968
 8005c70:	08010724 	.word	0x08010724
 8005c74:	08010830 	.word	0x08010830

08005c78 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>:
                                           TfLiteTensor* output,
                                           int32_t* act_min, int32_t* act_max) {
  const auto scale = output->params.scale;
  const auto zero_point = output->params.zero_point;

  auto quantize = [scale, zero_point](float f) {
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	ed87 0a00 	vstr	s0, [r7]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	edd3 7a00 	vldr	s15, [r3]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 8005c8a:	ed97 7a00 	vldr	s14, [r7]
 8005c8e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005c92:	eeb0 0a66 	vmov.f32	s0, s13
 8005c96:	f7ff fcd4 	bl	8005642 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8005c9a:	eef0 7a40 	vmov.f32	s15, s0
 8005c9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ca2:	ee17 2a90 	vmov	r2, s15
  auto quantize = [scale, zero_point](float f) {
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 8005caa:	4413      	add	r3, r2
  };
 8005cac:	4618      	mov	r0, r3
 8005cae:	3708      	adds	r7, #8
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>:
                                           int32_t* act_min, int32_t* act_max) {
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b08e      	sub	sp, #56	; 0x38
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60b9      	str	r1, [r7, #8]
 8005cbc:	607a      	str	r2, [r7, #4]
 8005cbe:	603b      	str	r3, [r7, #0]
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	73fb      	strb	r3, [r7, #15]
  const auto scale = output->params.scale;
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	637b      	str	r3, [r7, #52]	; 0x34
  const auto zero_point = output->params.zero_point;
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	633b      	str	r3, [r7, #48]	; 0x30
  };
 8005cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cd2:	617b      	str	r3, [r7, #20]
 8005cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd6:	61bb      	str	r3, [r7, #24]

  if (activation == kTfLiteActRelu) {
 8005cd8:	7bfb      	ldrb	r3, [r7, #15]
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d118      	bne.n	8005d10 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x5c>
    *act_min = std::max(qmin, quantize(0.0));
 8005cde:	f107 0314 	add.w	r3, r7, #20
 8005ce2:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8005dd8 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f7ff ffc6 	bl	8005c78 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8005cec:	4603      	mov	r3, r0
 8005cee:	61fb      	str	r3, [r7, #28]
 8005cf0:	f107 021c 	add.w	r2, r7, #28
 8005cf4:	f107 0308 	add.w	r3, r7, #8
 8005cf8:	4611      	mov	r1, r2
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f000 f8d6 	bl	8005eac <_ZSt3maxIlERKT_S2_S2_>
 8005d00:	4603      	mov	r3, r0
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d06:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d0c:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
  } else {
    *act_min = qmin;
    *act_max = qmax;
  }
}
 8005d0e:	e05f      	b.n	8005dd0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActRelu6) {
 8005d10:	7bfb      	ldrb	r3, [r7, #15]
 8005d12:	2b03      	cmp	r3, #3
 8005d14:	d129      	bne.n	8005d6a <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0xb6>
    *act_min = std::max(qmin, quantize(0.0));
 8005d16:	f107 0314 	add.w	r3, r7, #20
 8005d1a:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8005dd8 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7ff ffaa 	bl	8005c78 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8005d24:	4603      	mov	r3, r0
 8005d26:	623b      	str	r3, [r7, #32]
 8005d28:	f107 0220 	add.w	r2, r7, #32
 8005d2c:	f107 0308 	add.w	r3, r7, #8
 8005d30:	4611      	mov	r1, r2
 8005d32:	4618      	mov	r0, r3
 8005d34:	f000 f8ba 	bl	8005eac <_ZSt3maxIlERKT_S2_S2_>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d3e:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(6.0));
 8005d40:	f107 0314 	add.w	r3, r7, #20
 8005d44:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f7ff ff95 	bl	8005c78 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	627b      	str	r3, [r7, #36]	; 0x24
 8005d52:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005d56:	1d3b      	adds	r3, r7, #4
 8005d58:	4611      	mov	r1, r2
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f000 f8ba 	bl	8005ed4 <_ZSt3minIlERKT_S2_S2_>
 8005d60:	4603      	mov	r3, r0
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d66:	601a      	str	r2, [r3, #0]
}
 8005d68:	e032      	b.n	8005dd0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActReluN1To1) {
 8005d6a:	7bfb      	ldrb	r3, [r7, #15]
 8005d6c:	2b02      	cmp	r3, #2
 8005d6e:	d129      	bne.n	8005dc4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x110>
    *act_min = std::max(qmin, quantize(-1.0));
 8005d70:	f107 0314 	add.w	r3, r7, #20
 8005d74:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f7ff ff7d 	bl	8005c78 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d82:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005d86:	f107 0308 	add.w	r3, r7, #8
 8005d8a:	4611      	mov	r1, r2
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f000 f88d 	bl	8005eac <_ZSt3maxIlERKT_S2_S2_>
 8005d92:	4603      	mov	r3, r0
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d98:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
 8005d9a:	f107 0314 	add.w	r3, r7, #20
 8005d9e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7ff ff68 	bl	8005c78 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8005da8:	4603      	mov	r3, r0
 8005daa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dac:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8005db0:	1d3b      	adds	r3, r7, #4
 8005db2:	4611      	mov	r1, r2
 8005db4:	4618      	mov	r0, r3
 8005db6:	f000 f88d 	bl	8005ed4 <_ZSt3minIlERKT_S2_S2_>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dc0:	601a      	str	r2, [r3, #0]
}
 8005dc2:	e005      	b.n	8005dd0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
    *act_min = qmin;
 8005dc4:	68ba      	ldr	r2, [r7, #8]
 8005dc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dc8:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dce:	601a      	str	r2, [r3, #0]
}
 8005dd0:	bf00      	nop
 8005dd2:	3738      	adds	r7, #56	; 0x38
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	00000000 	.word	0x00000000

08005ddc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 8005ddc:	b590      	push	{r4, r7, lr}
 8005dde:	b089      	sub	sp, #36	; 0x24
 8005de0:	af02      	add	r7, sp, #8
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	607a      	str	r2, [r7, #4]
 8005de6:	603b      	str	r3, [r7, #0]
 8005de8:	460b      	mov	r3, r1
 8005dea:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 8005dec:	2300      	movs	r3, #0
 8005dee:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 8005df0:	2300      	movs	r3, #0
 8005df2:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	2b03      	cmp	r3, #3
 8005dfa:	d108      	bne.n	8005e0e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 8005dfc:	f7ff fc42 	bl	8005684 <_ZNSt14numeric_limitsIhE3minEv>
 8005e00:	4603      	mov	r3, r0
 8005e02:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 8005e04:	f7ff fc46 	bl	8005694 <_ZNSt14numeric_limitsIhE3maxEv>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	613b      	str	r3, [r7, #16]
 8005e0c:	e024      	b.n	8005e58 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7c>
  } else if (output->type == kTfLiteInt8) {
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	2b09      	cmp	r3, #9
 8005e14:	d108      	bne.n	8005e28 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 8005e16:	f7ff fc24 	bl	8005662 <_ZNSt14numeric_limitsIaE3minEv>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 8005e1e:	f7ff fc29 	bl	8005674 <_ZNSt14numeric_limitsIaE3maxEv>
 8005e22:	4603      	mov	r3, r0
 8005e24:	613b      	str	r3, [r7, #16]
 8005e26:	e017      	b.n	8005e58 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7c>
  } else if (output->type == kTfLiteInt16) {
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	2b07      	cmp	r3, #7
 8005e2e:	d108      	bne.n	8005e42 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 8005e30:	f7fb f918 	bl	8001064 <_ZNSt14numeric_limitsIsE3minEv>
 8005e34:	4603      	mov	r3, r0
 8005e36:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 8005e38:	f7fb f91e 	bl	8001078 <_ZNSt14numeric_limitsIsE3maxEv>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	613b      	str	r3, [r7, #16]
 8005e40:	e00a      	b.n	8005e58 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7c>
  } else {
    TF_LITE_ENSURE(context, false);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	695c      	ldr	r4, [r3, #20]
 8005e46:	4b0c      	ldr	r3, [pc, #48]	; (8005e78 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9c>)
 8005e48:	9300      	str	r3, [sp, #0]
 8005e4a:	23da      	movs	r3, #218	; 0xda
 8005e4c:	4a0b      	ldr	r2, [pc, #44]	; (8005e7c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa0>)
 8005e4e:	490c      	ldr	r1, [pc, #48]	; (8005e80 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 8005e50:	68f8      	ldr	r0, [r7, #12]
 8005e52:	47a0      	blx	r4
 8005e54:	2301      	movs	r3, #1
 8005e56:	e00a      	b.n	8005e6e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x92>
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
 8005e58:	7af8      	ldrb	r0, [r7, #11]
 8005e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e5c:	9301      	str	r3, [sp, #4]
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	9300      	str	r3, [sp, #0]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	693a      	ldr	r2, [r7, #16]
 8005e66:	6979      	ldr	r1, [r7, #20]
 8005e68:	f7ff ff24 	bl	8005cb4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>
                                        act_max);
  return kTfLiteOk;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	371c      	adds	r7, #28
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd90      	pop	{r4, r7, pc}
 8005e76:	bf00      	nop
 8005e78:	08010984 	.word	0x08010984
 8005e7c:	08010724 	.word	0x08010724
 8005e80:	08010830 	.word	0x08010830

08005e84 <_ZSt3maxIiERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	da01      	bge.n	8005e9e <_ZSt3maxIiERKT_S2_S2_+0x1a>
	return __b;
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	e000      	b.n	8005ea0 <_ZSt3maxIiERKT_S2_S2_+0x1c>
      return __a;
 8005e9e:	687b      	ldr	r3, [r7, #4]
    }
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <_ZSt3maxIlERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	da01      	bge.n	8005ec6 <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	e000      	b.n	8005ec8 <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 8005ec6:	687b      	ldr	r3, [r7, #4]
    }
 8005ec8:	4618      	mov	r0, r3
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	da01      	bge.n	8005eee <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	e000      	b.n	8005ef0 <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 8005eee:	687b      	ldr	r3, [r7, #4]
    }
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
                                    const TfLiteNode* node, int index) {
 8005efc:	b480      	push	{r7}
 8005efe:	b085      	sub	sp, #20
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	607a      	str	r2, [r7, #4]
  return &context->tensors[node->inputs->data[index]];
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	689a      	ldr	r2, [r3, #8]
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	6819      	ldr	r1, [r3, #0]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	440b      	add	r3, r1
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	019b      	lsls	r3, r3, #6
 8005f1a:	4413      	add	r3, r2
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3714      	adds	r7, #20
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
                               int index) {
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	607a      	str	r2, [r7, #4]
  return &context->tensors[node->outputs->data[index]];
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	689a      	ldr	r2, [r3, #8]
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	6859      	ldr	r1, [r3, #4]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	440b      	add	r3, r1
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	019b      	lsls	r3, r3, #6
 8005f46:	4413      	add	r3, r2
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3714      	adds	r7, #20
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

template <typename T>
inline const T* GetTensorData(const TfLiteTensor* tensor) {
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d002      	beq.n	8005f68 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor+0x14>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	685b      	ldr	r3, [r3, #4]
                           : nullptr;
 8005f66:	e000      	b.n	8005f6a <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor+0x16>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	370c      	adds	r7, #12
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr

08005f76 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
 8005f76:	b480      	push	{r7}
 8005f78:	b083      	sub	sp, #12
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d002      	beq.n	8005f8a <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor+0x14>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	e000      	b.n	8005f8c <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor+0x16>
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <_ZN6tflite12RuntimeShapeC1Ev>:
  // larger shapes are separately allocated.
  static constexpr int kMaxSmallSize = 5;

  RuntimeShape& operator=(RuntimeShape const&) = delete;

  RuntimeShape() : size_(0) {}
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	601a      	str	r2, [r3, #0]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4618      	mov	r0, r3
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <_ZN6tflite12RuntimeShapeC1EiPKl>:
    for (int i = 0; i < shape_size; ++i) {
      SetDim(i, value);
    }
  }

  RuntimeShape(int dimensions_count, const int32* dims_data) : size_(0) {
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	607a      	str	r2, [r7, #4]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	68b9      	ldr	r1, [r7, #8]
 8005fca:	68f8      	ldr	r0, [r7, #12]
 8005fcc:	f000 f89e 	bl	800610c <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3710      	adds	r7, #16
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}

08005fda <_ZN6tflite12RuntimeShapeD1Ev>:
  bool operator==(const RuntimeShape& comp) const {
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32)) == 0;
  }

  ~RuntimeShape() {
 8005fda:	b580      	push	{r7, lr}
 8005fdc:	b082      	sub	sp, #8
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
    if (size_ > kMaxSmallSize) {
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2b05      	cmp	r3, #5
 8005fe8:	dd08      	ble.n	8005ffc <_ZN6tflite12RuntimeShapeD1Ev+0x22>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else   // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d004      	beq.n	8005ffc <_ZN6tflite12RuntimeShapeD1Ev+0x22>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f007 f90e 	bl	800d218 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4618      	mov	r0, r3
 8006000:	3708      	adds	r7, #8
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:

  inline int32 DimensionsCount() const { return size_; }
 8006006:	b480      	push	{r7}
 8006008:	b083      	sub	sp, #12
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4618      	mov	r0, r3
 8006014:	370c      	adds	r7, #12
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr

0800601e <_ZNK6tflite12RuntimeShape4DimsEi>:
  inline int32 Dims(int i) const {
 800601e:	b580      	push	{r7, lr}
 8006020:	b082      	sub	sp, #8
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
 8006026:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	2b00      	cmp	r3, #0
 800602c:	da01      	bge.n	8006032 <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 800602e:	f008 fc95 	bl	800e95c <abort>
    TFLITE_DCHECK_LT(i, size_);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	683a      	ldr	r2, [r7, #0]
 8006038:	429a      	cmp	r2, r3
 800603a:	db01      	blt.n	8006040 <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 800603c:	f008 fc8e 	bl	800e95c <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2b05      	cmp	r3, #5
 8006046:	dd06      	ble.n	8006056 <_ZNK6tflite12RuntimeShape4DimsEi+0x38>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685a      	ldr	r2, [r3, #4]
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	4413      	add	r3, r2
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	e004      	b.n	8006060 <_ZNK6tflite12RuntimeShape4DimsEi+0x42>
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	4413      	add	r3, r2
 800605e:	685b      	ldr	r3, [r3, #4]
  }
 8006060:	4618      	mov	r0, r3
 8006062:	3708      	adds	r7, #8
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <_ZN6tflite12RuntimeShape8DimsDataEv>:
    } else {
      dims_[i] = val;
    }
  }

  inline int32* DimsData() {
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2b05      	cmp	r3, #5
 8006076:	dd02      	ble.n	800607e <_ZN6tflite12RuntimeShape8DimsDataEv+0x16>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	e001      	b.n	8006082 <_ZN6tflite12RuntimeShape8DimsDataEv+0x1a>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	3304      	adds	r3, #4
  }
 8006082:	4618      	mov	r0, r3
 8006084:	370c      	adds	r7, #12
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr

0800608e <_ZNK6tflite12RuntimeShape8DimsDataEv>:
  inline const int32* DimsData() const {
 800608e:	b480      	push	{r7}
 8006090:	b083      	sub	sp, #12
 8006092:	af00      	add	r7, sp, #0
 8006094:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2b05      	cmp	r3, #5
 800609c:	dd02      	ble.n	80060a4 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x16>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	e001      	b.n	80060a8 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x1a>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	3304      	adds	r3, #4
  }
 80060a8:	4618      	mov	r0, r3
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <_ZN6tflite12RuntimeShape6ResizeEi>:
  // The caller must ensure that the shape is no bigger than 5-D.
  inline const int32* DimsDataUpTo5D() const { return dims_; }

  inline void Resize(int dimensions_count) {
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
    if (size_ > kMaxSmallSize) {
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2b05      	cmp	r3, #5
 80060c4:	dd08      	ble.n	80060d8 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else   // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d004      	beq.n	80060d8 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	4618      	mov	r0, r3
 80060d4:	f007 f8a0 	bl	800d218 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
    size_ = dimensions_count;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	683a      	ldr	r2, [r7, #0]
 80060dc:	601a      	str	r2, [r3, #0]
    if (dimensions_count > kMaxSmallSize) {
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	2b05      	cmp	r3, #5
 80060e2:	dd0f      	ble.n	8006104 <_ZN6tflite12RuntimeShape6ResizeEi+0x50>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else   // TF_LITE_STATIC_MEMORY
      dims_pointer_ = new int32[dimensions_count];
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d201      	bcs.n	80060f2 <_ZN6tflite12RuntimeShape6ResizeEi+0x3e>
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	e001      	b.n	80060f6 <_ZN6tflite12RuntimeShape6ResizeEi+0x42>
 80060f2:	f04f 33ff 	mov.w	r3, #4294967295
 80060f6:	4618      	mov	r0, r3
 80060f8:	f007 f8a1 	bl	800d23e <_Znaj>
 80060fc:	4603      	mov	r3, r0
 80060fe:	461a      	mov	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	605a      	str	r2, [r3, #4]
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 8006104:	bf00      	nop
 8006106:	3708      	adds	r7, #8
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:

  inline void ReplaceWith(int dimensions_count, const int32* dims_data) {
 800610c:	b580      	push	{r7, lr}
 800610e:	b086      	sub	sp, #24
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	607a      	str	r2, [r7, #4]
    Resize(dimensions_count);
 8006118:	68b9      	ldr	r1, [r7, #8]
 800611a:	68f8      	ldr	r0, [r7, #12]
 800611c:	f7ff ffca 	bl	80060b4 <_ZN6tflite12RuntimeShape6ResizeEi>
    int32* dst_dims = DimsData();
 8006120:	68f8      	ldr	r0, [r7, #12]
 8006122:	f7ff ffa1 	bl	8006068 <_ZN6tflite12RuntimeShape8DimsDataEv>
 8006126:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	461a      	mov	r2, r3
 800612e:	6879      	ldr	r1, [r7, #4]
 8006130:	6978      	ldr	r0, [r7, #20]
 8006132:	f008 fc91 	bl	800ea58 <memcpy>
  }
 8006136:	bf00      	nop
 8006138:	3718      	adds	r7, #24
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}

0800613e <_ZNK6tflite12RuntimeShape8FlatSizeEv>:
    BuildFrom<const std::initializer_list<int>>(init_list);
  }

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  inline int FlatSize() const {
 800613e:	b580      	push	{r7, lr}
 8006140:	b086      	sub	sp, #24
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
    int buffer_size = 1;
 8006146:	2301      	movs	r3, #1
 8006148:	617b      	str	r3, [r7, #20]
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f7ff ff9f 	bl	800608e <_ZNK6tflite12RuntimeShape8DimsDataEv>
 8006150:	60f8      	str	r0, [r7, #12]
    for (int i = 0; i < size_; i++) {
 8006152:	2300      	movs	r3, #0
 8006154:	613b      	str	r3, [r7, #16]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	429a      	cmp	r2, r3
 800615e:	da0c      	bge.n	800617a <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x3c>
      buffer_size *= dims_data[i];
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	68fa      	ldr	r2, [r7, #12]
 8006166:	4413      	add	r3, r2
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	fb02 f303 	mul.w	r3, r2, r3
 8006170:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size_; i++) {
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	3301      	adds	r3, #1
 8006176:	613b      	str	r3, [r7, #16]
 8006178:	e7ed      	b.n	8006156 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x18>
    }
    return buffer_size;
 800617a:	697b      	ldr	r3, [r7, #20]
  }
 800617c:	4618      	mov	r0, r3
 800617e:	3718      	adds	r7, #24
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
 8006184:	b580      	push	{r7, lr}
 8006186:	b086      	sub	sp, #24
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr) {
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d103      	bne.n	800619c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x18>
    return RuntimeShape();
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f7ff feff 	bl	8005f98 <_ZN6tflite12RuntimeShapeC1Ev>
 800619a:	e00d      	b.n	80061b8 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x34>
  }

  TfLiteIntArray* dims = tensor->dims;
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	3304      	adds	r3, #4
 80061ac:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	6939      	ldr	r1, [r7, #16]
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f7ff fefe 	bl	8005fb4 <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	3718      	adds	r7, #24
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d002      	beq.n	80061d4 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor+0x14>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	685b      	ldr	r3, [r3, #4]
                           : nullptr;
 80061d2:	e000      	b.n	80061d6 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor+0x16>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	370c      	adds	r7, #12
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr

080061e2 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
 80061e2:	b480      	push	{r7}
 80061e4:	b083      	sub	sp, #12
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d002      	beq.n	80061f6 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor+0x14>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	e000      	b.n	80061f8 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor+0x16>
 80061f6:	2300      	movs	r3, #0
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	370c      	adds	r7, #12
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d002      	beq.n	8006218 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor+0x14>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	685b      	ldr	r3, [r3, #4]
                           : nullptr;
 8006216:	e000      	b.n	800621a <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor+0x16>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	370c      	adds	r7, #12
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr

08006226 <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
 8006226:	b480      	push	{r7}
 8006228:	b083      	sub	sp, #12
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d002      	beq.n	800623a <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor+0x14>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	e000      	b.n	800623c <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor+0x16>
 800623a:	2300      	movs	r3, #0
}
 800623c:	4618      	mov	r0, r3
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <_ZNSt14numeric_limitsIlE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 8006248:	b480      	push	{r7}
 800624a:	af00      	add	r7, sp, #0
 800624c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006250:	4618      	mov	r0, r3
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
	...

0800625c <_ZNSt14numeric_limitsIfE3maxEv>:

      static _GLIBCXX_CONSTEXPR float
      min() _GLIBCXX_USE_NOEXCEPT { return __FLT_MIN__; }

      static _GLIBCXX_CONSTEXPR float
      max() _GLIBCXX_USE_NOEXCEPT { return __FLT_MAX__; }
 800625c:	b480      	push	{r7}
 800625e:	af00      	add	r7, sp, #0
 8006260:	4b04      	ldr	r3, [pc, #16]	; (8006274 <_ZNSt14numeric_limitsIfE3maxEv+0x18>)
 8006262:	ee07 3a90 	vmov	s15, r3
 8006266:	eeb0 0a67 	vmov.f32	s0, s15
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	7f7fffff 	.word	0x7f7fffff

08006278 <_ZNSt14numeric_limitsIfE6lowestEv>:

#if __cplusplus >= 201103L
      static constexpr float
      lowest() noexcept { return -__FLT_MAX__; }
 8006278:	b480      	push	{r7}
 800627a:	af00      	add	r7, sp, #0
 800627c:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 8006280:	ee07 3a90 	vmov	s15, r3
 8006284:	eeb0 0a67 	vmov.f32	s0, s15
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>:

// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
 8006290:	b5b0      	push	{r4, r5, r7, lr}
 8006292:	b08c      	sub	sp, #48	; 0x30
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d107      	bne.n	80062b2 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x22>
 80062a2:	f7ff ffd1 	bl	8006248 <_ZNSt14numeric_limitsIlE3minEv>
 80062a6:	4602      	mov	r2, r0
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d101      	bne.n	80062b2 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x22>
 80062ae:	2301      	movs	r3, #1
 80062b0:	e000      	b.n	80062b4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 80062b2:	2300      	movs	r3, #0
 80062b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  std::int64_t a_64(a);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	461a      	mov	r2, r3
 80062bc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80062c0:	e9c7 2308 	strd	r2, r3, [r7, #32]
  std::int64_t b_64(b);
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	461a      	mov	r2, r3
 80062c8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80062cc:	e9c7 2306 	strd	r2, r3, [r7, #24]
  std::int64_t ab_64 = a_64 * b_64;
 80062d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d2:	69ba      	ldr	r2, [r7, #24]
 80062d4:	fb02 f203 	mul.w	r2, r2, r3
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	6a39      	ldr	r1, [r7, #32]
 80062dc:	fb01 f303 	mul.w	r3, r1, r3
 80062e0:	18d1      	adds	r1, r2, r3
 80062e2:	6a3a      	ldr	r2, [r7, #32]
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	fba2 2303 	umull	r2, r3, r2, r3
 80062ea:	4419      	add	r1, r3
 80062ec:	460b      	mov	r3, r1
 80062ee:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80062f2:	e9c7 2304 	strd	r2, r3, [r7, #16]
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 80062f6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80062fa:	2a00      	cmp	r2, #0
 80062fc:	f173 0300 	sbcs.w	r3, r3, #0
 8006300:	db02      	blt.n	8006308 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x78>
 8006302:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006306:	e000      	b.n	800630a <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x7a>
 8006308:	4b18      	ldr	r3, [pc, #96]	; (800636c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xdc>)
 800630a:	60fb      	str	r3, [r7, #12]
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	4618      	mov	r0, r3
 8006310:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8006314:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006318:	1884      	adds	r4, r0, r2
 800631a:	eb41 0503 	adc.w	r5, r1, r3
 800631e:	4622      	mov	r2, r4
 8006320:	462b      	mov	r3, r5
 8006322:	2a00      	cmp	r2, #0
 8006324:	f173 0100 	sbcs.w	r1, r3, #0
 8006328:	da06      	bge.n	8006338 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xa8>
 800632a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800632e:	f04f 0100 	mov.w	r1, #0
 8006332:	1812      	adds	r2, r2, r0
 8006334:	eb41 0303 	adc.w	r3, r1, r3
 8006338:	f04f 0000 	mov.w	r0, #0
 800633c:	f04f 0100 	mov.w	r1, #0
 8006340:	0fd0      	lsrs	r0, r2, #31
 8006342:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8006346:	17d9      	asrs	r1, r3, #31
 8006348:	4602      	mov	r2, r0
 800634a:	460b      	mov	r3, r1
  std::int32_t ab_x2_high32 =
 800634c:	4613      	mov	r3, r2
 800634e:	60bb      	str	r3, [r7, #8]
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 8006350:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006354:	2b00      	cmp	r3, #0
 8006356:	d003      	beq.n	8006360 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xd0>
 8006358:	f7fe ffaa 	bl	80052b0 <_ZNSt14numeric_limitsIlE3maxEv>
 800635c:	4603      	mov	r3, r0
 800635e:	e000      	b.n	8006362 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xd2>
 8006360:	68bb      	ldr	r3, [r7, #8]
}
 8006362:	4618      	mov	r0, r3
 8006364:	3730      	adds	r7, #48	; 0x30
 8006366:	46bd      	mov	sp, r7
 8006368:	bdb0      	pop	{r4, r5, r7, pc}
 800636a:	bf00      	nop
 800636c:	c0000001 	.word	0xc0000001

08006370 <_ZNK6tflite12RuntimeShape14DimsDataUpTo5DEv>:
  inline const int32* DimsDataUpTo5D() const { return dims_; }
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	3304      	adds	r3, #4
 800637c:	4618      	mov	r0, r3
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>:
    }
  }
  return offset;
}

inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
 8006388:	b580      	push	{r7, lr}
 800638a:	b086      	sub	sp, #24
 800638c:	af00      	add	r7, sp, #0
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	607a      	str	r2, [r7, #4]
 8006394:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
 8006396:	68f8      	ldr	r0, [r7, #12]
 8006398:	f7ff fe35 	bl	8006006 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800639c:	4603      	mov	r3, r0
 800639e:	2b04      	cmp	r3, #4
 80063a0:	d001      	beq.n	80063a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x1e>
 80063a2:	f008 fadb 	bl	800e95c <abort>
  const int* dims_data = reinterpret_cast<const int*>(shape.DimsDataUpTo5D());
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	f7ff ffe2 	bl	8006370 <_ZNK6tflite12RuntimeShape14DimsDataUpTo5DEv>
 80063ac:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	db04      	blt.n	80063be <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x36>
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	68ba      	ldr	r2, [r7, #8]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	db01      	blt.n	80063c2 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x3a>
 80063be:	f008 facd 	bl	800e95c <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	db05      	blt.n	80063d4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x4c>
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	3304      	adds	r3, #4
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	db01      	blt.n	80063d8 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x50>
 80063d4:	f008 fac2 	bl	800e95c <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	db05      	blt.n	80063ea <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x62>
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	3308      	adds	r3, #8
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	683a      	ldr	r2, [r7, #0]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	db01      	blt.n	80063ee <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x66>
 80063ea:	f008 fab7 	bl	800e95c <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 80063ee:	6a3b      	ldr	r3, [r7, #32]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	db05      	blt.n	8006400 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x78>
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	330c      	adds	r3, #12
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	6a3a      	ldr	r2, [r7, #32]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	db01      	blt.n	8006404 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x7c>
 8006400:	f008 faac 	bl	800e95c <abort>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	3304      	adds	r3, #4
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68ba      	ldr	r2, [r7, #8]
 800640c:	fb02 f203 	mul.w	r2, r2, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4413      	add	r3, r2
 8006414:	697a      	ldr	r2, [r7, #20]
 8006416:	3208      	adds	r2, #8
 8006418:	6812      	ldr	r2, [r2, #0]
 800641a:	fb02 f203 	mul.w	r2, r2, r3
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	4413      	add	r3, r2
 8006422:	697a      	ldr	r2, [r7, #20]
 8006424:	320c      	adds	r2, #12
 8006426:	6812      	ldr	r2, [r2, #0]
 8006428:	fb02 f203 	mul.w	r2, r2, r3
 800642c:	6a3b      	ldr	r3, [r7, #32]
 800642e:	4413      	add	r3, r2
}
 8006430:	4618      	mov	r0, r3
 8006432:	3718      	adds	r7, #24
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <_ZN6tflite28ActivationFunctionWithMinMaxEfff>:
      break;
  }
}

inline float ActivationFunctionWithMinMax(float x, float output_activation_min,
                                          float output_activation_max) {
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	ed87 0a03 	vstr	s0, [r7, #12]
 8006442:	edc7 0a02 	vstr	s1, [r7, #8]
 8006446:	ed87 1a01 	vstr	s2, [r7, #4]
  return std::min(std::max(x, output_activation_min), output_activation_max);
 800644a:	f107 0208 	add.w	r2, r7, #8
 800644e:	f107 030c 	add.w	r3, r7, #12
 8006452:	4611      	mov	r1, r2
 8006454:	4618      	mov	r0, r3
 8006456:	f7ff f8c7 	bl	80055e8 <_ZSt3maxIfERKT_S2_S2_>
 800645a:	4602      	mov	r2, r0
 800645c:	1d3b      	adds	r3, r7, #4
 800645e:	4619      	mov	r1, r3
 8006460:	4610      	mov	r0, r2
 8006462:	f7ff f8a8 	bl	80055b6 <_ZSt3minIfERKT_S2_S2_>
 8006466:	4603      	mov	r3, r0
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	ee07 3a90 	vmov	s15, r3
}
 800646e:	eeb0 0a67 	vmov.f32	s0, s15
 8006472:	3710      	adds	r7, #16
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>:
}

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
 8006478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800647a:	b089      	sub	sp, #36	; 0x24
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
  assert(exponent >= 0);
 8006482:	6839      	ldr	r1, [r7, #0]
 8006484:	2900      	cmp	r1, #0
 8006486:	da06      	bge.n	8006496 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x1e>
 8006488:	4b31      	ldr	r3, [pc, #196]	; (8006550 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xd8>)
 800648a:	4a32      	ldr	r2, [pc, #200]	; (8006554 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 800648c:	f44f 71b3 	mov.w	r1, #358	; 0x166
 8006490:	4831      	ldr	r0, [pc, #196]	; (8006558 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 8006492:	f008 fa6b 	bl	800e96c <__assert_func>
  assert(exponent <= 31);
 8006496:	6839      	ldr	r1, [r7, #0]
 8006498:	291f      	cmp	r1, #31
 800649a:	dd06      	ble.n	80064aa <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x32>
 800649c:	4b2f      	ldr	r3, [pc, #188]	; (800655c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe4>)
 800649e:	4a2d      	ldr	r2, [pc, #180]	; (8006554 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 80064a0:	f240 1167 	movw	r1, #359	; 0x167
 80064a4:	482c      	ldr	r0, [pc, #176]	; (8006558 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 80064a6:	f008 fa61 	bl	800e96c <__assert_func>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 80064aa:	f04f 0001 	mov.w	r0, #1
 80064ae:	f04f 0100 	mov.w	r1, #0
 80064b2:	683c      	ldr	r4, [r7, #0]
 80064b4:	f1a4 0620 	sub.w	r6, r4, #32
 80064b8:	f1c4 0520 	rsb	r5, r4, #32
 80064bc:	fa01 f304 	lsl.w	r3, r1, r4
 80064c0:	fa00 f606 	lsl.w	r6, r0, r6
 80064c4:	4333      	orrs	r3, r6
 80064c6:	fa20 f505 	lsr.w	r5, r0, r5
 80064ca:	432b      	orrs	r3, r5
 80064cc:	fa00 f204 	lsl.w	r2, r0, r4
 80064d0:	4613      	mov	r3, r2
 80064d2:	3b01      	subs	r3, #1
 80064d4:	4618      	mov	r0, r3
 80064d6:	f000 f885 	bl	80065e4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80064da:	61f8      	str	r0, [r7, #28]
  const IntegerType zero = Dup<IntegerType>(0);
 80064dc:	2000      	movs	r0, #0
 80064de:	f000 f881 	bl	80065e4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80064e2:	61b8      	str	r0, [r7, #24]
  const IntegerType one = Dup<IntegerType>(1);
 80064e4:	2001      	movs	r0, #1
 80064e6:	f000 f87d 	bl	80065e4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80064ea:	6178      	str	r0, [r7, #20]
  const IntegerType remainder = BitAnd(x, mask);
 80064ec:	69f9      	ldr	r1, [r7, #28]
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 f883 	bl	80065fa <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80064f4:	6138      	str	r0, [r7, #16]
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
 80064f6:	2101      	movs	r1, #1
 80064f8:	69f8      	ldr	r0, [r7, #28]
 80064fa:	f000 f88c 	bl	8006616 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 80064fe:	4604      	mov	r4, r0
 8006500:	69b9      	ldr	r1, [r7, #24]
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 f896 	bl	8006634 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 8006508:	4603      	mov	r3, r0
 800650a:	6979      	ldr	r1, [r7, #20]
 800650c:	4618      	mov	r0, r3
 800650e:	f000 f874 	bl	80065fa <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8006512:	4603      	mov	r3, r0
 8006514:	4619      	mov	r1, r3
 8006516:	4620      	mov	r0, r4
 8006518:	f000 f8a0 	bl	800665c <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800651c:	60f8      	str	r0, [r7, #12]
  return Add(ShiftRight(x, exponent),
 800651e:	6839      	ldr	r1, [r7, #0]
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 f878 	bl	8006616 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 8006526:	4604      	mov	r4, r0
 8006528:	68f9      	ldr	r1, [r7, #12]
 800652a:	6938      	ldr	r0, [r7, #16]
 800652c:	f000 f8a4 	bl	8006678 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 8006530:	4603      	mov	r3, r0
 8006532:	6979      	ldr	r1, [r7, #20]
 8006534:	4618      	mov	r0, r3
 8006536:	f000 f860 	bl	80065fa <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800653a:	4603      	mov	r3, r0
 800653c:	4619      	mov	r1, r3
 800653e:	4620      	mov	r0, r4
 8006540:	f000 f88c 	bl	800665c <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8006544:	4603      	mov	r3, r0
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
}
 8006546:	4618      	mov	r0, r3
 8006548:	3724      	adds	r7, #36	; 0x24
 800654a:	46bd      	mov	sp, r7
 800654c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800654e:	bf00      	nop
 8006550:	08010a1c 	.word	0x08010a1c
 8006554:	08010a2c 	.word	0x08010a2c
 8006558:	08010a88 	.word	0x08010a88
 800655c:	08010b24 	.word	0x08010b24

08006560 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
                                               int32_t* act_max);

// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	4603      	mov	r3, r0
 8006568:	60b9      	str	r1, [r7, #8]
 800656a:	607a      	str	r2, [r7, #4]
 800656c:	73fb      	strb	r3, [r7, #15]
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
 800656e:	7bfb      	ldrb	r3, [r7, #15]
 8006570:	2b01      	cmp	r3, #1
 8006572:	d10b      	bne.n	800658c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x2c>
    *activation_min = 0;
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	f04f 0200 	mov.w	r2, #0
 800657a:	601a      	str	r2, [r3, #0]
    *activation_max = std::numeric_limits<T>::max();
 800657c:	f7ff fe6e 	bl	800625c <_ZNSt14numeric_limitsIfE3maxEv>
 8006580:	eef0 7a40 	vmov.f32	s15, s0
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
  }
}
 800658a:	e023      	b.n	80065d4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActRelu6) {
 800658c:	7bfb      	ldrb	r3, [r7, #15]
 800658e:	2b03      	cmp	r3, #3
 8006590:	d107      	bne.n	80065a2 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x42>
    *activation_min = 0;
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	f04f 0200 	mov.w	r2, #0
 8006598:	601a      	str	r2, [r3, #0]
    *activation_max = 6;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a0f      	ldr	r2, [pc, #60]	; (80065dc <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x7c>)
 800659e:	601a      	str	r2, [r3, #0]
}
 80065a0:	e018      	b.n	80065d4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActReluN1To1) {
 80065a2:	7bfb      	ldrb	r3, [r7, #15]
 80065a4:	2b02      	cmp	r3, #2
 80065a6:	d107      	bne.n	80065b8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x58>
    *activation_min = -1;
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	4a0d      	ldr	r2, [pc, #52]	; (80065e0 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x80>)
 80065ac:	601a      	str	r2, [r3, #0]
    *activation_max = 1;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80065b4:	601a      	str	r2, [r3, #0]
}
 80065b6:	e00d      	b.n	80065d4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
    *activation_min = std::numeric_limits<T>::lowest();
 80065b8:	f7ff fe5e 	bl	8006278 <_ZNSt14numeric_limitsIfE6lowestEv>
 80065bc:	eef0 7a40 	vmov.f32	s15, s0
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = std::numeric_limits<T>::max();
 80065c6:	f7ff fe49 	bl	800625c <_ZNSt14numeric_limitsIfE3maxEv>
 80065ca:	eef0 7a40 	vmov.f32	s15, s0
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	edc3 7a00 	vstr	s15, [r3]
}
 80065d4:	bf00      	nop
 80065d6:	3710      	adds	r7, #16
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	40c00000 	.word	0x40c00000
 80065e0:	bf800000 	.word	0xbf800000

080065e4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
tRawType Dup(typename FixedPointRawTypeTraits<tRawType>::ScalarRawType x) {
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  return x;
 80065ec:	687b      	ldr	r3, [r7, #4]
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	370c      	adds	r7, #12
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr

080065fa <_ZN8gemmlowp6BitAndIlEET_S1_S1_>:
tIntegerType BitAnd(tIntegerType a, tIntegerType b) {
 80065fa:	b480      	push	{r7}
 80065fc:	b083      	sub	sp, #12
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
 8006602:	6039      	str	r1, [r7, #0]
  return a & b;
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	4013      	ands	r3, r2
}
 800660a:	4618      	mov	r0, r3
 800660c:	370c      	adds	r7, #12
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr

08006616 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>:
tIntegerType ShiftRight(tIntegerType a, int offset) {
 8006616:	b480      	push	{r7}
 8006618:	b083      	sub	sp, #12
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
 800661e:	6039      	str	r1, [r7, #0]
  return a >> offset;
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	fa42 f303 	asr.w	r3, r2, r3
}
 8006628:	4618      	mov	r0, r3
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a < b);
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	429a      	cmp	r2, r3
 8006644:	bfb4      	ite	lt
 8006646:	2301      	movlt	r3, #1
 8006648:	2300      	movge	r3, #0
 800664a:	b2db      	uxtb	r3, r3
 800664c:	4618      	mov	r0, r3
 800664e:	f000 f827 	bl	80066a0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8006652:	4603      	mov	r3, r0
}
 8006654:	4618      	mov	r0, r3
 8006656:	3708      	adds	r7, #8
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <_ZN8gemmlowp3AddIlEET_S1_S1_>:
tIntegerType Add(tIntegerType a, tIntegerType b) {
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]
  return a + b;
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	4413      	add	r3, r2
}
 800666c:	4618      	mov	r0, r3
 800666e:	370c      	adds	r7, #12
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a > b);
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	429a      	cmp	r2, r3
 8006688:	bfcc      	ite	gt
 800668a:	2301      	movgt	r3, #1
 800668c:	2300      	movle	r3, #0
 800668e:	b2db      	uxtb	r3, r3
 8006690:	4618      	mov	r0, r3
 8006692:	f000 f805 	bl	80066a0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8006696:	4603      	mov	r3, r0
}
 8006698:	4618      	mov	r0, r3
 800669a:	3708      	adds	r7, #8
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b082      	sub	sp, #8
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  return a ? BitNot(zero) : zero;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d004      	beq.n	80066b8 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x18>
 80066ae:	2000      	movs	r0, #0
 80066b0:	f000 f807 	bl	80066c2 <_ZN8gemmlowp6BitNotIlEET_S1_>
 80066b4:	4603      	mov	r3, r0
 80066b6:	e000      	b.n	80066ba <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x1a>
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3708      	adds	r7, #8
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}

080066c2 <_ZN8gemmlowp6BitNotIlEET_S1_>:
tIntegerType BitNot(tIntegerType a) {
 80066c2:	b480      	push	{r7}
 80066c4:	b083      	sub	sp, #12
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
  return ~a;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	43db      	mvns	r3, r3
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	370c      	adds	r7, #12
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr

080066da <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
 80066da:	b480      	push	{r7}
 80066dc:	b083      	sub	sp, #12
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d002      	beq.n	80066ee <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor+0x14>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685b      	ldr	r3, [r3, #4]
                           : nullptr;
 80066ec:	e000      	b.n	80066f0 <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor+0x16>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <_ZN6tflite9NumInputsEPK10TfLiteNode>:
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4618      	mov	r0, r3
 800670c:	370c      	adds	r7, #12
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr

08006716 <_ZN6tflite10NumOutputsEPK10TfLiteNode>:
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
 8006716:	b480      	push	{r7}
 8006718:	b083      	sub	sp, #12
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4618      	mov	r0, r3
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
  return MatchingArraySize(array1, index1, args...);
}

// Get common shape dim, DCHECKing that they all agree.
inline int MatchingDim(const RuntimeShape& shape1, int index1,
                       const RuntimeShape& shape2, int index2) {
 8006730:	b590      	push	{r4, r7, lr}
 8006732:	b085      	sub	sp, #20
 8006734:	af00      	add	r7, sp, #0
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	607a      	str	r2, [r7, #4]
 800673c:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800673e:	68b9      	ldr	r1, [r7, #8]
 8006740:	68f8      	ldr	r0, [r7, #12]
 8006742:	f7ff fc6c 	bl	800601e <_ZNK6tflite12RuntimeShape4DimsEi>
 8006746:	4604      	mov	r4, r0
 8006748:	6839      	ldr	r1, [r7, #0]
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f7ff fc67 	bl	800601e <_ZNK6tflite12RuntimeShape4DimsEi>
 8006750:	4603      	mov	r3, r0
 8006752:	429c      	cmp	r4, r3
 8006754:	d001      	beq.n	800675a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 8006756:	f008 f901 	bl	800e95c <abort>
  return shape1.Dims(index1);
 800675a:	68b9      	ldr	r1, [r7, #8]
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f7ff fc5e 	bl	800601e <_ZNK6tflite12RuntimeShape4DimsEi>
 8006762:	4603      	mov	r3, r0
}
 8006764:	4618      	mov	r0, r3
 8006766:	3714      	adds	r7, #20
 8006768:	46bd      	mov	sp, r7
 800676a:	bd90      	pop	{r4, r7, pc}

0800676c <_ZN6tflite29MultiplyByQuantizedMultiplierElli>:
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
                                           quantized_multiplier);
}

inline int32 MultiplyByQuantizedMultiplier(int32 x, int32 quantized_multiplier,
                                           int shift) {
 800676c:	b580      	push	{r7, lr}
 800676e:	b086      	sub	sp, #24
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	607a      	str	r2, [r7, #4]
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800677e:	617b      	str	r3, [r7, #20]
  int right_shift = shift > 0 ? 0 : -shift;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2b00      	cmp	r3, #0
 8006784:	dc02      	bgt.n	800678c <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x20>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	425b      	negs	r3, r3
 800678a:	e000      	b.n	800678e <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x22>
 800678c:	2300      	movs	r3, #0
 800678e:	613b      	str	r3, [r7, #16]
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	fa02 f303 	lsl.w	r3, r2, r3
 8006798:	68b9      	ldr	r1, [r7, #8]
 800679a:	4618      	mov	r0, r3
 800679c:	f7ff fd78 	bl	8006290 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 80067a0:	4603      	mov	r3, r0
 80067a2:	6939      	ldr	r1, [r7, #16]
 80067a4:	4618      	mov	r0, r3
 80067a6:	f7ff fe67 	bl	8006478 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 80067aa:	4603      	mov	r3, r0
                                 x * (1 << left_shift), quantized_multiplier),
                             right_shift);
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3718      	adds	r7, #24
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>:
inline void Conv(const ConvParams& params, const RuntimeShape& input_shape,
                 const float* input_data, const RuntimeShape& filter_shape,
                 const float* filter_data, const RuntimeShape& bias_shape,
                 const float* bias_data, const RuntimeShape& output_shape,
                 float* output_data, const RuntimeShape& im2col_shape,
                 float* im2col_data) {
 80067b4:	b590      	push	{r4, r7, lr}
 80067b6:	ed2d 8b02 	vpush	{d8}
 80067ba:	b0a7      	sub	sp, #156	; 0x9c
 80067bc:	af02      	add	r7, sp, #8
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	607a      	str	r2, [r7, #4]
 80067c4:	603b      	str	r3, [r7, #0]
  const int stride_width = params.stride_width;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80067cc:	66bb      	str	r3, [r7, #104]	; 0x68
  const int stride_height = params.stride_height;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80067d4:	667b      	str	r3, [r7, #100]	; 0x64
  const int dilation_width_factor = params.dilation_width_factor;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80067dc:	663b      	str	r3, [r7, #96]	; 0x60
  const int dilation_height_factor = params.dilation_height_factor;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80067e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int pad_width = params.padding_values.width;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80067ec:	65bb      	str	r3, [r7, #88]	; 0x58
  const int pad_height = params.padding_values.height;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80067f4:	657b      	str	r3, [r7, #84]	; 0x54
  const float output_activation_min = params.float_activation_min;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067fa:	653b      	str	r3, [r7, #80]	; 0x50
  const float output_activation_max = params.float_activation_max;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006800:	64fb      	str	r3, [r7, #76]	; 0x4c
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8006802:	68b8      	ldr	r0, [r7, #8]
 8006804:	f7ff fbff 	bl	8006006 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8006808:	4603      	mov	r3, r0
 800680a:	2b04      	cmp	r3, #4
 800680c:	d001      	beq.n	8006812 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x5e>
 800680e:	f008 f8a5 	bl	800e95c <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 8006812:	6838      	ldr	r0, [r7, #0]
 8006814:	f7ff fbf7 	bl	8006006 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8006818:	4603      	mov	r3, r0
 800681a:	2b04      	cmp	r3, #4
 800681c:	d001      	beq.n	8006822 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x6e>
 800681e:	f008 f89d 	bl	800e95c <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8006822:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8006826:	f7ff fbee 	bl	8006006 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800682a:	4603      	mov	r3, r0
 800682c:	2b04      	cmp	r3, #4
 800682e:	d001      	beq.n	8006834 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x80>
 8006830:	f008 f894 	bl	800e95c <abort>

  (void)im2col_data;   // only used in optimized code.
  (void)im2col_shape;  // only used in optimized code.
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8006834:	2300      	movs	r3, #0
 8006836:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800683a:	2100      	movs	r1, #0
 800683c:	68b8      	ldr	r0, [r7, #8]
 800683e:	f7ff ff77 	bl	8006730 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8006842:	64b8      	str	r0, [r7, #72]	; 0x48
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 8006844:	2303      	movs	r3, #3
 8006846:	683a      	ldr	r2, [r7, #0]
 8006848:	2103      	movs	r1, #3
 800684a:	68b8      	ldr	r0, [r7, #8]
 800684c:	f7ff ff70 	bl	8006730 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8006850:	6478      	str	r0, [r7, #68]	; 0x44
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 8006852:	2303      	movs	r3, #3
 8006854:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006858:	2100      	movs	r1, #0
 800685a:	6838      	ldr	r0, [r7, #0]
 800685c:	f7ff ff68 	bl	8006730 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8006860:	6438      	str	r0, [r7, #64]	; 0x40
  if (bias_data) {
 8006862:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d009      	beq.n	800687e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xca>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 800686a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800686e:	f7ff fc66 	bl	800613e <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8006872:	4602      	mov	r2, r0
 8006874:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006876:	4293      	cmp	r3, r2
 8006878:	d001      	beq.n	800687e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xca>
 800687a:	f008 f86f 	bl	800e95c <abort>
  }
  const int input_height = input_shape.Dims(1);
 800687e:	2101      	movs	r1, #1
 8006880:	68b8      	ldr	r0, [r7, #8]
 8006882:	f7ff fbcc 	bl	800601e <_ZNK6tflite12RuntimeShape4DimsEi>
 8006886:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int input_width = input_shape.Dims(2);
 8006888:	2102      	movs	r1, #2
 800688a:	68b8      	ldr	r0, [r7, #8]
 800688c:	f7ff fbc7 	bl	800601e <_ZNK6tflite12RuntimeShape4DimsEi>
 8006890:	63b8      	str	r0, [r7, #56]	; 0x38
  const int filter_height = filter_shape.Dims(1);
 8006892:	2101      	movs	r1, #1
 8006894:	6838      	ldr	r0, [r7, #0]
 8006896:	f7ff fbc2 	bl	800601e <_ZNK6tflite12RuntimeShape4DimsEi>
 800689a:	6378      	str	r0, [r7, #52]	; 0x34
  const int filter_width = filter_shape.Dims(2);
 800689c:	2102      	movs	r1, #2
 800689e:	6838      	ldr	r0, [r7, #0]
 80068a0:	f7ff fbbd 	bl	800601e <_ZNK6tflite12RuntimeShape4DimsEi>
 80068a4:	6338      	str	r0, [r7, #48]	; 0x30
  const int output_height = output_shape.Dims(1);
 80068a6:	2101      	movs	r1, #1
 80068a8:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80068ac:	f7ff fbb7 	bl	800601e <_ZNK6tflite12RuntimeShape4DimsEi>
 80068b0:	62f8      	str	r0, [r7, #44]	; 0x2c
  const int output_width = output_shape.Dims(2);
 80068b2:	2102      	movs	r1, #2
 80068b4:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80068b8:	f7ff fbb1 	bl	800601e <_ZNK6tflite12RuntimeShape4DimsEi>
 80068bc:	62b8      	str	r0, [r7, #40]	; 0x28
  for (int batch = 0; batch < batches; ++batch) {
 80068be:	2300      	movs	r3, #0
 80068c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80068c4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80068c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068ca:	429a      	cmp	r2, r3
 80068cc:	f280 80de 	bge.w	8006a8c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2d8>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 80068d0:	2300      	movs	r3, #0
 80068d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80068d6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80068da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068dc:	429a      	cmp	r2, r3
 80068de:	f280 80cf 	bge.w	8006a80 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2cc>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 80068e2:	2300      	movs	r3, #0
 80068e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80068e8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80068ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ee:	429a      	cmp	r2, r3
 80068f0:	f280 80c0 	bge.w	8006a74 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2c0>
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 80068f4:	2300      	movs	r3, #0
 80068f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80068fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80068fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006900:	429a      	cmp	r2, r3
 8006902:	f280 80b1 	bge.w	8006a68 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2b4>
          const int in_x_origin = (out_x * stride_width) - pad_width;
 8006906:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800690a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800690c:	fb02 f203 	mul.w	r2, r2, r3
 8006910:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	627b      	str	r3, [r7, #36]	; 0x24
          const int in_y_origin = (out_y * stride_height) - pad_height;
 8006916:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800691a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800691c:	fb02 f203 	mul.w	r2, r2, r3
 8006920:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006922:	1ad3      	subs	r3, r2, r3
 8006924:	623b      	str	r3, [r7, #32]
          float total = 0.f;
 8006926:	f04f 0300 	mov.w	r3, #0
 800692a:	67fb      	str	r3, [r7, #124]	; 0x7c
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800692c:	2300      	movs	r3, #0
 800692e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006930:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006934:	429a      	cmp	r2, r3
 8006936:	da5e      	bge.n	80069f6 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x242>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8006938:	2300      	movs	r3, #0
 800693a:	677b      	str	r3, [r7, #116]	; 0x74
 800693c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800693e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006940:	429a      	cmp	r2, r3
 8006942:	da54      	bge.n	80069ee <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x23a>
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8006944:	2300      	movs	r3, #0
 8006946:	673b      	str	r3, [r7, #112]	; 0x70
 8006948:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800694a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800694c:	429a      	cmp	r2, r3
 800694e:	da4a      	bge.n	80069e6 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x232>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
 8006950:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006952:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006954:	fb02 f303 	mul.w	r3, r2, r3
 8006958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800695a:	4413      	add	r3, r2
 800695c:	61fb      	str	r3, [r7, #28]
                const int in_y =
                    in_y_origin + dilation_height_factor * filter_y;
 800695e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006960:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006962:	fb02 f303 	mul.w	r3, r2, r3
                const int in_y =
 8006966:	6a3a      	ldr	r2, [r7, #32]
 8006968:	4413      	add	r3, r2
 800696a:	61bb      	str	r3, [r7, #24]
                // If the location is outside the bounds of the input image,
                // use zero as a default value.
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 800696c:	69fb      	ldr	r3, [r7, #28]
 800696e:	2b00      	cmp	r3, #0
 8006970:	db35      	blt.n	80069de <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x22a>
 8006972:	69fa      	ldr	r2, [r7, #28]
 8006974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006976:	429a      	cmp	r2, r3
 8006978:	da31      	bge.n	80069de <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x22a>
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	2b00      	cmp	r3, #0
 800697e:	db2e      	blt.n	80069de <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x22a>
 8006980:	69ba      	ldr	r2, [r7, #24]
 8006982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006984:	429a      	cmp	r2, r3
 8006986:	da2a      	bge.n	80069de <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x22a>
                    (in_y < input_height)) {
                  float input_value = input_data[Offset(
 8006988:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800698a:	9300      	str	r3, [sp, #0]
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	69ba      	ldr	r2, [r7, #24]
 8006990:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8006994:	68b8      	ldr	r0, [r7, #8]
 8006996:	f7ff fcf7 	bl	8006388 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800699a:	4603      	mov	r3, r0
                      input_shape, batch, in_y, in_x, in_channel)];
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	4413      	add	r3, r2
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	617b      	str	r3, [r7, #20]
                  float filter_value =
                      filter_data[Offset(filter_shape, out_channel, filter_y,
 80069a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069a8:	9300      	str	r3, [sp, #0]
 80069aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80069ae:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80069b2:	6838      	ldr	r0, [r7, #0]
 80069b4:	f7ff fce8 	bl	8006388 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 80069b8:	4603      	mov	r3, r0
                                         filter_x, in_channel)];
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80069c0:	4413      	add	r3, r2
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	613b      	str	r3, [r7, #16]
                  total += (input_value * filter_value);
 80069c6:	ed97 7a05 	vldr	s14, [r7, #20]
 80069ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80069ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069d2:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80069d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80069da:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 80069de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069e0:	3301      	adds	r3, #1
 80069e2:	673b      	str	r3, [r7, #112]	; 0x70
 80069e4:	e7b0      	b.n	8006948 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x194>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 80069e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069e8:	3301      	adds	r3, #1
 80069ea:	677b      	str	r3, [r7, #116]	; 0x74
 80069ec:	e7a6      	b.n	800693c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x188>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 80069ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069f0:	3301      	adds	r3, #1
 80069f2:	67bb      	str	r3, [r7, #120]	; 0x78
 80069f4:	e79c      	b.n	8006930 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x17c>
                }
              }
            }
          }
          float bias_value = 0.0f;
 80069f6:	f04f 0300 	mov.w	r3, #0
 80069fa:	66fb      	str	r3, [r7, #108]	; 0x6c
          if (bias_data) {
 80069fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d007      	beq.n	8006a14 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x260>
            bias_value = bias_data[out_channel];
 8006a04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006a0e:	4413      	add	r3, r2
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	66fb      	str	r3, [r7, #108]	; 0x6c
          }
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
              ActivationFunctionWithMinMax(total + bias_value,
 8006a14:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8006a18:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8006a1c:	ee37 8a27 	vadd.f32	s16, s14, s15
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 8006a20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006a24:	9300      	str	r3, [sp, #0]
 8006a26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a2a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006a2e:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8006a32:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8006a36:	f7ff fca7 	bl	8006388 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006a42:	18d4      	adds	r4, r2, r3
              ActivationFunctionWithMinMax(total + bias_value,
 8006a44:	ed97 1a13 	vldr	s2, [r7, #76]	; 0x4c
 8006a48:	edd7 0a14 	vldr	s1, [r7, #80]	; 0x50
 8006a4c:	eeb0 0a48 	vmov.f32	s0, s16
 8006a50:	f7ff fcf2 	bl	8006438 <_ZN6tflite28ActivationFunctionWithMinMaxEfff>
 8006a54:	eef0 7a40 	vmov.f32	s15, s0
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 8006a58:	edc4 7a00 	vstr	s15, [r4]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 8006a5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006a60:	3301      	adds	r3, #1
 8006a62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a66:	e748      	b.n	80068fa <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x146>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8006a68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a72:	e739      	b.n	80068e8 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x134>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8006a74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006a78:	3301      	adds	r3, #1
 8006a7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006a7e:	e72a      	b.n	80068d6 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x122>
  for (int batch = 0; batch < batches; ++batch) {
 8006a80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a84:	3301      	adds	r3, #1
 8006a86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006a8a:	e71b      	b.n	80068c4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x110>
                                           output_activation_max);
        }
      }
    }
  }
}
 8006a8c:	bf00      	nop
 8006a8e:	3794      	adds	r7, #148	; 0x94
 8006a90:	46bd      	mov	sp, r7
 8006a92:	ecbd 8b02 	vpop	{d8}
 8006a96:	bd90      	pop	{r4, r7, pc}

08006a98 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv>:
inline void Conv(const ConvParams& params, const RuntimeShape& input_shape,
                 const uint8* input_data, const RuntimeShape& filter_shape,
                 const uint8* filter_data, const RuntimeShape& bias_shape,
                 const int32* bias_data, const RuntimeShape& output_shape,
                 uint8* output_data, const RuntimeShape& im2col_shape,
                 uint8* im2col_data, void* cpu_backend_context) {
 8006a98:	b590      	push	{r4, r7, lr}
 8006a9a:	b0ab      	sub	sp, #172	; 0xac
 8006a9c:	af02      	add	r7, sp, #8
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	607a      	str	r2, [r7, #4]
 8006aa4:	603b      	str	r3, [r7, #0]
  (void)cpu_backend_context;  // only used in optimized code.
  (void)im2col_data;   // only used in optimized code.
  (void)im2col_shape;  // only used in optimized code.
  const int stride_width = params.stride_width;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8006aac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  const int stride_height = params.stride_height;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8006ab6:	67fb      	str	r3, [r7, #124]	; 0x7c
  const int dilation_width_factor = params.dilation_width_factor;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8006abe:	67bb      	str	r3, [r7, #120]	; 0x78
  const int dilation_height_factor = params.dilation_height_factor;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8006ac6:	677b      	str	r3, [r7, #116]	; 0x74
  const int pad_width = params.padding_values.width;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006ace:	673b      	str	r3, [r7, #112]	; 0x70
  const int pad_height = params.padding_values.height;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006ad6:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int32 input_offset = params.input_offset;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	695b      	ldr	r3, [r3, #20]
 8006adc:	66bb      	str	r3, [r7, #104]	; 0x68
  const int32 filter_offset = params.weights_offset;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	699b      	ldr	r3, [r3, #24]
 8006ae2:	667b      	str	r3, [r7, #100]	; 0x64
  const int32 output_offset = params.output_offset;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	69db      	ldr	r3, [r3, #28]
 8006ae8:	663b      	str	r3, [r7, #96]	; 0x60
  const int32 output_multiplier = params.output_multiplier;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6a1b      	ldr	r3, [r3, #32]
 8006aee:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int output_shift = params.output_shift;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af4:	65bb      	str	r3, [r7, #88]	; 0x58
  const int32 output_activation_min = params.quantized_activation_min;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006afa:	61bb      	str	r3, [r7, #24]
  const int32 output_activation_max = params.quantized_activation_max;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b00:	617b      	str	r3, [r7, #20]
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 8006b02:	69ba      	ldr	r2, [r7, #24]
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	429a      	cmp	r2, r3
 8006b08:	dd01      	ble.n	8006b0e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x76>
 8006b0a:	f007 ff27 	bl	800e95c <abort>

  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8006b0e:	68b8      	ldr	r0, [r7, #8]
 8006b10:	f7ff fa79 	bl	8006006 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b04      	cmp	r3, #4
 8006b18:	d001      	beq.n	8006b1e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x86>
 8006b1a:	f007 ff1f 	bl	800e95c <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 8006b1e:	6838      	ldr	r0, [r7, #0]
 8006b20:	f7ff fa71 	bl	8006006 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b04      	cmp	r3, #4
 8006b28:	d001      	beq.n	8006b2e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x96>
 8006b2a:	f007 ff17 	bl	800e95c <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8006b2e:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8006b32:	f7ff fa68 	bl	8006006 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b04      	cmp	r3, #4
 8006b3a:	d001      	beq.n	8006b40 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0xa8>
 8006b3c:	f007 ff0e 	bl	800e95c <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8006b40:	2300      	movs	r3, #0
 8006b42:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006b46:	2100      	movs	r1, #0
 8006b48:	68b8      	ldr	r0, [r7, #8]
 8006b4a:	f7ff fdf1 	bl	8006730 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8006b4e:	6578      	str	r0, [r7, #84]	; 0x54
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 8006b50:	2303      	movs	r3, #3
 8006b52:	683a      	ldr	r2, [r7, #0]
 8006b54:	2103      	movs	r1, #3
 8006b56:	68b8      	ldr	r0, [r7, #8]
 8006b58:	f7ff fdea 	bl	8006730 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8006b5c:	6538      	str	r0, [r7, #80]	; 0x50
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 8006b5e:	2303      	movs	r3, #3
 8006b60:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006b64:	2100      	movs	r1, #0
 8006b66:	6838      	ldr	r0, [r7, #0]
 8006b68:	f7ff fde2 	bl	8006730 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8006b6c:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (bias_data) {
 8006b6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d009      	beq.n	8006b8a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0xf2>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 8006b76:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8006b7a:	f7ff fae0 	bl	800613e <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d001      	beq.n	8006b8a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0xf2>
 8006b86:	f007 fee9 	bl	800e95c <abort>
  }
  const int input_height = input_shape.Dims(1);
 8006b8a:	2101      	movs	r1, #1
 8006b8c:	68b8      	ldr	r0, [r7, #8]
 8006b8e:	f7ff fa46 	bl	800601e <_ZNK6tflite12RuntimeShape4DimsEi>
 8006b92:	64b8      	str	r0, [r7, #72]	; 0x48
  const int input_width = input_shape.Dims(2);
 8006b94:	2102      	movs	r1, #2
 8006b96:	68b8      	ldr	r0, [r7, #8]
 8006b98:	f7ff fa41 	bl	800601e <_ZNK6tflite12RuntimeShape4DimsEi>
 8006b9c:	6478      	str	r0, [r7, #68]	; 0x44
  const int filter_height = filter_shape.Dims(1);
 8006b9e:	2101      	movs	r1, #1
 8006ba0:	6838      	ldr	r0, [r7, #0]
 8006ba2:	f7ff fa3c 	bl	800601e <_ZNK6tflite12RuntimeShape4DimsEi>
 8006ba6:	6438      	str	r0, [r7, #64]	; 0x40
  const int filter_width = filter_shape.Dims(2);
 8006ba8:	2102      	movs	r1, #2
 8006baa:	6838      	ldr	r0, [r7, #0]
 8006bac:	f7ff fa37 	bl	800601e <_ZNK6tflite12RuntimeShape4DimsEi>
 8006bb0:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int output_height = output_shape.Dims(1);
 8006bb2:	2101      	movs	r1, #1
 8006bb4:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8006bb8:	f7ff fa31 	bl	800601e <_ZNK6tflite12RuntimeShape4DimsEi>
 8006bbc:	63b8      	str	r0, [r7, #56]	; 0x38
  const int output_width = output_shape.Dims(2);
 8006bbe:	2102      	movs	r1, #2
 8006bc0:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8006bc4:	f7ff fa2b 	bl	800601e <_ZNK6tflite12RuntimeShape4DimsEi>
 8006bc8:	6378      	str	r0, [r7, #52]	; 0x34
  for (int batch = 0; batch < batches; ++batch) {
 8006bca:	2300      	movs	r3, #0
 8006bcc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006bd0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8006bd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	f280 8101 	bge.w	8006dde <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x346>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8006bdc:	2300      	movs	r3, #0
 8006bde:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006be2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be8:	429a      	cmp	r2, r3
 8006bea:	f280 80f2 	bge.w	8006dd2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x33a>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8006bee:	2300      	movs	r3, #0
 8006bf0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006bf4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	f280 80e3 	bge.w	8006dc6 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x32e>
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 8006c00:	2300      	movs	r3, #0
 8006c02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006c06:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8006c0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	f280 80d4 	bge.w	8006dba <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x322>
          const int in_x_origin = (out_x * stride_width) - pad_width;
 8006c12:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006c16:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006c1a:	fb02 f203 	mul.w	r2, r2, r3
 8006c1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	633b      	str	r3, [r7, #48]	; 0x30
          const int in_y_origin = (out_y * stride_height) - pad_height;
 8006c24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c28:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006c2a:	fb02 f203 	mul.w	r2, r2, r3
 8006c2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	62fb      	str	r3, [r7, #44]	; 0x2c
          int32 acc = 0;
 8006c34:	2300      	movs	r3, #0
 8006c36:	613b      	str	r3, [r7, #16]
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8006c38:	2300      	movs	r3, #0
 8006c3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006c3e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006c42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c44:	429a      	cmp	r2, r3
 8006c46:	da6d      	bge.n	8006d24 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x28c>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8006c48:	2300      	movs	r3, #0
 8006c4a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006c4e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006c52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c54:	429a      	cmp	r2, r3
 8006c56:	da5f      	bge.n	8006d18 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x280>
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8006c58:	2300      	movs	r3, #0
 8006c5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006c5e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006c62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c64:	429a      	cmp	r2, r3
 8006c66:	da51      	bge.n	8006d0c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x274>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
 8006c68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c6a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006c6e:	fb02 f303 	mul.w	r3, r2, r3
 8006c72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c74:	4413      	add	r3, r2
 8006c76:	62bb      	str	r3, [r7, #40]	; 0x28
                const int in_y =
                    in_y_origin + dilation_height_factor * filter_y;
 8006c78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c7a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006c7e:	fb02 f303 	mul.w	r3, r2, r3
                const int in_y =
 8006c82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c84:	4413      	add	r3, r2
 8006c86:	627b      	str	r3, [r7, #36]	; 0x24
                // If the location is outside the bounds of the input image,
                // use zero as a default value.
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 8006c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	db38      	blt.n	8006d00 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x268>
 8006c8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c92:	429a      	cmp	r2, r3
 8006c94:	da34      	bge.n	8006d00 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x268>
 8006c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	db31      	blt.n	8006d00 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x268>
 8006c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	da2d      	bge.n	8006d00 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x268>
                    (in_y < input_height)) {
                  int32 input_val = input_data[Offset(input_shape, batch, in_y,
 8006ca4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ca8:	9300      	str	r3, [sp, #0]
 8006caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cae:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8006cb2:	68b8      	ldr	r0, [r7, #8]
 8006cb4:	f7ff fb68 	bl	8006388 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	461a      	mov	r2, r3
                                                      in_x, in_channel)];
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	4413      	add	r3, r2
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	623b      	str	r3, [r7, #32]
                  int32 filter_val =
                      filter_data[Offset(filter_shape, out_channel, filter_y,
 8006cc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006cc8:	9300      	str	r3, [sp, #0]
 8006cca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006cce:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006cd2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006cd6:	6838      	ldr	r0, [r7, #0]
 8006cd8:	f7ff fb56 	bl	8006388 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	461a      	mov	r2, r3
                                         filter_x, in_channel)];
 8006ce0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006ce4:	4413      	add	r3, r2
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	61fb      	str	r3, [r7, #28]
                  acc +=
                      (filter_val + filter_offset) * (input_val + input_offset);
 8006cea:	69fa      	ldr	r2, [r7, #28]
 8006cec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cee:	4413      	add	r3, r2
 8006cf0:	6a39      	ldr	r1, [r7, #32]
 8006cf2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006cf4:	440a      	add	r2, r1
 8006cf6:	fb02 f203 	mul.w	r2, r2, r3
                  acc +=
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	613b      	str	r3, [r7, #16]
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8006d00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d04:	3301      	adds	r3, #1
 8006d06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006d0a:	e7a8      	b.n	8006c5e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x1c6>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8006d0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d10:	3301      	adds	r3, #1
 8006d12:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006d16:	e79a      	b.n	8006c4e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x1b6>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8006d18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006d22:	e78c      	b.n	8006c3e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x1a6>
                }
              }
            }
          }
          if (bias_data) {
 8006d24:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d009      	beq.n	8006d40 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x2a8>
            acc += bias_data[out_channel];
 8006d2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006d36:	4413      	add	r3, r2
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	4413      	add	r3, r2
 8006d3e:	613b      	str	r3, [r7, #16]
          }
          acc = MultiplyByQuantizedMultiplier(acc, output_multiplier,
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006d44:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7ff fd10 	bl	800676c <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	613b      	str	r3, [r7, #16]
                                              output_shift);
          acc += output_offset;
 8006d50:	693a      	ldr	r2, [r7, #16]
 8006d52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d54:	4413      	add	r3, r2
 8006d56:	613b      	str	r3, [r7, #16]
          acc = std::max(acc, output_activation_min);
 8006d58:	f107 0218 	add.w	r2, r7, #24
 8006d5c:	f107 0310 	add.w	r3, r7, #16
 8006d60:	4611      	mov	r1, r2
 8006d62:	4618      	mov	r0, r3
 8006d64:	f7ff f8a2 	bl	8005eac <_ZSt3maxIlERKT_S2_S2_>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	613b      	str	r3, [r7, #16]
          acc = std::min(acc, output_activation_max);
 8006d6e:	f107 0214 	add.w	r2, r7, #20
 8006d72:	f107 0310 	add.w	r3, r7, #16
 8006d76:	4611      	mov	r1, r2
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f7ff f8ab 	bl	8005ed4 <_ZSt3minIlERKT_S2_S2_>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	613b      	str	r3, [r7, #16]
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 8006d84:	693c      	ldr	r4, [r7, #16]
 8006d86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d8a:	9300      	str	r3, [sp, #0]
 8006d8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006d90:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006d94:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8006d98:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8006d9c:	f7ff faf4 	bl	8006388 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8006da0:	4603      	mov	r3, r0
 8006da2:	461a      	mov	r2, r3
 8006da4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006da8:	4413      	add	r3, r2
 8006daa:	b2e2      	uxtb	r2, r4
 8006dac:	701a      	strb	r2, [r3, #0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 8006dae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006db2:	3301      	adds	r3, #1
 8006db4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006db8:	e725      	b.n	8006c06 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x16e>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8006dba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006dc4:	e716      	b.n	8006bf4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x15c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8006dc6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006dca:	3301      	adds	r3, #1
 8006dcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006dd0:	e707      	b.n	8006be2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x14a>
  for (int batch = 0; batch < batches; ++batch) {
 8006dd2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006ddc:	e6f8      	b.n	8006bd0 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x138>
              static_cast<uint8>(acc);
        }
      }
    }
  }
}
 8006dde:	bf00      	nop
 8006de0:	37a4      	adds	r7, #164	; 0xa4
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd90      	pop	{r4, r7, pc}

08006de6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const ConvParams& params, const int32* output_multiplier,
    const int32* output_shift, const RuntimeShape& input_shape,
    const int8* input_data, const RuntimeShape& filter_shape,
    const int8* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    int8* output_data) {
 8006de6:	b590      	push	{r4, r7, lr}
 8006de8:	b0a9      	sub	sp, #164	; 0xa4
 8006dea:	af02      	add	r7, sp, #8
 8006dec:	60f8      	str	r0, [r7, #12]
 8006dee:	60b9      	str	r1, [r7, #8]
 8006df0:	607a      	str	r2, [r7, #4]
 8006df2:	603b      	str	r3, [r7, #0]
  // Get parameters.
  const int32 input_offset = params.input_offset;  // r = s(q - Z)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	695b      	ldr	r3, [r3, #20]
 8006df8:	67bb      	str	r3, [r7, #120]	; 0x78
  const int stride_width = params.stride_width;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8006e00:	677b      	str	r3, [r7, #116]	; 0x74
  const int stride_height = params.stride_height;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8006e08:	673b      	str	r3, [r7, #112]	; 0x70
  const int dilation_width_factor = params.dilation_width_factor;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8006e10:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int dilation_height_factor = params.dilation_height_factor;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8006e18:	66bb      	str	r3, [r7, #104]	; 0x68
  const int pad_width = params.padding_values.width;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006e20:	667b      	str	r3, [r7, #100]	; 0x64
  const int pad_height = params.padding_values.height;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006e28:	663b      	str	r3, [r7, #96]	; 0x60
  const int32 output_offset = params.output_offset;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	69db      	ldr	r3, [r3, #28]
 8006e2e:	65fb      	str	r3, [r7, #92]	; 0x5c

  // Set min and max value of the output.
  const int32 output_activation_min = params.quantized_activation_min;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e34:	61bb      	str	r3, [r7, #24]
  const int32 output_activation_max = params.quantized_activation_max;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e3a:	617b      	str	r3, [r7, #20]

  // Sanity check.
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 8006e3c:	69ba      	ldr	r2, [r7, #24]
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	dd01      	ble.n	8006e48 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x62>
 8006e44:	f007 fd8a 	bl	800e95c <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8006e48:	6838      	ldr	r0, [r7, #0]
 8006e4a:	f7ff f8dc 	bl	8006006 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b04      	cmp	r3, #4
 8006e52:	d001      	beq.n	8006e58 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x72>
 8006e54:	f007 fd82 	bl	800e95c <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 8006e58:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8006e5c:	f7ff f8d3 	bl	8006006 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b04      	cmp	r3, #4
 8006e64:	d001      	beq.n	8006e6a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x84>
 8006e66:	f007 fd79 	bl	800e95c <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8006e6a:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8006e6e:	f7ff f8ca 	bl	8006006 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8006e72:	4603      	mov	r3, r0
 8006e74:	2b04      	cmp	r3, #4
 8006e76:	d001      	beq.n	8006e7c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x96>
 8006e78:	f007 fd70 	bl	800e95c <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006e82:	2100      	movs	r1, #0
 8006e84:	6838      	ldr	r0, [r7, #0]
 8006e86:	f7ff fc53 	bl	8006730 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8006e8a:	65b8      	str	r0, [r7, #88]	; 0x58
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006e92:	2103      	movs	r1, #3
 8006e94:	6838      	ldr	r0, [r7, #0]
 8006e96:	f7ff fc4b 	bl	8006730 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8006e9a:	6578      	str	r0, [r7, #84]	; 0x54
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 8006e9c:	2303      	movs	r3, #3
 8006e9e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006ea2:	2100      	movs	r1, #0
 8006ea4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8006ea8:	f7ff fc42 	bl	8006730 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8006eac:	6538      	str	r0, [r7, #80]	; 0x50
  if (bias_data) {
 8006eae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d009      	beq.n	8006eca <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe4>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 8006eb6:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8006eba:	f7ff f940 	bl	800613e <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d001      	beq.n	8006eca <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe4>
 8006ec6:	f007 fd49 	bl	800e95c <abort>
  }

  // Check dimensions of the tensors.
  const int input_height = input_shape.Dims(1);
 8006eca:	2101      	movs	r1, #1
 8006ecc:	6838      	ldr	r0, [r7, #0]
 8006ece:	f7ff f8a6 	bl	800601e <_ZNK6tflite12RuntimeShape4DimsEi>
 8006ed2:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int input_width = input_shape.Dims(2);
 8006ed4:	2102      	movs	r1, #2
 8006ed6:	6838      	ldr	r0, [r7, #0]
 8006ed8:	f7ff f8a1 	bl	800601e <_ZNK6tflite12RuntimeShape4DimsEi>
 8006edc:	64b8      	str	r0, [r7, #72]	; 0x48
  const int filter_height = filter_shape.Dims(1);
 8006ede:	2101      	movs	r1, #1
 8006ee0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8006ee4:	f7ff f89b 	bl	800601e <_ZNK6tflite12RuntimeShape4DimsEi>
 8006ee8:	6478      	str	r0, [r7, #68]	; 0x44
  const int filter_width = filter_shape.Dims(2);
 8006eea:	2102      	movs	r1, #2
 8006eec:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8006ef0:	f7ff f895 	bl	800601e <_ZNK6tflite12RuntimeShape4DimsEi>
 8006ef4:	6438      	str	r0, [r7, #64]	; 0x40
  const int output_height = output_shape.Dims(1);
 8006ef6:	2101      	movs	r1, #1
 8006ef8:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8006efc:	f7ff f88f 	bl	800601e <_ZNK6tflite12RuntimeShape4DimsEi>
 8006f00:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int output_width = output_shape.Dims(2);
 8006f02:	2102      	movs	r1, #2
 8006f04:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8006f08:	f7ff f889 	bl	800601e <_ZNK6tflite12RuntimeShape4DimsEi>
 8006f0c:	63b8      	str	r0, [r7, #56]	; 0x38
  for (int batch = 0; batch < batches; ++batch) {
 8006f0e:	2300      	movs	r3, #0
 8006f10:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006f14:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006f18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	f280 810f 	bge.w	800713e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x358>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8006f20:	2300      	movs	r3, #0
 8006f22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f26:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8006f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	f280 8100 	bge.w	8007132 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x34c>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8006f32:	2300      	movs	r3, #0
 8006f34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006f38:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	f280 80f1 	bge.w	8007126 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x340>
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 8006f44:	2300      	movs	r3, #0
 8006f46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006f4a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006f4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f50:	429a      	cmp	r2, r3
 8006f52:	f280 80e2 	bge.w	800711a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x334>
          const int in_x_origin = (out_x * stride_width) - pad_width;
 8006f56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f5a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006f5c:	fb02 f203 	mul.w	r2, r2, r3
 8006f60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f62:	1ad3      	subs	r3, r2, r3
 8006f64:	637b      	str	r3, [r7, #52]	; 0x34
          const int in_y_origin = (out_y * stride_height) - pad_height;
 8006f66:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f6a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006f6c:	fb02 f203 	mul.w	r2, r2, r3
 8006f70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f72:	1ad3      	subs	r3, r2, r3
 8006f74:	633b      	str	r3, [r7, #48]	; 0x30
          int32 acc = 0;
 8006f76:	2300      	movs	r3, #0
 8006f78:	613b      	str	r3, [r7, #16]
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006f80:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006f84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f86:	429a      	cmp	r2, r3
 8006f88:	da72      	bge.n	8007070 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x28a>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006f90:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006f94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f96:	429a      	cmp	r2, r3
 8006f98:	da64      	bge.n	8007064 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x27e>
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006f9e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006fa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	da58      	bge.n	8007058 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x272>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
 8006fa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fa8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006fac:	fb02 f303 	mul.w	r3, r2, r3
 8006fb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fb2:	4413      	add	r3, r2
 8006fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
                const int in_y =
                    in_y_origin + dilation_height_factor * filter_y;
 8006fb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006fb8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006fbc:	fb02 f303 	mul.w	r3, r2, r3
                const int in_y =
 8006fc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fc2:	4413      	add	r3, r2
 8006fc4:	62bb      	str	r3, [r7, #40]	; 0x28
                // Zero padding by omitting the areas outside the image.
                const bool is_point_inside_image =
                    (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 8006fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	db0c      	blt.n	8006fe6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x200>
 8006fcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	da08      	bge.n	8006fe6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x200>
 8006fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	db05      	blt.n	8006fe6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x200>
 8006fda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	da01      	bge.n	8006fe6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x200>
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e000      	b.n	8006fe8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x202>
 8006fe6:	2300      	movs	r3, #0
                const bool is_point_inside_image =
 8006fe8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                    (in_y < input_height);
                if (is_point_inside_image) {
 8006fec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d02d      	beq.n	8007050 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x26a>
                  int32 input_val = input_data[Offset(input_shape, batch, in_y,
 8006ff4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006ff6:	9300      	str	r3, [sp, #0]
 8006ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ffa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ffc:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8007000:	6838      	ldr	r0, [r7, #0]
 8007002:	f7ff f9c1 	bl	8006388 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8007006:	4603      	mov	r3, r0
 8007008:	461a      	mov	r2, r3
                                                      in_x, in_channel)];
 800700a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800700e:	4413      	add	r3, r2
 8007010:	f993 3000 	ldrsb.w	r3, [r3]
 8007014:	623b      	str	r3, [r7, #32]
                  int32 filter_val =
                      filter_data[Offset(filter_shape, out_channel, filter_y,
 8007016:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007018:	9300      	str	r3, [sp, #0]
 800701a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800701e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007022:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8007026:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800702a:	f7ff f9ad 	bl	8006388 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800702e:	4603      	mov	r3, r0
 8007030:	461a      	mov	r2, r3
                                         filter_x, in_channel)];
 8007032:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007036:	4413      	add	r3, r2
 8007038:	f993 3000 	ldrsb.w	r3, [r3]
 800703c:	61fb      	str	r3, [r7, #28]
                  // long as the filter size (filter_y * filter_x * in_channel)
                  // does not exceed 2^16, which is the case in all the models
                  // we have seen so far.
                  // TODO(jianlijianli): Add a check to make sure the
                  // accumulator depth is smaller than 2^16.
                  acc += filter_val * (input_val + input_offset);
 800703e:	6a3a      	ldr	r2, [r7, #32]
 8007040:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007042:	4413      	add	r3, r2
 8007044:	69fa      	ldr	r2, [r7, #28]
 8007046:	fb02 f203 	mul.w	r2, r2, r3
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	4413      	add	r3, r2
 800704e:	613b      	str	r3, [r7, #16]
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8007050:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007052:	3301      	adds	r3, #1
 8007054:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007056:	e7a2      	b.n	8006f9e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1b8>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8007058:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800705c:	3301      	adds	r3, #1
 800705e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007062:	e795      	b.n	8006f90 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1aa>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8007064:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007068:	3301      	adds	r3, #1
 800706a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800706e:	e787      	b.n	8006f80 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19a>
                }
              }
            }
          }

          if (bias_data) {
 8007070:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007074:	2b00      	cmp	r3, #0
 8007076:	d009      	beq.n	800708c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2a6>
            acc += bias_data[out_channel];
 8007078:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007082:	4413      	add	r3, r2
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	4413      	add	r3, r2
 800708a:	613b      	str	r3, [r7, #16]
          }
          acc = MultiplyByQuantizedMultiplier(
 800708c:	6938      	ldr	r0, [r7, #16]
              acc, output_multiplier[out_channel], output_shift[out_channel]);
 800708e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	68ba      	ldr	r2, [r7, #8]
 8007096:	4413      	add	r3, r2
          acc = MultiplyByQuantizedMultiplier(
 8007098:	6819      	ldr	r1, [r3, #0]
              acc, output_multiplier[out_channel], output_shift[out_channel]);
 800709a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	4413      	add	r3, r2
          acc = MultiplyByQuantizedMultiplier(
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	461a      	mov	r2, r3
 80070a8:	f7ff fb60 	bl	800676c <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 80070ac:	4603      	mov	r3, r0
 80070ae:	613b      	str	r3, [r7, #16]
          acc += output_offset;
 80070b0:	693a      	ldr	r2, [r7, #16]
 80070b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070b4:	4413      	add	r3, r2
 80070b6:	613b      	str	r3, [r7, #16]
          acc = std::max(acc, output_activation_min);
 80070b8:	f107 0218 	add.w	r2, r7, #24
 80070bc:	f107 0310 	add.w	r3, r7, #16
 80070c0:	4611      	mov	r1, r2
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7fe fef2 	bl	8005eac <_ZSt3maxIlERKT_S2_S2_>
 80070c8:	4603      	mov	r3, r0
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	613b      	str	r3, [r7, #16]
          acc = std::min(acc, output_activation_max);
 80070ce:	f107 0214 	add.w	r2, r7, #20
 80070d2:	f107 0310 	add.w	r3, r7, #16
 80070d6:	4611      	mov	r1, r2
 80070d8:	4618      	mov	r0, r3
 80070da:	f7fe fefb 	bl	8005ed4 <_ZSt3minIlERKT_S2_S2_>
 80070de:	4603      	mov	r3, r0
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	613b      	str	r3, [r7, #16]
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 80070e4:	693c      	ldr	r4, [r7, #16]
 80070e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80070ea:	9300      	str	r3, [sp, #0]
 80070ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80070f0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80070f4:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80070f8:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80070fc:	f7ff f944 	bl	8006388 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8007100:	4603      	mov	r3, r0
 8007102:	461a      	mov	r2, r3
 8007104:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007108:	4413      	add	r3, r2
 800710a:	b262      	sxtb	r2, r4
 800710c:	701a      	strb	r2, [r3, #0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 800710e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007112:	3301      	adds	r3, #1
 8007114:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007118:	e717      	b.n	8006f4a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x164>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800711a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800711e:	3301      	adds	r3, #1
 8007120:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007124:	e708      	b.n	8006f38 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x152>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8007126:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800712a:	3301      	adds	r3, #1
 800712c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007130:	e6f9      	b.n	8006f26 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x140>
  for (int batch = 0; batch < batches; ++batch) {
 8007132:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007136:	3301      	adds	r3, #1
 8007138:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800713c:	e6ea      	b.n	8006f14 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x12e>
              static_cast<int8_t>(acc);
        }
      }
    }
  }
}
 800713e:	bf00      	nop
 8007140:	379c      	adds	r7, #156	; 0x9c
 8007142:	46bd      	mov	sp, r7
 8007144:	bd90      	pop	{r4, r7, pc}

08007146 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei>:
                                                  int index) {
 8007146:	b480      	push	{r7}
 8007148:	b087      	sub	sp, #28
 800714a:	af00      	add	r7, sp, #0
 800714c:	60f8      	str	r0, [r7, #12]
 800714e:	60b9      	str	r1, [r7, #8]
 8007150:	607a      	str	r2, [r7, #4]
  const bool use_tensor = index < node->inputs->size &&
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	429a      	cmp	r2, r3
 800715c:	da0a      	bge.n	8007174 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei+0x2e>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	4413      	add	r3, r2
 8007168:	685b      	ldr	r3, [r3, #4]
  const bool use_tensor = index < node->inputs->size &&
 800716a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800716e:	d001      	beq.n	8007174 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei+0x2e>
 8007170:	2301      	movs	r3, #1
 8007172:	e000      	b.n	8007176 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei+0x30>
 8007174:	2300      	movs	r3, #0
 8007176:	75fb      	strb	r3, [r7, #23]
  if (use_tensor) {
 8007178:	7dfb      	ldrb	r3, [r7, #23]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d00a      	beq.n	8007194 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei+0x4e>
    return &context->tensors[node->inputs->data[index]];
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	689a      	ldr	r2, [r3, #8]
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	6819      	ldr	r1, [r3, #0]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	440b      	add	r3, r1
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	019b      	lsls	r3, r3, #6
 8007190:	4413      	add	r3, r2
 8007192:	e000      	b.n	8007196 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei+0x50>
  return nullptr;
 8007194:	2300      	movs	r3, #0
}
 8007196:	4618      	mov	r0, r3
 8007198:	371c      	adds	r7, #28
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr

080071a2 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>:

// It's not guaranteed that padding is symmetric. It's important to keep
// offset for algorithms need all paddings.
inline int ComputePaddingWithOffset(int stride, int dilation_rate, int in_size,
                                    int filter_size, int out_size,
                                    int* offset) {
 80071a2:	b480      	push	{r7}
 80071a4:	b087      	sub	sp, #28
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	60f8      	str	r0, [r7, #12]
 80071aa:	60b9      	str	r1, [r7, #8]
 80071ac:	607a      	str	r2, [r7, #4]
 80071ae:	603b      	str	r3, [r7, #0]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	3b01      	subs	r3, #1
 80071b4:	68ba      	ldr	r2, [r7, #8]
 80071b6:	fb02 f303 	mul.w	r3, r2, r3
 80071ba:	3301      	adds	r3, #1
 80071bc:	617b      	str	r3, [r7, #20]
  int total_padding =
      ((out_size - 1) * stride + effective_filter_size - in_size);
 80071be:	6a3b      	ldr	r3, [r7, #32]
 80071c0:	3b01      	subs	r3, #1
 80071c2:	68fa      	ldr	r2, [r7, #12]
 80071c4:	fb02 f203 	mul.w	r2, r2, r3
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	441a      	add	r2, r3
  int total_padding =
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	1ad3      	subs	r3, r2, r3
 80071d0:	613b      	str	r3, [r7, #16]
  total_padding = total_padding > 0 ? total_padding : 0;
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80071d8:	613b      	str	r3, [r7, #16]
  *offset = total_padding % 2;
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	f003 0301 	and.w	r3, r3, #1
 80071e2:	bfb8      	it	lt
 80071e4:	425b      	neglt	r3, r3
 80071e6:	461a      	mov	r2, r3
 80071e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ea:	601a      	str	r2, [r3, #0]
  return total_padding / 2;
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	0fda      	lsrs	r2, r3, #31
 80071f0:	4413      	add	r3, r2
 80071f2:	105b      	asrs	r3, r3, #1
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	371c      	adds	r7, #28
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>:

// Matching GetWindowedOutputSize in TensorFlow.
inline int ComputeOutSize(TfLitePadding padding, int image_size,
                          int filter_size, int stride, int dilation_rate = 1) {
 8007200:	b480      	push	{r7}
 8007202:	b087      	sub	sp, #28
 8007204:	af00      	add	r7, sp, #0
 8007206:	60b9      	str	r1, [r7, #8]
 8007208:	607a      	str	r2, [r7, #4]
 800720a:	603b      	str	r3, [r7, #0]
 800720c:	4603      	mov	r3, r0
 800720e:	73fb      	strb	r3, [r7, #15]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	3b01      	subs	r3, #1
 8007214:	6a3a      	ldr	r2, [r7, #32]
 8007216:	fb02 f303 	mul.w	r3, r2, r3
 800721a:	3301      	adds	r3, #1
 800721c:	617b      	str	r3, [r7, #20]
  switch (padding) {
 800721e:	7bfb      	ldrb	r3, [r7, #15]
 8007220:	2b01      	cmp	r3, #1
 8007222:	d002      	beq.n	800722a <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x2a>
 8007224:	2b02      	cmp	r3, #2
 8007226:	d008      	beq.n	800723a <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x3a>
 8007228:	e010      	b.n	800724c <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x4c>
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
 800722a:	68ba      	ldr	r2, [r7, #8]
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	4413      	add	r3, r2
 8007230:	1e5a      	subs	r2, r3, #1
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	fb92 f3f3 	sdiv	r3, r2, r3
 8007238:	e009      	b.n	800724e <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x4e>
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
 800723a:	68ba      	ldr	r2, [r7, #8]
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	441a      	add	r2, r3
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	1ad2      	subs	r2, r2, r3
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	fb92 f3f3 	sdiv	r3, r2, r3
 800724a:	e000      	b.n	800724e <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x4e>
    default:
      return 0;
 800724c:	2300      	movs	r3, #0
  }
}
 800724e:	4618      	mov	r0, r3
 8007250:	371c      	adds	r7, #28
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr

0800725a <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>:

inline TfLitePaddingValues ComputePaddingHeightWidth(
    int stride_height, int stride_width, int dilation_rate_height,
    int dilation_rate_width, int in_height, int in_width, int filter_height,
    int filter_width, TfLitePadding padding, int* out_height, int* out_width) {
 800725a:	b580      	push	{r7, lr}
 800725c:	b088      	sub	sp, #32
 800725e:	af02      	add	r7, sp, #8
 8007260:	60f8      	str	r0, [r7, #12]
 8007262:	60b9      	str	r1, [r7, #8]
 8007264:	607a      	str	r2, [r7, #4]
 8007266:	603b      	str	r3, [r7, #0]
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
 8007268:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 800726c:	6a3b      	ldr	r3, [r7, #32]
 800726e:	9300      	str	r3, [sp, #0]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007274:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007276:	f7ff ffc3 	bl	8007200 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
 800727a:	4602      	mov	r2, r0
 800727c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800727e:	601a      	str	r2, [r3, #0]
                              dilation_rate_width);
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
 8007280:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	9300      	str	r3, [sp, #0]
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800728c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800728e:	f7ff ffb7 	bl	8007200 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
 8007292:	4602      	mov	r2, r0
 8007294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007296:	601a      	str	r2, [r3, #0]
                               dilation_rate_height);

  TfLitePaddingValues padding_values;
  int offset = 0;
 8007298:	2300      	movs	r3, #0
 800729a:	617b      	str	r3, [r7, #20]
  padding_values.height =
      ComputePaddingWithOffset(stride_height, dilation_rate_height, in_height,
 800729c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f107 0214 	add.w	r2, r7, #20
 80072a4:	9201      	str	r2, [sp, #4]
 80072a6:	9300      	str	r3, [sp, #0]
 80072a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072ac:	6839      	ldr	r1, [r7, #0]
 80072ae:	68b8      	ldr	r0, [r7, #8]
 80072b0:	f7ff ff77 	bl	80071a2 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>
 80072b4:	4602      	mov	r2, r0
  padding_values.height =
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	605a      	str	r2, [r3, #4]
                               filter_height, *out_height, &offset);
  padding_values.height_offset = offset;
 80072ba:	697a      	ldr	r2, [r7, #20]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	60da      	str	r2, [r3, #12]
  padding_values.width =
      ComputePaddingWithOffset(stride_width, dilation_rate_width, in_width,
 80072c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f107 0214 	add.w	r2, r7, #20
 80072c8:	9201      	str	r2, [sp, #4]
 80072ca:	9300      	str	r3, [sp, #0]
 80072cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072d0:	6a39      	ldr	r1, [r7, #32]
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f7ff ff65 	bl	80071a2 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>
 80072d8:	4602      	mov	r2, r0
  padding_values.width =
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	601a      	str	r2, [r3, #0]
                               filter_width, *out_width, &offset);
  padding_values.width_offset = offset;
 80072de:	697a      	ldr	r2, [r7, #20]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	609a      	str	r2, [r3, #8]
  return padding_values;
 80072e4:	bf00      	nop
}
 80072e6:	68f8      	ldr	r0, [r7, #12]
 80072e8:	3718      	adds	r7, #24
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}

080072ee <_ZN6tflite3ops5micro4conv18RuntimePaddingTypeE13TfLitePadding>:
  // uint8_t these would be 0 and 255.
  int32_t output_activation_min;
  int32_t output_activation_max;
};

inline PaddingType RuntimePaddingType(TfLitePadding padding) {
 80072ee:	b480      	push	{r7}
 80072f0:	b083      	sub	sp, #12
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	4603      	mov	r3, r0
 80072f6:	71fb      	strb	r3, [r7, #7]
  switch (padding) {
 80072f8:	79fb      	ldrb	r3, [r7, #7]
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d002      	beq.n	8007304 <_ZN6tflite3ops5micro4conv18RuntimePaddingTypeE13TfLitePadding+0x16>
 80072fe:	2b02      	cmp	r3, #2
 8007300:	d002      	beq.n	8007308 <_ZN6tflite3ops5micro4conv18RuntimePaddingTypeE13TfLitePadding+0x1a>
 8007302:	e003      	b.n	800730c <_ZN6tflite3ops5micro4conv18RuntimePaddingTypeE13TfLitePadding+0x1e>
    case TfLitePadding::kTfLitePaddingSame:
      return PaddingType::kSame;
 8007304:	2301      	movs	r3, #1
 8007306:	e002      	b.n	800730e <_ZN6tflite3ops5micro4conv18RuntimePaddingTypeE13TfLitePadding+0x20>
    case TfLitePadding::kTfLitePaddingValid:
      return PaddingType::kValid;
 8007308:	2302      	movs	r3, #2
 800730a:	e000      	b.n	800730e <_ZN6tflite3ops5micro4conv18RuntimePaddingTypeE13TfLitePadding+0x20>
    case TfLitePadding::kTfLitePaddingUnknown:
    default:
      return PaddingType::kNone;
 800730c:	2300      	movs	r3, #0
  }
}
 800730e:	4618      	mov	r0, r3
 8007310:	370c      	adds	r7, #12
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr
	...

0800731c <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE>:

TfLiteStatus CalculateOpData(TfLiteContext* context, TfLiteNode* node,
                             const TfLiteConvParams* params, int width,
                             int height, int filter_width, int filter_height,
                             int out_width, int out_height,
                             const TfLiteType data_type, OpData* data) {
 800731c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800731e:	b09d      	sub	sp, #116	; 0x74
 8007320:	af0a      	add	r7, sp, #40	; 0x28
 8007322:	6278      	str	r0, [r7, #36]	; 0x24
 8007324:	6239      	str	r1, [r7, #32]
 8007326:	61fa      	str	r2, [r7, #28]
 8007328:	61bb      	str	r3, [r7, #24]
  bool has_bias = node->inputs->size == 3;
 800732a:	6a3b      	ldr	r3, [r7, #32]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2b03      	cmp	r3, #3
 8007332:	bf0c      	ite	eq
 8007334:	2301      	moveq	r3, #1
 8007336:	2300      	movne	r3, #0
 8007338:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
 800733c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007340:	f083 0301 	eor.w	r3, r3, #1
 8007344:	b2db      	uxtb	r3, r3
 8007346:	2b00      	cmp	r3, #0
 8007348:	d010      	beq.n	800736c <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x50>
 800734a:	6a3b      	ldr	r3, [r7, #32]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	2b02      	cmp	r3, #2
 8007352:	d00b      	beq.n	800736c <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x50>
 8007354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007356:	695c      	ldr	r4, [r3, #20]
 8007358:	4b4e      	ldr	r3, [pc, #312]	; (8007494 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x178>)
 800735a:	9300      	str	r3, [sp, #0]
 800735c:	f240 4331 	movw	r3, #1073	; 0x431
 8007360:	4a4d      	ldr	r2, [pc, #308]	; (8007498 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x17c>)
 8007362:	494e      	ldr	r1, [pc, #312]	; (800749c <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x180>)
 8007364:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007366:	47a0      	blx	r4
 8007368:	2301      	movs	r3, #1
 800736a:	e08f      	b.n	800748c <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x170>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
 800736c:	6a3b      	ldr	r3, [r7, #32]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	2b01      	cmp	r3, #1
 8007374:	d013      	beq.n	800739e <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x82>
 8007376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007378:	695c      	ldr	r4, [r3, #20]
 800737a:	6a3b      	ldr	r3, [r7, #32]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2201      	movs	r2, #1
 8007382:	9203      	str	r2, [sp, #12]
 8007384:	9302      	str	r3, [sp, #8]
 8007386:	4b46      	ldr	r3, [pc, #280]	; (80074a0 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x184>)
 8007388:	9301      	str	r3, [sp, #4]
 800738a:	4b46      	ldr	r3, [pc, #280]	; (80074a4 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x188>)
 800738c:	9300      	str	r3, [sp, #0]
 800738e:	f240 4332 	movw	r3, #1074	; 0x432
 8007392:	4a41      	ldr	r2, [pc, #260]	; (8007498 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x17c>)
 8007394:	4944      	ldr	r1, [pc, #272]	; (80074a8 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x18c>)
 8007396:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007398:	47a0      	blx	r4
 800739a:	2301      	movs	r3, #1
 800739c:	e076      	b.n	800748c <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x170>

  // Matching GetWindowedOutputSize in TensorFlow.
  auto padding = params->padding;
 800739e:	69fb      	ldr	r3, [r7, #28]
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  data->padding = ComputePaddingHeightWidth(
      params->stride_height, params->stride_width,
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	6899      	ldr	r1, [r3, #8]
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	685c      	ldr	r4, [r3, #4]
      params->dilation_height_factor, params->dilation_width_factor, height,
 80073ae:	69fb      	ldr	r3, [r7, #28]
 80073b0:	695d      	ldr	r5, [r3, #20]
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	691b      	ldr	r3, [r3, #16]
      width, filter_height, filter_width, padding, &out_height, &out_width);
 80073b6:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 80073b8:	f107 0008 	add.w	r0, r7, #8
 80073bc:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80073c0:	9207      	str	r2, [sp, #28]
 80073c2:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80073c6:	9206      	str	r2, [sp, #24]
 80073c8:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80073cc:	9205      	str	r2, [sp, #20]
 80073ce:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80073d0:	9204      	str	r2, [sp, #16]
 80073d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80073d4:	9203      	str	r2, [sp, #12]
 80073d6:	69ba      	ldr	r2, [r7, #24]
 80073d8:	9202      	str	r2, [sp, #8]
 80073da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80073dc:	9201      	str	r2, [sp, #4]
 80073de:	9300      	str	r3, [sp, #0]
 80073e0:	462b      	mov	r3, r5
 80073e2:	4622      	mov	r2, r4
 80073e4:	f7ff ff39 	bl	800725a <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>
 80073e8:	4634      	mov	r4, r6
 80073ea:	f107 0308 	add.w	r3, r7, #8
 80073ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80073f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  // Note that quantized inference requires that all tensors have their
  // parameters set. This is usually done during quantized training.
  if (data_type != kTfLiteFloat32) {
 80073f4:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d046      	beq.n	800748a <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x16e>
    const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 80073fc:	2200      	movs	r2, #0
 80073fe:	6a39      	ldr	r1, [r7, #32]
 8007400:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007402:	f7fe fd7b 	bl	8005efc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8007406:	6438      	str	r0, [r7, #64]	; 0x40
    const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);
 8007408:	2201      	movs	r2, #1
 800740a:	6a39      	ldr	r1, [r7, #32]
 800740c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800740e:	f7fe fd75 	bl	8005efc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8007412:	63f8      	str	r0, [r7, #60]	; 0x3c
    const TfLiteTensor* bias =
        GetOptionalInputTensor(context, node, kBiasTensor);
 8007414:	2202      	movs	r2, #2
 8007416:	6a39      	ldr	r1, [r7, #32]
 8007418:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800741a:	f7ff fe94 	bl	8007146 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei>
 800741e:	63b8      	str	r0, [r7, #56]	; 0x38
    TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8007420:	2200      	movs	r2, #0
 8007422:	6a39      	ldr	r1, [r7, #32]
 8007424:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007426:	f7fe fd7f 	bl	8005f28 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800742a:	6378      	str	r0, [r7, #52]	; 0x34
    int output_channels = filter->dims->data[kConvQuantizedDimension];
 800742c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	633b      	str	r3, [r7, #48]	; 0x30

    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	330c      	adds	r3, #12
 8007438:	607b      	str	r3, [r7, #4]
 800743a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800743c:	3210      	adds	r2, #16
 800743e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007440:	3114      	adds	r1, #20
 8007442:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8007444:	3020      	adds	r0, #32
 8007446:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 8007448:	3424      	adds	r4, #36	; 0x24
 800744a:	6fbd      	ldr	r5, [r7, #120]	; 0x78
 800744c:	69ad      	ldr	r5, [r5, #24]
 800744e:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 8007450:	69f6      	ldr	r6, [r6, #28]
 8007452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007454:	9308      	str	r3, [sp, #32]
 8007456:	9607      	str	r6, [sp, #28]
 8007458:	9506      	str	r5, [sp, #24]
 800745a:	9405      	str	r4, [sp, #20]
 800745c:	9004      	str	r0, [sp, #16]
 800745e:	9103      	str	r1, [sp, #12]
 8007460:	9202      	str	r2, [sp, #8]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	9301      	str	r3, [sp, #4]
 8007466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007468:	9300      	str	r3, [sp, #0]
 800746a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800746c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800746e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007470:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007472:	f7fe f98f 	bl	8005794 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i>
 8007476:	4603      	mov	r3, r0
 8007478:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800747c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007480:	2b00      	cmp	r3, #0
 8007482:	d002      	beq.n	800748a <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x16e>
 8007484:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007488:	e000      	b.n	800748c <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x170>
        &data->output_activation_min, &data->output_activation_max,
        data->per_channel_output_multiplier,
        reinterpret_cast<int*>(data->per_channel_output_shift),
        output_channels));
  }
  return kTfLiteOk;
 800748a:	2300      	movs	r3, #0
}
 800748c:	4618      	mov	r0, r3
 800748e:	374c      	adds	r7, #76	; 0x4c
 8007490:	46bd      	mov	sp, r7
 8007492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007494:	08010be0 	.word	0x08010be0
 8007498:	08010b34 	.word	0x08010b34
 800749c:	08010bc8 	.word	0x08010bc8
 80074a0:	08010c20 	.word	0x08010c20
 80074a4:	08010c24 	.word	0x08010c24
 80074a8:	08010c04 	.word	0x08010c04

080074ac <_ZN6tflite3ops5micro4conv4InitEP13TfLiteContextPKcj>:

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b086      	sub	sp, #24
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	60f8      	str	r0, [r7, #12]
 80074b4:	60b9      	str	r1, [r7, #8]
 80074b6:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d101      	bne.n	80074c4 <_ZN6tflite3ops5micro4conv4InitEP13TfLiteContextPKcj+0x18>
 80074c0:	f007 fa4c 	bl	800e95c <abort>
  void* data = nullptr;
 80074c4:	2300      	movs	r3, #0
 80074c6:	617b      	str	r3, [r7, #20]
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074cc:	f107 0214 	add.w	r2, r7, #20
 80074d0:	2128      	movs	r1, #40	; 0x28
 80074d2:	68f8      	ldr	r0, [r7, #12]
 80074d4:	4798      	blx	r3
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b01      	cmp	r3, #1
 80074da:	bf0c      	ite	eq
 80074dc:	2301      	moveq	r3, #1
 80074de:	2300      	movne	r3, #0
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d001      	beq.n	80074ea <_ZN6tflite3ops5micro4conv4InitEP13TfLiteContextPKcj+0x3e>
      kTfLiteError) {
    return nullptr;
 80074e6:	2300      	movs	r3, #0
 80074e8:	e000      	b.n	80074ec <_ZN6tflite3ops5micro4conv4InitEP13TfLiteContextPKcj+0x40>
  }
  return data;
 80074ea:	697b      	ldr	r3, [r7, #20]
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3718      	adds	r7, #24
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 80074f4:	b590      	push	{r4, r7, lr}
 80074f6:	b099      	sub	sp, #100	; 0x64
 80074f8:	af08      	add	r7, sp, #32
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d101      	bne.n	800750a <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 8007506:	f007 fa29 	bl	800e95c <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	695b      	ldr	r3, [r3, #20]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d101      	bne.n	8007516 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
 8007512:	f007 fa23 	bl	800e95c <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	691b      	ldr	r3, [r3, #16]
 800751a:	63fb      	str	r3, [r7, #60]	; 0x3c
  const auto params = static_cast<const TfLiteConvParams*>(node->builtin_data);
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	695b      	ldr	r3, [r3, #20]
 8007520:	63bb      	str	r3, [r7, #56]	; 0x38

  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8007522:	2200      	movs	r2, #0
 8007524:	6839      	ldr	r1, [r7, #0]
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f7fe fcfe 	bl	8005f28 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800752c:	6378      	str	r0, [r7, #52]	; 0x34
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 800752e:	2200      	movs	r2, #0
 8007530:	6839      	ldr	r1, [r7, #0]
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f7fe fce2 	bl	8005efc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8007538:	6338      	str	r0, [r7, #48]	; 0x30
  const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);
 800753a:	2201      	movs	r2, #1
 800753c:	6839      	ldr	r1, [r7, #0]
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f7fe fcdc 	bl	8005efc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8007544:	62f8      	str	r0, [r7, #44]	; 0x2c

  int input_width = input->dims->data[2];
 8007546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	62bb      	str	r3, [r7, #40]	; 0x28
  int input_height = input->dims->data[1];
 800754e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	627b      	str	r3, [r7, #36]	; 0x24
  int filter_width = filter->dims->data[2];
 8007556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	623b      	str	r3, [r7, #32]
  int filter_height = filter->dims->data[1];
 800755e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	61fb      	str	r3, [r7, #28]
  int output_width = output->dims->data[2];
 8007566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	61bb      	str	r3, [r7, #24]
  int output_height = output->dims->data[1];
 800756e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	617b      	str	r3, [r7, #20]

  // Dynimically allocate per-channel quantization parameters.
  const int num_channels = filter->dims->data[kConvQuantizedDimension];
 8007576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	613b      	str	r3, [r7, #16]
  TF_LITE_ENSURE_STATUS(context->AllocatePersistentBuffer(
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007582:	693a      	ldr	r2, [r7, #16]
 8007584:	0091      	lsls	r1, r2, #2
 8007586:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007588:	3218      	adds	r2, #24
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	4798      	blx	r3
 800758e:	4603      	mov	r3, r0
 8007590:	73fb      	strb	r3, [r7, #15]
 8007592:	7bfb      	ldrb	r3, [r7, #15]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d001      	beq.n	800759c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xa8>
 8007598:	7bfb      	ldrb	r3, [r7, #15]
 800759a:	e0ad      	b.n	80076f8 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x204>
      context, num_channels * sizeof(int32_t),
      reinterpret_cast<void**>(&data->per_channel_output_multiplier)));
  TF_LITE_ENSURE_STATUS(context->AllocatePersistentBuffer(
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a0:	693a      	ldr	r2, [r7, #16]
 80075a2:	0091      	lsls	r1, r2, #2
 80075a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80075a6:	321c      	adds	r2, #28
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	4798      	blx	r3
 80075ac:	4603      	mov	r3, r0
 80075ae:	73bb      	strb	r3, [r7, #14]
 80075b0:	7bbb      	ldrb	r3, [r7, #14]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d001      	beq.n	80075ba <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
 80075b6:	7bbb      	ldrb	r3, [r7, #14]
 80075b8:	e09e      	b.n	80076f8 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x204>
      context, num_channels * sizeof(int32_t),
      reinterpret_cast<void**>(&data->per_channel_output_shift)));

  // All per-channel quantized tensors need valid zero point and scale arrays.
  if (input->type == kTfLiteInt8) {
 80075ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	2b09      	cmp	r3, #9
 80075c0:	f040 8083 	bne.w	80076ca <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x1d6>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
 80075c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d014      	beq.n	80075f8 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x104>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	695c      	ldr	r4, [r3, #20]
 80075d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80075d8:	461a      	mov	r2, r3
 80075da:	2301      	movs	r3, #1
 80075dc:	9303      	str	r3, [sp, #12]
 80075de:	9202      	str	r2, [sp, #8]
 80075e0:	4b47      	ldr	r3, [pc, #284]	; (8007700 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x20c>)
 80075e2:	9301      	str	r3, [sp, #4]
 80075e4:	4b47      	ldr	r3, [pc, #284]	; (8007704 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x210>)
 80075e6:	9300      	str	r3, [sp, #0]
 80075e8:	f240 4377 	movw	r3, #1143	; 0x477
 80075ec:	4a46      	ldr	r2, [pc, #280]	; (8007708 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x214>)
 80075ee:	4947      	ldr	r1, [pc, #284]	; (800770c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x218>)
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	47a0      	blx	r4
 80075f4:	2301      	movs	r3, #1
 80075f6:	e07f      	b.n	80076f8 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x204>
                      kTfLiteAffineQuantization);

    const auto* affine_quantization =
 80075f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075fc:	60bb      	str	r3, [r7, #8]
        static_cast<TfLiteAffineQuantization*>(filter->quantization.params);
    TF_LITE_ENSURE(context, affine_quantization);
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d10b      	bne.n	800761c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x128>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	695c      	ldr	r4, [r3, #20]
 8007608:	4b41      	ldr	r3, [pc, #260]	; (8007710 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x21c>)
 800760a:	9300      	str	r3, [sp, #0]
 800760c:	f240 437c 	movw	r3, #1148	; 0x47c
 8007610:	4a3d      	ldr	r2, [pc, #244]	; (8007708 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x214>)
 8007612:	4940      	ldr	r1, [pc, #256]	; (8007714 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x220>)
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	47a0      	blx	r4
 8007618:	2301      	movs	r3, #1
 800761a:	e06d      	b.n	80076f8 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x204>
    TF_LITE_ENSURE(context, affine_quantization->scale);
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d10b      	bne.n	800763c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x148>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	695c      	ldr	r4, [r3, #20]
 8007628:	4b3b      	ldr	r3, [pc, #236]	; (8007718 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 800762a:	9300      	str	r3, [sp, #0]
 800762c:	f240 437d 	movw	r3, #1149	; 0x47d
 8007630:	4a35      	ldr	r2, [pc, #212]	; (8007708 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x214>)
 8007632:	4938      	ldr	r1, [pc, #224]	; (8007714 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x220>)
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	47a0      	blx	r4
 8007638:	2301      	movs	r3, #1
 800763a:	e05d      	b.n	80076f8 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x204>
    TF_LITE_ENSURE(context, affine_quantization->zero_point);
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d10b      	bne.n	800765c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x168>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	695c      	ldr	r4, [r3, #20]
 8007648:	4b34      	ldr	r3, [pc, #208]	; (800771c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x228>)
 800764a:	9300      	str	r3, [sp, #0]
 800764c:	f240 437e 	movw	r3, #1150	; 0x47e
 8007650:	4a2d      	ldr	r2, [pc, #180]	; (8007708 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x214>)
 8007652:	4930      	ldr	r1, [pc, #192]	; (8007714 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x220>)
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	47a0      	blx	r4
 8007658:	2301      	movs	r3, #1
 800765a:	e04d      	b.n	80076f8 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x204>

    TF_LITE_ENSURE(context,
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	2b01      	cmp	r3, #1
 8007664:	d013      	beq.n	800768e <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x19a>
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	429a      	cmp	r2, r3
 8007674:	d00b      	beq.n	800768e <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x19a>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	695c      	ldr	r4, [r3, #20]
 800767a:	4b29      	ldr	r3, [pc, #164]	; (8007720 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 800767c:	9300      	str	r3, [sp, #0]
 800767e:	f44f 6390 	mov.w	r3, #1152	; 0x480
 8007682:	4a21      	ldr	r2, [pc, #132]	; (8007708 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x214>)
 8007684:	4923      	ldr	r1, [pc, #140]	; (8007714 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x220>)
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	47a0      	blx	r4
 800768a:	2301      	movs	r3, #1
 800768c:	e034      	b.n	80076f8 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x204>
                   affine_quantization->scale->size == 1 ||
                       affine_quantization->scale->size ==
                           filter->dims->data[kConvQuantizedDimension]);
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	429a      	cmp	r2, r3
 800769c:	d015      	beq.n	80076ca <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x1d6>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	695c      	ldr	r4, [r3, #20]
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	68ba      	ldr	r2, [r7, #8]
 80076aa:	6852      	ldr	r2, [r2, #4]
 80076ac:	6812      	ldr	r2, [r2, #0]
 80076ae:	9203      	str	r2, [sp, #12]
 80076b0:	9302      	str	r3, [sp, #8]
 80076b2:	4b1c      	ldr	r3, [pc, #112]	; (8007724 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 80076b4:	9301      	str	r3, [sp, #4]
 80076b6:	4b1c      	ldr	r3, [pc, #112]	; (8007728 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x234>)
 80076b8:	9300      	str	r3, [sp, #0]
 80076ba:	f240 4384 	movw	r3, #1156	; 0x484
 80076be:	4a12      	ldr	r2, [pc, #72]	; (8007708 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x214>)
 80076c0:	4912      	ldr	r1, [pc, #72]	; (800770c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x218>)
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	47a0      	blx	r4
 80076c6:	2301      	movs	r3, #1
 80076c8:	e016      	b.n	80076f8 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x204>
                      affine_quantization->zero_point->size);
  }

  return CalculateOpData(context, node, params, input_width, input_height,
                         filter_width, filter_height, output_width,
                         output_height, input->type, data);
 80076ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076cc:	781b      	ldrb	r3, [r3, #0]
  return CalculateOpData(context, node, params, input_width, input_height,
 80076ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80076d0:	9206      	str	r2, [sp, #24]
 80076d2:	9305      	str	r3, [sp, #20]
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	9304      	str	r3, [sp, #16]
 80076d8:	69bb      	ldr	r3, [r7, #24]
 80076da:	9303      	str	r3, [sp, #12]
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	9302      	str	r3, [sp, #8]
 80076e0:	6a3b      	ldr	r3, [r7, #32]
 80076e2:	9301      	str	r3, [sp, #4]
 80076e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e6:	9300      	str	r3, [sp, #0]
 80076e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076ec:	6839      	ldr	r1, [r7, #0]
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f7ff fe14 	bl	800731c <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE>
 80076f4:	4603      	mov	r3, r0
                         output_height, input->type, data);
 80076f6:	bf00      	nop
}  // namespace conv
 80076f8:	4618      	mov	r0, r3
 80076fa:	3744      	adds	r7, #68	; 0x44
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd90      	pop	{r4, r7, pc}
 8007700:	08010c38 	.word	0x08010c38
 8007704:	08010c54 	.word	0x08010c54
 8007708:	08010b34 	.word	0x08010b34
 800770c:	08010c04 	.word	0x08010c04
 8007710:	08010c70 	.word	0x08010c70
 8007714:	08010bc8 	.word	0x08010bc8
 8007718:	08010c84 	.word	0x08010c84
 800771c:	08010ca0 	.word	0x08010ca0
 8007720:	08010cc0 	.word	0x08010cc0
 8007724:	08010d3c 	.word	0x08010d3c
 8007728:	08010d64 	.word	0x08010d64

0800772c <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_>:

void EvalQuantized(TfLiteContext* context, TfLiteNode* node,
                   TfLiteConvParams* params, const OpData& data,
                   const TfLiteTensor* input, const TfLiteTensor* filter,
                   const TfLiteTensor* bias, TfLiteTensor* im2col,
                   TfLiteTensor* hwcn_weights, TfLiteTensor* output) {
 800772c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007730:	b0be      	sub	sp, #248	; 0xf8
 8007732:	af08      	add	r7, sp, #32
 8007734:	6178      	str	r0, [r7, #20]
 8007736:	6139      	str	r1, [r7, #16]
 8007738:	60fa      	str	r2, [r7, #12]
 800773a:	60bb      	str	r3, [r7, #8]
  const int32_t input_offset = -input->params.zero_point;
 800773c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	425b      	negs	r3, r3
 8007744:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  const int32_t filter_offset = -filter->params.zero_point;
 8007748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800774c:	691b      	ldr	r3, [r3, #16]
 800774e:	425b      	negs	r3, r3
 8007750:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  const int32_t output_offset = output->params.zero_point;
 8007754:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007758:	691b      	ldr	r3, [r3, #16]
 800775a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

  // TODO(b/154032858): Investigate removing extra copies.
  ConvParams op_params;
  op_params.padding_type = RuntimePaddingType(params->padding);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	4618      	mov	r0, r3
 8007764:	f7ff fdc3 	bl	80072ee <_ZN6tflite3ops5micro4conv18RuntimePaddingTypeE13TfLitePadding>
 8007768:	4603      	mov	r3, r0
 800776a:	773b      	strb	r3, [r7, #28]
  op_params.padding_values.width = data.padding.width;
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	b21b      	sxth	r3, r3
 8007772:	83fb      	strh	r3, [r7, #30]
  op_params.padding_values.height = data.padding.height;
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	b21b      	sxth	r3, r3
 800777a:	843b      	strh	r3, [r7, #32]
  op_params.stride_width = params->stride_width;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	b21b      	sxth	r3, r3
 8007782:	84fb      	strh	r3, [r7, #38]	; 0x26
  op_params.stride_height = params->stride_height;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	b21b      	sxth	r3, r3
 800778a:	853b      	strh	r3, [r7, #40]	; 0x28
  op_params.dilation_width_factor = params->dilation_width_factor;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	691b      	ldr	r3, [r3, #16]
 8007790:	b21b      	sxth	r3, r3
 8007792:	857b      	strh	r3, [r7, #42]	; 0x2a
  op_params.dilation_height_factor = params->dilation_height_factor;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	695b      	ldr	r3, [r3, #20]
 8007798:	b21b      	sxth	r3, r3
 800779a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  op_params.input_offset = input_offset;
 800779c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80077a0:	633b      	str	r3, [r7, #48]	; 0x30
  op_params.weights_offset = filter_offset;
 80077a2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80077a6:	637b      	str	r3, [r7, #52]	; 0x34
  op_params.output_offset = output_offset;
 80077a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80077ac:	63bb      	str	r3, [r7, #56]	; 0x38
  op_params.output_multiplier = data.output_multiplier;
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	691b      	ldr	r3, [r3, #16]
 80077b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  op_params.output_shift = -data.output_shift;
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	695b      	ldr	r3, [r3, #20]
 80077b8:	425b      	negs	r3, r3
 80077ba:	643b      	str	r3, [r7, #64]	; 0x40
  op_params.quantized_activation_min = data.output_activation_min;
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	6a1b      	ldr	r3, [r3, #32]
 80077c0:	647b      	str	r3, [r7, #68]	; 0x44
  op_params.quantized_activation_max = data.output_activation_max;
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c6:	64bb      	str	r3, [r7, #72]	; 0x48
  reference_ops::Conv(op_params, GetTensorShape(input),
 80077c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80077cc:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 80077d0:	4618      	mov	r0, r3
 80077d2:	f7fe fcd7 	bl	8006184 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 80077d6:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 80077da:	f7fe fbbb 	bl	8005f54 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 80077de:	4680      	mov	r8, r0
                      GetTensorData<uint8_t>(input), GetTensorShape(filter),
 80077e0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80077e4:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 80077e8:	4618      	mov	r0, r3
 80077ea:	f7fe fccb 	bl	8006184 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::Conv(op_params, GetTensorShape(input),
 80077ee:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 80077f2:	f7fe fbaf 	bl	8005f54 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 80077f6:	4604      	mov	r4, r0
                      GetTensorData<uint8_t>(filter), GetTensorShape(bias),
 80077f8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80077fc:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8007800:	4618      	mov	r0, r3
 8007802:	f7fe fcbf 	bl	8006184 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::Conv(op_params, GetTensorShape(input),
 8007806:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 800780a:	f7fe ff66 	bl	80066da <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 800780e:	4605      	mov	r5, r0
                      GetTensorData<int32_t>(bias), GetTensorShape(output),
 8007810:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007814:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8007818:	4618      	mov	r0, r3
 800781a:	f7fe fcb3 	bl	8006184 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::Conv(op_params, GetTensorShape(input),
 800781e:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 8007822:	f7fe fba8 	bl	8005f76 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>
 8007826:	4606      	mov	r6, r0
                      GetTensorData<uint8_t>(output), GetTensorShape(im2col),
 8007828:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800782c:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8007830:	4618      	mov	r0, r3
 8007832:	f7fe fca7 	bl	8006184 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::Conv(op_params, GetTensorShape(input),
 8007836:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 800783a:	f7fe fb9c 	bl	8005f76 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8007844:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8007848:	f107 001c 	add.w	r0, r7, #28
 800784c:	2300      	movs	r3, #0
 800784e:	9307      	str	r3, [sp, #28]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	9306      	str	r3, [sp, #24]
 8007854:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8007858:	9305      	str	r3, [sp, #20]
 800785a:	9604      	str	r6, [sp, #16]
 800785c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007860:	9303      	str	r3, [sp, #12]
 8007862:	9502      	str	r5, [sp, #8]
 8007864:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8007868:	9301      	str	r3, [sp, #4]
 800786a:	9400      	str	r4, [sp, #0]
 800786c:	4613      	mov	r3, r2
 800786e:	4642      	mov	r2, r8
 8007870:	f7ff f912 	bl	8006a98 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv>
                      GetTensorData<uint8_t>(output), GetTensorShape(im2col),
 8007874:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8007878:	4618      	mov	r0, r3
 800787a:	f7fe fbae 	bl	8005fda <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<int32_t>(bias), GetTensorShape(output),
 800787e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007882:	4618      	mov	r0, r3
 8007884:	f7fe fba9 	bl	8005fda <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<uint8_t>(filter), GetTensorShape(bias),
 8007888:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800788c:	4618      	mov	r0, r3
 800788e:	f7fe fba4 	bl	8005fda <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<uint8_t>(input), GetTensorShape(filter),
 8007892:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007896:	4618      	mov	r0, r3
 8007898:	f7fe fb9f 	bl	8005fda <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Conv(op_params, GetTensorShape(input),
 800789c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80078a0:	4618      	mov	r0, r3
 80078a2:	f7fe fb9a 	bl	8005fda <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<uint8_t>(im2col), nullptr);
}
 80078a6:	bf00      	nop
 80078a8:	37d8      	adds	r7, #216	; 0xd8
 80078aa:	46bd      	mov	sp, r7
 80078ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080078b0 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_>:
void EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
                             TfLiteConvParams* params, const OpData& data,
                             const TfLiteTensor* input,
                             const TfLiteTensor* filter,
                             const TfLiteTensor* bias, TfLiteTensor* output,
                             TfLiteTensor* im2col) {
 80078b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078b2:	b0b5      	sub	sp, #212	; 0xd4
 80078b4:	af08      	add	r7, sp, #32
 80078b6:	6178      	str	r0, [r7, #20]
 80078b8:	6139      	str	r1, [r7, #16]
 80078ba:	60fa      	str	r2, [r7, #12]
 80078bc:	60bb      	str	r3, [r7, #8]
  // TODO(b/154032858): Investigate removing extra copies.
  ConvParams op_params;
  op_params.input_offset = -input->params.zero_point;
 80078be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	425b      	negs	r3, r3
 80078c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.output_offset = output->params.zero_point;
 80078c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80078cc:	691b      	ldr	r3, [r3, #16]
 80078ce:	637b      	str	r3, [r7, #52]	; 0x34
  op_params.stride_height = params->stride_height;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	b21b      	sxth	r3, r3
 80078d6:	84bb      	strh	r3, [r7, #36]	; 0x24
  op_params.stride_width = params->stride_width;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	b21b      	sxth	r3, r3
 80078de:	847b      	strh	r3, [r7, #34]	; 0x22
  op_params.dilation_height_factor = params->dilation_height_factor;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	695b      	ldr	r3, [r3, #20]
 80078e4:	b21b      	sxth	r3, r3
 80078e6:	853b      	strh	r3, [r7, #40]	; 0x28
  op_params.dilation_width_factor = params->dilation_width_factor;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	691b      	ldr	r3, [r3, #16]
 80078ec:	b21b      	sxth	r3, r3
 80078ee:	84fb      	strh	r3, [r7, #38]	; 0x26
  op_params.padding_values.height = data.padding.height;
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	b21b      	sxth	r3, r3
 80078f6:	83bb      	strh	r3, [r7, #28]
  op_params.padding_values.width = data.padding.width;
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	b21b      	sxth	r3, r3
 80078fe:	837b      	strh	r3, [r7, #26]
  op_params.quantized_activation_min = data.output_activation_min;
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	6a1b      	ldr	r3, [r3, #32]
 8007904:	643b      	str	r3, [r7, #64]	; 0x40
  op_params.quantized_activation_max = data.output_activation_max;
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800790a:	647b      	str	r3, [r7, #68]	; 0x44

  reference_integer_ops::ConvPerChannel(
      op_params, data.per_channel_output_multiplier,
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	699c      	ldr	r4, [r3, #24]
      data.per_channel_output_shift, GetTensorShape(input),
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	69dd      	ldr	r5, [r3, #28]
 8007914:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007918:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800791c:	4618      	mov	r0, r3
 800791e:	f7fe fc31 	bl	8006184 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::ConvPerChannel(
 8007922:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8007926:	f7fe fc6d 	bl	8006204 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 800792a:	4606      	mov	r6, r0
      GetTensorData<int8>(input), GetTensorShape(filter),
 800792c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007930:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8007934:	4618      	mov	r0, r3
 8007936:	f7fe fc25 	bl	8006184 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::ConvPerChannel(
 800793a:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800793e:	f7fe fc61 	bl	8006204 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 8007942:	6078      	str	r0, [r7, #4]
      GetTensorData<int8>(filter), GetTensorShape(bias),
 8007944:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007948:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800794c:	4618      	mov	r0, r3
 800794e:	f7fe fc19 	bl	8006184 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::ConvPerChannel(
 8007952:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8007956:	f7fe fec0 	bl	80066da <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 800795a:	6038      	str	r0, [r7, #0]
      GetTensorData<int32>(bias), GetTensorShape(output),
 800795c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007960:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8007964:	4618      	mov	r0, r3
 8007966:	f7fe fc0d 	bl	8006184 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::ConvPerChannel(
 800796a:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800796e:	f7fe fc5a 	bl	8006226 <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>
 8007972:	4603      	mov	r3, r0
 8007974:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007978:	f107 0018 	add.w	r0, r7, #24
 800797c:	9306      	str	r3, [sp, #24]
 800797e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007982:	9305      	str	r3, [sp, #20]
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	9304      	str	r3, [sp, #16]
 8007988:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800798c:	9303      	str	r3, [sp, #12]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	9302      	str	r3, [sp, #8]
 8007992:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007996:	9301      	str	r3, [sp, #4]
 8007998:	9600      	str	r6, [sp, #0]
 800799a:	4613      	mov	r3, r2
 800799c:	462a      	mov	r2, r5
 800799e:	4621      	mov	r1, r4
 80079a0:	f7ff fa21 	bl	8006de6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
      GetTensorData<int32>(bias), GetTensorShape(output),
 80079a4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80079a8:	4618      	mov	r0, r3
 80079aa:	f7fe fb16 	bl	8005fda <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<int8>(filter), GetTensorShape(bias),
 80079ae:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80079b2:	4618      	mov	r0, r3
 80079b4:	f7fe fb11 	bl	8005fda <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<int8>(input), GetTensorShape(filter),
 80079b8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80079bc:	4618      	mov	r0, r3
 80079be:	f7fe fb0c 	bl	8005fda <_ZN6tflite12RuntimeShapeD1Ev>
      data.per_channel_output_shift, GetTensorShape(input),
 80079c2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80079c6:	4618      	mov	r0, r3
 80079c8:	f7fe fb07 	bl	8005fda <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<int8>(output));
}
 80079cc:	bf00      	nop
 80079ce:	37b4      	adds	r7, #180	; 0xb4
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080079d4 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_>:

void EvalFloat(TfLiteContext* context, TfLiteNode* node,
               TfLiteConvParams* params, const OpData& data,
               const TfLiteTensor* input, const TfLiteTensor* filter,
               const TfLiteTensor* bias, TfLiteTensor* im2col,
               TfLiteTensor* hwcn_weights, TfLiteTensor* output) {
 80079d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079d8:	b0ba      	sub	sp, #232	; 0xe8
 80079da:	af08      	add	r7, sp, #32
 80079dc:	60f8      	str	r0, [r7, #12]
 80079de:	60b9      	str	r1, [r7, #8]
 80079e0:	607a      	str	r2, [r7, #4]
 80079e2:	603b      	str	r3, [r7, #0]
  float output_activation_min, output_activation_max;
  CalculateActivationRange(params->activation, &output_activation_min,
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	7b1b      	ldrb	r3, [r3, #12]
 80079e8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80079ec:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80079f0:	4618      	mov	r0, r3
 80079f2:	f7fe fdb5 	bl	8006560 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &output_activation_max);
  // TODO(b/154032858): Investigate removing extra copies.
  ConvParams op_params;
  op_params.padding_type = RuntimePaddingType(params->padding);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	4618      	mov	r0, r3
 80079fc:	f7ff fc77 	bl	80072ee <_ZN6tflite3ops5micro4conv18RuntimePaddingTypeE13TfLitePadding>
 8007a00:	4603      	mov	r3, r0
 8007a02:	743b      	strb	r3, [r7, #16]
  op_params.padding_values.width = data.padding.width;
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	b21b      	sxth	r3, r3
 8007a0a:	827b      	strh	r3, [r7, #18]
  op_params.padding_values.height = data.padding.height;
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	b21b      	sxth	r3, r3
 8007a12:	82bb      	strh	r3, [r7, #20]
  op_params.stride_width = params->stride_width;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	b21b      	sxth	r3, r3
 8007a1a:	837b      	strh	r3, [r7, #26]
  op_params.stride_height = params->stride_height;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	689b      	ldr	r3, [r3, #8]
 8007a20:	b21b      	sxth	r3, r3
 8007a22:	83bb      	strh	r3, [r7, #28]
  op_params.dilation_width_factor = params->dilation_width_factor;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	691b      	ldr	r3, [r3, #16]
 8007a28:	b21b      	sxth	r3, r3
 8007a2a:	83fb      	strh	r3, [r7, #30]
  op_params.dilation_height_factor = params->dilation_height_factor;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	695b      	ldr	r3, [r3, #20]
 8007a30:	b21b      	sxth	r3, r3
 8007a32:	843b      	strh	r3, [r7, #32]
  op_params.float_activation_min = output_activation_min;
 8007a34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a36:	643b      	str	r3, [r7, #64]	; 0x40
  op_params.float_activation_max = output_activation_max;
 8007a38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a3a:	647b      	str	r3, [r7, #68]	; 0x44

  reference_ops::Conv(op_params, GetTensorShape(input),
 8007a3c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007a40:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8007a44:	4618      	mov	r0, r3
 8007a46:	f7fe fb9d 	bl	8006184 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8007a4a:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8007a4e:	f7fe fbb7 	bl	80061c0 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 8007a52:	4680      	mov	r8, r0
                      GetTensorData<float>(input), GetTensorShape(filter),
 8007a54:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007a58:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f7fe fb91 	bl	8006184 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::Conv(op_params, GetTensorShape(input),
 8007a62:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8007a66:	f7fe fbab 	bl	80061c0 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 8007a6a:	4604      	mov	r4, r0
                      GetTensorData<float>(filter), GetTensorShape(bias),
 8007a6c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007a70:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8007a74:	4618      	mov	r0, r3
 8007a76:	f7fe fb85 	bl	8006184 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::Conv(op_params, GetTensorShape(input),
 8007a7a:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8007a7e:	f7fe fb9f 	bl	80061c0 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 8007a82:	4605      	mov	r5, r0
                      GetTensorData<float>(bias), GetTensorShape(output),
 8007a84:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007a88:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f7fe fb79 	bl	8006184 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::Conv(op_params, GetTensorShape(input),
 8007a92:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8007a96:	f7fe fba4 	bl	80061e2 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 8007a9a:	4606      	mov	r6, r0
                      GetTensorData<float>(output), GetTensorShape(im2col),
 8007a9c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8007aa0:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f7fe fb6d 	bl	8006184 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::Conv(op_params, GetTensorShape(input),
 8007aaa:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8007aae:	f7fe fb98 	bl	80061e2 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8007ab8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8007abc:	f107 0010 	add.w	r0, r7, #16
 8007ac0:	9306      	str	r3, [sp, #24]
 8007ac2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8007ac6:	9305      	str	r3, [sp, #20]
 8007ac8:	9604      	str	r6, [sp, #16]
 8007aca:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007ace:	9303      	str	r3, [sp, #12]
 8007ad0:	9502      	str	r5, [sp, #8]
 8007ad2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007ad6:	9301      	str	r3, [sp, #4]
 8007ad8:	9400      	str	r4, [sp, #0]
 8007ada:	4613      	mov	r3, r2
 8007adc:	4642      	mov	r2, r8
 8007ade:	f7fe fe69 	bl	80067b4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>
                      GetTensorData<float>(output), GetTensorShape(im2col),
 8007ae2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7fe fa77 	bl	8005fda <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<float>(bias), GetTensorShape(output),
 8007aec:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007af0:	4618      	mov	r0, r3
 8007af2:	f7fe fa72 	bl	8005fda <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<float>(filter), GetTensorShape(bias),
 8007af6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7fe fa6d 	bl	8005fda <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<float>(input), GetTensorShape(filter),
 8007b00:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007b04:	4618      	mov	r0, r3
 8007b06:	f7fe fa68 	bl	8005fda <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Conv(op_params, GetTensorShape(input),
 8007b0a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7fe fa63 	bl	8005fda <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<float>(im2col));
}
 8007b14:	bf00      	nop
 8007b16:	37c8      	adds	r7, #200	; 0xc8
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08007b20 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8007b20:	b590      	push	{r4, r7, lr}
 8007b22:	b08f      	sub	sp, #60	; 0x3c
 8007b24:	af06      	add	r7, sp, #24
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
  auto* params = reinterpret_cast<TfLiteConvParams*>(node->builtin_data);
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	695b      	ldr	r3, [r3, #20]
 8007b2e:	61fb      	str	r3, [r7, #28]

  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8007b30:	2200      	movs	r2, #0
 8007b32:	6839      	ldr	r1, [r7, #0]
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f7fe f9f7 	bl	8005f28 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8007b3a:	61b8      	str	r0, [r7, #24]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	6839      	ldr	r1, [r7, #0]
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f7fe f9db 	bl	8005efc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8007b46:	6178      	str	r0, [r7, #20]
  const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);
 8007b48:	2201      	movs	r2, #1
 8007b4a:	6839      	ldr	r1, [r7, #0]
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f7fe f9d5 	bl	8005efc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8007b52:	6138      	str	r0, [r7, #16]
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
 8007b54:	2202      	movs	r2, #2
 8007b56:	6839      	ldr	r1, [r7, #0]
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f7ff faf4 	bl	8007146 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei>
 8007b5e:	60f8      	str	r0, [r7, #12]

  TFLITE_DCHECK(node->user_data != nullptr);
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	691b      	ldr	r3, [r3, #16]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d101      	bne.n	8007b6c <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x4c>
 8007b68:	f006 fef8 	bl	800e95c <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	691b      	ldr	r3, [r3, #16]
 8007b70:	60bb      	str	r3, [r7, #8]

  switch (input->type) {  // Already know in/out types are same.
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	2b09      	cmp	r3, #9
 8007b78:	d019      	beq.n	8007bae <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x8e>
 8007b7a:	2b09      	cmp	r3, #9
 8007b7c:	dc3b      	bgt.n	8007bf6 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xd6>
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d002      	beq.n	8007b88 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x68>
 8007b82:	2b03      	cmp	r3, #3
 8007b84:	d024      	beq.n	8007bd0 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xb0>
 8007b86:	e036      	b.n	8007bf6 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xd6>
    case kTfLiteFloat32:
      EvalFloat(context, node, params, data, input, filter, bias, nullptr,
 8007b88:	69bb      	ldr	r3, [r7, #24]
 8007b8a:	9305      	str	r3, [sp, #20]
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	9304      	str	r3, [sp, #16]
 8007b90:	2300      	movs	r3, #0
 8007b92:	9303      	str	r3, [sp, #12]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	9302      	str	r3, [sp, #8]
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	9301      	str	r3, [sp, #4]
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	9300      	str	r3, [sp, #0]
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	69fa      	ldr	r2, [r7, #28]
 8007ba4:	6839      	ldr	r1, [r7, #0]
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f7ff ff14 	bl	80079d4 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_>
                nullptr, output);
      break;
 8007bac:	e032      	b.n	8007c14 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xf4>
    case kTfLiteInt8:
      EvalQuantizedPerChannel(context, node, params, data, input, filter, bias,
 8007bae:	2300      	movs	r3, #0
 8007bb0:	9304      	str	r3, [sp, #16]
 8007bb2:	69bb      	ldr	r3, [r7, #24]
 8007bb4:	9303      	str	r3, [sp, #12]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	9302      	str	r3, [sp, #8]
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	9301      	str	r3, [sp, #4]
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	9300      	str	r3, [sp, #0]
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	69fa      	ldr	r2, [r7, #28]
 8007bc6:	6839      	ldr	r1, [r7, #0]
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f7ff fe71 	bl	80078b0 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_>
                              output, nullptr);
      break;
 8007bce:	e021      	b.n	8007c14 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xf4>
    case kTfLiteUInt8:
      EvalQuantized(context, node, params, data, input, filter, bias, nullptr,
 8007bd0:	69bb      	ldr	r3, [r7, #24]
 8007bd2:	9305      	str	r3, [sp, #20]
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	9304      	str	r3, [sp, #16]
 8007bd8:	2300      	movs	r3, #0
 8007bda:	9303      	str	r3, [sp, #12]
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	9302      	str	r3, [sp, #8]
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	9301      	str	r3, [sp, #4]
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	9300      	str	r3, [sp, #0]
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	69fa      	ldr	r2, [r7, #28]
 8007bec:	6839      	ldr	r1, [r7, #0]
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f7ff fd9c 	bl	800772c <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_>
                    nullptr, output);
      break;
 8007bf4:	e00e      	b.n	8007c14 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xf4>
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	695c      	ldr	r4, [r3, #20]
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7fd faf8 	bl	80051f4 <TfLiteTypeGetName>
 8007c04:	4602      	mov	r2, r0
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	4905      	ldr	r1, [pc, #20]	; (8007c20 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x100>)
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8007c10:	2301      	movs	r3, #1
 8007c12:	e000      	b.n	8007c16 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xf6>
  }
  return kTfLiteOk;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3724      	adds	r7, #36	; 0x24
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd90      	pop	{r4, r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	08010d88 	.word	0x08010d88

08007c24 <_ZN6tflite3ops5micro16Register_CONV_2DEv>:

}  // namespace conv

TfLiteRegistration* Register_CONV_2D() {
 8007c24:	b480      	push	{r7}
 8007c26:	af00      	add	r7, sp, #0
                                 /*invoke=*/conv::Eval,
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
 8007c28:	4b02      	ldr	r3, [pc, #8]	; (8007c34 <_ZN6tflite3ops5micro16Register_CONV_2DEv+0x10>)
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr
 8007c34:	20006c54 	.word	0x20006c54

08007c38 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
}

// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b086      	sub	sp, #24
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
  const int dims_count = shape.DimensionsCount();
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f7fe f9df 	bl	8006006 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8007c48:	60f8      	str	r0, [r7, #12]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	db03      	blt.n	8007c58 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x20>
 8007c50:	683a      	ldr	r2, [r7, #0]
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	429a      	cmp	r2, r3
 8007c56:	db01      	blt.n	8007c5c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x24>
 8007c58:	f006 fe80 	bl	800e95c <abort>
  const auto* dims_data = shape.DimsData();
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f7fe fa16 	bl	800608e <_ZNK6tflite12RuntimeShape8DimsDataEv>
 8007c62:	60b8      	str	r0, [r7, #8]
  int flat_size = 1;
 8007c64:	2301      	movs	r3, #1
 8007c66:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 8007c68:	2300      	movs	r3, #0
 8007c6a:	613b      	str	r3, [r7, #16]
 8007c6c:	693a      	ldr	r2, [r7, #16]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	429a      	cmp	r2, r3
 8007c72:	da12      	bge.n	8007c9a <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x62>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 8007c74:	693a      	ldr	r2, [r7, #16]
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d005      	beq.n	8007c88 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x50>
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	68ba      	ldr	r2, [r7, #8]
 8007c82:	4413      	add	r3, r2
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	e000      	b.n	8007c8a <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x52>
 8007c88:	2301      	movs	r3, #1
 8007c8a:	697a      	ldr	r2, [r7, #20]
 8007c8c:	fb03 f302 	mul.w	r3, r3, r2
 8007c90:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	3301      	adds	r3, #1
 8007c96:	613b      	str	r3, [r7, #16]
 8007c98:	e7e8      	b.n	8007c6c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x34>
  }
  return flat_size;
 8007c9a:	697b      	ldr	r3, [r7, #20]
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3718      	adds	r7, #24
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& weights_shape,
    const float* weights_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
 8007ca4:	b590      	push	{r4, r7, lr}
 8007ca6:	b091      	sub	sp, #68	; 0x44
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	607a      	str	r2, [r7, #4]
 8007cb0:	603b      	str	r3, [r7, #0]
  const float output_activation_min = params.float_activation_min;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	69db      	ldr	r3, [r3, #28]
 8007cb6:	62bb      	str	r3, [r7, #40]	; 0x28
  const float output_activation_max = params.float_activation_max;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6a1b      	ldr	r3, [r3, #32]
 8007cbc:	627b      	str	r3, [r7, #36]	; 0x24
  // TODO(benoitjacob): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dims_count = output_shape.DimensionsCount();
 8007cbe:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8007cc0:	f7fe f9a1 	bl	8006006 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8007cc4:	6238      	str	r0, [r7, #32]
  const int weights_dims_count = weights_shape.DimensionsCount();
 8007cc6:	6838      	ldr	r0, [r7, #0]
 8007cc8:	f7fe f99d 	bl	8006006 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8007ccc:	61f8      	str	r0, [r7, #28]
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
 8007cce:	6a3b      	ldr	r3, [r7, #32]
 8007cd0:	3b01      	subs	r3, #1
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8007cd6:	f7ff ffaf 	bl	8007c38 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 8007cda:	61b8      	str	r0, [r7, #24]
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	1e99      	subs	r1, r3, #2
 8007ce0:	6a3b      	ldr	r3, [r7, #32]
 8007ce2:	3b01      	subs	r3, #1
 8007ce4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007ce6:	6838      	ldr	r0, [r7, #0]
 8007ce8:	f7fe fd22 	bl	8006730 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8007cec:	6178      	str	r0, [r7, #20]
                                       output_shape, output_dims_count - 1);
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
 8007cee:	69fb      	ldr	r3, [r7, #28]
 8007cf0:	3b01      	subs	r3, #1
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	6838      	ldr	r0, [r7, #0]
 8007cf6:	f7fe f992 	bl	800601e <_ZNK6tflite12RuntimeShape4DimsEi>
 8007cfa:	6138      	str	r0, [r7, #16]
  for (int b = 0; b < batches; ++b) {
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d02:	69bb      	ldr	r3, [r7, #24]
 8007d04:	429a      	cmp	r2, r3
 8007d06:	da5f      	bge.n	8007dc8 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x124>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8007d08:	2300      	movs	r3, #0
 8007d0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	429a      	cmp	r2, r3
 8007d12:	da55      	bge.n	8007dc0 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x11c>
      float total = 0.f;
 8007d14:	f04f 0300 	mov.w	r3, #0
 8007d18:	637b      	str	r3, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	633b      	str	r3, [r7, #48]	; 0x30
 8007d1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	429a      	cmp	r2, r3
 8007d24:	da21      	bge.n	8007d6a <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xc6>
        total += input_data[b * accum_depth + d] *
 8007d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d28:	693a      	ldr	r2, [r7, #16]
 8007d2a:	fb02 f203 	mul.w	r2, r2, r3
 8007d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d30:	4413      	add	r3, r2
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	4413      	add	r3, r2
 8007d38:	ed93 7a00 	vldr	s14, [r3]
                 weights_data[out_c * accum_depth + d];
 8007d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d3e:	693a      	ldr	r2, [r7, #16]
 8007d40:	fb02 f203 	mul.w	r2, r2, r3
 8007d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d46:	4413      	add	r3, r2
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007d4c:	4413      	add	r3, r2
 8007d4e:	edd3 7a00 	vldr	s15, [r3]
        total += input_data[b * accum_depth + d] *
 8007d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d56:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8007d5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d5e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 8007d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d64:	3301      	adds	r3, #1
 8007d66:	633b      	str	r3, [r7, #48]	; 0x30
 8007d68:	e7d9      	b.n	8007d1e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x7a>
      }
      float bias_value = 0.0f;
 8007d6a:	f04f 0300 	mov.w	r3, #0
 8007d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (bias_data) {
 8007d70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d005      	beq.n	8007d82 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xde>
        bias_value = bias_data[out_c];
 8007d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d7c:	4413      	add	r3, r2
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
 8007d82:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8007d86:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8007d8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d92:	fb02 f203 	mul.w	r2, r2, r3
 8007d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d98:	4413      	add	r3, r2
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007d9e:	18d4      	adds	r4, r2, r3
 8007da0:	ed97 1a09 	vldr	s2, [r7, #36]	; 0x24
 8007da4:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 8007da8:	eeb0 0a67 	vmov.f32	s0, s15
 8007dac:	f7fe fb44 	bl	8006438 <_ZN6tflite28ActivationFunctionWithMinMaxEfff>
 8007db0:	eef0 7a40 	vmov.f32	s15, s0
 8007db4:	edc4 7a00 	vstr	s15, [r4]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8007db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dba:	3301      	adds	r3, #1
 8007dbc:	63bb      	str	r3, [r7, #56]	; 0x38
 8007dbe:	e7a5      	b.n	8007d0c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x68>
  for (int b = 0; b < batches; ++b) {
 8007dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007dc6:	e79b      	b.n	8007d00 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x5c>
          total + bias_value, output_activation_min, output_activation_max);
    }
  }
}
 8007dc8:	bf00      	nop
 8007dca:	3744      	adds	r7, #68	; 0x44
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd90      	pop	{r4, r7, pc}

08007dd0 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const uint8* input_data, const RuntimeShape& filter_shape,
    const uint8* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    uint8* output_data) {
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b096      	sub	sp, #88	; 0x58
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	60b9      	str	r1, [r7, #8]
 8007dda:	607a      	str	r2, [r7, #4]
 8007ddc:	603b      	str	r3, [r7, #0]
  const int32 input_offset = params.input_offset;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32 filter_offset = params.weights_offset;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	647b      	str	r3, [r7, #68]	; 0x44
  const int32 output_offset = params.output_offset;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	643b      	str	r3, [r7, #64]	; 0x40
  const int32 output_multiplier = params.output_multiplier;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int output_shift = params.output_shift;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	691b      	ldr	r3, [r3, #16]
 8007dfa:	63bb      	str	r3, [r7, #56]	; 0x38
  const int32 output_activation_min = params.quantized_activation_min;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	695b      	ldr	r3, [r3, #20]
 8007e00:	61bb      	str	r3, [r7, #24]
  const int32 output_activation_max = params.quantized_activation_max;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	699b      	ldr	r3, [r3, #24]
 8007e06:	617b      	str	r3, [r7, #20]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 8007e08:	6838      	ldr	r0, [r7, #0]
 8007e0a:	f7fe f8fc 	bl	8006006 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	dc01      	bgt.n	8007e18 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x48>
 8007e14:	f006 fda2 	bl	800e95c <abort>
  TFLITE_DCHECK_GE(output_shape.DimensionsCount(), 1);
 8007e18:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007e1a:	f7fe f8f4 	bl	8006006 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	dc01      	bgt.n	8007e28 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x58>
 8007e24:	f006 fd9a 	bl	800e95c <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 8007e28:	69ba      	ldr	r2, [r7, #24]
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	dd01      	ble.n	8007e34 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x64>
 8007e30:	f006 fd94 	bl	800e95c <abort>
  // TODO(benoitjacob): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dim_count = output_shape.DimensionsCount();
 8007e34:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007e36:	f7fe f8e6 	bl	8006006 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8007e3a:	6378      	str	r0, [r7, #52]	; 0x34
  const int filter_dim_count = filter_shape.DimensionsCount();
 8007e3c:	6838      	ldr	r0, [r7, #0]
 8007e3e:	f7fe f8e2 	bl	8006006 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8007e42:	6338      	str	r0, [r7, #48]	; 0x30
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 8007e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e46:	3b01      	subs	r3, #1
 8007e48:	4619      	mov	r1, r3
 8007e4a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007e4c:	f7ff fef4 	bl	8007c38 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 8007e50:	62f8      	str	r0, [r7, #44]	; 0x2c
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
 8007e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e54:	1e99      	subs	r1, r3, #2
 8007e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e58:	3b01      	subs	r3, #1
 8007e5a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007e5c:	6838      	ldr	r0, [r7, #0]
 8007e5e:	f7fe fc67 	bl	8006730 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8007e62:	62b8      	str	r0, [r7, #40]	; 0x28
                                       output_shape, output_dim_count - 1);
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 8007e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e66:	3b01      	subs	r3, #1
 8007e68:	4619      	mov	r1, r3
 8007e6a:	6838      	ldr	r0, [r7, #0]
 8007e6c:	f7fe f8d7 	bl	800601e <_ZNK6tflite12RuntimeShape4DimsEi>
 8007e70:	6278      	str	r0, [r7, #36]	; 0x24
  for (int b = 0; b < batches; ++b) {
 8007e72:	2300      	movs	r3, #0
 8007e74:	657b      	str	r3, [r7, #84]	; 0x54
 8007e76:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	da73      	bge.n	8007f66 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x196>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8007e7e:	2300      	movs	r3, #0
 8007e80:	653b      	str	r3, [r7, #80]	; 0x50
 8007e82:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e86:	429a      	cmp	r2, r3
 8007e88:	da69      	bge.n	8007f5e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x18e>
      int32 acc = 0;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	613b      	str	r3, [r7, #16]
      for (int d = 0; d < accum_depth; ++d) {
 8007e8e:	2300      	movs	r3, #0
 8007e90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e96:	429a      	cmp	r2, r3
 8007e98:	da24      	bge.n	8007ee4 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x114>
        int32 input_val = input_data[b * accum_depth + d];
 8007e9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e9e:	fb02 f203 	mul.w	r2, r2, r3
 8007ea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ea4:	4413      	add	r3, r2
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	4413      	add	r3, r2
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	623b      	str	r3, [r7, #32]
        int32 filter_val = filter_data[out_c * accum_depth + d];
 8007eb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eb4:	fb02 f203 	mul.w	r2, r2, r3
 8007eb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007eba:	4413      	add	r3, r2
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ec0:	4413      	add	r3, r2
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	61fb      	str	r3, [r7, #28]
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 8007ec6:	69fa      	ldr	r2, [r7, #28]
 8007ec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007eca:	4413      	add	r3, r2
 8007ecc:	6a39      	ldr	r1, [r7, #32]
 8007ece:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ed0:	440a      	add	r2, r1
 8007ed2:	fb02 f203 	mul.w	r2, r2, r3
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	4413      	add	r3, r2
 8007eda:	613b      	str	r3, [r7, #16]
      for (int d = 0; d < accum_depth; ++d) {
 8007edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ede:	3301      	adds	r3, #1
 8007ee0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ee2:	e7d6      	b.n	8007e92 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xc2>
      }
      if (bias_data) {
 8007ee4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d007      	beq.n	8007efa <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x12a>
        acc += bias_data[out_c];
 8007eea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007eec:	009b      	lsls	r3, r3, #2
 8007eee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007ef0:	4413      	add	r3, r2
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	4413      	add	r3, r2
 8007ef8:	613b      	str	r3, [r7, #16]
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007efe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f00:	4618      	mov	r0, r3
 8007f02:	f7fe fc33 	bl	800676c <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8007f06:	4603      	mov	r3, r0
 8007f08:	613b      	str	r3, [r7, #16]
      acc += output_offset;
 8007f0a:	693a      	ldr	r2, [r7, #16]
 8007f0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f0e:	4413      	add	r3, r2
 8007f10:	613b      	str	r3, [r7, #16]
      acc = std::max(acc, output_activation_min);
 8007f12:	f107 0218 	add.w	r2, r7, #24
 8007f16:	f107 0310 	add.w	r3, r7, #16
 8007f1a:	4611      	mov	r1, r2
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f7fd ffc5 	bl	8005eac <_ZSt3maxIlERKT_S2_S2_>
 8007f22:	4603      	mov	r3, r0
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	613b      	str	r3, [r7, #16]
      acc = std::min(acc, output_activation_max);
 8007f28:	f107 0214 	add.w	r2, r7, #20
 8007f2c:	f107 0310 	add.w	r3, r7, #16
 8007f30:	4611      	mov	r1, r2
 8007f32:	4618      	mov	r0, r3
 8007f34:	f7fd ffce 	bl	8005ed4 <_ZSt3minIlERKT_S2_S2_>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	613b      	str	r3, [r7, #16]
      output_data[out_c + output_depth * b] = static_cast<uint8>(acc);
 8007f3e:	6939      	ldr	r1, [r7, #16]
 8007f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f42:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007f44:	fb02 f203 	mul.w	r2, r2, r3
 8007f48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f4a:	4413      	add	r3, r2
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f50:	4413      	add	r3, r2
 8007f52:	b2ca      	uxtb	r2, r1
 8007f54:	701a      	strb	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8007f56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f58:	3301      	adds	r3, #1
 8007f5a:	653b      	str	r3, [r7, #80]	; 0x50
 8007f5c:	e791      	b.n	8007e82 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xb2>
  for (int b = 0; b < batches; ++b) {
 8007f5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f60:	3301      	adds	r3, #1
 8007f62:	657b      	str	r3, [r7, #84]	; 0x54
 8007f64:	e787      	b.n	8007e76 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xa6>
    }
  }
}
 8007f66:	bf00      	nop
 8007f68:	3758      	adds	r7, #88	; 0x58
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}

08007f6e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const uint8* input_data, const RuntimeShape& filter_shape,
    const uint8* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    int16* output_data) {
 8007f6e:	b580      	push	{r7, lr}
 8007f70:	b098      	sub	sp, #96	; 0x60
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	60f8      	str	r0, [r7, #12]
 8007f76:	60b9      	str	r1, [r7, #8]
 8007f78:	607a      	str	r2, [r7, #4]
 8007f7a:	603b      	str	r3, [r7, #0]
  const int32 input_offset = params.input_offset;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	653b      	str	r3, [r7, #80]	; 0x50
  const int32 filter_offset = params.weights_offset;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	64fb      	str	r3, [r7, #76]	; 0x4c
  const int32 output_offset = params.output_offset;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	689b      	ldr	r3, [r3, #8]
 8007f8c:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32 output_multiplier = params.output_multiplier;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	647b      	str	r3, [r7, #68]	; 0x44
  const int output_shift = params.output_shift;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	691b      	ldr	r3, [r3, #16]
 8007f98:	643b      	str	r3, [r7, #64]	; 0x40
  const int32 output_activation_min = params.quantized_activation_min;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	695b      	ldr	r3, [r3, #20]
 8007f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int32 output_activation_max = params.quantized_activation_max;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	699b      	ldr	r3, [r3, #24]
 8007fa4:	63bb      	str	r3, [r7, #56]	; 0x38

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 8007fa6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007faa:	429a      	cmp	r2, r3
 8007fac:	dd01      	ble.n	8007fb2 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x44>
 8007fae:	f006 fcd5 	bl	800e95c <abort>
  TFLITE_DCHECK_EQ(output_offset, 0);
 8007fb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d001      	beq.n	8007fbc <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x4e>
 8007fb8:	f006 fcd0 	bl	800e95c <abort>
  // TODO(benoitjacob): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dim_count = output_shape.DimensionsCount();
 8007fbc:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8007fbe:	f7fe f822 	bl	8006006 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8007fc2:	6378      	str	r0, [r7, #52]	; 0x34
  const int filter_dim_count = filter_shape.DimensionsCount();
 8007fc4:	6838      	ldr	r0, [r7, #0]
 8007fc6:	f7fe f81e 	bl	8006006 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8007fca:	6338      	str	r0, [r7, #48]	; 0x30
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 8007fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fce:	3b01      	subs	r3, #1
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8007fd4:	f7ff fe30 	bl	8007c38 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 8007fd8:	62f8      	str	r0, [r7, #44]	; 0x2c
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
 8007fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fdc:	1e99      	subs	r1, r3, #2
 8007fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fe0:	3b01      	subs	r3, #1
 8007fe2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007fe4:	6838      	ldr	r0, [r7, #0]
 8007fe6:	f7fe fba3 	bl	8006730 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8007fea:	62b8      	str	r0, [r7, #40]	; 0x28
                                       output_shape, output_dim_count - 1);
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 8007fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fee:	3b01      	subs	r3, #1
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	6838      	ldr	r0, [r7, #0]
 8007ff4:	f7fe f813 	bl	800601e <_ZNK6tflite12RuntimeShape4DimsEi>
 8007ff8:	6278      	str	r0, [r7, #36]	; 0x24
  for (int b = 0; b < batches; ++b) {
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ffe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008002:	429a      	cmp	r2, r3
 8008004:	da7c      	bge.n	8008100 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x192>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8008006:	2300      	movs	r3, #0
 8008008:	65bb      	str	r3, [r7, #88]	; 0x58
 800800a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800800c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800800e:	429a      	cmp	r2, r3
 8008010:	da72      	bge.n	80080f8 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x18a>
      // Internal accumulation.
      // Initialize accumulator with the bias-value.
      int32 accum = bias_data[out_c];
 8008012:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008018:	4413      	add	r3, r2
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	617b      	str	r3, [r7, #20]
      // Accumulation loop.
      for (int d = 0; d < accum_depth; ++d) {
 800801e:	2300      	movs	r3, #0
 8008020:	657b      	str	r3, [r7, #84]	; 0x54
 8008022:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008026:	429a      	cmp	r2, r3
 8008028:	da2c      	bge.n	8008084 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x116>
        int16 input_val = input_data[b * accum_depth + d] + input_offset;
 800802a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800802c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800802e:	fb02 f203 	mul.w	r2, r2, r3
 8008032:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008034:	4413      	add	r3, r2
 8008036:	461a      	mov	r2, r3
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	4413      	add	r3, r2
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	b29a      	uxth	r2, r3
 8008040:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008042:	b29b      	uxth	r3, r3
 8008044:	4413      	add	r3, r2
 8008046:	b29b      	uxth	r3, r3
 8008048:	847b      	strh	r3, [r7, #34]	; 0x22
        int16 filter_val = filter_data[out_c * accum_depth + d] + filter_offset;
 800804a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800804c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800804e:	fb02 f203 	mul.w	r2, r2, r3
 8008052:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008054:	4413      	add	r3, r2
 8008056:	461a      	mov	r2, r3
 8008058:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800805a:	4413      	add	r3, r2
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	b29a      	uxth	r2, r3
 8008060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008062:	b29b      	uxth	r3, r3
 8008064:	4413      	add	r3, r2
 8008066:	b29b      	uxth	r3, r3
 8008068:	843b      	strh	r3, [r7, #32]
        accum += filter_val * input_val;
 800806a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800806e:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8008072:	fb02 f203 	mul.w	r2, r2, r3
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	4413      	add	r3, r2
 800807a:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 800807c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800807e:	3301      	adds	r3, #1
 8008080:	657b      	str	r3, [r7, #84]	; 0x54
 8008082:	e7ce      	b.n	8008022 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0xb4>
      // Down-scale the final int32 accumulator to the scale used by our
      // (16-bit, typically 3 integer bits) fixed-point format. The quantized
      // multiplier and shift here have been pre-computed offline
      // (e.g. by toco).
      accum =
          MultiplyByQuantizedMultiplier(accum, output_multiplier, output_shift);
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008088:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800808a:	4618      	mov	r0, r3
 800808c:	f7fe fb6e 	bl	800676c <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8008090:	4603      	mov	r3, r0
      accum =
 8008092:	617b      	str	r3, [r7, #20]
      // Saturate, cast to int16, and store to output array.
      accum = std::max(accum, output_activation_min - output_offset);
 8008094:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008096:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008098:	1ad3      	subs	r3, r2, r3
 800809a:	61bb      	str	r3, [r7, #24]
 800809c:	f107 0218 	add.w	r2, r7, #24
 80080a0:	f107 0314 	add.w	r3, r7, #20
 80080a4:	4611      	mov	r1, r2
 80080a6:	4618      	mov	r0, r3
 80080a8:	f7fd ff00 	bl	8005eac <_ZSt3maxIlERKT_S2_S2_>
 80080ac:	4603      	mov	r3, r0
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	617b      	str	r3, [r7, #20]
      accum = std::min(accum, output_activation_max - output_offset);
 80080b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080b6:	1ad3      	subs	r3, r2, r3
 80080b8:	61fb      	str	r3, [r7, #28]
 80080ba:	f107 021c 	add.w	r2, r7, #28
 80080be:	f107 0314 	add.w	r3, r7, #20
 80080c2:	4611      	mov	r1, r2
 80080c4:	4618      	mov	r0, r3
 80080c6:	f7fd ff05 	bl	8005ed4 <_ZSt3minIlERKT_S2_S2_>
 80080ca:	4603      	mov	r3, r0
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	617b      	str	r3, [r7, #20]
      accum += output_offset;
 80080d0:	697a      	ldr	r2, [r7, #20]
 80080d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080d4:	4413      	add	r3, r2
 80080d6:	617b      	str	r3, [r7, #20]
      output_data[out_c + output_depth * b] = accum;
 80080d8:	6979      	ldr	r1, [r7, #20]
 80080da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80080de:	fb02 f203 	mul.w	r2, r2, r3
 80080e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080e4:	4413      	add	r3, r2
 80080e6:	005b      	lsls	r3, r3, #1
 80080e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80080ea:	4413      	add	r3, r2
 80080ec:	b20a      	sxth	r2, r1
 80080ee:	801a      	strh	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 80080f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080f2:	3301      	adds	r3, #1
 80080f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80080f6:	e788      	b.n	800800a <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x9c>
  for (int b = 0; b < batches; ++b) {
 80080f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080fa:	3301      	adds	r3, #1
 80080fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80080fe:	e77e      	b.n	8007ffe <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x90>
    }
  }
}
 8008100:	bf00      	nop
 8008102:	3760      	adds	r7, #96	; 0x60
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
 8008108:	b580      	push	{r7, lr}
 800810a:	b096      	sub	sp, #88	; 0x58
 800810c:	af00      	add	r7, sp, #0
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	60b9      	str	r1, [r7, #8]
 8008112:	607a      	str	r2, [r7, #4]
 8008114:	603b      	str	r3, [r7, #0]
  const int32 input_offset = params.input_offset;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32 filter_offset = params.weights_offset;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	647b      	str	r3, [r7, #68]	; 0x44
  const int32 output_offset = params.output_offset;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	643b      	str	r3, [r7, #64]	; 0x40
  const int32 output_multiplier = params.output_multiplier;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int output_shift = params.output_shift;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	691b      	ldr	r3, [r3, #16]
 8008132:	63bb      	str	r3, [r7, #56]	; 0x38
  const int32 output_activation_min = params.quantized_activation_min;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	695b      	ldr	r3, [r3, #20]
 8008138:	61fb      	str	r3, [r7, #28]
  const int32 output_activation_max = params.quantized_activation_max;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	699b      	ldr	r3, [r3, #24]
 800813e:	61bb      	str	r3, [r7, #24]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 8008140:	6838      	ldr	r0, [r7, #0]
 8008142:	f7fd ff60 	bl	8006006 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8008146:	4603      	mov	r3, r0
 8008148:	2b01      	cmp	r3, #1
 800814a:	dc01      	bgt.n	8008150 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x48>
 800814c:	f006 fc06 	bl	800e95c <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 8008150:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008152:	f7fd ff58 	bl	8006006 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8008156:	4603      	mov	r3, r0
 8008158:	2b02      	cmp	r3, #2
 800815a:	d001      	beq.n	8008160 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x58>
 800815c:	f006 fbfe 	bl	800e95c <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 8008160:	69fa      	ldr	r2, [r7, #28]
 8008162:	69bb      	ldr	r3, [r7, #24]
 8008164:	429a      	cmp	r2, r3
 8008166:	dd01      	ble.n	800816c <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x64>
 8008168:	f006 fbf8 	bl	800e95c <abort>
  const int filter_dim_count = filter_shape.DimensionsCount();
 800816c:	6838      	ldr	r0, [r7, #0]
 800816e:	f7fd ff4a 	bl	8006006 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8008172:	6378      	str	r0, [r7, #52]	; 0x34
  const int batches = output_shape.Dims(0);
 8008174:	2100      	movs	r1, #0
 8008176:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008178:	f7fd ff51 	bl	800601e <_ZNK6tflite12RuntimeShape4DimsEi>
 800817c:	6338      	str	r0, [r7, #48]	; 0x30
  const int output_depth = output_shape.Dims(1);
 800817e:	2101      	movs	r1, #1
 8008180:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008182:	f7fd ff4c 	bl	800601e <_ZNK6tflite12RuntimeShape4DimsEi>
 8008186:	62f8      	str	r0, [r7, #44]	; 0x2c
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
 8008188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800818a:	3b02      	subs	r3, #2
 800818c:	4619      	mov	r1, r3
 800818e:	6838      	ldr	r0, [r7, #0]
 8008190:	f7fd ff45 	bl	800601e <_ZNK6tflite12RuntimeShape4DimsEi>
 8008194:	4602      	mov	r2, r0
 8008196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008198:	4293      	cmp	r3, r2
 800819a:	dd01      	ble.n	80081a0 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x98>
 800819c:	f006 fbde 	bl	800e95c <abort>
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 80081a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081a2:	3b01      	subs	r3, #1
 80081a4:	4619      	mov	r1, r3
 80081a6:	6838      	ldr	r0, [r7, #0]
 80081a8:	f7fd ff39 	bl	800601e <_ZNK6tflite12RuntimeShape4DimsEi>
 80081ac:	62b8      	str	r0, [r7, #40]	; 0x28
  for (int b = 0; b < batches; ++b) {
 80081ae:	2300      	movs	r3, #0
 80081b0:	657b      	str	r3, [r7, #84]	; 0x54
 80081b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80081b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b6:	429a      	cmp	r2, r3
 80081b8:	da75      	bge.n	80082a6 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x19e>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 80081ba:	2300      	movs	r3, #0
 80081bc:	653b      	str	r3, [r7, #80]	; 0x50
 80081be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80081c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081c2:	429a      	cmp	r2, r3
 80081c4:	da6b      	bge.n	800829e <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x196>
      int32 acc = 0;
 80081c6:	2300      	movs	r3, #0
 80081c8:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 80081ca:	2300      	movs	r3, #0
 80081cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80081d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d2:	429a      	cmp	r2, r3
 80081d4:	da26      	bge.n	8008224 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x11c>
        int32 input_val = input_data[b * accum_depth + d];
 80081d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081da:	fb02 f203 	mul.w	r2, r2, r3
 80081de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081e0:	4413      	add	r3, r2
 80081e2:	461a      	mov	r2, r3
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	4413      	add	r3, r2
 80081e8:	f993 3000 	ldrsb.w	r3, [r3]
 80081ec:	627b      	str	r3, [r7, #36]	; 0x24
        int32 filter_val = filter_data[out_c * accum_depth + d];
 80081ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081f2:	fb02 f203 	mul.w	r2, r2, r3
 80081f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081f8:	4413      	add	r3, r2
 80081fa:	461a      	mov	r2, r3
 80081fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80081fe:	4413      	add	r3, r2
 8008200:	f993 3000 	ldrsb.w	r3, [r3]
 8008204:	623b      	str	r3, [r7, #32]
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 8008206:	6a3a      	ldr	r2, [r7, #32]
 8008208:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800820a:	4413      	add	r3, r2
 800820c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800820e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008210:	440a      	add	r2, r1
 8008212:	fb02 f203 	mul.w	r2, r2, r3
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	4413      	add	r3, r2
 800821a:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 800821c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800821e:	3301      	adds	r3, #1
 8008220:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008222:	e7d4      	b.n	80081ce <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xc6>
      }
      if (bias_data) {
 8008224:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008226:	2b00      	cmp	r3, #0
 8008228:	d007      	beq.n	800823a <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x132>
        acc += bias_data[out_c];
 800822a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008230:	4413      	add	r3, r2
 8008232:	681a      	ldr	r2, [r3, #0]
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	4413      	add	r3, r2
 8008238:	617b      	str	r3, [r7, #20]
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800823e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008240:	4618      	mov	r0, r3
 8008242:	f7fe fa93 	bl	800676c <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8008246:	4603      	mov	r3, r0
 8008248:	617b      	str	r3, [r7, #20]
      acc += output_offset;
 800824a:	697a      	ldr	r2, [r7, #20]
 800824c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800824e:	4413      	add	r3, r2
 8008250:	617b      	str	r3, [r7, #20]
      acc = std::max(acc, output_activation_min);
 8008252:	f107 021c 	add.w	r2, r7, #28
 8008256:	f107 0314 	add.w	r3, r7, #20
 800825a:	4611      	mov	r1, r2
 800825c:	4618      	mov	r0, r3
 800825e:	f7fd fe25 	bl	8005eac <_ZSt3maxIlERKT_S2_S2_>
 8008262:	4603      	mov	r3, r0
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	617b      	str	r3, [r7, #20]
      acc = std::min(acc, output_activation_max);
 8008268:	f107 0218 	add.w	r2, r7, #24
 800826c:	f107 0314 	add.w	r3, r7, #20
 8008270:	4611      	mov	r1, r2
 8008272:	4618      	mov	r0, r3
 8008274:	f7fd fe2e 	bl	8005ed4 <_ZSt3minIlERKT_S2_S2_>
 8008278:	4603      	mov	r3, r0
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	617b      	str	r3, [r7, #20]
      output_data[out_c + output_depth * b] = static_cast<int8_t>(acc);
 800827e:	6979      	ldr	r1, [r7, #20]
 8008280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008282:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008284:	fb02 f203 	mul.w	r2, r2, r3
 8008288:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800828a:	4413      	add	r3, r2
 800828c:	461a      	mov	r2, r3
 800828e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008290:	4413      	add	r3, r2
 8008292:	b24a      	sxtb	r2, r1
 8008294:	701a      	strb	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8008296:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008298:	3301      	adds	r3, #1
 800829a:	653b      	str	r3, [r7, #80]	; 0x50
 800829c:	e78f      	b.n	80081be <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xb6>
  for (int b = 0; b < batches; ++b) {
 800829e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082a0:	3301      	adds	r3, #1
 80082a2:	657b      	str	r3, [r7, #84]	; 0x54
 80082a4:	e785      	b.n	80081b2 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xaa>
    }
  }
}
 80082a6:	bf00      	nop
 80082a8:	3758      	adds	r7, #88	; 0x58
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}

080082ae <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE>:
TfLiteStatus CalculateOpData(TfLiteContext* context,
                             TfLiteFusedActivation activation,
                             TfLiteType data_type, const TfLiteTensor* input,
                             const TfLiteTensor* filter,
                             const TfLiteTensor* bias, TfLiteTensor* output,
                             OpData* data) {
 80082ae:	b580      	push	{r7, lr}
 80082b0:	b08c      	sub	sp, #48	; 0x30
 80082b2:	af02      	add	r7, sp, #8
 80082b4:	60f8      	str	r0, [r7, #12]
 80082b6:	607b      	str	r3, [r7, #4]
 80082b8:	460b      	mov	r3, r1
 80082ba:	72fb      	strb	r3, [r7, #11]
 80082bc:	4613      	mov	r3, r2
 80082be:	72bb      	strb	r3, [r7, #10]
  TfLiteStatus status = kTfLiteOk;
 80082c0:	2300      	movs	r3, #0
 80082c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (data_type != kTfLiteFloat32) {
 80082c6:	7abb      	ldrb	r3, [r7, #10]
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d041      	beq.n	8008350 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0xa2>
    double real_multiplier = 0.0;
 80082cc:	f04f 0200 	mov.w	r2, #0
 80082d0:	f04f 0300 	mov.w	r3, #0
 80082d4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 80082d8:	f107 0318 	add.w	r3, r7, #24
 80082dc:	9301      	str	r3, [sp, #4]
 80082de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082e0:	9300      	str	r3, [sp, #0]
 80082e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082e6:	6879      	ldr	r1, [r7, #4]
 80082e8:	68f8      	ldr	r0, [r7, #12]
 80082ea:	f7fd fbed 	bl	8005ac8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 80082ee:	4603      	mov	r3, r0
 80082f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80082f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d002      	beq.n	8008302 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0x54>
 80082fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008300:	e028      	b.n	8008354 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0xa6>
        context, input, filter, bias, output, &real_multiplier));
    int exponent;
    QuantizeMultiplier(real_multiplier, &data->output_multiplier, &exponent);
 8008302:	ed97 7b06 	vldr	d7, [r7, #24]
 8008306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008308:	f107 0214 	add.w	r2, r7, #20
 800830c:	4611      	mov	r1, r2
 800830e:	4618      	mov	r0, r3
 8008310:	eeb0 0a47 	vmov.f32	s0, s14
 8008314:	eef0 0a67 	vmov.f32	s1, s15
 8008318:	f7fc ffd4 	bl	80052c4 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    data->output_shift = -exponent;
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	425a      	negs	r2, r3
 8008320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008322:	605a      	str	r2, [r3, #4]
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 8008324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008326:	f103 0208 	add.w	r2, r3, #8
 800832a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800832c:	330c      	adds	r3, #12
 800832e:	7af9      	ldrb	r1, [r7, #11]
 8008330:	9300      	str	r3, [sp, #0]
 8008332:	4613      	mov	r3, r2
 8008334:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008336:	68f8      	ldr	r0, [r7, #12]
 8008338:	f7fd fd50 	bl	8005ddc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 800833c:	4603      	mov	r3, r0
 800833e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8008342:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008346:	2b00      	cmp	r3, #0
 8008348:	d002      	beq.n	8008350 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0xa2>
 800834a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800834e:	e001      	b.n	8008354 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0xa6>
        context, activation, output, &data->output_activation_min,
        &data->output_activation_max));
  }
  return status;
 8008350:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008354:	4618      	mov	r0, r3
 8008356:	3728      	adds	r7, #40	; 0x28
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj>:

}  // namespace

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 800835c:	b580      	push	{r7, lr}
 800835e:	b086      	sub	sp, #24
 8008360:	af00      	add	r7, sp, #0
 8008362:	60f8      	str	r0, [r7, #12]
 8008364:	60b9      	str	r1, [r7, #8]
 8008366:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800836c:	2b00      	cmp	r3, #0
 800836e:	d101      	bne.n	8008374 <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj+0x18>
 8008370:	f006 faf4 	bl	800e95c <abort>
  void* data = nullptr;
 8008374:	2300      	movs	r3, #0
 8008376:	617b      	str	r3, [r7, #20]
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800837c:	f107 0214 	add.w	r2, r7, #20
 8008380:	2114      	movs	r1, #20
 8008382:	68f8      	ldr	r0, [r7, #12]
 8008384:	4798      	blx	r3
 8008386:	4603      	mov	r3, r0
 8008388:	2b01      	cmp	r3, #1
 800838a:	bf0c      	ite	eq
 800838c:	2301      	moveq	r3, #1
 800838e:	2300      	movne	r3, #0
 8008390:	b2db      	uxtb	r3, r3
 8008392:	2b00      	cmp	r3, #0
 8008394:	d001      	beq.n	800839a <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj+0x3e>
      kTfLiteError) {
    return nullptr;
 8008396:	2300      	movs	r3, #0
 8008398:	e000      	b.n	800839c <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj+0x40>
  }
  return data;
 800839a:	697b      	ldr	r3, [r7, #20]
}
 800839c:	4618      	mov	r0, r3
 800839e:	3718      	adds	r7, #24
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 80083a4:	b5b0      	push	{r4, r5, r7, lr}
 80083a6:	b08c      	sub	sp, #48	; 0x30
 80083a8:	af04      	add	r7, sp, #16
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	691b      	ldr	r3, [r3, #16]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d101      	bne.n	80083ba <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 80083b6:	f006 fad1 	bl	800e95c <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	695b      	ldr	r3, [r3, #20]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d101      	bne.n	80083c6 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
 80083c2:	f006 facb 	bl	800e95c <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	691b      	ldr	r3, [r3, #16]
 80083ca:	61fb      	str	r3, [r7, #28]
  const auto params =
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	695b      	ldr	r3, [r3, #20]
 80083d0:	61bb      	str	r3, [r7, #24]
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 80083d2:	2200      	movs	r2, #0
 80083d4:	6839      	ldr	r1, [r7, #0]
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f7fd fd90 	bl	8005efc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80083dc:	6178      	str	r0, [r7, #20]
  const TfLiteTensor* filter = GetInput(context, node, kWeightsTensor);
 80083de:	2201      	movs	r2, #1
 80083e0:	6839      	ldr	r1, [r7, #0]
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f7fd fd8a 	bl	8005efc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80083e8:	6138      	str	r0, [r7, #16]
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
 80083ea:	2202      	movs	r2, #2
 80083ec:	6839      	ldr	r1, [r7, #0]
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f7fe fea9 	bl	8007146 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei>
 80083f4:	60f8      	str	r0, [r7, #12]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 80083f6:	2200      	movs	r2, #0
 80083f8:	6839      	ldr	r1, [r7, #0]
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f7fd fd94 	bl	8005f28 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8008400:	60b8      	str	r0, [r7, #8]

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	781a      	ldrb	r2, [r3, #0]
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	429a      	cmp	r2, r3
 800840c:	d01b      	beq.n	8008446 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xa2>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	695c      	ldr	r4, [r3, #20]
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	4618      	mov	r0, r3
 8008418:	f7fc feec 	bl	80051f4 <TfLiteTypeGetName>
 800841c:	4605      	mov	r5, r0
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	4618      	mov	r0, r3
 8008424:	f7fc fee6 	bl	80051f4 <TfLiteTypeGetName>
 8008428:	4603      	mov	r3, r0
 800842a:	9303      	str	r3, [sp, #12]
 800842c:	9502      	str	r5, [sp, #8]
 800842e:	4b17      	ldr	r3, [pc, #92]	; (800848c <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xe8>)
 8008430:	9301      	str	r3, [sp, #4]
 8008432:	4b17      	ldr	r3, [pc, #92]	; (8008490 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xec>)
 8008434:	9300      	str	r3, [sp, #0]
 8008436:	f240 23ef 	movw	r3, #751	; 0x2ef
 800843a:	4a16      	ldr	r2, [pc, #88]	; (8008494 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xf0>)
 800843c:	4916      	ldr	r1, [pc, #88]	; (8008498 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xf4>)
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	47a0      	blx	r4
 8008442:	2301      	movs	r3, #1
 8008444:	e01e      	b.n	8008484 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xe0>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	781a      	ldrb	r2, [r3, #0]
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	429a      	cmp	r2, r3
 8008450:	d006      	beq.n	8008460 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xbc>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	695b      	ldr	r3, [r3, #20]
 8008456:	4911      	ldr	r1, [pc, #68]	; (800849c <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xf8>)
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	4798      	blx	r3
 800845c:	2301      	movs	r3, #1
 800845e:	e011      	b.n	8008484 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xe0>
                     "Hybrid models are not supported on TFLite Micro.");

  return CalculateOpData(context, params->activation, input->type, input,
 8008460:	69bb      	ldr	r3, [r7, #24]
 8008462:	7819      	ldrb	r1, [r3, #0]
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	781a      	ldrb	r2, [r3, #0]
 8008468:	69fb      	ldr	r3, [r7, #28]
 800846a:	9303      	str	r3, [sp, #12]
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	9302      	str	r3, [sp, #8]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	9301      	str	r3, [sp, #4]
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	9300      	str	r3, [sp, #0]
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f7ff ff17 	bl	80082ae <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE>
 8008480:	4603      	mov	r3, r0
                         filter, bias, output, data);
 8008482:	bf00      	nop
}
 8008484:	4618      	mov	r0, r3
 8008486:	3720      	adds	r7, #32
 8008488:	46bd      	mov	sp, r7
 800848a:	bdb0      	pop	{r4, r5, r7, pc}
 800848c:	08010f78 	.word	0x08010f78
 8008490:	08010f88 	.word	0x08010f88
 8008494:	08010ebc 	.word	0x08010ebc
 8008498:	08010f5c 	.word	0x08010f5c
 800849c:	08010f94 	.word	0x08010f94

080084a0 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_>:

TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
                               const OpData& data, const TfLiteTensor* input,
                               const TfLiteTensor* filter,
                               const TfLiteTensor* bias, TfLiteTensor* output) {
 80084a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084a2:	b0ad      	sub	sp, #180	; 0xb4
 80084a4:	af06      	add	r7, sp, #24
 80084a6:	60f8      	str	r0, [r7, #12]
 80084a8:	60b9      	str	r1, [r7, #8]
 80084aa:	607a      	str	r2, [r7, #4]
 80084ac:	603b      	str	r3, [r7, #0]
  tflite::FullyConnectedParams op_params;
  op_params.input_offset = -input->params.zero_point;
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	691b      	ldr	r3, [r3, #16]
 80084b2:	425b      	negs	r3, r3
 80084b4:	613b      	str	r3, [r7, #16]
  op_params.weights_offset = -filter->params.zero_point;
 80084b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80084ba:	691b      	ldr	r3, [r3, #16]
 80084bc:	425b      	negs	r3, r3
 80084be:	617b      	str	r3, [r7, #20]
  op_params.output_offset = output->params.zero_point;
 80084c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80084c4:	691b      	ldr	r3, [r3, #16]
 80084c6:	61bb      	str	r3, [r7, #24]
  op_params.output_multiplier = data.output_multiplier;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	61fb      	str	r3, [r7, #28]
  // TODO(b/138810107): Figure out whether output shift should be inverted
  op_params.output_shift = -data.output_shift;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	425b      	negs	r3, r3
 80084d4:	623b      	str	r3, [r7, #32]
  op_params.quantized_activation_min = data.output_activation_min;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	689b      	ldr	r3, [r3, #8]
 80084da:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.quantized_activation_max = data.output_activation_max;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	68db      	ldr	r3, [r3, #12]
 80084e0:	62bb      	str	r3, [r7, #40]	; 0x28

  reference_integer_ops::FullyConnected(
      op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
 80084e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80084e6:	6839      	ldr	r1, [r7, #0]
 80084e8:	4618      	mov	r0, r3
 80084ea:	f7fd fe4b 	bl	8006184 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::FullyConnected(
 80084ee:	6838      	ldr	r0, [r7, #0]
 80084f0:	f7fd fe88 	bl	8006204 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 80084f4:	4606      	mov	r6, r0
      GetTensorShape(filter), GetTensorData<int8_t>(filter),
 80084f6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80084fa:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80084fe:	4618      	mov	r0, r3
 8008500:	f7fd fe40 	bl	8006184 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::FullyConnected(
 8008504:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8008508:	f7fd fe7c 	bl	8006204 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 800850c:	4604      	mov	r4, r0
      GetTensorShape(bias), GetTensorData<int32_t>(bias),
 800850e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8008512:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8008516:	4618      	mov	r0, r3
 8008518:	f7fd fe34 	bl	8006184 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::FullyConnected(
 800851c:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8008520:	f7fe f8db 	bl	80066da <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 8008524:	4605      	mov	r5, r0
      GetTensorShape(output), GetTensorData<int8_t>(output));
 8008526:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800852a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800852e:	4618      	mov	r0, r3
 8008530:	f7fd fe28 	bl	8006184 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::FullyConnected(
 8008534:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8008538:	f7fd fe75 	bl	8006226 <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>
 800853c:	4603      	mov	r3, r0
 800853e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008542:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8008546:	f107 0010 	add.w	r0, r7, #16
 800854a:	9304      	str	r3, [sp, #16]
 800854c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8008550:	9303      	str	r3, [sp, #12]
 8008552:	9502      	str	r5, [sp, #8]
 8008554:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8008558:	9301      	str	r3, [sp, #4]
 800855a:	9400      	str	r4, [sp, #0]
 800855c:	4613      	mov	r3, r2
 800855e:	4632      	mov	r2, r6
 8008560:	f7ff fdd2 	bl	8008108 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa>
      GetTensorShape(output), GetTensorData<int8_t>(output));
 8008564:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8008568:	4618      	mov	r0, r3
 800856a:	f7fd fd36 	bl	8005fda <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(bias), GetTensorData<int32_t>(bias),
 800856e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8008572:	4618      	mov	r0, r3
 8008574:	f7fd fd31 	bl	8005fda <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(filter), GetTensorData<int8_t>(filter),
 8008578:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800857c:	4618      	mov	r0, r3
 800857e:	f7fd fd2c 	bl	8005fda <_ZN6tflite12RuntimeShapeD1Ev>
      op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
 8008582:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008586:	4618      	mov	r0, r3
 8008588:	f7fd fd27 	bl	8005fda <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
 800858c:	2300      	movs	r3, #0
}
 800858e:	4618      	mov	r0, r3
 8008590:	379c      	adds	r7, #156	; 0x9c
 8008592:	46bd      	mov	sp, r7
 8008594:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08008598 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_>:

TfLiteStatus EvalQuantized(TfLiteContext* context, TfLiteNode* node,
                           const OpData& data, const TfLiteTensor* input,
                           const TfLiteTensor* filter, const TfLiteTensor* bias,
                           TfLiteTensor* output) {
 8008598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800859a:	b0c9      	sub	sp, #292	; 0x124
 800859c:	af06      	add	r7, sp, #24
 800859e:	60f8      	str	r0, [r7, #12]
 80085a0:	f107 0008 	add.w	r0, r7, #8
 80085a4:	6001      	str	r1, [r0, #0]
 80085a6:	1d39      	adds	r1, r7, #4
 80085a8:	600a      	str	r2, [r1, #0]
 80085aa:	463a      	mov	r2, r7
 80085ac:	6013      	str	r3, [r2, #0]
  const int32_t input_offset = -input->params.zero_point;
 80085ae:	463b      	mov	r3, r7
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	691b      	ldr	r3, [r3, #16]
 80085b4:	425b      	negs	r3, r3
 80085b6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  const int32_t filter_offset = -filter->params.zero_point;
 80085ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80085be:	691b      	ldr	r3, [r3, #16]
 80085c0:	425b      	negs	r3, r3
 80085c2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  const int32_t output_offset = output->params.zero_point;
 80085c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80085ca:	691b      	ldr	r3, [r3, #16]
 80085cc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

  tflite::FullyConnectedParams op_params;
  op_params.input_offset = input_offset;
 80085d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085d4:	617b      	str	r3, [r7, #20]
  op_params.weights_offset = filter_offset;
 80085d6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80085da:	61bb      	str	r3, [r7, #24]
  op_params.output_offset = output_offset;
 80085dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085e0:	61fb      	str	r3, [r7, #28]
  op_params.output_multiplier = data.output_multiplier;
 80085e2:	1d3b      	adds	r3, r7, #4
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	623b      	str	r3, [r7, #32]
  // Legacy ops used mixed left and right shifts. Now all are +ve-means-left.
  op_params.output_shift = -data.output_shift;
 80085ea:	1d3b      	adds	r3, r7, #4
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	425b      	negs	r3, r3
 80085f2:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.quantized_activation_min = data.output_activation_min;
 80085f4:	1d3b      	adds	r3, r7, #4
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	62bb      	str	r3, [r7, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
 80085fc:	1d3b      	adds	r3, r7, #4
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	68db      	ldr	r3, [r3, #12]
 8008602:	62fb      	str	r3, [r7, #44]	; 0x2c
  reference_ops::FullyConnected(                                       \
      op_params, GetTensorShape(input), GetTensorData<uint8_t>(input), \
      GetTensorShape(filter), GetTensorData<uint8_t>(filter),          \
      GetTensorShape(bias), GetTensorData<int32_t>(bias),              \
      GetTensorShape(output), GetTensorData<output_data_type>(output))
  switch (output->type) {
 8008604:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	2b03      	cmp	r3, #3
 800860c:	d002      	beq.n	8008614 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x7c>
 800860e:	2b07      	cmp	r3, #7
 8008610:	d058      	beq.n	80086c4 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x12c>
 8008612:	e0af      	b.n	8008774 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x1dc>
    case kTfLiteUInt8:
      TF_LITE_FULLY_CONNECTED(uint8_t);
 8008614:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8008618:	463b      	mov	r3, r7
 800861a:	6819      	ldr	r1, [r3, #0]
 800861c:	4610      	mov	r0, r2
 800861e:	f7fd fdb1 	bl	8006184 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8008622:	463b      	mov	r3, r7
 8008624:	6818      	ldr	r0, [r3, #0]
 8008626:	f7fd fc95 	bl	8005f54 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 800862a:	4606      	mov	r6, r0
 800862c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008630:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8008634:	4618      	mov	r0, r3
 8008636:	f7fd fda5 	bl	8006184 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 800863a:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800863e:	f7fd fc89 	bl	8005f54 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 8008642:	4604      	mov	r4, r0
 8008644:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008648:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800864c:	4618      	mov	r0, r3
 800864e:	f7fd fd99 	bl	8006184 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8008652:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8008656:	f7fe f840 	bl	80066da <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 800865a:	4605      	mov	r5, r0
 800865c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8008660:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8008664:	4618      	mov	r0, r3
 8008666:	f7fd fd8d 	bl	8006184 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 800866a:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800866e:	f7fd fc82 	bl	8005f76 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>
 8008672:	4603      	mov	r3, r0
 8008674:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8008678:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800867c:	f107 0014 	add.w	r0, r7, #20
 8008680:	9304      	str	r3, [sp, #16]
 8008682:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8008686:	9303      	str	r3, [sp, #12]
 8008688:	9502      	str	r5, [sp, #8]
 800868a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800868e:	9301      	str	r3, [sp, #4]
 8008690:	9400      	str	r4, [sp, #0]
 8008692:	4613      	mov	r3, r2
 8008694:	4632      	mov	r2, r6
 8008696:	f7ff fb9b 	bl	8007dd0 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph>
 800869a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800869e:	4618      	mov	r0, r3
 80086a0:	f7fd fc9b 	bl	8005fda <_ZN6tflite12RuntimeShapeD1Ev>
 80086a4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80086a8:	4618      	mov	r0, r3
 80086aa:	f7fd fc96 	bl	8005fda <_ZN6tflite12RuntimeShapeD1Ev>
 80086ae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80086b2:	4618      	mov	r0, r3
 80086b4:	f7fd fc91 	bl	8005fda <_ZN6tflite12RuntimeShapeD1Ev>
 80086b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80086bc:	4618      	mov	r0, r3
 80086be:	f7fd fc8c 	bl	8005fda <_ZN6tflite12RuntimeShapeD1Ev>
      break;
 80086c2:	e068      	b.n	8008796 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x1fe>
    case kTfLiteInt16:
      TF_LITE_FULLY_CONNECTED(int16_t);
 80086c4:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 80086c8:	463b      	mov	r3, r7
 80086ca:	6819      	ldr	r1, [r3, #0]
 80086cc:	4610      	mov	r0, r2
 80086ce:	f7fd fd59 	bl	8006184 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 80086d2:	463b      	mov	r3, r7
 80086d4:	6818      	ldr	r0, [r3, #0]
 80086d6:	f7fd fc3d 	bl	8005f54 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 80086da:	4606      	mov	r6, r0
 80086dc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80086e0:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 80086e4:	4618      	mov	r0, r3
 80086e6:	f7fd fd4d 	bl	8006184 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 80086ea:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80086ee:	f7fd fc31 	bl	8005f54 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 80086f2:	4604      	mov	r4, r0
 80086f4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80086f8:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 80086fc:	4618      	mov	r0, r3
 80086fe:	f7fd fd41 	bl	8006184 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8008702:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8008706:	f7fd ffe8 	bl	80066da <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 800870a:	4605      	mov	r5, r0
 800870c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8008710:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8008714:	4618      	mov	r0, r3
 8008716:	f7fd fd35 	bl	8006184 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 800871a:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800871e:	f000 f935 	bl	800898c <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor>
 8008722:	4603      	mov	r3, r0
 8008724:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8008728:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 800872c:	f107 0014 	add.w	r0, r7, #20
 8008730:	9304      	str	r3, [sp, #16]
 8008732:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8008736:	9303      	str	r3, [sp, #12]
 8008738:	9502      	str	r5, [sp, #8]
 800873a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800873e:	9301      	str	r3, [sp, #4]
 8008740:	9400      	str	r4, [sp, #0]
 8008742:	4613      	mov	r3, r2
 8008744:	4632      	mov	r2, r6
 8008746:	f7ff fc12 	bl	8007f6e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps>
 800874a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800874e:	4618      	mov	r0, r3
 8008750:	f7fd fc43 	bl	8005fda <_ZN6tflite12RuntimeShapeD1Ev>
 8008754:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8008758:	4618      	mov	r0, r3
 800875a:	f7fd fc3e 	bl	8005fda <_ZN6tflite12RuntimeShapeD1Ev>
 800875e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8008762:	4618      	mov	r0, r3
 8008764:	f7fd fc39 	bl	8005fda <_ZN6tflite12RuntimeShapeD1Ev>
 8008768:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800876c:	4618      	mov	r0, r3
 800876e:	f7fd fc34 	bl	8005fda <_ZN6tflite12RuntimeShapeD1Ev>
      break;
 8008772:	e010      	b.n	8008796 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x1fe>
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	695c      	ldr	r4, [r3, #20]
 8008778:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	4618      	mov	r0, r3
 8008780:	f7fc fd38 	bl	80051f4 <TfLiteTypeGetName>
 8008784:	4602      	mov	r2, r0
 8008786:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	4905      	ldr	r1, [pc, #20]	; (80087a4 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x20c>)
 800878e:	68f8      	ldr	r0, [r7, #12]
 8008790:	47a0      	blx	r4
                         TfLiteTypeGetName(output->type), output->type);
      return kTfLiteError;
 8008792:	2301      	movs	r3, #1
 8008794:	e000      	b.n	8008798 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x200>
  }

  return kTfLiteOk;
 8008796:	2300      	movs	r3, #0
}
 8008798:	4618      	mov	r0, r3
 800879a:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 800879e:	46bd      	mov	sp, r7
 80087a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087a2:	bf00      	nop
 80087a4:	08011064 	.word	0x08011064

080087a8 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_>:

TfLiteStatus EvalFloat(TfLiteContext* context, TfLiteNode* node,
                       TfLiteFusedActivation activation,
                       const TfLiteTensor* input, const TfLiteTensor* filter,
                       const TfLiteTensor* bias, TfLiteTensor* output) {
 80087a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087aa:	b0af      	sub	sp, #188	; 0xbc
 80087ac:	af06      	add	r7, sp, #24
 80087ae:	60f8      	str	r0, [r7, #12]
 80087b0:	60b9      	str	r1, [r7, #8]
 80087b2:	603b      	str	r3, [r7, #0]
 80087b4:	4613      	mov	r3, r2
 80087b6:	71fb      	strb	r3, [r7, #7]
  float output_activation_min, output_activation_max;
  CalculateActivationRange(activation, &output_activation_min,
 80087b8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80087bc:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80087c0:	79fb      	ldrb	r3, [r7, #7]
 80087c2:	4618      	mov	r0, r3
 80087c4:	f7fd fecc 	bl	8006560 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &output_activation_max);
  tflite::FullyConnectedParams op_params;
  op_params.float_activation_min = output_activation_min;
 80087c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.float_activation_max = output_activation_max;
 80087cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ce:	633b      	str	r3, [r7, #48]	; 0x30
  tflite::reference_ops::FullyConnected(
      op_params, GetTensorShape(input), GetTensorData<float>(input),
 80087d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80087d4:	6839      	ldr	r1, [r7, #0]
 80087d6:	4618      	mov	r0, r3
 80087d8:	f7fd fcd4 	bl	8006184 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::FullyConnected(
 80087dc:	6838      	ldr	r0, [r7, #0]
 80087de:	f7fd fcef 	bl	80061c0 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 80087e2:	4606      	mov	r6, r0
      GetTensorShape(filter), GetTensorData<float>(filter),
 80087e4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80087e8:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80087ec:	4618      	mov	r0, r3
 80087ee:	f7fd fcc9 	bl	8006184 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::FullyConnected(
 80087f2:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80087f6:	f7fd fce3 	bl	80061c0 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 80087fa:	4604      	mov	r4, r0
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
 80087fc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008800:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8008804:	4618      	mov	r0, r3
 8008806:	f7fd fcbd 	bl	8006184 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::FullyConnected(
 800880a:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800880e:	f7fd fcd7 	bl	80061c0 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 8008812:	4605      	mov	r5, r0
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
 8008814:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008818:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800881c:	4618      	mov	r0, r3
 800881e:	f7fd fcb1 	bl	8006184 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::FullyConnected(
 8008822:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8008826:	f7fd fcdc 	bl	80061e2 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 800882a:	4603      	mov	r3, r0
 800882c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008830:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8008834:	f107 0010 	add.w	r0, r7, #16
 8008838:	9304      	str	r3, [sp, #16]
 800883a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800883e:	9303      	str	r3, [sp, #12]
 8008840:	9502      	str	r5, [sp, #8]
 8008842:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008846:	9301      	str	r3, [sp, #4]
 8008848:	9400      	str	r4, [sp, #0]
 800884a:	4613      	mov	r3, r2
 800884c:	4632      	mov	r2, r6
 800884e:	f7ff fa29 	bl	8007ca4 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
 8008852:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008856:	4618      	mov	r0, r3
 8008858:	f7fd fbbf 	bl	8005fda <_ZN6tflite12RuntimeShapeD1Ev>
 800885c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008860:	4618      	mov	r0, r3
 8008862:	f7fd fbba 	bl	8005fda <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(filter), GetTensorData<float>(filter),
 8008866:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800886a:	4618      	mov	r0, r3
 800886c:	f7fd fbb5 	bl	8005fda <_ZN6tflite12RuntimeShapeD1Ev>
      op_params, GetTensorShape(input), GetTensorData<float>(input),
 8008870:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008874:	4618      	mov	r0, r3
 8008876:	f7fd fbb0 	bl	8005fda <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<float>(output));
  return kTfLiteOk;
 800887a:	2300      	movs	r3, #0
}
 800887c:	4618      	mov	r0, r3
 800887e:	37a4      	adds	r7, #164	; 0xa4
 8008880:	46bd      	mov	sp, r7
 8008882:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008884 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8008884:	b590      	push	{r4, r7, lr}
 8008886:	b08d      	sub	sp, #52	; 0x34
 8008888:	af04      	add	r7, sp, #16
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	695b      	ldr	r3, [r3, #20]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d101      	bne.n	800889a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x16>
 8008896:	f006 f861 	bl	800e95c <abort>
  const auto* params =
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	695b      	ldr	r3, [r3, #20]
 800889e:	61fb      	str	r3, [r7, #28]
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 80088a0:	2200      	movs	r2, #0
 80088a2:	6839      	ldr	r1, [r7, #0]
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f7fd fb29 	bl	8005efc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80088aa:	61b8      	str	r0, [r7, #24]
  const TfLiteTensor* filter = GetInput(context, node, kWeightsTensor);
 80088ac:	2201      	movs	r2, #1
 80088ae:	6839      	ldr	r1, [r7, #0]
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f7fd fb23 	bl	8005efc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80088b6:	6178      	str	r0, [r7, #20]
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
 80088b8:	2202      	movs	r2, #2
 80088ba:	6839      	ldr	r1, [r7, #0]
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f7fe fc42 	bl	8007146 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei>
 80088c2:	6138      	str	r0, [r7, #16]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 80088c4:	2200      	movs	r2, #0
 80088c6:	6839      	ldr	r1, [r7, #0]
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f7fd fb2d 	bl	8005f28 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 80088ce:	60f8      	str	r0, [r7, #12]

  TFLITE_DCHECK(node->user_data != nullptr);
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	691b      	ldr	r3, [r3, #16]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d101      	bne.n	80088dc <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x58>
 80088d8:	f006 f840 	bl	800e95c <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	691b      	ldr	r3, [r3, #16]
 80088e0:	60bb      	str	r3, [r7, #8]

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 80088e2:	69bb      	ldr	r3, [r7, #24]
 80088e4:	781b      	ldrb	r3, [r3, #0]
 80088e6:	2b09      	cmp	r3, #9
 80088e8:	d015      	beq.n	8008916 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x92>
 80088ea:	2b09      	cmp	r3, #9
 80088ec:	dc2f      	bgt.n	800894e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xca>
 80088ee:	2b01      	cmp	r3, #1
 80088f0:	d002      	beq.n	80088f8 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x74>
 80088f2:	2b03      	cmp	r3, #3
 80088f4:	d01d      	beq.n	8008932 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xae>
 80088f6:	e02a      	b.n	800894e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xca>
    case kTfLiteFloat32:
      return EvalFloat(context, node, params->activation, input, filter, bias,
 80088f8:	69fb      	ldr	r3, [r7, #28]
 80088fa:	781a      	ldrb	r2, [r3, #0]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	9302      	str	r3, [sp, #8]
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	9301      	str	r3, [sp, #4]
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	9300      	str	r3, [sp, #0]
 8008908:	69bb      	ldr	r3, [r7, #24]
 800890a:	6839      	ldr	r1, [r7, #0]
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f7ff ff4b 	bl	80087a8 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_>
 8008912:	4603      	mov	r3, r0
                       output);
 8008914:	e029      	b.n	800896a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xe6>
    case kTfLiteInt8:
      return EvalQuantizedInt8(context, node, data, input, filter, bias,
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	9302      	str	r3, [sp, #8]
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	9301      	str	r3, [sp, #4]
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	9300      	str	r3, [sp, #0]
 8008922:	69bb      	ldr	r3, [r7, #24]
 8008924:	68ba      	ldr	r2, [r7, #8]
 8008926:	6839      	ldr	r1, [r7, #0]
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f7ff fdb9 	bl	80084a0 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_>
 800892e:	4603      	mov	r3, r0
                               output);
 8008930:	e01b      	b.n	800896a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xe6>

    case kTfLiteUInt8:
      return EvalQuantized(context, node, data, input, filter, bias, output);
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	9302      	str	r3, [sp, #8]
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	9301      	str	r3, [sp, #4]
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	9300      	str	r3, [sp, #0]
 800893e:	69bb      	ldr	r3, [r7, #24]
 8008940:	68ba      	ldr	r2, [r7, #8]
 8008942:	6839      	ldr	r1, [r7, #0]
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f7ff fe27 	bl	8008598 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_>
 800894a:	4603      	mov	r3, r0
 800894c:	e00d      	b.n	800896a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xe6>

    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	695c      	ldr	r4, [r3, #20]
 8008952:	69bb      	ldr	r3, [r7, #24]
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	4618      	mov	r0, r3
 8008958:	f7fc fc4c 	bl	80051f4 <TfLiteTypeGetName>
 800895c:	4602      	mov	r2, r0
 800895e:	69bb      	ldr	r3, [r7, #24]
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	4904      	ldr	r1, [pc, #16]	; (8008974 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xf0>)
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8008968:	2301      	movs	r3, #1
  }
  return kTfLiteOk;
}
 800896a:	4618      	mov	r0, r3
 800896c:	3724      	adds	r7, #36	; 0x24
 800896e:	46bd      	mov	sp, r7
 8008970:	bd90      	pop	{r4, r7, pc}
 8008972:	bf00      	nop
 8008974:	08011064 	.word	0x08011064

08008978 <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv>:

}  // namespace fully_connected

TfLiteRegistration* Register_FULLY_CONNECTED() {
 8008978:	b480      	push	{r7}
 800897a:	af00      	add	r7, sp, #0
                                 /*invoke=*/fully_connected::Eval,
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
 800897c:	4b02      	ldr	r3, [pc, #8]	; (8008988 <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv+0x10>)
}
 800897e:	4618      	mov	r0, r3
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr
 8008988:	20006c74 	.word	0x20006c74

0800898c <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
 800898c:	b480      	push	{r7}
 800898e:	b083      	sub	sp, #12
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d002      	beq.n	80089a0 <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor+0x14>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	e000      	b.n	80089a2 <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor+0x16>
 80089a0:	2300      	movs	r3, #0
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	370c      	adds	r7, #12
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr

080089ae <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
 80089ae:	b590      	push	{r4, r7, lr}
 80089b0:	b087      	sub	sp, #28
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	60f8      	str	r0, [r7, #12]
 80089b6:	60b9      	str	r1, [r7, #8]
 80089b8:	607a      	str	r2, [r7, #4]
  const int dims_count = shape.DimensionsCount();
 80089ba:	68f8      	ldr	r0, [r7, #12]
 80089bc:	f7fd fb23 	bl	8006006 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80089c0:	6138      	str	r0, [r7, #16]
  for (int i = 0; i < dims_count; ++i) {
 80089c2:	2300      	movs	r3, #0
 80089c4:	617b      	str	r3, [r7, #20]
 80089c6:	697a      	ldr	r2, [r7, #20]
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	429a      	cmp	r2, r3
 80089cc:	da15      	bge.n	80089fa <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x4c>
    if (i != skip_dim) {
 80089ce:	697a      	ldr	r2, [r7, #20]
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	429a      	cmp	r2, r3
 80089d4:	d00d      	beq.n	80089f2 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 80089d6:	6979      	ldr	r1, [r7, #20]
 80089d8:	68f8      	ldr	r0, [r7, #12]
 80089da:	f7fd fb20 	bl	800601e <_ZNK6tflite12RuntimeShape4DimsEi>
 80089de:	4604      	mov	r4, r0
 80089e0:	6979      	ldr	r1, [r7, #20]
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f7fd fb1b 	bl	800601e <_ZNK6tflite12RuntimeShape4DimsEi>
 80089e8:	4603      	mov	r3, r0
 80089ea:	429c      	cmp	r4, r3
 80089ec:	d001      	beq.n	80089f2 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
 80089ee:	f005 ffb5 	bl	800e95c <abort>
  for (int i = 0; i < dims_count; ++i) {
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	3301      	adds	r3, #1
 80089f6:	617b      	str	r3, [r7, #20]
 80089f8:	e7e5      	b.n	80089c6 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x18>
    }
  }
  return FlatSizeSkipDim(shape, skip_dim);
 80089fa:	68b9      	ldr	r1, [r7, #8]
 80089fc:	68f8      	ldr	r0, [r7, #12]
 80089fe:	f7ff f91b 	bl	8007c38 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 8008a02:	4603      	mov	r3, r0
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	371c      	adds	r7, #28
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd90      	pop	{r4, r7, pc}

08008a0c <_ZN6tflite17CountLeadingZerosImEEiT_>:
  int32_t result = x >> total_shift;
  return result;
}

template <typename T>
int CountLeadingZeros(T integer_input) {
 8008a0c:	b480      	push	{r7}
 8008a0e:	b083      	sub	sp, #12
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  static_assert(std::is_unsigned<T>::value,
                "Only unsigned integer types handled.");
#if defined(__GNUC__)
  return integer_input ? __builtin_clz(integer_input)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d003      	beq.n	8008a22 <_ZN6tflite17CountLeadingZerosImEEiT_+0x16>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	fab3 f383 	clz	r3, r3
                       : std::numeric_limits<T>::digits;
 8008a20:	e000      	b.n	8008a24 <_ZN6tflite17CountLeadingZerosImEEiT_+0x18>
  return integer_input ? __builtin_clz(integer_input)
 8008a22:	2320      	movs	r3, #32
    integer_input <<= 1;
    ++leading_zeros;
  }
  return leading_zeros;
#endif
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	370c      	adds	r7, #12
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr

08008a30 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>:
                 min_bound),
        max_bound)));
  }

  RawType raw() const { return i_; }
  RawType& raw() { return i_; }
 8008a30:	b480      	push	{r7}
 8008a32:	b083      	sub	sp, #12
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	370c      	adds	r7, #12
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a44:	4770      	bx	lr

08008a46 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 8008a46:	b590      	push	{r4, r7, lr}
 8008a48:	b085      	sub	sp, #20
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 8008a4e:	f107 030c 	add.w	r3, r7, #12
 8008a52:	4618      	mov	r0, r3
 8008a54:	f7ff ffec 	bl	8008a30 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8008a58:	4604      	mov	r4, r0
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f7fd fdc2 	bl	80065e4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8008a60:	4603      	mov	r3, r0
 8008a62:	6023      	str	r3, [r4, #0]
    return retval;
 8008a64:	68fb      	ldr	r3, [r7, #12]
  }
 8008a66:	4618      	mov	r0, r3
 8008a68:	3714      	adds	r7, #20
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd90      	pop	{r4, r7, pc}

08008a6e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>:
// fixed-point value, regardless of the actual Scalar type. This allows
// writing generic code that applies just as well to the 32-bit and 16-bit
// cases. In the 16-bit case, the raw integer value is internally
// rounding-shifted by 16 bits to the right.
template <typename FixedPointType>
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 8008a6e:	b580      	push	{r7, lr}
 8008a70:	b082      	sub	sp, #8
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6078      	str	r0, [r7, #4]
    std::int32_t int32_value) {
  typedef typename FixedPointType::ScalarRawType ScalarRawType;
  static constexpr int ScalarTypeBits = 8 * sizeof(ScalarRawType);
  return static_cast<ScalarRawType>(
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 8008a76:	2100      	movs	r1, #0
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f7fd fcfd 	bl	8006478 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8008a7e:	4603      	mov	r3, r0
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3708      	adds	r7, #8
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 f813 	bl	8008abc <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>
 8008a96:	4603      	mov	r3, r0
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3708      	adds	r7, #8
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <_ZN8gemmlowp3SubIlEET_S1_S1_>:
tIntegerType Sub(tIntegerType a, tIntegerType b) {
 8008aa0:	b480      	push	{r7}
 8008aa2:	b083      	sub	sp, #12
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]
  return a - b;
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	1ad3      	subs	r3, r2, r3
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	370c      	adds	r7, #12
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr

08008abc <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b082      	sub	sp, #8
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 8008ac4:	2101      	movs	r1, #1
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f7fd fcd6 	bl	8006478 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8008acc:	4603      	mov	r3, r0
  }
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3708      	adds	r7, #8
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}

08008ad6 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>:
tIntegerType ShiftLeft(tIntegerType a, int offset) {
 8008ad6:	b480      	push	{r7}
 8008ad8:	b089      	sub	sp, #36	; 0x24
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
 8008ade:	6039      	str	r1, [r7, #0]
  const std::int64_t wide_a = static_cast<std::int64_t>(a);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8008ae8:	e9c7 2306 	strd	r2, r3, [r7, #24]
  const std::int64_t wide_shifted = wide_a * (1 << offset);
 8008aec:	2201      	movs	r2, #1
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	fa02 f303 	lsl.w	r3, r2, r3
 8008af4:	461a      	mov	r2, r3
 8008af6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8008afa:	69f9      	ldr	r1, [r7, #28]
 8008afc:	fb02 f001 	mul.w	r0, r2, r1
 8008b00:	69b9      	ldr	r1, [r7, #24]
 8008b02:	fb03 f101 	mul.w	r1, r3, r1
 8008b06:	4401      	add	r1, r0
 8008b08:	69b8      	ldr	r0, [r7, #24]
 8008b0a:	fba0 2302 	umull	r2, r3, r0, r2
 8008b0e:	4419      	add	r1, r3
 8008b10:	460b      	mov	r3, r1
 8008b12:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8008b16:	e9c7 2304 	strd	r2, r3, [r7, #16]
  const auto min = std::numeric_limits<tIntegerType>::min();
 8008b1a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008b1e:	60fb      	str	r3, [r7, #12]
  const auto max = std::numeric_limits<tIntegerType>::max();
 8008b20:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8008b24:	60bb      	str	r3, [r7, #8]
             ? min
 8008b26:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008b2a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008b2e:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8008b32:	db0e      	blt.n	8008b52 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             : wide_shifted > max ? max
 8008b34:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008b38:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8008b3c:	f04f 0100 	mov.w	r1, #0
 8008b40:	4290      	cmp	r0, r2
 8008b42:	eb71 0303 	sbcs.w	r3, r1, r3
 8008b46:	db01      	blt.n	8008b4c <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x76>
 8008b48:	693b      	ldr	r3, [r7, #16]
                                  : static_cast<tIntegerType>(wide_shifted);
 8008b4a:	e004      	b.n	8008b56 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x80>
             : wide_shifted > max ? max
 8008b4c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
                                  : static_cast<tIntegerType>(wide_shifted);
 8008b50:	e001      	b.n	8008b56 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x80>
             ? min
 8008b52:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3724      	adds	r7, #36	; 0x24
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr

08008b62 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>:
tIntegerType SelectUsingMask(tIntegerType if_mask, tIntegerType then_val,
 8008b62:	b590      	push	{r4, r7, lr}
 8008b64:	b085      	sub	sp, #20
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	60f8      	str	r0, [r7, #12]
 8008b6a:	60b9      	str	r1, [r7, #8]
 8008b6c:	607a      	str	r2, [r7, #4]
  return BitXor(BitAnd(if_mask, then_val), BitAnd(BitNot(if_mask), else_val));
 8008b6e:	68b9      	ldr	r1, [r7, #8]
 8008b70:	68f8      	ldr	r0, [r7, #12]
 8008b72:	f7fd fd42 	bl	80065fa <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8008b76:	4604      	mov	r4, r0
 8008b78:	68f8      	ldr	r0, [r7, #12]
 8008b7a:	f7fd fda2 	bl	80066c2 <_ZN8gemmlowp6BitNotIlEET_S1_>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	6879      	ldr	r1, [r7, #4]
 8008b82:	4618      	mov	r0, r3
 8008b84:	f7fd fd39 	bl	80065fa <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	4620      	mov	r0, r4
 8008b8e:	f000 f805 	bl	8008b9c <_ZN8gemmlowp6BitXorIlEET_S1_S1_>
 8008b92:	4603      	mov	r3, r0
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3714      	adds	r7, #20
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd90      	pop	{r4, r7, pc}

08008b9c <_ZN8gemmlowp6BitXorIlEET_S1_S1_>:
tIntegerType BitXor(tIntegerType a, tIntegerType b) {
 8008b9c:	b480      	push	{r7}
 8008b9e:	b083      	sub	sp, #12
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	6039      	str	r1, [r7, #0]
  return a ^ b;
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	4053      	eors	r3, r2
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	370c      	adds	r7, #12
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr

08008bb8 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>:
inline std::int32_t RoundingHalfSum(std::int32_t a, std::int32_t b) {
 8008bb8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008bbc:	b08b      	sub	sp, #44	; 0x2c
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
 8008bc2:	6039      	str	r1, [r7, #0]
  std::int64_t a64 = a;
 8008bc4:	6879      	ldr	r1, [r7, #4]
 8008bc6:	4608      	mov	r0, r1
 8008bc8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8008bcc:	e9c7 0108 	strd	r0, r1, [r7, #32]
  std::int64_t b64 = b;
 8008bd0:	6839      	ldr	r1, [r7, #0]
 8008bd2:	4608      	mov	r0, r1
 8008bd4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8008bd8:	e9c7 0106 	strd	r0, r1, [r7, #24]
  std::int64_t sum = a64 + b64;
 8008bdc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008be0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008be4:	eb18 0a00 	adds.w	sl, r8, r0
 8008be8:	eb49 0b01 	adc.w	fp, r9, r1
 8008bec:	e9c7 ab04 	strd	sl, fp, [r7, #16]
  std::int64_t sign = sum >= 0 ? 1 : -1;
 8008bf0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008bf4:	2800      	cmp	r0, #0
 8008bf6:	f171 0100 	sbcs.w	r1, r1, #0
 8008bfa:	db04      	blt.n	8008c06 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x4e>
 8008bfc:	f04f 0001 	mov.w	r0, #1
 8008c00:	f04f 0100 	mov.w	r1, #0
 8008c04:	e003      	b.n	8008c0e <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x56>
 8008c06:	f04f 30ff 	mov.w	r0, #4294967295
 8008c0a:	f04f 31ff 	mov.w	r1, #4294967295
 8008c0e:	e9c7 0102 	strd	r0, r1, [r7, #8]
  return static_cast<std::int32_t>((sum + sign) / 2);
 8008c12:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8008c16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008c1a:	eb18 0400 	adds.w	r4, r8, r0
 8008c1e:	eb49 0501 	adc.w	r5, r9, r1
 8008c22:	0fe9      	lsrs	r1, r5, #31
 8008c24:	4608      	mov	r0, r1
 8008c26:	f04f 0100 	mov.w	r1, #0
 8008c2a:	1902      	adds	r2, r0, r4
 8008c2c:	eb41 0305 	adc.w	r3, r1, r5
 8008c30:	f04f 0000 	mov.w	r0, #0
 8008c34:	f04f 0100 	mov.w	r1, #0
 8008c38:	0850      	lsrs	r0, r2, #1
 8008c3a:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 8008c3e:	1059      	asrs	r1, r3, #1
 8008c40:	4602      	mov	r2, r0
 8008c42:	460b      	mov	r3, r1
 8008c44:	4613      	mov	r3, r2
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	372c      	adds	r7, #44	; 0x2c
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008c50:	4770      	bx	lr

08008c52 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 8008c52:	b580      	push	{r7, lr}
 8008c54:	b084      	sub	sp, #16
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 8008c5a:	f107 030c 	add.w	r3, r7, #12
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f7ff fee6 	bl	8008a30 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8008c64:	4602      	mov	r2, r0
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6013      	str	r3, [r2, #0]
    return retval;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
  }
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3710      	adds	r7, #16
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>:

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b08a      	sub	sp, #40	; 0x28
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
    FixedPoint<tRawType, 0> a) {
  typedef FixedPoint<tRawType, 0> F0;
  typedef FixedPoint<tRawType, 2> F2;
  F0 half_denominator = RoundingHalfSum(a, F0::One());
 8008c7c:	f000 f85a 	bl	8008d34 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 8008c80:	4603      	mov	r3, r0
 8008c82:	4619      	mov	r1, r3
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f000 f860 	bl	8008d4a <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	623b      	str	r3, [r7, #32]
  // Newton-Raphson division
  // https://en.wikipedia.org/wiki/Division_algorithm#Newton.E2.80.93Raphson_division
  // Refer to that page for the logic behind the 48/17 and 32/17 constants.
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
 8008c8e:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
 8008c92:	f000 f88c 	bl	8008dae <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 8008c96:	4603      	mov	r3, r0
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f000 f874 	bl	8008d86 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	61fb      	str	r3, [r7, #28]
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
 8008ca2:	4823      	ldr	r0, [pc, #140]	; (8008d30 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 8008ca4:	f000 f883 	bl	8008dae <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	4618      	mov	r0, r3
 8008cac:	f000 f86b 	bl	8008d86 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	61bb      	str	r3, [r7, #24]
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
 8008cb4:	69b9      	ldr	r1, [r7, #24]
 8008cb6:	6a38      	ldr	r0, [r7, #32]
 8008cb8:	f000 f886 	bl	8008dc8 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	69f8      	ldr	r0, [r7, #28]
 8008cc2:	f000 f8a3 	bl	8008e0c <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 8008cca:	2300      	movs	r3, #0
 8008ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8008cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd0:	2b02      	cmp	r3, #2
 8008cd2:	dc21      	bgt.n	8008d18 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xa4>
    F2 half_denominator_times_x = half_denominator * x;
 8008cd4:	6979      	ldr	r1, [r7, #20]
 8008cd6:	6a38      	ldr	r0, [r7, #32]
 8008cd8:	f000 f876 	bl	8008dc8 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	613b      	str	r3, [r7, #16]
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
 8008ce0:	f000 f8b2 	bl	8008e48 <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	6939      	ldr	r1, [r7, #16]
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f000 f8b6 	bl	8008e5a <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	60fb      	str	r3, [r7, #12]
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
 8008cf2:	68f9      	ldr	r1, [r7, #12]
 8008cf4:	6978      	ldr	r0, [r7, #20]
 8008cf6:	f000 f8ce 	bl	8008e96 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f000 f8ec 	bl	8008eda <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8008d02:	4603      	mov	r3, r0
 8008d04:	4619      	mov	r1, r3
 8008d06:	6978      	ldr	r0, [r7, #20]
 8008d08:	f000 f880 	bl	8008e0c <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 8008d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d12:	3301      	adds	r3, #1
 8008d14:	627b      	str	r3, [r7, #36]	; 0x24
 8008d16:	e7da      	b.n	8008cce <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x5a>
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
 8008d18:	6978      	ldr	r0, [r7, #20]
 8008d1a:	f000 f8f8 	bl	8008f0e <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	4618      	mov	r0, r3
 8008d22:	f000 f90a 	bl	8008f3a <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8008d26:	4603      	mov	r3, r0
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3728      	adds	r7, #40	; 0x28
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}
 8008d30:	c3c3c3c4 	.word	0xc3c3c3c4

08008d34 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>:
  static FixedPoint One() {
 8008d34:	b580      	push	{r7, lr}
 8008d36:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 8008d38:	f000 f945 	bl	8008fc6 <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7ff fe81 	bl	8008a46 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8008d44:	4603      	mov	r3, r0
  }
 8008d46:	4618      	mov	r0, r3
 8008d48:	bd80      	pop	{r7, pc}

08008d4a <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(RoundingHalfSum, RoundingHalfSum)
 8008d4a:	b590      	push	{r4, r7, lr}
 8008d4c:	b083      	sub	sp, #12
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
 8008d52:	6039      	str	r1, [r7, #0]
 8008d54:	1d3b      	adds	r3, r7, #4
 8008d56:	4618      	mov	r0, r3
 8008d58:	f7ff fe6a 	bl	8008a30 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	681c      	ldr	r4, [r3, #0]
 8008d60:	463b      	mov	r3, r7
 8008d62:	4618      	mov	r0, r3
 8008d64:	f7ff fe64 	bl	8008a30 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	4620      	mov	r0, r4
 8008d70:	f7ff ff22 	bl	8008bb8 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>
 8008d74:	4603      	mov	r3, r0
 8008d76:	4618      	mov	r0, r3
 8008d78:	f7ff ff6b 	bl	8008c52 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	4618      	mov	r0, r3
 8008d80:	370c      	adds	r7, #12
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd90      	pop	{r4, r7, pc}

08008d86 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 8008d86:	b590      	push	{r4, r7, lr}
 8008d88:	b085      	sub	sp, #20
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 8008d8e:	f107 030c 	add.w	r3, r7, #12
 8008d92:	4618      	mov	r0, r3
 8008d94:	f000 f91e 	bl	8008fd4 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8008d98:	4604      	mov	r4, r0
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f7fd fc22 	bl	80065e4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8008da0:	4603      	mov	r3, r0
 8008da2:	6023      	str	r3, [r4, #0]
    return retval;
 8008da4:	68fb      	ldr	r3, [r7, #12]
  }
 8008da6:	4618      	mov	r0, r3
 8008da8:	3714      	adds	r7, #20
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd90      	pop	{r4, r7, pc}

08008dae <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 8008dae:	b580      	push	{r7, lr}
 8008db0:	b082      	sub	sp, #8
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 8008db6:	2100      	movs	r1, #0
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f7fd fb5d 	bl	8006478 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8008dbe:	4603      	mov	r3, r0
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3708      	adds	r7, #8
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 8008dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008dca:	b085      	sub	sp, #20
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 8008dd2:	1d3b      	adds	r3, r7, #4
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f7ff fe2b 	bl	8008a30 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	681d      	ldr	r5, [r3, #0]
 8008dde:	463b      	mov	r3, r7
 8008de0:	4618      	mov	r0, r3
 8008de2:	f000 f8f7 	bl	8008fd4 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8008de6:	4603      	mov	r3, r0
 8008de8:	681e      	ldr	r6, [r3, #0]
 8008dea:	f107 030c 	add.w	r3, r7, #12
 8008dee:	4618      	mov	r0, r3
 8008df0:	f000 f8f0 	bl	8008fd4 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8008df4:	4604      	mov	r4, r0
 8008df6:	4631      	mov	r1, r6
 8008df8:	4628      	mov	r0, r5
 8008dfa:	f7fd fa49 	bl	8006290 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	6023      	str	r3, [r4, #0]
  return c;
 8008e02:	68fb      	ldr	r3, [r7, #12]
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3714      	adds	r7, #20
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008e0c <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 8008e0c:	b590      	push	{r4, r7, lr}
 8008e0e:	b083      	sub	sp, #12
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	6039      	str	r1, [r7, #0]
 8008e16:	1d3b      	adds	r3, r7, #4
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f000 f8db 	bl	8008fd4 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	681c      	ldr	r4, [r3, #0]
 8008e22:	463b      	mov	r3, r7
 8008e24:	4618      	mov	r0, r3
 8008e26:	f000 f8d5 	bl	8008fd4 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4619      	mov	r1, r3
 8008e30:	4620      	mov	r0, r4
 8008e32:	f7fd fc13 	bl	800665c <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8008e36:	4603      	mov	r3, r0
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f000 f8d6 	bl	8008fea <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	4618      	mov	r0, r3
 8008e42:	370c      	adds	r7, #12
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd90      	pop	{r4, r7, pc}

08008e48 <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>:
  static FixedPoint One() {
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 8008e4c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8008e50:	f7ff ff99 	bl	8008d86 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 8008e54:	4603      	mov	r3, r0
  }
 8008e56:	4618      	mov	r0, r3
 8008e58:	bd80      	pop	{r7, pc}

08008e5a <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 8008e5a:	b590      	push	{r4, r7, lr}
 8008e5c:	b083      	sub	sp, #12
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]
 8008e62:	6039      	str	r1, [r7, #0]
 8008e64:	1d3b      	adds	r3, r7, #4
 8008e66:	4618      	mov	r0, r3
 8008e68:	f000 f8b4 	bl	8008fd4 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	681c      	ldr	r4, [r3, #0]
 8008e70:	463b      	mov	r3, r7
 8008e72:	4618      	mov	r0, r3
 8008e74:	f000 f8ae 	bl	8008fd4 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4619      	mov	r1, r3
 8008e7e:	4620      	mov	r0, r4
 8008e80:	f7ff fe0e 	bl	8008aa0 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 8008e84:	4603      	mov	r3, r0
 8008e86:	4618      	mov	r0, r3
 8008e88:	f000 f8af 	bl	8008fea <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	4618      	mov	r0, r3
 8008e90:	370c      	adds	r7, #12
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd90      	pop	{r4, r7, pc}

08008e96 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 8008e96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e98:	b085      	sub	sp, #20
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	6078      	str	r0, [r7, #4]
 8008e9e:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 8008ea0:	1d3b      	adds	r3, r7, #4
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f000 f896 	bl	8008fd4 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	681d      	ldr	r5, [r3, #0]
 8008eac:	463b      	mov	r3, r7
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f000 f890 	bl	8008fd4 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	681e      	ldr	r6, [r3, #0]
 8008eb8:	f107 030c 	add.w	r3, r7, #12
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f000 f856 	bl	8008f6e <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 8008ec2:	4604      	mov	r4, r0
 8008ec4:	4631      	mov	r1, r6
 8008ec6:	4628      	mov	r0, r5
 8008ec8:	f7fd f9e2 	bl	8006290 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	6023      	str	r3, [r4, #0]
  return c;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3714      	adds	r7, #20
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008eda <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 8008eda:	b5b0      	push	{r4, r5, r7, lr}
 8008edc:	b084      	sub	sp, #16
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 8008ee2:	1d3b      	adds	r3, r7, #4
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f000 f842 	bl	8008f6e <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 8008eea:	4603      	mov	r3, r0
 8008eec:	681d      	ldr	r5, [r3, #0]
 8008eee:	f107 030c 	add.w	r3, r7, #12
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f000 f86e 	bl	8008fd4 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8008ef8:	4604      	mov	r4, r0
 8008efa:	4628      	mov	r0, r5
 8008efc:	f000 f886 	bl	800900c <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>
 8008f00:	4603      	mov	r3, r0
 8008f02:	6023      	str	r3, [r4, #0]
  return result;
 8008f04:	68fb      	ldr	r3, [r7, #12]
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3710      	adds	r7, #16
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bdb0      	pop	{r4, r5, r7, pc}

08008f0e <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tExponent + tIntegerBits> ExactMulByPot(
 8008f0e:	b590      	push	{r4, r7, lr}
 8008f10:	b085      	sub	sp, #20
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	6078      	str	r0, [r7, #4]
  c.raw() = a.raw();
 8008f16:	1d3b      	adds	r3, r7, #4
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f000 f85b 	bl	8008fd4 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8008f1e:	4604      	mov	r4, r0
 8008f20:	f107 030c 	add.w	r3, r7, #12
 8008f24:	4618      	mov	r0, r3
 8008f26:	f000 f87d 	bl	8009024 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 8008f2a:	4602      	mov	r2, r0
 8008f2c:	6823      	ldr	r3, [r4, #0]
 8008f2e:	6013      	str	r3, [r2, #0]
  return c;
 8008f30:	68fb      	ldr	r3, [r7, #12]
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3714      	adds	r7, #20
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd90      	pop	{r4, r7, pc}

08008f3a <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 8008f3a:	b5b0      	push	{r4, r5, r7, lr}
 8008f3c:	b084      	sub	sp, #16
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 8008f42:	1d3b      	adds	r3, r7, #4
 8008f44:	4618      	mov	r0, r3
 8008f46:	f000 f86d 	bl	8009024 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	681d      	ldr	r5, [r3, #0]
 8008f4e:	f107 030c 	add.w	r3, r7, #12
 8008f52:	4618      	mov	r0, r3
 8008f54:	f7ff fd6c 	bl	8008a30 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8008f58:	4604      	mov	r4, r0
 8008f5a:	4628      	mov	r0, r5
 8008f5c:	f000 f86d 	bl	800903a <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>
 8008f60:	4603      	mov	r3, r0
 8008f62:	6023      	str	r3, [r4, #0]
  return result;
 8008f64:	68fb      	ldr	r3, [r7, #12]
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3710      	adds	r7, #16
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bdb0      	pop	{r4, r5, r7, pc}

08008f6e <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>:
  RawType& raw() { return i_; }
 8008f6e:	b480      	push	{r7}
 8008f70:	b083      	sub	sp, #12
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	4618      	mov	r0, r3
 8008f7a:	370c      	adds	r7, #12
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr

08008f84 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>:
FixedPoint<tRawType, tIntegerBits> SelectUsingMask(
 8008f84:	b590      	push	{r4, r7, lr}
 8008f86:	b085      	sub	sp, #20
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	60f8      	str	r0, [r7, #12]
 8008f8c:	60b9      	str	r1, [r7, #8]
 8008f8e:	607a      	str	r2, [r7, #4]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 8008f90:	f107 0308 	add.w	r3, r7, #8
 8008f94:	4618      	mov	r0, r3
 8008f96:	f7ff fd4b 	bl	8008a30 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8008f9a:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8008f9c:	681c      	ldr	r4, [r3, #0]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 8008f9e:	1d3b      	adds	r3, r7, #4
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f7ff fd45 	bl	8008a30 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8008fa6:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	461a      	mov	r2, r3
 8008fac:	4621      	mov	r1, r4
 8008fae:	68f8      	ldr	r0, [r7, #12]
 8008fb0:	f7ff fdd7 	bl	8008b62 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f7ff fe4b 	bl	8008c52 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8008fbc:	4603      	mov	r3, r0
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3714      	adds	r7, #20
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd90      	pop	{r4, r7, pc}

08008fc6 <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>:
  static const ScalarRawType ScalarRawMax() {
 8008fc6:	b580      	push	{r7, lr}
 8008fc8:	af00      	add	r7, sp, #0
    return std::numeric_limits<ScalarRawType>::max();
 8008fca:	f7fc f971 	bl	80052b0 <_ZNSt14numeric_limitsIlE3maxEv>
 8008fce:	4603      	mov	r3, r0
  }
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	bd80      	pop	{r7, pc}

08008fd4 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>:
  RawType& raw() { return i_; }
 8008fd4:	b480      	push	{r7}
 8008fd6:	b083      	sub	sp, #12
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	4618      	mov	r0, r3
 8008fe0:	370c      	adds	r7, #12
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe8:	4770      	bx	lr

08008fea <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 8008fea:	b580      	push	{r7, lr}
 8008fec:	b084      	sub	sp, #16
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 8008ff2:	f107 030c 	add.w	r3, r7, #12
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f7ff ffec 	bl	8008fd4 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6013      	str	r3, [r2, #0]
    return retval;
 8009002:	68fb      	ldr	r3, [r7, #12]
  }
 8009004:	4618      	mov	r0, r3
 8009006:	3710      	adds	r7, #16
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800900c:	b580      	push	{r7, lr}
 800900e:	b082      	sub	sp, #8
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f000 f82f 	bl	8009078 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>
 800901a:	4603      	mov	r3, r0
}
 800901c:	4618      	mov	r0, r3
 800901e:	3708      	adds	r7, #8
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}

08009024 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>:
  RawType& raw() { return i_; }
 8009024:	b480      	push	{r7}
 8009026:	b083      	sub	sp, #12
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	4618      	mov	r0, r3
 8009030:	370c      	adds	r7, #12
 8009032:	46bd      	mov	sp, r7
 8009034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009038:	4770      	bx	lr

0800903a <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800903a:	b580      	push	{r7, lr}
 800903c:	b082      	sub	sp, #8
 800903e:	af00      	add	r7, sp, #0
 8009040:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f000 f85a 	bl	80090fc <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>
 8009048:	4603      	mov	r3, r0
}
 800904a:	4618      	mov	r0, r3
 800904c:	3708      	adds	r7, #8
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}

08009052 <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>:
tIntegerType MaskIfZero(tIntegerType a) {
 8009052:	b580      	push	{r7, lr}
 8009054:	b082      	sub	sp, #8
 8009056:	af00      	add	r7, sp, #0
 8009058:	6078      	str	r0, [r7, #4]
  return MaskIfNonZero<tIntegerType>(!a);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2b00      	cmp	r3, #0
 800905e:	bf0c      	ite	eq
 8009060:	2301      	moveq	r3, #1
 8009062:	2300      	movne	r3, #0
 8009064:	b2db      	uxtb	r3, r3
 8009066:	4618      	mov	r0, r3
 8009068:	f7fd fb1a 	bl	80066a0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800906c:	4603      	mov	r3, r0
}
 800906e:	4618      	mov	r0, r3
 8009070:	3708      	adds	r7, #8
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
	...

08009078 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8009078:	b580      	push	{r7, lr}
 800907a:	b08a      	sub	sp, #40	; 0x28
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 8009080:	f7fd f8e2 	bl	8006248 <_ZNSt14numeric_limitsIlE3minEv>
 8009084:	4603      	mov	r3, r0
 8009086:	4618      	mov	r0, r3
 8009088:	f7fd faac 	bl	80065e4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800908c:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 800908e:	f7fc f90f 	bl	80052b0 <_ZNSt14numeric_limitsIlE3maxEv>
 8009092:	4603      	mov	r3, r0
 8009094:	4618      	mov	r0, r3
 8009096:	f7fd faa5 	bl	80065e4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800909a:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 800909c:	2320      	movs	r3, #32
 800909e:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 80090a0:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80090a4:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 80090a6:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
 80090aa:	f7fd fa9b 	bl	80065e4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80090ae:	4603      	mov	r3, r0
 80090b0:	4619      	mov	r1, r3
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f7fd fae0 	bl	8006678 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 80090b8:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 80090ba:	480f      	ldr	r0, [pc, #60]	; (80090f8 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl+0x80>)
 80090bc:	f7fd fa92 	bl	80065e4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80090c0:	4603      	mov	r3, r0
 80090c2:	4619      	mov	r1, r3
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f7fd fab5 	bl	8006634 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 80090ca:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 80090cc:	2102      	movs	r1, #2
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f7ff fd01 	bl	8008ad6 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 80090d4:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 80090d6:	68fa      	ldr	r2, [r7, #12]
 80090d8:	6a39      	ldr	r1, [r7, #32]
 80090da:	6978      	ldr	r0, [r7, #20]
 80090dc:	f7ff fd41 	bl	8008b62 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 80090e0:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 80090e2:	68fa      	ldr	r2, [r7, #12]
 80090e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80090e6:	6938      	ldr	r0, [r7, #16]
 80090e8:	f7ff fd3b 	bl	8008b62 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 80090ec:	60f8      	str	r0, [r7, #12]
    return result;
 80090ee:	68fb      	ldr	r3, [r7, #12]
  }
 80090f0:	4618      	mov	r0, r3
 80090f2:	3728      	adds	r7, #40	; 0x28
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}
 80090f8:	e0000001 	.word	0xe0000001

080090fc <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b08a      	sub	sp, #40	; 0x28
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 8009104:	f7fd f8a0 	bl	8006248 <_ZNSt14numeric_limitsIlE3minEv>
 8009108:	4603      	mov	r3, r0
 800910a:	4618      	mov	r0, r3
 800910c:	f7fd fa6a 	bl	80065e4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8009110:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 8009112:	f7fc f8cd 	bl	80052b0 <_ZNSt14numeric_limitsIlE3maxEv>
 8009116:	4603      	mov	r3, r0
 8009118:	4618      	mov	r0, r3
 800911a:	f7fd fa63 	bl	80065e4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800911e:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 8009120:	2320      	movs	r3, #32
 8009122:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 8009124:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8009128:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 800912a:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 800912e:	f7fd fa59 	bl	80065e4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8009132:	4603      	mov	r3, r0
 8009134:	4619      	mov	r1, r3
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f7fd fa9e 	bl	8006678 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 800913c:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 800913e:	480f      	ldr	r0, [pc, #60]	; (800917c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl+0x80>)
 8009140:	f7fd fa50 	bl	80065e4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8009144:	4603      	mov	r3, r0
 8009146:	4619      	mov	r1, r3
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f7fd fa73 	bl	8006634 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 800914e:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 8009150:	2101      	movs	r1, #1
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f7ff fcbf 	bl	8008ad6 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 8009158:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 800915a:	68fa      	ldr	r2, [r7, #12]
 800915c:	6a39      	ldr	r1, [r7, #32]
 800915e:	6978      	ldr	r0, [r7, #20]
 8009160:	f7ff fcff 	bl	8008b62 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8009164:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 8009166:	68fa      	ldr	r2, [r7, #12]
 8009168:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800916a:	6938      	ldr	r0, [r7, #16]
 800916c:	f7ff fcf9 	bl	8008b62 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8009170:	60f8      	str	r0, [r7, #12]
    return result;
 8009172:	68fb      	ldr	r3, [r7, #12]
  }
 8009174:	4618      	mov	r0, r3
 8009176:	3728      	adds	r7, #40	; 0x28
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}
 800917c:	c0000001 	.word	0xc0000001

08009180 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
 8009180:	b580      	push	{r7, lr}
 8009182:	b08a      	sub	sp, #40	; 0x28
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
 8009188:	482c      	ldr	r0, [pc, #176]	; (800923c <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 800918a:	f7ff fc70 	bl	8008a6e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800918e:	4603      	mov	r3, r0
 8009190:	4618      	mov	r0, r3
 8009192:	f7ff fc58 	bl	8008a46 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8009196:	4603      	mov	r3, r0
 8009198:	627b      	str	r3, [r7, #36]	; 0x24
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
 800919a:	4829      	ldr	r0, [pc, #164]	; (8009240 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xc0>)
 800919c:	f7ff fc67 	bl	8008a6e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 80091a0:	4603      	mov	r3, r0
 80091a2:	4618      	mov	r0, r3
 80091a4:	f7ff fc4f 	bl	8008a46 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 80091a8:	4603      	mov	r3, r0
 80091aa:	623b      	str	r3, [r7, #32]
  F x = a + F::template ConstantPOT<-3>();
 80091ac:	f000 f86c 	bl	8009288 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>
 80091b0:	4603      	mov	r3, r0
 80091b2:	4619      	mov	r1, r3
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 f870 	bl	800929a <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 80091ba:	4603      	mov	r3, r0
 80091bc:	61fb      	str	r3, [r7, #28]
  F x2 = x * x;
 80091be:	69f9      	ldr	r1, [r7, #28]
 80091c0:	69f8      	ldr	r0, [r7, #28]
 80091c2:	f000 f83f 	bl	8009244 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80091c6:	4603      	mov	r3, r0
 80091c8:	61bb      	str	r3, [r7, #24]
  F x3 = x2 * x;
 80091ca:	69f9      	ldr	r1, [r7, #28]
 80091cc:	69b8      	ldr	r0, [r7, #24]
 80091ce:	f000 f839 	bl	8009244 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80091d2:	4603      	mov	r3, r0
 80091d4:	617b      	str	r3, [r7, #20]
  F x4 = x2 * x2;
 80091d6:	69b9      	ldr	r1, [r7, #24]
 80091d8:	69b8      	ldr	r0, [r7, #24]
 80091da:	f000 f833 	bl	8009244 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80091de:	4603      	mov	r3, r0
 80091e0:	613b      	str	r3, [r7, #16]
  F x4_over_4 = SaturatingRoundingMultiplyByPOT<-2>(x4);
 80091e2:	6938      	ldr	r0, [r7, #16]
 80091e4:	f000 f877 	bl	80092d6 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 80091e8:	4603      	mov	r3, r0
 80091ea:	60fb      	str	r3, [r7, #12]
      SaturatingRoundingMultiplyByPOT<-1>(
 80091ec:	6979      	ldr	r1, [r7, #20]
 80091ee:	68f8      	ldr	r0, [r7, #12]
 80091f0:	f000 f853 	bl	800929a <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 80091f4:	4603      	mov	r3, r0
 80091f6:	6a39      	ldr	r1, [r7, #32]
 80091f8:	4618      	mov	r0, r3
 80091fa:	f000 f823 	bl	8009244 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80091fe:	4603      	mov	r3, r0
 8009200:	69b9      	ldr	r1, [r7, #24]
 8009202:	4618      	mov	r0, r3
 8009204:	f000 f849 	bl	800929a <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8009208:	4603      	mov	r3, r0
 800920a:	4618      	mov	r0, r3
 800920c:	f000 f879 	bl	8009302 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 8009210:	4603      	mov	r3, r0
 8009212:	60bb      	str	r3, [r7, #8]
  return AddSaturatingIf16Bit(
 8009214:	68b9      	ldr	r1, [r7, #8]
 8009216:	69f8      	ldr	r0, [r7, #28]
 8009218:	f000 f83f 	bl	800929a <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800921c:	4603      	mov	r3, r0
 800921e:	4619      	mov	r1, r3
 8009220:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009222:	f000 f80f 	bl	8009244 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8009226:	4603      	mov	r3, r0
 8009228:	4619      	mov	r1, r3
 800922a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800922c:	f000 f87f 	bl	800932e <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8009230:	4603      	mov	r3, r0
}
 8009232:	4618      	mov	r0, r3
 8009234:	3728      	adds	r7, #40	; 0x28
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}
 800923a:	bf00      	nop
 800923c:	70f5a894 	.word	0x70f5a894
 8009240:	2aaaaaab 	.word	0x2aaaaaab

08009244 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 8009244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009246:	b085      	sub	sp, #20
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 800924e:	1d3b      	adds	r3, r7, #4
 8009250:	4618      	mov	r0, r3
 8009252:	f7ff fbed 	bl	8008a30 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8009256:	4603      	mov	r3, r0
 8009258:	681d      	ldr	r5, [r3, #0]
 800925a:	463b      	mov	r3, r7
 800925c:	4618      	mov	r0, r3
 800925e:	f7ff fbe7 	bl	8008a30 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8009262:	4603      	mov	r3, r0
 8009264:	681e      	ldr	r6, [r3, #0]
 8009266:	f107 030c 	add.w	r3, r7, #12
 800926a:	4618      	mov	r0, r3
 800926c:	f7ff fbe0 	bl	8008a30 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8009270:	4604      	mov	r4, r0
 8009272:	4631      	mov	r1, r6
 8009274:	4628      	mov	r0, r5
 8009276:	f7fd f80b 	bl	8006290 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800927a:	4603      	mov	r3, r0
 800927c:	6023      	str	r3, [r4, #0]
  return c;
 800927e:	68fb      	ldr	r3, [r7, #12]
}
 8009280:	4618      	mov	r0, r3
 8009282:	3714      	adds	r7, #20
 8009284:	46bd      	mov	sp, r7
 8009286:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009288 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>:
  static FixedPoint ConstantPOT() {
 8009288:	b580      	push	{r7, lr}
 800928a:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 800928c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8009290:	f7ff fbd9 	bl	8008a46 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8009294:	4603      	mov	r3, r0
  }
 8009296:	4618      	mov	r0, r3
 8009298:	bd80      	pop	{r7, pc}

0800929a <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 800929a:	b590      	push	{r4, r7, lr}
 800929c:	b083      	sub	sp, #12
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
 80092a2:	6039      	str	r1, [r7, #0]
 80092a4:	1d3b      	adds	r3, r7, #4
 80092a6:	4618      	mov	r0, r3
 80092a8:	f7ff fbc2 	bl	8008a30 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80092ac:	4603      	mov	r3, r0
 80092ae:	681c      	ldr	r4, [r3, #0]
 80092b0:	463b      	mov	r3, r7
 80092b2:	4618      	mov	r0, r3
 80092b4:	f7ff fbbc 	bl	8008a30 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80092b8:	4603      	mov	r3, r0
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4619      	mov	r1, r3
 80092be:	4620      	mov	r0, r4
 80092c0:	f7fd f9cc 	bl	800665c <_ZN8gemmlowp3AddIlEET_S1_S1_>
 80092c4:	4603      	mov	r3, r0
 80092c6:	4618      	mov	r0, r3
 80092c8:	f7ff fcc3 	bl	8008c52 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 80092cc:	4603      	mov	r3, r0
 80092ce:	4618      	mov	r0, r3
 80092d0:	370c      	adds	r7, #12
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd90      	pop	{r4, r7, pc}

080092d6 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 80092d6:	b580      	push	{r7, lr}
 80092d8:	b082      	sub	sp, #8
 80092da:	af00      	add	r7, sp, #0
 80092dc:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 80092de:	1d3b      	adds	r3, r7, #4
 80092e0:	4618      	mov	r0, r3
 80092e2:	f7ff fba5 	bl	8008a30 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80092e6:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	4618      	mov	r0, r3
 80092ec:	f000 f83d 	bl	800936a <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>
 80092f0:	4603      	mov	r3, r0
 80092f2:	4618      	mov	r0, r3
 80092f4:	f7ff fcad 	bl	8008c52 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 80092f8:	4603      	mov	r3, r0
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3708      	adds	r7, #8
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}

08009302 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 8009302:	b580      	push	{r7, lr}
 8009304:	b082      	sub	sp, #8
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 800930a:	1d3b      	adds	r3, r7, #4
 800930c:	4618      	mov	r0, r3
 800930e:	f7ff fb8f 	bl	8008a30 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8009312:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4618      	mov	r0, r3
 8009318:	f7ff fbb6 	bl	8008a88 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>
 800931c:	4603      	mov	r3, r0
 800931e:	4618      	mov	r0, r3
 8009320:	f7ff fc97 	bl	8008c52 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8009324:	4603      	mov	r3, r0
}
 8009326:	4618      	mov	r0, r3
 8009328:	3708      	adds	r7, #8
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}

0800932e <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
FixedPoint<tRawType, tIntegerBits> AddSaturatingIf16Bit(
 800932e:	b590      	push	{r4, r7, lr}
 8009330:	b083      	sub	sp, #12
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
 8009336:	6039      	str	r1, [r7, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 8009338:	1d3b      	adds	r3, r7, #4
 800933a:	4618      	mov	r0, r3
 800933c:	f7ff fb78 	bl	8008a30 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8009340:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8009342:	681c      	ldr	r4, [r3, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 8009344:	463b      	mov	r3, r7
 8009346:	4618      	mov	r0, r3
 8009348:	f7ff fb72 	bl	8008a30 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800934c:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4619      	mov	r1, r3
 8009352:	4620      	mov	r0, r4
 8009354:	f000 f815 	bl	8009382 <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>
 8009358:	4603      	mov	r3, r0
 800935a:	4618      	mov	r0, r3
 800935c:	f7ff fc79 	bl	8008c52 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8009360:	4603      	mov	r3, r0
}
 8009362:	4618      	mov	r0, r3
 8009364:	370c      	adds	r7, #12
 8009366:	46bd      	mov	sp, r7
 8009368:	bd90      	pop	{r4, r7, pc}

0800936a <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800936a:	b580      	push	{r7, lr}
 800936c:	b082      	sub	sp, #8
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 f813 	bl	800939e <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>
 8009378:	4603      	mov	r3, r0
}
 800937a:	4618      	mov	r0, r3
 800937c:	3708      	adds	r7, #8
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}

08009382 <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>:
IntegerType AddSaturatingIf16Bit(IntegerType a, IntegerType b) {
 8009382:	b580      	push	{r7, lr}
 8009384:	b082      	sub	sp, #8
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
 800938a:	6039      	str	r1, [r7, #0]
  return AddSaturatingIf16BitImpl<IntegerType, sizeof(ScalarType) == 2>::Run(a,
 800938c:	6839      	ldr	r1, [r7, #0]
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 f812 	bl	80093b8 <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>
 8009394:	4603      	mov	r3, r0
}
 8009396:	4618      	mov	r0, r3
 8009398:	3708      	adds	r7, #8
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}

0800939e <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800939e:	b580      	push	{r7, lr}
 80093a0:	b082      	sub	sp, #8
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 80093a6:	2102      	movs	r1, #2
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f7fd f865 	bl	8006478 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 80093ae:	4603      	mov	r3, r0
  }
 80093b0:	4618      	mov	r0, r3
 80093b2:	3708      	adds	r7, #8
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>:
  static IntegerType Run(IntegerType a, IntegerType b) { return Add(a, b); }
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b082      	sub	sp, #8
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	6039      	str	r1, [r7, #0]
 80093c2:	6839      	ldr	r1, [r7, #0]
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f7fd f949 	bl	800665c <_ZN8gemmlowp3AddIlEET_S1_S1_>
 80093ca:	4603      	mov	r3, r0
 80093cc:	4618      	mov	r0, r3
 80093ce:	3708      	adds	r7, #8
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}

080093d4 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
  }
}

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const float* input_data, const RuntimeShape& output_shape,
                    float* output_data) {
 80093d4:	b590      	push	{r4, r7, lr}
 80093d6:	ed2d 8b04 	vpush	{d8-d9}
 80093da:	b0a5      	sub	sp, #148	; 0x94
 80093dc:	af02      	add	r7, sp, #8
 80093de:	60f8      	str	r0, [r7, #12]
 80093e0:	60b9      	str	r1, [r7, #8]
 80093e2:	607a      	str	r2, [r7, #4]
 80093e4:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 80093e6:	68b8      	ldr	r0, [r7, #8]
 80093e8:	f7fc fe0d 	bl	8006006 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80093ec:	4603      	mov	r3, r0
 80093ee:	2b04      	cmp	r3, #4
 80093f0:	d001      	beq.n	80093f6 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x22>
 80093f2:	f005 fab3 	bl	800e95c <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 80093f6:	6838      	ldr	r0, [r7, #0]
 80093f8:	f7fc fe05 	bl	8006006 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80093fc:	4603      	mov	r3, r0
 80093fe:	2b04      	cmp	r3, #4
 8009400:	d001      	beq.n	8009406 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x32>
 8009402:	f005 faab 	bl	800e95c <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8009406:	2300      	movs	r3, #0
 8009408:	683a      	ldr	r2, [r7, #0]
 800940a:	2100      	movs	r1, #0
 800940c:	68b8      	ldr	r0, [r7, #8]
 800940e:	f7fd f98f 	bl	8006730 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8009412:	66f8      	str	r0, [r7, #108]	; 0x6c
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 8009414:	2303      	movs	r3, #3
 8009416:	683a      	ldr	r2, [r7, #0]
 8009418:	2103      	movs	r1, #3
 800941a:	68b8      	ldr	r0, [r7, #8]
 800941c:	f7fd f988 	bl	8006730 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8009420:	66b8      	str	r0, [r7, #104]	; 0x68
  const int input_height = input_shape.Dims(1);
 8009422:	2101      	movs	r1, #1
 8009424:	68b8      	ldr	r0, [r7, #8]
 8009426:	f7fc fdfa 	bl	800601e <_ZNK6tflite12RuntimeShape4DimsEi>
 800942a:	6678      	str	r0, [r7, #100]	; 0x64
  const int input_width = input_shape.Dims(2);
 800942c:	2102      	movs	r1, #2
 800942e:	68b8      	ldr	r0, [r7, #8]
 8009430:	f7fc fdf5 	bl	800601e <_ZNK6tflite12RuntimeShape4DimsEi>
 8009434:	6638      	str	r0, [r7, #96]	; 0x60
  const int output_height = output_shape.Dims(1);
 8009436:	2101      	movs	r1, #1
 8009438:	6838      	ldr	r0, [r7, #0]
 800943a:	f7fc fdf0 	bl	800601e <_ZNK6tflite12RuntimeShape4DimsEi>
 800943e:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_width = output_shape.Dims(2);
 8009440:	2102      	movs	r1, #2
 8009442:	6838      	ldr	r0, [r7, #0]
 8009444:	f7fc fdeb 	bl	800601e <_ZNK6tflite12RuntimeShape4DimsEi>
 8009448:	65b8      	str	r0, [r7, #88]	; 0x58
  const int stride_height = params.stride_height;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	68db      	ldr	r3, [r3, #12]
 800944e:	657b      	str	r3, [r7, #84]	; 0x54
  const int stride_width = params.stride_width;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	691b      	ldr	r3, [r3, #16]
 8009454:	653b      	str	r3, [r7, #80]	; 0x50
  for (int batch = 0; batch < batches; ++batch) {
 8009456:	2300      	movs	r3, #0
 8009458:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800945c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009460:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009462:	429a      	cmp	r2, r3
 8009464:	f280 80d4 	bge.w	8009610 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x23c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8009468:	2300      	movs	r3, #0
 800946a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800946e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009472:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009474:	429a      	cmp	r2, r3
 8009476:	f280 80c5 	bge.w	8009604 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x230>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800947a:	2300      	movs	r3, #0
 800947c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800947e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009480:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009482:	429a      	cmp	r2, r3
 8009484:	f280 80b8 	bge.w	80095f8 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x224>
        for (int channel = 0; channel < depth; ++channel) {
 8009488:	2300      	movs	r3, #0
 800948a:	67bb      	str	r3, [r7, #120]	; 0x78
 800948c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800948e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009490:	429a      	cmp	r2, r3
 8009492:	f280 80ad 	bge.w	80095f0 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x21c>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
 8009496:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009498:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800949a:	fb02 f303 	mul.w	r3, r2, r3
 800949e:	68fa      	ldr	r2, [r7, #12]
 80094a0:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
          const int in_x_origin =
 80094a4:	1a9b      	subs	r3, r3, r2
 80094a6:	64fb      	str	r3, [r7, #76]	; 0x4c
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
 80094a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80094ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80094ae:	fb02 f303 	mul.w	r3, r2, r3
 80094b2:	68fa      	ldr	r2, [r7, #12]
 80094b4:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
          const int in_y_origin =
 80094b8:	1a9b      	subs	r3, r3, r2
 80094ba:	64bb      	str	r3, [r7, #72]	; 0x48
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
 80094bc:	2300      	movs	r3, #0
 80094be:	61bb      	str	r3, [r7, #24]
 80094c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094c2:	425b      	negs	r3, r3
 80094c4:	61fb      	str	r3, [r7, #28]
 80094c6:	f107 021c 	add.w	r2, r7, #28
 80094ca:	f107 0318 	add.w	r3, r7, #24
 80094ce:	4611      	mov	r1, r2
 80094d0:	4618      	mov	r0, r3
 80094d2:	f7fc fcd7 	bl	8005e84 <_ZSt3maxIiERKT_S2_S2_>
 80094d6:	4603      	mov	r3, r0
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	647b      	str	r3, [r7, #68]	; 0x44
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	f103 0018 	add.w	r0, r3, #24
 80094e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80094e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094e6:	1ad3      	subs	r3, r2, r3
 80094e8:	623b      	str	r3, [r7, #32]
 80094ea:	f107 0320 	add.w	r3, r7, #32
 80094ee:	4619      	mov	r1, r3
 80094f0:	f000 fcba 	bl	8009e68 <_ZSt3minIiERKT_S2_S2_>
 80094f4:	4603      	mov	r3, r0
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	643b      	str	r3, [r7, #64]	; 0x40
          const int filter_y_start = std::max(0, -in_y_origin);
 80094fa:	2300      	movs	r3, #0
 80094fc:	627b      	str	r3, [r7, #36]	; 0x24
 80094fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009500:	425b      	negs	r3, r3
 8009502:	62bb      	str	r3, [r7, #40]	; 0x28
 8009504:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009508:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800950c:	4611      	mov	r1, r2
 800950e:	4618      	mov	r0, r3
 8009510:	f7fc fcb8 	bl	8005e84 <_ZSt3maxIiERKT_S2_S2_>
 8009514:	4603      	mov	r3, r0
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	63fb      	str	r3, [r7, #60]	; 0x3c
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	f103 0014 	add.w	r0, r3, #20
 8009520:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009522:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009524:	1ad3      	subs	r3, r2, r3
 8009526:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009528:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800952c:	4619      	mov	r1, r3
 800952e:	f000 fc9b 	bl	8009e68 <_ZSt3minIiERKT_S2_S2_>
 8009532:	4603      	mov	r3, r0
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	63bb      	str	r3, [r7, #56]	; 0x38
          float max = std::numeric_limits<float>::lowest();
 8009538:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 800953c:	617b      	str	r3, [r7, #20]
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 800953e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009540:	677b      	str	r3, [r7, #116]	; 0x74
 8009542:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009546:	429a      	cmp	r2, r3
 8009548:	da2b      	bge.n	80095a2 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1ce>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 800954a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800954c:	673b      	str	r3, [r7, #112]	; 0x70
 800954e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009552:	429a      	cmp	r2, r3
 8009554:	da21      	bge.n	800959a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1c6>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
 8009556:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009558:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800955a:	4413      	add	r3, r2
 800955c:	637b      	str	r3, [r7, #52]	; 0x34
              const int in_y = in_y_origin + filter_y;
 800955e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009560:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009562:	4413      	add	r3, r2
 8009564:	633b      	str	r3, [r7, #48]	; 0x30
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
 8009566:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009568:	9300      	str	r3, [sp, #0]
 800956a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800956c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800956e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8009572:	68b8      	ldr	r0, [r7, #8]
 8009574:	f7fc ff08 	bl	8006388 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8009578:	4603      	mov	r3, r0
 800957a:	009b      	lsls	r3, r3, #2
 800957c:	687a      	ldr	r2, [r7, #4]
 800957e:	441a      	add	r2, r3
 8009580:	f107 0314 	add.w	r3, r7, #20
 8009584:	4611      	mov	r1, r2
 8009586:	4618      	mov	r0, r3
 8009588:	f7fc f82e 	bl	80055e8 <_ZSt3maxIfERKT_S2_S2_>
 800958c:	4603      	mov	r3, r0
              max = std::max(
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	617b      	str	r3, [r7, #20]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8009592:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009594:	3301      	adds	r3, #1
 8009596:	673b      	str	r3, [r7, #112]	; 0x70
 8009598:	e7d9      	b.n	800954e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x17a>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 800959a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800959c:	3301      	adds	r3, #1
 800959e:	677b      	str	r3, [r7, #116]	; 0x74
 80095a0:	e7cf      	b.n	8009542 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x16e>
            }
          }
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
              ActivationFunctionWithMinMax(max, params.float_activation_min,
 80095a2:	ed97 8a05 	vldr	s16, [r7, #20]
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	edd3 8a09 	vldr	s17, [r3, #36]	; 0x24
                                           params.float_activation_max);
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	ed93 9a0a 	vldr	s18, [r3, #40]	; 0x28
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 80095b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80095b4:	9300      	str	r3, [sp, #0]
 80095b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80095b8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80095bc:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80095c0:	6838      	ldr	r0, [r7, #0]
 80095c2:	f7fc fee1 	bl	8006388 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 80095c6:	4603      	mov	r3, r0
 80095c8:	009b      	lsls	r3, r3, #2
 80095ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80095ce:	18d4      	adds	r4, r2, r3
              ActivationFunctionWithMinMax(max, params.float_activation_min,
 80095d0:	eeb0 1a49 	vmov.f32	s2, s18
 80095d4:	eef0 0a68 	vmov.f32	s1, s17
 80095d8:	eeb0 0a48 	vmov.f32	s0, s16
 80095dc:	f7fc ff2c 	bl	8006438 <_ZN6tflite28ActivationFunctionWithMinMaxEfff>
 80095e0:	eef0 7a40 	vmov.f32	s15, s0
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 80095e4:	edc4 7a00 	vstr	s15, [r4]
        for (int channel = 0; channel < depth; ++channel) {
 80095e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80095ea:	3301      	adds	r3, #1
 80095ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80095ee:	e74d      	b.n	800948c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xb8>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 80095f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80095f2:	3301      	adds	r3, #1
 80095f4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80095f6:	e742      	b.n	800947e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xaa>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 80095f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80095fc:	3301      	adds	r3, #1
 80095fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009602:	e734      	b.n	800946e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x9a>
  for (int batch = 0; batch < batches; ++batch) {
 8009604:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009608:	3301      	adds	r3, #1
 800960a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800960e:	e725      	b.n	800945c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x88>
        }
      }
    }
  }
}
 8009610:	bf00      	nop
 8009612:	378c      	adds	r7, #140	; 0x8c
 8009614:	46bd      	mov	sp, r7
 8009616:	ecbd 8b04 	vpop	{d8-d9}
 800961a:	bd90      	pop	{r4, r7, pc}

0800961c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>:

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const uint8* input_data, const RuntimeShape& output_shape,
                    uint8* output_data) {
 800961c:	b580      	push	{r7, lr}
 800961e:	b0a4      	sub	sp, #144	; 0x90
 8009620:	af02      	add	r7, sp, #8
 8009622:	60f8      	str	r0, [r7, #12]
 8009624:	60b9      	str	r1, [r7, #8]
 8009626:	607a      	str	r2, [r7, #4]
 8009628:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_LE(params.quantized_activation_min,
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	69da      	ldr	r2, [r3, #28]
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	6a1b      	ldr	r3, [r3, #32]
 8009632:	429a      	cmp	r2, r3
 8009634:	dd01      	ble.n	800963a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1e>
 8009636:	f005 f991 	bl	800e95c <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_GE(params.quantized_activation_min, 0);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	69db      	ldr	r3, [r3, #28]
 800963e:	2b00      	cmp	r3, #0
 8009640:	da01      	bge.n	8009646 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x2a>
 8009642:	f005 f98b 	bl	800e95c <abort>
  TFLITE_DCHECK_LE(params.quantized_activation_max, 255);
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	6a1b      	ldr	r3, [r3, #32]
 800964a:	2bff      	cmp	r3, #255	; 0xff
 800964c:	dd01      	ble.n	8009652 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x36>
 800964e:	f005 f985 	bl	800e95c <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8009652:	68b8      	ldr	r0, [r7, #8]
 8009654:	f7fc fcd7 	bl	8006006 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8009658:	4603      	mov	r3, r0
 800965a:	2b04      	cmp	r3, #4
 800965c:	d001      	beq.n	8009662 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x46>
 800965e:	f005 f97d 	bl	800e95c <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8009662:	6838      	ldr	r0, [r7, #0]
 8009664:	f7fc fccf 	bl	8006006 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8009668:	4603      	mov	r3, r0
 800966a:	2b04      	cmp	r3, #4
 800966c:	d001      	beq.n	8009672 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x56>
 800966e:	f005 f975 	bl	800e95c <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8009672:	2300      	movs	r3, #0
 8009674:	683a      	ldr	r2, [r7, #0]
 8009676:	2100      	movs	r1, #0
 8009678:	68b8      	ldr	r0, [r7, #8]
 800967a:	f7fd f859 	bl	8006730 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800967e:	66f8      	str	r0, [r7, #108]	; 0x6c
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 8009680:	2303      	movs	r3, #3
 8009682:	683a      	ldr	r2, [r7, #0]
 8009684:	2103      	movs	r1, #3
 8009686:	68b8      	ldr	r0, [r7, #8]
 8009688:	f7fd f852 	bl	8006730 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800968c:	66b8      	str	r0, [r7, #104]	; 0x68
  const int input_height = input_shape.Dims(1);
 800968e:	2101      	movs	r1, #1
 8009690:	68b8      	ldr	r0, [r7, #8]
 8009692:	f7fc fcc4 	bl	800601e <_ZNK6tflite12RuntimeShape4DimsEi>
 8009696:	6678      	str	r0, [r7, #100]	; 0x64
  const int input_width = input_shape.Dims(2);
 8009698:	2102      	movs	r1, #2
 800969a:	68b8      	ldr	r0, [r7, #8]
 800969c:	f7fc fcbf 	bl	800601e <_ZNK6tflite12RuntimeShape4DimsEi>
 80096a0:	6638      	str	r0, [r7, #96]	; 0x60
  const int output_height = output_shape.Dims(1);
 80096a2:	2101      	movs	r1, #1
 80096a4:	6838      	ldr	r0, [r7, #0]
 80096a6:	f7fc fcba 	bl	800601e <_ZNK6tflite12RuntimeShape4DimsEi>
 80096aa:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_width = output_shape.Dims(2);
 80096ac:	2102      	movs	r1, #2
 80096ae:	6838      	ldr	r0, [r7, #0]
 80096b0:	f7fc fcb5 	bl	800601e <_ZNK6tflite12RuntimeShape4DimsEi>
 80096b4:	65b8      	str	r0, [r7, #88]	; 0x58
  const int stride_height = params.stride_height;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	68db      	ldr	r3, [r3, #12]
 80096ba:	657b      	str	r3, [r7, #84]	; 0x54
  const int stride_width = params.stride_width;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	691b      	ldr	r3, [r3, #16]
 80096c0:	653b      	str	r3, [r7, #80]	; 0x50
  for (int batch = 0; batch < batches; ++batch) {
 80096c2:	2300      	movs	r3, #0
 80096c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80096c8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80096cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096ce:	429a      	cmp	r2, r3
 80096d0:	f280 80e1 	bge.w	8009896 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x27a>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 80096d4:	2300      	movs	r3, #0
 80096d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80096da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80096de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80096e0:	429a      	cmp	r2, r3
 80096e2:	f280 80d2 	bge.w	800988a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x26e>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 80096e6:	2300      	movs	r3, #0
 80096e8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80096ea:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80096ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80096ee:	429a      	cmp	r2, r3
 80096f0:	f280 80c5 	bge.w	800987e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x262>
        for (int channel = 0; channel < depth; ++channel) {
 80096f4:	2300      	movs	r3, #0
 80096f6:	67bb      	str	r3, [r7, #120]	; 0x78
 80096f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80096fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80096fc:	429a      	cmp	r2, r3
 80096fe:	f280 80ba 	bge.w	8009876 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x25a>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
 8009702:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009704:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009706:	fb02 f303 	mul.w	r3, r2, r3
 800970a:	68fa      	ldr	r2, [r7, #12]
 800970c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
          const int in_x_origin =
 8009710:	1a9b      	subs	r3, r3, r2
 8009712:	64fb      	str	r3, [r7, #76]	; 0x4c
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
 8009714:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009718:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800971a:	fb02 f303 	mul.w	r3, r2, r3
 800971e:	68fa      	ldr	r2, [r7, #12]
 8009720:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
          const int in_y_origin =
 8009724:	1a9b      	subs	r3, r3, r2
 8009726:	64bb      	str	r3, [r7, #72]	; 0x48
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
 8009728:	2300      	movs	r3, #0
 800972a:	617b      	str	r3, [r7, #20]
 800972c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800972e:	425b      	negs	r3, r3
 8009730:	61bb      	str	r3, [r7, #24]
 8009732:	f107 0218 	add.w	r2, r7, #24
 8009736:	f107 0314 	add.w	r3, r7, #20
 800973a:	4611      	mov	r1, r2
 800973c:	4618      	mov	r0, r3
 800973e:	f7fc fba1 	bl	8005e84 <_ZSt3maxIiERKT_S2_S2_>
 8009742:	4603      	mov	r3, r0
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	647b      	str	r3, [r7, #68]	; 0x44
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f103 0018 	add.w	r0, r3, #24
 800974e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009750:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009752:	1ad3      	subs	r3, r2, r3
 8009754:	61fb      	str	r3, [r7, #28]
 8009756:	f107 031c 	add.w	r3, r7, #28
 800975a:	4619      	mov	r1, r3
 800975c:	f000 fb84 	bl	8009e68 <_ZSt3minIiERKT_S2_S2_>
 8009760:	4603      	mov	r3, r0
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	643b      	str	r3, [r7, #64]	; 0x40
          const int filter_y_start = std::max(0, -in_y_origin);
 8009766:	2300      	movs	r3, #0
 8009768:	623b      	str	r3, [r7, #32]
 800976a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800976c:	425b      	negs	r3, r3
 800976e:	627b      	str	r3, [r7, #36]	; 0x24
 8009770:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009774:	f107 0320 	add.w	r3, r7, #32
 8009778:	4611      	mov	r1, r2
 800977a:	4618      	mov	r0, r3
 800977c:	f7fc fb82 	bl	8005e84 <_ZSt3maxIiERKT_S2_S2_>
 8009780:	4603      	mov	r3, r0
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	63fb      	str	r3, [r7, #60]	; 0x3c
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	f103 0014 	add.w	r0, r3, #20
 800978c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800978e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009790:	1ad3      	subs	r3, r2, r3
 8009792:	62bb      	str	r3, [r7, #40]	; 0x28
 8009794:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009798:	4619      	mov	r1, r3
 800979a:	f000 fb65 	bl	8009e68 <_ZSt3minIiERKT_S2_S2_>
 800979e:	4603      	mov	r3, r0
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	63bb      	str	r3, [r7, #56]	; 0x38
          uint8 max = 0;
 80097a4:	2300      	movs	r3, #0
 80097a6:	74fb      	strb	r3, [r7, #19]
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 80097a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097aa:	677b      	str	r3, [r7, #116]	; 0x74
 80097ac:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80097ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b0:	429a      	cmp	r2, r3
 80097b2:	da2b      	bge.n	800980c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1f0>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 80097b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097b6:	673b      	str	r3, [r7, #112]	; 0x70
 80097b8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80097ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097bc:	429a      	cmp	r2, r3
 80097be:	da21      	bge.n	8009804 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1e8>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
 80097c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80097c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80097c4:	4413      	add	r3, r2
 80097c6:	637b      	str	r3, [r7, #52]	; 0x34
              const int in_y = in_y_origin + filter_y;
 80097c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80097ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80097cc:	4413      	add	r3, r2
 80097ce:	633b      	str	r3, [r7, #48]	; 0x30
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
 80097d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80097d2:	9300      	str	r3, [sp, #0]
 80097d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097d8:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80097dc:	68b8      	ldr	r0, [r7, #8]
 80097de:	f7fc fdd3 	bl	8006388 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 80097e2:	4603      	mov	r3, r0
 80097e4:	461a      	mov	r2, r3
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	441a      	add	r2, r3
 80097ea:	f107 0313 	add.w	r3, r7, #19
 80097ee:	4611      	mov	r1, r2
 80097f0:	4618      	mov	r0, r3
 80097f2:	f000 fb4d 	bl	8009e90 <_ZSt3maxIhERKT_S2_S2_>
 80097f6:	4603      	mov	r3, r0
              max = std::max(
 80097f8:	781b      	ldrb	r3, [r3, #0]
 80097fa:	74fb      	strb	r3, [r7, #19]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 80097fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80097fe:	3301      	adds	r3, #1
 8009800:	673b      	str	r3, [r7, #112]	; 0x70
 8009802:	e7d9      	b.n	80097b8 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x19c>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8009804:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009806:	3301      	adds	r3, #1
 8009808:	677b      	str	r3, [r7, #116]	; 0x74
 800980a:	e7cf      	b.n	80097ac <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x190>
            }
          }
          max = std::max<uint8>(max, params.quantized_activation_min);
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	69db      	ldr	r3, [r3, #28]
 8009810:	b2db      	uxtb	r3, r3
 8009812:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8009816:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 800981a:	f107 0313 	add.w	r3, r7, #19
 800981e:	4611      	mov	r1, r2
 8009820:	4618      	mov	r0, r3
 8009822:	f000 fb35 	bl	8009e90 <_ZSt3maxIhERKT_S2_S2_>
 8009826:	4603      	mov	r3, r0
 8009828:	781b      	ldrb	r3, [r3, #0]
 800982a:	74fb      	strb	r3, [r7, #19]
          max = std::min<uint8>(max, params.quantized_activation_max);
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	6a1b      	ldr	r3, [r3, #32]
 8009830:	b2db      	uxtb	r3, r3
 8009832:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009836:	f107 022f 	add.w	r2, r7, #47	; 0x2f
 800983a:	f107 0313 	add.w	r3, r7, #19
 800983e:	4611      	mov	r1, r2
 8009840:	4618      	mov	r0, r3
 8009842:	f000 fb39 	bl	8009eb8 <_ZSt3minIhERKT_S2_S2_>
 8009846:	4603      	mov	r3, r0
 8009848:	781b      	ldrb	r3, [r3, #0]
 800984a:	74fb      	strb	r3, [r7, #19]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 800984c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800984e:	9300      	str	r3, [sp, #0]
 8009850:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009852:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009856:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800985a:	6838      	ldr	r0, [r7, #0]
 800985c:	f7fc fd94 	bl	8006388 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8009860:	4603      	mov	r3, r0
 8009862:	461a      	mov	r2, r3
 8009864:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009868:	4413      	add	r3, r2
 800986a:	7cfa      	ldrb	r2, [r7, #19]
 800986c:	701a      	strb	r2, [r3, #0]
        for (int channel = 0; channel < depth; ++channel) {
 800986e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009870:	3301      	adds	r3, #1
 8009872:	67bb      	str	r3, [r7, #120]	; 0x78
 8009874:	e740      	b.n	80096f8 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xdc>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8009876:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009878:	3301      	adds	r3, #1
 800987a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800987c:	e735      	b.n	80096ea <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xce>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800987e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009882:	3301      	adds	r3, #1
 8009884:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009888:	e727      	b.n	80096da <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xbe>
  for (int batch = 0; batch < batches; ++batch) {
 800988a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800988e:	3301      	adds	r3, #1
 8009890:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009894:	e718      	b.n	80096c8 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xac>
              static_cast<uint8>(max);
        }
      }
    }
  }
}
 8009896:	bf00      	nop
 8009898:	3788      	adds	r7, #136	; 0x88
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}

0800989e <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa>:
  }
}

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const int8* input_data, const RuntimeShape& output_shape,
                    int8* output_data) {
 800989e:	b590      	push	{r4, r7, lr}
 80098a0:	b0a5      	sub	sp, #148	; 0x94
 80098a2:	af02      	add	r7, sp, #8
 80098a4:	60f8      	str	r0, [r7, #12]
 80098a6:	60b9      	str	r1, [r7, #8]
 80098a8:	607a      	str	r2, [r7, #4]
 80098aa:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_LE(params.quantized_activation_min,
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	69da      	ldr	r2, [r3, #28]
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	6a1b      	ldr	r3, [r3, #32]
 80098b4:	429a      	cmp	r2, r3
 80098b6:	dd01      	ble.n	80098bc <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1e>
 80098b8:	f005 f850 	bl	800e95c <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_GE(params.quantized_activation_min,
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	69dc      	ldr	r4, [r3, #28]
 80098c0:	f7fb fecf 	bl	8005662 <_ZNSt14numeric_limitsIaE3minEv>
 80098c4:	4603      	mov	r3, r0
 80098c6:	429c      	cmp	r4, r3
 80098c8:	da01      	bge.n	80098ce <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x30>
 80098ca:	f005 f847 	bl	800e95c <abort>
                   std::numeric_limits<int8_t>::min());
  TFLITE_DCHECK_LE(params.quantized_activation_max,
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	6a1c      	ldr	r4, [r3, #32]
 80098d2:	f7fb fecf 	bl	8005674 <_ZNSt14numeric_limitsIaE3maxEv>
 80098d6:	4603      	mov	r3, r0
 80098d8:	429c      	cmp	r4, r3
 80098da:	dd01      	ble.n	80098e0 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x42>
 80098dc:	f005 f83e 	bl	800e95c <abort>
                   std::numeric_limits<int8_t>::max());
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 80098e0:	68b8      	ldr	r0, [r7, #8]
 80098e2:	f7fc fb90 	bl	8006006 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80098e6:	4603      	mov	r3, r0
 80098e8:	2b04      	cmp	r3, #4
 80098ea:	d001      	beq.n	80098f0 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x52>
 80098ec:	f005 f836 	bl	800e95c <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 80098f0:	6838      	ldr	r0, [r7, #0]
 80098f2:	f7fc fb88 	bl	8006006 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80098f6:	4603      	mov	r3, r0
 80098f8:	2b04      	cmp	r3, #4
 80098fa:	d001      	beq.n	8009900 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x62>
 80098fc:	f005 f82e 	bl	800e95c <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8009900:	2300      	movs	r3, #0
 8009902:	683a      	ldr	r2, [r7, #0]
 8009904:	2100      	movs	r1, #0
 8009906:	68b8      	ldr	r0, [r7, #8]
 8009908:	f7fc ff12 	bl	8006730 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800990c:	66f8      	str	r0, [r7, #108]	; 0x6c
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 800990e:	2303      	movs	r3, #3
 8009910:	683a      	ldr	r2, [r7, #0]
 8009912:	2103      	movs	r1, #3
 8009914:	68b8      	ldr	r0, [r7, #8]
 8009916:	f7fc ff0b 	bl	8006730 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800991a:	66b8      	str	r0, [r7, #104]	; 0x68
  const int input_height = input_shape.Dims(1);
 800991c:	2101      	movs	r1, #1
 800991e:	68b8      	ldr	r0, [r7, #8]
 8009920:	f7fc fb7d 	bl	800601e <_ZNK6tflite12RuntimeShape4DimsEi>
 8009924:	6678      	str	r0, [r7, #100]	; 0x64
  const int input_width = input_shape.Dims(2);
 8009926:	2102      	movs	r1, #2
 8009928:	68b8      	ldr	r0, [r7, #8]
 800992a:	f7fc fb78 	bl	800601e <_ZNK6tflite12RuntimeShape4DimsEi>
 800992e:	6638      	str	r0, [r7, #96]	; 0x60
  const int output_height = output_shape.Dims(1);
 8009930:	2101      	movs	r1, #1
 8009932:	6838      	ldr	r0, [r7, #0]
 8009934:	f7fc fb73 	bl	800601e <_ZNK6tflite12RuntimeShape4DimsEi>
 8009938:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_width = output_shape.Dims(2);
 800993a:	2102      	movs	r1, #2
 800993c:	6838      	ldr	r0, [r7, #0]
 800993e:	f7fc fb6e 	bl	800601e <_ZNK6tflite12RuntimeShape4DimsEi>
 8009942:	65b8      	str	r0, [r7, #88]	; 0x58
  const int stride_height = params.stride_height;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	68db      	ldr	r3, [r3, #12]
 8009948:	657b      	str	r3, [r7, #84]	; 0x54
  const int stride_width = params.stride_width;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	691b      	ldr	r3, [r3, #16]
 800994e:	653b      	str	r3, [r7, #80]	; 0x50
  for (int batch = 0; batch < batches; ++batch) {
 8009950:	2300      	movs	r3, #0
 8009952:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009956:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800995a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800995c:	429a      	cmp	r2, r3
 800995e:	f280 80e5 	bge.w	8009b2c <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x28e>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8009962:	2300      	movs	r3, #0
 8009964:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009968:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800996c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800996e:	429a      	cmp	r2, r3
 8009970:	f280 80d6 	bge.w	8009b20 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x282>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8009974:	2300      	movs	r3, #0
 8009976:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009978:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800997a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800997c:	429a      	cmp	r2, r3
 800997e:	f280 80c9 	bge.w	8009b14 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x276>
        for (int channel = 0; channel < depth; ++channel) {
 8009982:	2300      	movs	r3, #0
 8009984:	67bb      	str	r3, [r7, #120]	; 0x78
 8009986:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009988:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800998a:	429a      	cmp	r2, r3
 800998c:	f280 80be 	bge.w	8009b0c <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x26e>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
 8009990:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009992:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009994:	fb02 f303 	mul.w	r3, r2, r3
 8009998:	68fa      	ldr	r2, [r7, #12]
 800999a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
          const int in_x_origin =
 800999e:	1a9b      	subs	r3, r3, r2
 80099a0:	64fb      	str	r3, [r7, #76]	; 0x4c
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
 80099a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80099a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80099a8:	fb02 f303 	mul.w	r3, r2, r3
 80099ac:	68fa      	ldr	r2, [r7, #12]
 80099ae:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
          const int in_y_origin =
 80099b2:	1a9b      	subs	r3, r3, r2
 80099b4:	64bb      	str	r3, [r7, #72]	; 0x48
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
 80099b6:	2300      	movs	r3, #0
 80099b8:	617b      	str	r3, [r7, #20]
 80099ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099bc:	425b      	negs	r3, r3
 80099be:	61bb      	str	r3, [r7, #24]
 80099c0:	f107 0218 	add.w	r2, r7, #24
 80099c4:	f107 0314 	add.w	r3, r7, #20
 80099c8:	4611      	mov	r1, r2
 80099ca:	4618      	mov	r0, r3
 80099cc:	f7fc fa5a 	bl	8005e84 <_ZSt3maxIiERKT_S2_S2_>
 80099d0:	4603      	mov	r3, r0
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	647b      	str	r3, [r7, #68]	; 0x44
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	f103 0018 	add.w	r0, r3, #24
 80099dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80099de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099e0:	1ad3      	subs	r3, r2, r3
 80099e2:	61fb      	str	r3, [r7, #28]
 80099e4:	f107 031c 	add.w	r3, r7, #28
 80099e8:	4619      	mov	r1, r3
 80099ea:	f000 fa3d 	bl	8009e68 <_ZSt3minIiERKT_S2_S2_>
 80099ee:	4603      	mov	r3, r0
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	643b      	str	r3, [r7, #64]	; 0x40
          const int filter_y_start = std::max(0, -in_y_origin);
 80099f4:	2300      	movs	r3, #0
 80099f6:	623b      	str	r3, [r7, #32]
 80099f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099fa:	425b      	negs	r3, r3
 80099fc:	627b      	str	r3, [r7, #36]	; 0x24
 80099fe:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009a02:	f107 0320 	add.w	r3, r7, #32
 8009a06:	4611      	mov	r1, r2
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f7fc fa3b 	bl	8005e84 <_ZSt3maxIiERKT_S2_S2_>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	63fb      	str	r3, [r7, #60]	; 0x3c
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f103 0014 	add.w	r0, r3, #20
 8009a1a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009a1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a1e:	1ad3      	subs	r3, r2, r3
 8009a20:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009a26:	4619      	mov	r1, r3
 8009a28:	f000 fa1e 	bl	8009e68 <_ZSt3minIiERKT_S2_S2_>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	63bb      	str	r3, [r7, #56]	; 0x38
          int8_t max = std::numeric_limits<int8_t>::lowest();
 8009a32:	2380      	movs	r3, #128	; 0x80
 8009a34:	74fb      	strb	r3, [r7, #19]
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8009a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a38:	677b      	str	r3, [r7, #116]	; 0x74
 8009a3a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a3e:	429a      	cmp	r2, r3
 8009a40:	da2c      	bge.n	8009a9c <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1fe>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8009a42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a44:	673b      	str	r3, [r7, #112]	; 0x70
 8009a46:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009a48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	da22      	bge.n	8009a94 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1f6>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
 8009a4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009a50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009a52:	4413      	add	r3, r2
 8009a54:	637b      	str	r3, [r7, #52]	; 0x34
              const int in_y = in_y_origin + filter_y;
 8009a56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a5a:	4413      	add	r3, r2
 8009a5c:	633b      	str	r3, [r7, #48]	; 0x30
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
 8009a5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a60:	9300      	str	r3, [sp, #0]
 8009a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a66:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8009a6a:	68b8      	ldr	r0, [r7, #8]
 8009a6c:	f7fc fc8c 	bl	8006388 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8009a70:	4603      	mov	r3, r0
 8009a72:	461a      	mov	r2, r3
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	441a      	add	r2, r3
 8009a78:	f107 0313 	add.w	r3, r7, #19
 8009a7c:	4611      	mov	r1, r2
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f000 fa2e 	bl	8009ee0 <_ZSt3maxIaERKT_S2_S2_>
 8009a84:	4603      	mov	r3, r0
              max = std::max(
 8009a86:	f993 3000 	ldrsb.w	r3, [r3]
 8009a8a:	74fb      	strb	r3, [r7, #19]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8009a8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009a8e:	3301      	adds	r3, #1
 8009a90:	673b      	str	r3, [r7, #112]	; 0x70
 8009a92:	e7d8      	b.n	8009a46 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1a8>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8009a94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a96:	3301      	adds	r3, #1
 8009a98:	677b      	str	r3, [r7, #116]	; 0x74
 8009a9a:	e7ce      	b.n	8009a3a <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x19c>
            }
          }
          max = std::max<int8_t>(max, params.quantized_activation_min);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	69db      	ldr	r3, [r3, #28]
 8009aa0:	b25b      	sxtb	r3, r3
 8009aa2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8009aa6:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 8009aaa:	f107 0313 	add.w	r3, r7, #19
 8009aae:	4611      	mov	r1, r2
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f000 fa15 	bl	8009ee0 <_ZSt3maxIaERKT_S2_S2_>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	f993 3000 	ldrsb.w	r3, [r3]
 8009abc:	74fb      	strb	r3, [r7, #19]
          max = std::min<int8_t>(max, params.quantized_activation_max);
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	6a1b      	ldr	r3, [r3, #32]
 8009ac2:	b25b      	sxtb	r3, r3
 8009ac4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009ac8:	f107 022f 	add.w	r2, r7, #47	; 0x2f
 8009acc:	f107 0313 	add.w	r3, r7, #19
 8009ad0:	4611      	mov	r1, r2
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f000 fa1a 	bl	8009f0c <_ZSt3minIaERKT_S2_S2_>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	f993 3000 	ldrsb.w	r3, [r3]
 8009ade:	74fb      	strb	r3, [r7, #19]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 8009ae0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ae2:	9300      	str	r3, [sp, #0]
 8009ae4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009ae6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009aea:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8009aee:	6838      	ldr	r0, [r7, #0]
 8009af0:	f7fc fc4a 	bl	8006388 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8009af4:	4603      	mov	r3, r0
 8009af6:	461a      	mov	r2, r3
 8009af8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009afc:	4413      	add	r3, r2
 8009afe:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8009b02:	701a      	strb	r2, [r3, #0]
        for (int channel = 0; channel < depth; ++channel) {
 8009b04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b06:	3301      	adds	r3, #1
 8009b08:	67bb      	str	r3, [r7, #120]	; 0x78
 8009b0a:	e73c      	b.n	8009986 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xe8>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8009b0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009b0e:	3301      	adds	r3, #1
 8009b10:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009b12:	e731      	b.n	8009978 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xda>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8009b14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009b18:	3301      	adds	r3, #1
 8009b1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009b1e:	e723      	b.n	8009968 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xca>
  for (int batch = 0; batch < batches; ++batch) {
 8009b20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009b24:	3301      	adds	r3, #1
 8009b26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009b2a:	e714      	b.n	8009956 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xb8>
              static_cast<int8_t>(max);
        }
      }
    }
  }
}
 8009b2c:	bf00      	nop
 8009b2e:	378c      	adds	r7, #140	; 0x8c
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd90      	pop	{r4, r7, pc}

08009b34 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorSC_PNS3_6OpDataE>:
};

TfLiteStatus CalculateOpData(const TfLiteContext* context,
                             const TfLitePoolParams* params,
                             const TfLiteTensor* input,
                             const TfLiteTensor* output, OpData* data) {
 8009b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b36:	b097      	sub	sp, #92	; 0x5c
 8009b38:	af08      	add	r7, sp, #32
 8009b3a:	6278      	str	r0, [r7, #36]	; 0x24
 8009b3c:	6239      	str	r1, [r7, #32]
 8009b3e:	61fa      	str	r2, [r7, #28]
 8009b40:	61bb      	str	r3, [r7, #24]
  // input: batch, height, width, channel
  int height = SizeOfDimension(input, 1);
 8009b42:	2101      	movs	r1, #1
 8009b44:	69f8      	ldr	r0, [r7, #28]
 8009b46:	f7fb fdba 	bl	80056be <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 8009b4a:	6378      	str	r0, [r7, #52]	; 0x34
  int width = SizeOfDimension(input, 2);
 8009b4c:	2102      	movs	r1, #2
 8009b4e:	69f8      	ldr	r0, [r7, #28]
 8009b50:	f7fb fdb5 	bl	80056be <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 8009b54:	6338      	str	r0, [r7, #48]	; 0x30

  int out_height, out_width;

  data->padding = ComputePaddingHeightWidth(
      params->stride_height, params->stride_width,
 8009b56:	6a3b      	ldr	r3, [r7, #32]
 8009b58:	689d      	ldr	r5, [r3, #8]
 8009b5a:	6a3b      	ldr	r3, [r7, #32]
 8009b5c:	685e      	ldr	r6, [r3, #4]
      /*dilation_rate_height=*/1,
      /*dilation_rate_width=*/1, height, width, params->filter_height,
 8009b5e:	6a3b      	ldr	r3, [r7, #32]
 8009b60:	691b      	ldr	r3, [r3, #16]
      params->filter_width, params->padding, &out_height, &out_width);
 8009b62:	6a3a      	ldr	r2, [r7, #32]
 8009b64:	68d2      	ldr	r2, [r2, #12]
 8009b66:	6a39      	ldr	r1, [r7, #32]
 8009b68:	7809      	ldrb	r1, [r1, #0]
 8009b6a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8009b6c:	6078      	str	r0, [r7, #4]
 8009b6e:	f107 0408 	add.w	r4, r7, #8
 8009b72:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8009b76:	9007      	str	r0, [sp, #28]
 8009b78:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8009b7c:	9006      	str	r0, [sp, #24]
 8009b7e:	9105      	str	r1, [sp, #20]
 8009b80:	9204      	str	r2, [sp, #16]
 8009b82:	9303      	str	r3, [sp, #12]
 8009b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b86:	9302      	str	r3, [sp, #8]
 8009b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b8a:	9301      	str	r3, [sp, #4]
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	9300      	str	r3, [sp, #0]
 8009b90:	2301      	movs	r3, #1
 8009b92:	4632      	mov	r2, r6
 8009b94:	4629      	mov	r1, r5
 8009b96:	4620      	mov	r0, r4
 8009b98:	f7fd fb5f 	bl	800725a <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>
 8009b9c:	687c      	ldr	r4, [r7, #4]
 8009b9e:	f107 0308 	add.w	r3, r7, #8
 8009ba2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009ba4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  return kTfLiteOk;
 8009ba8:	2300      	movs	r3, #0
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	373c      	adds	r7, #60	; 0x3c
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009bb2 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_112MaxEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS3_6OpDataEPK12TfLiteTensorPSC_>:
  }
}

void MaxEvalFloat(TfLiteContext* context, TfLiteNode* node,
                  TfLitePoolParams* params, OpData* data,
                  const TfLiteTensor* input, TfLiteTensor* output) {
 8009bb2:	b590      	push	{r4, r7, lr}
 8009bb4:	b0a1      	sub	sp, #132	; 0x84
 8009bb6:	af02      	add	r7, sp, #8
 8009bb8:	60f8      	str	r0, [r7, #12]
 8009bba:	60b9      	str	r1, [r7, #8]
 8009bbc:	607a      	str	r2, [r7, #4]
 8009bbe:	603b      	str	r3, [r7, #0]
  float activation_min, activation_max;
  CalculateActivationRange(params->activation, &activation_min,
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	7d1b      	ldrb	r3, [r3, #20]
 8009bc4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8009bc8:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f7fc fcc7 	bl	8006560 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &activation_max);

  tflite::PoolParams op_params;
  op_params.stride_height = params->stride_height;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	689b      	ldr	r3, [r3, #8]
 8009bd6:	623b      	str	r3, [r7, #32]
  op_params.stride_width = params->stride_width;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	685b      	ldr	r3, [r3, #4]
 8009bdc:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.filter_height = params->filter_height;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	691b      	ldr	r3, [r3, #16]
 8009be2:	62bb      	str	r3, [r7, #40]	; 0x28
  op_params.filter_width = params->filter_width;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	68db      	ldr	r3, [r3, #12]
 8009be8:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.padding_values.height = data->padding.height;
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	685b      	ldr	r3, [r3, #4]
 8009bee:	b21b      	sxth	r3, r3
 8009bf0:	833b      	strh	r3, [r7, #24]
  op_params.padding_values.width = data->padding.width;
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	b21b      	sxth	r3, r3
 8009bf8:	82fb      	strh	r3, [r7, #22]
  op_params.float_activation_min = activation_min;
 8009bfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bfc:	63bb      	str	r3, [r7, #56]	; 0x38
  op_params.float_activation_max = activation_max;
 8009bfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c00:	63fb      	str	r3, [r7, #60]	; 0x3c
  reference_ops::MaxPool(op_params, GetTensorShape(input),
 8009c02:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009c06:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f7fc faba 	bl	8006184 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8009c10:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8009c14:	f7fc fad4 	bl	80061c0 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 8009c18:	4604      	mov	r4, r0
                         GetTensorData<float>(input), GetTensorShape(output),
 8009c1a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009c1e:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8009c22:	4618      	mov	r0, r3
 8009c24:	f7fc faae 	bl	8006184 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::MaxPool(op_params, GetTensorShape(input),
 8009c28:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8009c2c:	f7fc fad9 	bl	80061e2 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 8009c30:	4602      	mov	r2, r0
 8009c32:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009c36:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8009c3a:	f107 0014 	add.w	r0, r7, #20
 8009c3e:	9200      	str	r2, [sp, #0]
 8009c40:	4622      	mov	r2, r4
 8009c42:	f7ff fbc7 	bl	80093d4 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>
                         GetTensorData<float>(input), GetTensorShape(output),
 8009c46:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f7fc f9c5 	bl	8005fda <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::MaxPool(op_params, GetTensorShape(input),
 8009c50:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009c54:	4618      	mov	r0, r3
 8009c56:	f7fc f9c0 	bl	8005fda <_ZN6tflite12RuntimeShapeD1Ev>
                         GetTensorData<float>(output));
}
 8009c5a:	bf00      	nop
 8009c5c:	377c      	adds	r7, #124	; 0x7c
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd90      	pop	{r4, r7, pc}

08009c62 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_116MaxEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS3_6OpDataEPK12TfLiteTensorPSC_>:

void MaxEvalQuantized(TfLiteContext* context, TfLiteNode* node,
                      TfLitePoolParams* params, OpData* data,
                      const TfLiteTensor* input, TfLiteTensor* output) {
 8009c62:	b590      	push	{r4, r7, lr}
 8009c64:	b0ad      	sub	sp, #180	; 0xb4
 8009c66:	af02      	add	r7, sp, #8
 8009c68:	60f8      	str	r0, [r7, #12]
 8009c6a:	60b9      	str	r1, [r7, #8]
 8009c6c:	607a      	str	r2, [r7, #4]
 8009c6e:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(input->type == kTfLiteUInt8 || input->type == kTfLiteInt8);
 8009c70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009c74:	781b      	ldrb	r3, [r3, #0]
 8009c76:	2b03      	cmp	r3, #3
 8009c78:	d006      	beq.n	8009c88 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_116MaxEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS3_6OpDataEPK12TfLiteTensorPSC_+0x26>
 8009c7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009c7e:	781b      	ldrb	r3, [r3, #0]
 8009c80:	2b09      	cmp	r3, #9
 8009c82:	d001      	beq.n	8009c88 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_116MaxEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS3_6OpDataEPK12TfLiteTensorPSC_+0x26>
 8009c84:	f004 fe6a 	bl	800e95c <abort>

  int32_t activation_min, activation_max;
  (void)CalculateActivationRangeQuantized(context, params->activation, output,
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	7d19      	ldrb	r1, [r3, #20]
 8009c8c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8009c90:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009c94:	9300      	str	r3, [sp, #0]
 8009c96:	4613      	mov	r3, r2
 8009c98:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009c9c:	68f8      	ldr	r0, [r7, #12]
 8009c9e:	f7fc f89d 	bl	8005ddc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
                                          &activation_min, &activation_max);

  tflite::PoolParams op_params;
  op_params.stride_height = params->stride_height;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	689b      	ldr	r3, [r3, #8]
 8009ca6:	623b      	str	r3, [r7, #32]
  op_params.stride_width = params->stride_width;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.filter_height = params->filter_height;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	691b      	ldr	r3, [r3, #16]
 8009cb2:	62bb      	str	r3, [r7, #40]	; 0x28
  op_params.filter_width = params->filter_width;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	68db      	ldr	r3, [r3, #12]
 8009cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.padding_values.height = data->padding.height;
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	b21b      	sxth	r3, r3
 8009cc0:	833b      	strh	r3, [r7, #24]
  op_params.padding_values.width = data->padding.width;
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	b21b      	sxth	r3, r3
 8009cc8:	82fb      	strh	r3, [r7, #22]
  op_params.quantized_activation_min = activation_min;
 8009cca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ccc:	633b      	str	r3, [r7, #48]	; 0x30
  op_params.quantized_activation_max = activation_max;
 8009cce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009cd0:	637b      	str	r3, [r7, #52]	; 0x34

  if (input->type == kTfLiteUInt8) {
 8009cd2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	2b03      	cmp	r3, #3
 8009cda:	d12c      	bne.n	8009d36 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_116MaxEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS3_6OpDataEPK12TfLiteTensorPSC_+0xd4>
    reference_ops::MaxPool(
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
 8009cdc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009ce0:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f7fc fa4d 	bl	8006184 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    reference_ops::MaxPool(
 8009cea:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8009cee:	f7fc f931 	bl	8005f54 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 8009cf2:	4604      	mov	r4, r0
        GetTensorShape(output), GetTensorData<uint8_t>(output));
 8009cf4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009cf8:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f7fc fa41 	bl	8006184 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    reference_ops::MaxPool(
 8009d02:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8009d06:	f7fc f936 	bl	8005f76 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>
 8009d0a:	4602      	mov	r2, r0
 8009d0c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009d10:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8009d14:	f107 0014 	add.w	r0, r7, #20
 8009d18:	9200      	str	r2, [sp, #0]
 8009d1a:	4622      	mov	r2, r4
 8009d1c:	f7ff fc7e 	bl	800961c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>
        GetTensorShape(output), GetTensorData<uint8_t>(output));
 8009d20:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009d24:	4618      	mov	r0, r3
 8009d26:	f7fc f958 	bl	8005fda <_ZN6tflite12RuntimeShapeD1Ev>
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
 8009d2a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f7fc f953 	bl	8005fda <_ZN6tflite12RuntimeShapeD1Ev>
  } else {
    reference_integer_ops::MaxPool(
        op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
        GetTensorShape(output), GetTensorData<int8_t>(output));
  }
}
 8009d34:	e02b      	b.n	8009d8e <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_116MaxEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS3_6OpDataEPK12TfLiteTensorPSC_+0x12c>
        op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
 8009d36:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8009d3a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f7fc fa20 	bl	8006184 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    reference_integer_ops::MaxPool(
 8009d44:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8009d48:	f7fc fa5c 	bl	8006204 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 8009d4c:	4604      	mov	r4, r0
        GetTensorShape(output), GetTensorData<int8_t>(output));
 8009d4e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8009d52:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8009d56:	4618      	mov	r0, r3
 8009d58:	f7fc fa14 	bl	8006184 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    reference_integer_ops::MaxPool(
 8009d5c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8009d60:	f7fc fa61 	bl	8006226 <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>
 8009d64:	4602      	mov	r2, r0
 8009d66:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8009d6a:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8009d6e:	f107 0014 	add.w	r0, r7, #20
 8009d72:	9200      	str	r2, [sp, #0]
 8009d74:	4622      	mov	r2, r4
 8009d76:	f7ff fd92 	bl	800989e <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa>
        GetTensorShape(output), GetTensorData<int8_t>(output));
 8009d7a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f7fc f92b 	bl	8005fda <_ZN6tflite12RuntimeShapeD1Ev>
        op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
 8009d84:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f7fc f926 	bl	8005fda <_ZN6tflite12RuntimeShapeD1Ev>
}
 8009d8e:	bf00      	nop
 8009d90:	37ac      	adds	r7, #172	; 0xac
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd90      	pop	{r4, r7, pc}
	...

08009d98 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode>:
      return kTfLiteError;
  }
  return kTfLiteOk;
}

TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
 8009d98:	b590      	push	{r4, r7, lr}
 8009d9a:	b08d      	sub	sp, #52	; 0x34
 8009d9c:	af02      	add	r7, sp, #8
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	6039      	str	r1, [r7, #0]
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	695b      	ldr	r3, [r3, #20]
 8009da6:	627b      	str	r3, [r7, #36]	; 0x24
  OpData data;

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8009da8:	2200      	movs	r2, #0
 8009daa:	6839      	ldr	r1, [r7, #0]
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f7fc f8a5 	bl	8005efc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8009db2:	6238      	str	r0, [r7, #32]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8009db4:	2200      	movs	r2, #0
 8009db6:	6839      	ldr	r1, [r7, #0]
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f7fc f8b5 	bl	8005f28 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8009dbe:	61f8      	str	r0, [r7, #28]

  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, &data));
 8009dc0:	f107 0308 	add.w	r3, r7, #8
 8009dc4:	9300      	str	r3, [sp, #0]
 8009dc6:	69fb      	ldr	r3, [r7, #28]
 8009dc8:	6a3a      	ldr	r2, [r7, #32]
 8009dca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f7ff feb1 	bl	8009b34 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorSC_PNS3_6OpDataE>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	76fb      	strb	r3, [r7, #27]
 8009dd6:	7efb      	ldrb	r3, [r7, #27]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d001      	beq.n	8009de0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x48>
 8009ddc:	7efb      	ldrb	r3, [r7, #27]
 8009dde:	e033      	b.n	8009e48 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0>

  switch (input->type) {
 8009de0:	6a3b      	ldr	r3, [r7, #32]
 8009de2:	781b      	ldrb	r3, [r3, #0]
 8009de4:	2b09      	cmp	r3, #9
 8009de6:	d013      	beq.n	8009e10 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x78>
 8009de8:	2b09      	cmp	r3, #9
 8009dea:	dc1e      	bgt.n	8009e2a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x92>
 8009dec:	2b01      	cmp	r3, #1
 8009dee:	d002      	beq.n	8009df6 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x5e>
 8009df0:	2b03      	cmp	r3, #3
 8009df2:	d00d      	beq.n	8009e10 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x78>
 8009df4:	e019      	b.n	8009e2a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x92>
    case kTfLiteFloat32:
      MaxEvalFloat(context, node, params, &data, input, output);
 8009df6:	f107 0208 	add.w	r2, r7, #8
 8009dfa:	69fb      	ldr	r3, [r7, #28]
 8009dfc:	9301      	str	r3, [sp, #4]
 8009dfe:	6a3b      	ldr	r3, [r7, #32]
 8009e00:	9300      	str	r3, [sp, #0]
 8009e02:	4613      	mov	r3, r2
 8009e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e06:	6839      	ldr	r1, [r7, #0]
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f7ff fed2 	bl	8009bb2 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_112MaxEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS3_6OpDataEPK12TfLiteTensorPSC_>
      break;
 8009e0e:	e01a      	b.n	8009e46 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xae>
    case kTfLiteUInt8:
    case kTfLiteInt8:
      MaxEvalQuantized(context, node, params, &data, input, output);
 8009e10:	f107 0208 	add.w	r2, r7, #8
 8009e14:	69fb      	ldr	r3, [r7, #28]
 8009e16:	9301      	str	r3, [sp, #4]
 8009e18:	6a3b      	ldr	r3, [r7, #32]
 8009e1a:	9300      	str	r3, [sp, #0]
 8009e1c:	4613      	mov	r3, r2
 8009e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e20:	6839      	ldr	r1, [r7, #0]
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f7ff ff1d 	bl	8009c62 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_116MaxEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS3_6OpDataEPK12TfLiteTensorPSC_>
      break;
 8009e28:	e00d      	b.n	8009e46 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xae>
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s not currently supported.",
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	695c      	ldr	r4, [r3, #20]
 8009e2e:	6a3b      	ldr	r3, [r7, #32]
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	4618      	mov	r0, r3
 8009e34:	f7fb f9de 	bl	80051f4 <TfLiteTypeGetName>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	461a      	mov	r2, r3
 8009e3c:	4904      	ldr	r1, [pc, #16]	; (8009e50 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb8>)
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 8009e42:	2301      	movs	r3, #1
 8009e44:	e000      	b.n	8009e48 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0>
  }
  return kTfLiteOk;
 8009e46:	2300      	movs	r3, #0
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	372c      	adds	r7, #44	; 0x2c
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd90      	pop	{r4, r7, pc}
 8009e50:	080111c4 	.word	0x080111c4

08009e54 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv>:
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}

TfLiteRegistration* Register_MAX_POOL_2D() {
 8009e54:	b480      	push	{r7}
 8009e56:	af00      	add	r7, sp, #0
                                 /*invoke=*/pooling::MaxEval,
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
 8009e58:	4b02      	ldr	r3, [pc, #8]	; (8009e64 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv+0x10>)
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	4770      	bx	lr
 8009e64:	20006c94 	.word	0x20006c94

08009e68 <_ZSt3minIiERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8009e68:	b480      	push	{r7}
 8009e6a:	b083      	sub	sp, #12
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
 8009e70:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	681a      	ldr	r2, [r3, #0]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	da01      	bge.n	8009e82 <_ZSt3minIiERKT_S2_S2_+0x1a>
	return __b;
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	e000      	b.n	8009e84 <_ZSt3minIiERKT_S2_S2_+0x1c>
      return __a;
 8009e82:	687b      	ldr	r3, [r7, #4]
    }
 8009e84:	4618      	mov	r0, r3
 8009e86:	370c      	adds	r7, #12
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8e:	4770      	bx	lr

08009e90 <_ZSt3maxIhERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8009e90:	b480      	push	{r7}
 8009e92:	b083      	sub	sp, #12
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
 8009e98:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	781a      	ldrb	r2, [r3, #0]
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	781b      	ldrb	r3, [r3, #0]
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	d201      	bcs.n	8009eaa <_ZSt3maxIhERKT_S2_S2_+0x1a>
	return __b;
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	e000      	b.n	8009eac <_ZSt3maxIhERKT_S2_S2_+0x1c>
      return __a;
 8009eaa:	687b      	ldr	r3, [r7, #4]
    }
 8009eac:	4618      	mov	r0, r3
 8009eae:	370c      	adds	r7, #12
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb6:	4770      	bx	lr

08009eb8 <_ZSt3minIhERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8009eb8:	b480      	push	{r7}
 8009eba:	b083      	sub	sp, #12
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	781a      	ldrb	r2, [r3, #0]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	781b      	ldrb	r3, [r3, #0]
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	d201      	bcs.n	8009ed2 <_ZSt3minIhERKT_S2_S2_+0x1a>
	return __b;
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	e000      	b.n	8009ed4 <_ZSt3minIhERKT_S2_S2_+0x1c>
      return __a;
 8009ed2:	687b      	ldr	r3, [r7, #4]
    }
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	370c      	adds	r7, #12
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ede:	4770      	bx	lr

08009ee0 <_ZSt3maxIaERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8009ee0:	b480      	push	{r7}
 8009ee2:	b083      	sub	sp, #12
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f993 2000 	ldrsb.w	r2, [r3]
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	f993 3000 	ldrsb.w	r3, [r3]
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	da01      	bge.n	8009efe <_ZSt3maxIaERKT_S2_S2_+0x1e>
	return __b;
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	e000      	b.n	8009f00 <_ZSt3maxIaERKT_S2_S2_+0x20>
      return __a;
 8009efe:	687b      	ldr	r3, [r7, #4]
    }
 8009f00:	4618      	mov	r0, r3
 8009f02:	370c      	adds	r7, #12
 8009f04:	46bd      	mov	sp, r7
 8009f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0a:	4770      	bx	lr

08009f0c <_ZSt3minIaERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8009f0c:	b480      	push	{r7}
 8009f0e:	b083      	sub	sp, #12
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	f993 2000 	ldrsb.w	r2, [r3]
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f993 3000 	ldrsb.w	r3, [r3]
 8009f22:	429a      	cmp	r2, r3
 8009f24:	da01      	bge.n	8009f2a <_ZSt3minIaERKT_S2_S2_+0x1e>
	return __b;
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	e000      	b.n	8009f2c <_ZSt3minIaERKT_S2_S2_+0x20>
      return __a;
 8009f2a:	687b      	ldr	r3, [r7, #4]
    }
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	370c      	adds	r7, #12
 8009f30:	46bd      	mov	sp, r7
 8009f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f36:	4770      	bx	lr

08009f38 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>:
namespace reshape {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
 8009f38:	b5b0      	push	{r4, r5, r7, lr}
 8009f3a:	b08e      	sub	sp, #56	; 0x38
 8009f3c:	af04      	add	r7, sp, #16
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	6039      	str	r1, [r7, #0]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8009f42:	2200      	movs	r2, #0
 8009f44:	6839      	ldr	r1, [r7, #0]
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f7fb ffd8 	bl	8005efc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8009f4c:	61b8      	str	r0, [r7, #24]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8009f4e:	2200      	movs	r2, #0
 8009f50:	6839      	ldr	r1, [r7, #0]
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f7fb ffe8 	bl	8005f28 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8009f58:	6178      	str	r0, [r7, #20]
  // Tensorflow's Reshape allows one of the shape components to have the
  // special -1 value, meaning it will be calculated automatically based on the
  // input. Here we calculate what that dimension should be so that the number
  // of output elements in the same as the number of input elements.
  int num_input_elements = NumElements(input);
 8009f5a:	69b8      	ldr	r0, [r7, #24]
 8009f5c:	f7fb fbf6 	bl	800574c <_ZN6tflite11NumElementsEPK12TfLiteTensor>
 8009f60:	4602      	mov	r2, r0
 8009f62:	460b      	mov	r3, r1
 8009f64:	4613      	mov	r3, r2
 8009f66:	613b      	str	r3, [r7, #16]
  TfLiteIntArray* output_shape = output->dims;
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	689b      	ldr	r3, [r3, #8]
 8009f6c:	60fb      	str	r3, [r7, #12]

  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 8009f6e:	6838      	ldr	r0, [r7, #0]
 8009f70:	f7fc fbc4 	bl	80066fc <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8009f74:	4603      	mov	r3, r0
      output_shape->size == 1 && output_shape->data[0] == 0) {
 8009f76:	2b01      	cmp	r3, #1
 8009f78:	d109      	bne.n	8009f8e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x56>
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 8009f7e:	2b01      	cmp	r3, #1
 8009f80:	d105      	bne.n	8009f8e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x56>
      output_shape->size == 1 && output_shape->data[0] == 0) {
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d101      	bne.n	8009f8e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x56>
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	e000      	b.n	8009f90 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x58>
 8009f8e:	2300      	movs	r3, #0
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d002      	beq.n	8009f9a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x62>
    // Legacy tflite models use a shape parameter of [0] to indicate scalars,
    // so adjust accordingly. TODO(b/111614235): Allow zero-sized buffers during
    // toco conversion.
    output_shape->size = 0;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2200      	movs	r2, #0
 8009f98:	601a      	str	r2, [r3, #0]
  }

  int num_output_elements = 1;
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	627b      	str	r3, [r7, #36]	; 0x24
  int stretch_dim = -1;
 8009f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8009fa2:	623b      	str	r3, [r7, #32]
  for (int i = 0; i < output_shape->size; ++i) {
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	61fb      	str	r3, [r7, #28]
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	69fa      	ldr	r2, [r7, #28]
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	da2b      	bge.n	800a00a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xd2>
    int value = output_shape->data[i];
 8009fb2:	68fa      	ldr	r2, [r7, #12]
 8009fb4:	69fb      	ldr	r3, [r7, #28]
 8009fb6:	009b      	lsls	r3, r3, #2
 8009fb8:	4413      	add	r3, r2
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	60bb      	str	r3, [r7, #8]
    if (value == -1) {
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fc4:	d118      	bne.n	8009ff8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xc0>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
 8009fc6:	6a3b      	ldr	r3, [r7, #32]
 8009fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fcc:	d011      	beq.n	8009ff2 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xba>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	695c      	ldr	r4, [r3, #20]
 8009fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8009fd6:	9303      	str	r3, [sp, #12]
 8009fd8:	6a3b      	ldr	r3, [r7, #32]
 8009fda:	9302      	str	r3, [sp, #8]
 8009fdc:	4b33      	ldr	r3, [pc, #204]	; (800a0ac <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x174>)
 8009fde:	9301      	str	r3, [sp, #4]
 8009fe0:	4b33      	ldr	r3, [pc, #204]	; (800a0b0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x178>)
 8009fe2:	9300      	str	r3, [sp, #0]
 8009fe4:	2335      	movs	r3, #53	; 0x35
 8009fe6:	4a33      	ldr	r2, [pc, #204]	; (800a0b4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x17c>)
 8009fe8:	4933      	ldr	r1, [pc, #204]	; (800a0b8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x180>)
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	47a0      	blx	r4
 8009fee:	2301      	movs	r3, #1
 8009ff0:	e058      	b.n	800a0a4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x16c>
      stretch_dim = i;
 8009ff2:	69fb      	ldr	r3, [r7, #28]
 8009ff4:	623b      	str	r3, [r7, #32]
 8009ff6:	e004      	b.n	800a002 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xca>
    } else {
      num_output_elements *= value;
 8009ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffa:	68ba      	ldr	r2, [r7, #8]
 8009ffc:	fb02 f303 	mul.w	r3, r2, r3
 800a000:	627b      	str	r3, [r7, #36]	; 0x24
  for (int i = 0; i < output_shape->size; ++i) {
 800a002:	69fb      	ldr	r3, [r7, #28]
 800a004:	3301      	adds	r3, #1
 800a006:	61fb      	str	r3, [r7, #28]
 800a008:	e7ce      	b.n	8009fa8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x70>
    }
  }
  if (stretch_dim != -1) {
 800a00a:	6a3b      	ldr	r3, [r7, #32]
 800a00c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a010:	d011      	beq.n	800a036 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xfe>
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
 800a012:	693a      	ldr	r2, [r7, #16]
 800a014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a016:	fb92 f2f3 	sdiv	r2, r2, r3
 800a01a:	68f9      	ldr	r1, [r7, #12]
 800a01c:	6a3b      	ldr	r3, [r7, #32]
 800a01e:	009b      	lsls	r3, r3, #2
 800a020:	440b      	add	r3, r1
 800a022:	605a      	str	r2, [r3, #4]
    num_output_elements *= output_shape->data[stretch_dim];
 800a024:	68fa      	ldr	r2, [r7, #12]
 800a026:	6a3b      	ldr	r3, [r7, #32]
 800a028:	009b      	lsls	r3, r3, #2
 800a02a:	4413      	add	r3, r2
 800a02c:	685a      	ldr	r2, [r3, #4]
 800a02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a030:	fb02 f303 	mul.w	r3, r2, r3
 800a034:	627b      	str	r3, [r7, #36]	; 0x24
  }

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 800a036:	69bb      	ldr	r3, [r7, #24]
 800a038:	781a      	ldrb	r2, [r3, #0]
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	429a      	cmp	r2, r3
 800a040:	d01a      	beq.n	800a078 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x140>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	695c      	ldr	r4, [r3, #20]
 800a046:	69bb      	ldr	r3, [r7, #24]
 800a048:	781b      	ldrb	r3, [r3, #0]
 800a04a:	4618      	mov	r0, r3
 800a04c:	f7fb f8d2 	bl	80051f4 <TfLiteTypeGetName>
 800a050:	4605      	mov	r5, r0
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	781b      	ldrb	r3, [r3, #0]
 800a056:	4618      	mov	r0, r3
 800a058:	f7fb f8cc 	bl	80051f4 <TfLiteTypeGetName>
 800a05c:	4603      	mov	r3, r0
 800a05e:	9303      	str	r3, [sp, #12]
 800a060:	9502      	str	r5, [sp, #8]
 800a062:	4b16      	ldr	r3, [pc, #88]	; (800a0bc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x184>)
 800a064:	9301      	str	r3, [sp, #4]
 800a066:	4b16      	ldr	r3, [pc, #88]	; (800a0c0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x188>)
 800a068:	9300      	str	r3, [sp, #0]
 800a06a:	2340      	movs	r3, #64	; 0x40
 800a06c:	4a11      	ldr	r2, [pc, #68]	; (800a0b4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x17c>)
 800a06e:	4915      	ldr	r1, [pc, #84]	; (800a0c4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x18c>)
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	47a0      	blx	r4
 800a074:	2301      	movs	r3, #1
 800a076:	e015      	b.n	800a0a4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x16c>
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
 800a078:	693a      	ldr	r2, [r7, #16]
 800a07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d010      	beq.n	800a0a2 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x16a>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	695c      	ldr	r4, [r3, #20]
 800a084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a086:	9303      	str	r3, [sp, #12]
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	9302      	str	r3, [sp, #8]
 800a08c:	4b0e      	ldr	r3, [pc, #56]	; (800a0c8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x190>)
 800a08e:	9301      	str	r3, [sp, #4]
 800a090:	4b0e      	ldr	r3, [pc, #56]	; (800a0cc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x194>)
 800a092:	9300      	str	r3, [sp, #0]
 800a094:	2341      	movs	r3, #65	; 0x41
 800a096:	4a07      	ldr	r2, [pc, #28]	; (800a0b4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x17c>)
 800a098:	4907      	ldr	r1, [pc, #28]	; (800a0b8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x180>)
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	47a0      	blx	r4
 800a09e:	2301      	movs	r3, #1
 800a0a0:	e000      	b.n	800a0a4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x16c>
  return kTfLiteOk;
 800a0a2:	2300      	movs	r3, #0
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3728      	adds	r7, #40	; 0x28
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bdb0      	pop	{r4, r5, r7, pc}
 800a0ac:	0801129c 	.word	0x0801129c
 800a0b0:	080112a0 	.word	0x080112a0
 800a0b4:	080111e8 	.word	0x080111e8
 800a0b8:	08011280 	.word	0x08011280
 800a0bc:	080112c8 	.word	0x080112c8
 800a0c0:	080112d8 	.word	0x080112d8
 800a0c4:	080112ac 	.word	0x080112ac
 800a0c8:	080112e4 	.word	0x080112e4
 800a0cc:	080112f8 	.word	0x080112f8

0800a0d0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 800a0d0:	b590      	push	{r4, r7, lr}
 800a0d2:	b087      	sub	sp, #28
 800a0d4:	af04      	add	r7, sp, #16
 800a0d6:	6078      	str	r0, [r7, #4]
 800a0d8:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
 800a0da:	6838      	ldr	r0, [r7, #0]
 800a0dc:	f7fc fb0e 	bl	80066fc <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	2b01      	cmp	r3, #1
 800a0e4:	d007      	beq.n	800a0f6 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
 800a0e6:	6838      	ldr	r0, [r7, #0]
 800a0e8:	f7fc fb08 	bl	80066fc <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	2b02      	cmp	r3, #2
 800a0f0:	d001      	beq.n	800a0f6 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	e000      	b.n	800a0f8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x28>
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d00a      	beq.n	800a112 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x42>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	695c      	ldr	r4, [r3, #20]
 800a100:	4b27      	ldr	r3, [pc, #156]	; (800a1a0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>)
 800a102:	9300      	str	r3, [sp, #0]
 800a104:	2346      	movs	r3, #70	; 0x46
 800a106:	4a27      	ldr	r2, [pc, #156]	; (800a1a4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 800a108:	4927      	ldr	r1, [pc, #156]	; (800a1a8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd8>)
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	47a0      	blx	r4
 800a10e:	2301      	movs	r3, #1
 800a110:	e041      	b.n	800a196 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 800a112:	6838      	ldr	r0, [r7, #0]
 800a114:	f7fc faff 	bl	8006716 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 800a118:	4603      	mov	r3, r0
 800a11a:	2b01      	cmp	r3, #1
 800a11c:	bf14      	ite	ne
 800a11e:	2301      	movne	r3, #1
 800a120:	2300      	moveq	r3, #0
 800a122:	b2db      	uxtb	r3, r3
 800a124:	2b00      	cmp	r3, #0
 800a126:	d013      	beq.n	800a150 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x80>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	695c      	ldr	r4, [r3, #20]
 800a12c:	6838      	ldr	r0, [r7, #0]
 800a12e:	f7fc faf2 	bl	8006716 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 800a132:	4603      	mov	r3, r0
 800a134:	2201      	movs	r2, #1
 800a136:	9203      	str	r2, [sp, #12]
 800a138:	9302      	str	r3, [sp, #8]
 800a13a:	4b1c      	ldr	r3, [pc, #112]	; (800a1ac <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xdc>)
 800a13c:	9301      	str	r3, [sp, #4]
 800a13e:	4b1c      	ldr	r3, [pc, #112]	; (800a1b0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe0>)
 800a140:	9300      	str	r3, [sp, #0]
 800a142:	2347      	movs	r3, #71	; 0x47
 800a144:	4a17      	ldr	r2, [pc, #92]	; (800a1a4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 800a146:	491b      	ldr	r1, [pc, #108]	; (800a1b4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	47a0      	blx	r4
 800a14c:	2301      	movs	r3, #1
 800a14e:	e022      	b.n	800a196 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
 800a150:	6839      	ldr	r1, [r7, #0]
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f7ff fef0 	bl	8009f38 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 800a158:	4603      	mov	r3, r0
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	bf14      	ite	ne
 800a15e:	2301      	movne	r3, #1
 800a160:	2300      	moveq	r3, #0
 800a162:	b2db      	uxtb	r3, r3
 800a164:	2b00      	cmp	r3, #0
 800a166:	d015      	beq.n	800a194 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc4>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	695c      	ldr	r4, [r3, #20]
 800a16c:	6839      	ldr	r1, [r7, #0]
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f7ff fee2 	bl	8009f38 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 800a174:	4603      	mov	r3, r0
 800a176:	461a      	mov	r2, r3
 800a178:	2300      	movs	r3, #0
 800a17a:	9303      	str	r3, [sp, #12]
 800a17c:	9202      	str	r2, [sp, #8]
 800a17e:	4b0e      	ldr	r3, [pc, #56]	; (800a1b8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe8>)
 800a180:	9301      	str	r3, [sp, #4]
 800a182:	4b0e      	ldr	r3, [pc, #56]	; (800a1bc <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xec>)
 800a184:	9300      	str	r3, [sp, #0]
 800a186:	2348      	movs	r3, #72	; 0x48
 800a188:	4a06      	ldr	r2, [pc, #24]	; (800a1a4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 800a18a:	490a      	ldr	r1, [pc, #40]	; (800a1b4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	47a0      	blx	r4
 800a190:	2301      	movs	r3, #1
 800a192:	e000      	b.n	800a196 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  return kTfLiteOk;
 800a194:	2300      	movs	r3, #0
}
 800a196:	4618      	mov	r0, r3
 800a198:	370c      	adds	r7, #12
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd90      	pop	{r4, r7, pc}
 800a19e:	bf00      	nop
 800a1a0:	08011324 	.word	0x08011324
 800a1a4:	080111e8 	.word	0x080111e8
 800a1a8:	0801130c 	.word	0x0801130c
 800a1ac:	08011354 	.word	0x08011354
 800a1b0:	08011358 	.word	0x08011358
 800a1b4:	08011280 	.word	0x08011280
 800a1b8:	0801136c 	.word	0x0801136c
 800a1bc:	08011378 	.word	0x08011378

0800a1c0 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b086      	sub	sp, #24
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	6039      	str	r1, [r7, #0]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	6839      	ldr	r1, [r7, #0]
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f7fb fe94 	bl	8005efc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800a1d4:	6138      	str	r0, [r7, #16]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	6839      	ldr	r1, [r7, #0]
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	f7fb fea4 	bl	8005f28 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800a1e0:	60f8      	str	r0, [r7, #12]

  // Do nothing for in-place reshape.
  if (input->data.raw != output->data.raw) {
 800a1e2:	693b      	ldr	r3, [r7, #16]
 800a1e4:	685a      	ldr	r2, [r3, #4]
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	685b      	ldr	r3, [r3, #4]
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d014      	beq.n	800a218 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x58>
    // Otherwise perform reshape with copy.
    for (size_t i = 0; i < input->bytes; ++i) {
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	617b      	str	r3, [r7, #20]
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	699b      	ldr	r3, [r3, #24]
 800a1f6:	697a      	ldr	r2, [r7, #20]
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	d20d      	bcs.n	800a218 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x58>
      output->data.raw[i] = input->data.raw[i];
 800a1fc:	693b      	ldr	r3, [r7, #16]
 800a1fe:	685a      	ldr	r2, [r3, #4]
 800a200:	697b      	ldr	r3, [r7, #20]
 800a202:	441a      	add	r2, r3
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	6859      	ldr	r1, [r3, #4]
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	440b      	add	r3, r1
 800a20c:	7812      	ldrb	r2, [r2, #0]
 800a20e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < input->bytes; ++i) {
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	3301      	adds	r3, #1
 800a214:	617b      	str	r3, [r7, #20]
 800a216:	e7ec      	b.n	800a1f2 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x32>
    }
  }
  return kTfLiteOk;
 800a218:	2300      	movs	r3, #0
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3718      	adds	r7, #24
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}
	...

0800a224 <_ZN6tflite3ops5micro16Register_RESHAPEEv>:

}  // namespace reshape

TfLiteRegistration* Register_RESHAPE() {
 800a224:	b480      	push	{r7}
 800a226:	af00      	add	r7, sp, #0
                                 /*invoke=*/reshape::Eval,
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
 800a228:	4b02      	ldr	r3, [pc, #8]	; (800a234 <_ZN6tflite3ops5micro16Register_RESHAPEEv+0x10>)
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr
 800a234:	20006cb4 	.word	0x20006cb4

0800a238 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>:
    int32 x, int32 quantized_multiplier, int left_shift) {
 800a238:	b580      	push	{r7, lr}
 800a23a:	b084      	sub	sp, #16
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	60f8      	str	r0, [r7, #12]
 800a240:	60b9      	str	r1, [r7, #8]
 800a242:	607a      	str	r2, [r7, #4]
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
 800a244:	68fa      	ldr	r2, [r7, #12]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	fa02 f303 	lsl.w	r3, r2, r3
 800a24c:	68b9      	ldr	r1, [r7, #8]
 800a24e:	4618      	mov	r0, r3
 800a250:	f7fc f81e 	bl	8006290 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800a254:	4603      	mov	r3, r0
}
 800a256:	4618      	mov	r0, r3
 800a258:	3710      	adds	r7, #16
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}

0800a25e <_ZN6tflite13GetReciprocalEliPi>:
                                                     InputIntegerBits>(
      input_val);
}

inline int32 GetReciprocal(int32 x, int x_integer_digits,
                           int* num_bits_over_unit) {
 800a25e:	b580      	push	{r7, lr}
 800a260:	b088      	sub	sp, #32
 800a262:	af00      	add	r7, sp, #0
 800a264:	60f8      	str	r0, [r7, #12]
 800a266:	60b9      	str	r1, [r7, #8]
 800a268:	607a      	str	r2, [r7, #4]
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32>(x));
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	4618      	mov	r0, r3
 800a26e:	f7fe fbcd 	bl	8008a0c <_ZN6tflite17CountLeadingZerosImEEiT_>
 800a272:	61f8      	str	r0, [r7, #28]
  // This is the number of bits to the left of the binary point above 1.0.
  // Consider x=1.25.  In that case shifted_scale=0.8 and
  // no later adjustment will be needed.
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
 800a274:	68ba      	ldr	r2, [r7, #8]
 800a276:	69fb      	ldr	r3, [r7, #28]
 800a278:	1ad2      	subs	r2, r2, r3
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	601a      	str	r2, [r3, #0]
  const int32 shifted_sum_minus_one =
      static_cast<int32>((static_cast<uint32>(x) << headroom_plus_one) -
 800a27e:	68fa      	ldr	r2, [r7, #12]
 800a280:	69fb      	ldr	r3, [r7, #28]
 800a282:	fa02 f303 	lsl.w	r3, r2, r3
 800a286:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  const int32 shifted_sum_minus_one =
 800a28a:	61bb      	str	r3, [r7, #24]
                         (static_cast<uint32>(1) << 31));

  gemmlowp::FixedPoint<int32, 0> shifted_scale =
      gemmlowp::one_over_one_plus_x_for_x_in_0_1(
          gemmlowp::FixedPoint<int32, 0>::FromRaw(shifted_sum_minus_one));
 800a28c:	69b8      	ldr	r0, [r7, #24]
 800a28e:	f7fe fce0 	bl	8008c52 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800a292:	4603      	mov	r3, r0
 800a294:	4618      	mov	r0, r3
 800a296:	f7fe fced 	bl	8008c74 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>
 800a29a:	4603      	mov	r3, r0
 800a29c:	617b      	str	r3, [r7, #20]
  return shifted_scale.raw();
 800a29e:	f107 0314 	add.w	r3, r7, #20
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f7fe fbc4 	bl	8008a30 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	681b      	ldr	r3, [r3, #0]
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3720      	adds	r7, #32
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}

0800a2b4 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace tflite {
namespace reference_ops {

inline void Softmax(const SoftmaxParams& params,
                    const RuntimeShape& input_shape, const float* input_data,
                    const RuntimeShape& output_shape, float* output_data) {
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	ed2d 8b02 	vpush	{d8}
 800a2ba:	b08e      	sub	sp, #56	; 0x38
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	60f8      	str	r0, [r7, #12]
 800a2c0:	60b9      	str	r1, [r7, #8]
 800a2c2:	607a      	str	r2, [r7, #4]
 800a2c4:	603b      	str	r3, [r7, #0]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 800a2c6:	68b8      	ldr	r0, [r7, #8]
 800a2c8:	f7fb fe9d 	bl	8006006 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	3b01      	subs	r3, #1
 800a2d0:	623b      	str	r3, [r7, #32]
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 800a2d2:	683a      	ldr	r2, [r7, #0]
 800a2d4:	6a39      	ldr	r1, [r7, #32]
 800a2d6:	68b8      	ldr	r0, [r7, #8]
 800a2d8:	f7fe fb69 	bl	80089ae <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 800a2dc:	61f8      	str	r0, [r7, #28]
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 800a2de:	6a3b      	ldr	r3, [r7, #32]
 800a2e0:	683a      	ldr	r2, [r7, #0]
 800a2e2:	6a39      	ldr	r1, [r7, #32]
 800a2e4:	68b8      	ldr	r0, [r7, #8]
 800a2e6:	f7fc fa23 	bl	8006730 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800a2ea:	61b8      	str	r0, [r7, #24]

  for (int i = 0; i < outer_size; ++i) {
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	637b      	str	r3, [r7, #52]	; 0x34
 800a2f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2f2:	69fb      	ldr	r3, [r7, #28]
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	f280 808f 	bge.w	800a418 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x164>
    // Find max element value which we'll use to ensure numerical stability
    // taking advantage of the following equality:
    // exp(x[i])/sum(exp(x[i])) == exp(x[i]+C)/sum(exp(x[i]+C))
    float max = std::numeric_limits<float>::lowest();
 800a2fa:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 800a2fe:	617b      	str	r3, [r7, #20]
    for (int c = 0; c < depth; ++c) {
 800a300:	2300      	movs	r3, #0
 800a302:	633b      	str	r3, [r7, #48]	; 0x30
 800a304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a306:	69bb      	ldr	r3, [r7, #24]
 800a308:	429a      	cmp	r2, r3
 800a30a:	da15      	bge.n	800a338 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x84>
      max = std::max(max, input_data[i * depth + c]);
 800a30c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a30e:	69ba      	ldr	r2, [r7, #24]
 800a310:	fb02 f203 	mul.w	r2, r2, r3
 800a314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a316:	4413      	add	r3, r2
 800a318:	009b      	lsls	r3, r3, #2
 800a31a:	687a      	ldr	r2, [r7, #4]
 800a31c:	441a      	add	r2, r3
 800a31e:	f107 0314 	add.w	r3, r7, #20
 800a322:	4611      	mov	r1, r2
 800a324:	4618      	mov	r0, r3
 800a326:	f7fb f95f 	bl	80055e8 <_ZSt3maxIfERKT_S2_S2_>
 800a32a:	4603      	mov	r3, r0
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	617b      	str	r3, [r7, #20]
    for (int c = 0; c < depth; ++c) {
 800a330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a332:	3301      	adds	r3, #1
 800a334:	633b      	str	r3, [r7, #48]	; 0x30
 800a336:	e7e5      	b.n	800a304 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x50>
    }

    // Compute sum.
    float sum = 0.f;
 800a338:	f04f 0300 	mov.w	r3, #0
 800a33c:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 800a33e:	2300      	movs	r3, #0
 800a340:	62bb      	str	r3, [r7, #40]	; 0x28
 800a342:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a344:	69bb      	ldr	r3, [r7, #24]
 800a346:	429a      	cmp	r2, r3
 800a348:	da29      	bge.n	800a39e <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xea>
      sum += std::exp((input_data[i * depth + c] - max) *
 800a34a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a34c:	69ba      	ldr	r2, [r7, #24]
 800a34e:	fb02 f203 	mul.w	r2, r2, r3
 800a352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a354:	4413      	add	r3, r2
 800a356:	009b      	lsls	r3, r3, #2
 800a358:	687a      	ldr	r2, [r7, #4]
 800a35a:	4413      	add	r3, r2
 800a35c:	ed93 7a00 	vldr	s14, [r3]
 800a360:	edd7 7a05 	vldr	s15, [r7, #20]
 800a364:	ee37 8a67 	vsub.f32	s16, s14, s15
                      static_cast<float>(params.beta));
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a36e:	4610      	mov	r0, r2
 800a370:	4619      	mov	r1, r3
 800a372:	f7f6 fc69 	bl	8000c48 <__aeabi_d2f>
 800a376:	ee07 0a90 	vmov	s15, r0
      sum += std::exp((input_data[i * depth + c] - max) *
 800a37a:	ee68 7a27 	vmul.f32	s15, s16, s15
 800a37e:	eeb0 0a67 	vmov.f32	s0, s15
 800a382:	f7f6 ff4e 	bl	8001222 <_ZSt3expf>
 800a386:	eeb0 7a40 	vmov.f32	s14, s0
 800a38a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a38e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a392:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 800a396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a398:	3301      	adds	r3, #1
 800a39a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a39c:	e7d1      	b.n	800a342 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x8e>
    }

    // Compute result.
    for (int c = 0; c < depth; ++c) {
 800a39e:	2300      	movs	r3, #0
 800a3a0:	627b      	str	r3, [r7, #36]	; 0x24
 800a3a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3a4:	69bb      	ldr	r3, [r7, #24]
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	da32      	bge.n	800a410 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x15c>
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
 800a3aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3ac:	69ba      	ldr	r2, [r7, #24]
 800a3ae:	fb02 f203 	mul.w	r2, r2, r3
 800a3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b4:	4413      	add	r3, r2
 800a3b6:	009b      	lsls	r3, r3, #2
 800a3b8:	687a      	ldr	r2, [r7, #4]
 800a3ba:	4413      	add	r3, r2
 800a3bc:	ed93 7a00 	vldr	s14, [r3]
 800a3c0:	edd7 7a05 	vldr	s15, [r7, #20]
 800a3c4:	ee37 8a67 	vsub.f32	s16, s14, s15
                                            static_cast<float>(params.beta)) /
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ce:	4610      	mov	r0, r2
 800a3d0:	4619      	mov	r1, r3
 800a3d2:	f7f6 fc39 	bl	8000c48 <__aeabi_d2f>
 800a3d6:	ee07 0a90 	vmov	s15, r0
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
 800a3da:	ee68 7a27 	vmul.f32	s15, s16, s15
 800a3de:	eeb0 0a67 	vmov.f32	s0, s15
 800a3e2:	f7f6 ff1e 	bl	8001222 <_ZSt3expf>
 800a3e6:	eef0 6a40 	vmov.f32	s13, s0
 800a3ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3ec:	69ba      	ldr	r2, [r7, #24]
 800a3ee:	fb02 f203 	mul.w	r2, r2, r3
 800a3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f4:	4413      	add	r3, r2
 800a3f6:	009b      	lsls	r3, r3, #2
 800a3f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a3fa:	4413      	add	r3, r2
                                            static_cast<float>(params.beta)) /
 800a3fc:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800a400:	eec6 7a87 	vdiv.f32	s15, s13, s14
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
 800a404:	edc3 7a00 	vstr	s15, [r3]
    for (int c = 0; c < depth; ++c) {
 800a408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a40a:	3301      	adds	r3, #1
 800a40c:	627b      	str	r3, [r7, #36]	; 0x24
 800a40e:	e7c8      	b.n	800a3a2 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xee>
  for (int i = 0; i < outer_size; ++i) {
 800a410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a412:	3301      	adds	r3, #1
 800a414:	637b      	str	r3, [r7, #52]	; 0x34
 800a416:	e76b      	b.n	800a2f0 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x3c>
                                   sum;
    }
  }
}
 800a418:	bf00      	nop
 800a41a:	3738      	adds	r7, #56	; 0x38
 800a41c:	46bd      	mov	sp, r7
 800a41e:	ecbd 8b02 	vpop	{d8}
 800a422:	bd80      	pop	{r7, pc}

0800a424 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:

TfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    TfLiteTensor* output,
                                    const TfLiteSoftmaxParams* params,
                                    SoftmaxParams* op_data) {
 800a424:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a428:	b08a      	sub	sp, #40	; 0x28
 800a42a:	af04      	add	r7, sp, #16
 800a42c:	60f8      	str	r0, [r7, #12]
 800a42e:	60b9      	str	r1, [r7, #8]
 800a430:	607a      	str	r2, [r7, #4]
 800a432:	603b      	str	r3, [r7, #0]
  if (input->type == kTfLiteUInt8 || input->type == kTfLiteInt8) {
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	781b      	ldrb	r3, [r3, #0]
 800a438:	2b03      	cmp	r3, #3
 800a43a:	d004      	beq.n	800a446 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x22>
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	781b      	ldrb	r3, [r3, #0]
 800a440:	2b09      	cmp	r3, #9
 800a442:	f040 80ef 	bne.w	800a624 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x200>
    if (input->type == kTfLiteUInt8) {
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	781b      	ldrb	r3, [r3, #0]
 800a44a:	2b03      	cmp	r3, #3
 800a44c:	d133      	bne.n	800a4b6 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x92>
      TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteUInt8);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	781b      	ldrb	r3, [r3, #0]
 800a452:	2b03      	cmp	r3, #3
 800a454:	d018      	beq.n	800a488 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x64>
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	695c      	ldr	r4, [r3, #20]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	781b      	ldrb	r3, [r3, #0]
 800a45e:	4618      	mov	r0, r3
 800a460:	f7fa fec8 	bl	80051f4 <TfLiteTypeGetName>
 800a464:	4605      	mov	r5, r0
 800a466:	2003      	movs	r0, #3
 800a468:	f7fa fec4 	bl	80051f4 <TfLiteTypeGetName>
 800a46c:	4603      	mov	r3, r0
 800a46e:	9303      	str	r3, [sp, #12]
 800a470:	9502      	str	r5, [sp, #8]
 800a472:	4b91      	ldr	r3, [pc, #580]	; (800a6b8 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x294>)
 800a474:	9301      	str	r3, [sp, #4]
 800a476:	4b91      	ldr	r3, [pc, #580]	; (800a6bc <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x298>)
 800a478:	9300      	str	r3, [sp, #0]
 800a47a:	23c3      	movs	r3, #195	; 0xc3
 800a47c:	4a90      	ldr	r2, [pc, #576]	; (800a6c0 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x29c>)
 800a47e:	4991      	ldr	r1, [pc, #580]	; (800a6c4 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a0>)
 800a480:	68f8      	ldr	r0, [r7, #12]
 800a482:	47a0      	blx	r4
 800a484:	2301      	movs	r3, #1
 800a486:	e112      	b.n	800a6ae <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x28a>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	691b      	ldr	r3, [r3, #16]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	f000 8094 	beq.w	800a5ba <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x196>
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	695c      	ldr	r4, [r3, #20]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	691b      	ldr	r3, [r3, #16]
 800a49a:	2200      	movs	r2, #0
 800a49c:	9203      	str	r2, [sp, #12]
 800a49e:	9302      	str	r3, [sp, #8]
 800a4a0:	4b89      	ldr	r3, [pc, #548]	; (800a6c8 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a4>)
 800a4a2:	9301      	str	r3, [sp, #4]
 800a4a4:	4b89      	ldr	r3, [pc, #548]	; (800a6cc <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a8>)
 800a4a6:	9300      	str	r3, [sp, #0]
 800a4a8:	23c4      	movs	r3, #196	; 0xc4
 800a4aa:	4a85      	ldr	r2, [pc, #532]	; (800a6c0 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x29c>)
 800a4ac:	4988      	ldr	r1, [pc, #544]	; (800a6d0 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ac>)
 800a4ae:	68f8      	ldr	r0, [r7, #12]
 800a4b0:	47a0      	blx	r4
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	e0fb      	b.n	800a6ae <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x28a>
    } else {
      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteInt8);
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	781b      	ldrb	r3, [r3, #0]
 800a4ba:	2b09      	cmp	r3, #9
 800a4bc:	d018      	beq.n	800a4f0 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xcc>
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	695c      	ldr	r4, [r3, #20]
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	781b      	ldrb	r3, [r3, #0]
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f7fa fe94 	bl	80051f4 <TfLiteTypeGetName>
 800a4cc:	4605      	mov	r5, r0
 800a4ce:	2009      	movs	r0, #9
 800a4d0:	f7fa fe90 	bl	80051f4 <TfLiteTypeGetName>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	9303      	str	r3, [sp, #12]
 800a4d8:	9502      	str	r5, [sp, #8]
 800a4da:	4b7e      	ldr	r3, [pc, #504]	; (800a6d4 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b0>)
 800a4dc:	9301      	str	r3, [sp, #4]
 800a4de:	4b7e      	ldr	r3, [pc, #504]	; (800a6d8 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b4>)
 800a4e0:	9300      	str	r3, [sp, #0]
 800a4e2:	23c6      	movs	r3, #198	; 0xc6
 800a4e4:	4a76      	ldr	r2, [pc, #472]	; (800a6c0 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x29c>)
 800a4e6:	4977      	ldr	r1, [pc, #476]	; (800a6c4 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a0>)
 800a4e8:	68f8      	ldr	r0, [r7, #12]
 800a4ea:	47a0      	blx	r4
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	e0de      	b.n	800a6ae <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x28a>
      if (output->type == kTfLiteInt16) {
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	781b      	ldrb	r3, [r3, #0]
 800a4f4:	2b07      	cmp	r3, #7
 800a4f6:	d116      	bne.n	800a526 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x102>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	691b      	ldr	r3, [r3, #16]
 800a4fc:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800a500:	d05b      	beq.n	800a5ba <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x196>
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	695c      	ldr	r4, [r3, #20]
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	691b      	ldr	r3, [r3, #16]
 800a50a:	4a74      	ldr	r2, [pc, #464]	; (800a6dc <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b8>)
 800a50c:	9203      	str	r2, [sp, #12]
 800a50e:	9302      	str	r3, [sp, #8]
 800a510:	4b73      	ldr	r3, [pc, #460]	; (800a6e0 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2bc>)
 800a512:	9301      	str	r3, [sp, #4]
 800a514:	4b6d      	ldr	r3, [pc, #436]	; (800a6cc <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a8>)
 800a516:	9300      	str	r3, [sp, #0]
 800a518:	23c8      	movs	r3, #200	; 0xc8
 800a51a:	4a69      	ldr	r2, [pc, #420]	; (800a6c0 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x29c>)
 800a51c:	496c      	ldr	r1, [pc, #432]	; (800a6d0 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ac>)
 800a51e:	68f8      	ldr	r0, [r7, #12]
 800a520:	47a0      	blx	r4
 800a522:	2301      	movs	r3, #1
 800a524:	e0c3      	b.n	800a6ae <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x28a>
        // NOTE: Current int16 softmax output does not require symmetric scaling
        // - so no need to verify scale here.
      } else {
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	781b      	ldrb	r3, [r3, #0]
 800a52a:	2b09      	cmp	r3, #9
 800a52c:	d018      	beq.n	800a560 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x13c>
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	695c      	ldr	r4, [r3, #20]
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	781b      	ldrb	r3, [r3, #0]
 800a536:	4618      	mov	r0, r3
 800a538:	f7fa fe5c 	bl	80051f4 <TfLiteTypeGetName>
 800a53c:	4605      	mov	r5, r0
 800a53e:	2009      	movs	r0, #9
 800a540:	f7fa fe58 	bl	80051f4 <TfLiteTypeGetName>
 800a544:	4603      	mov	r3, r0
 800a546:	9303      	str	r3, [sp, #12]
 800a548:	9502      	str	r5, [sp, #8]
 800a54a:	4b62      	ldr	r3, [pc, #392]	; (800a6d4 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b0>)
 800a54c:	9301      	str	r3, [sp, #4]
 800a54e:	4b5b      	ldr	r3, [pc, #364]	; (800a6bc <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x298>)
 800a550:	9300      	str	r3, [sp, #0]
 800a552:	23cc      	movs	r3, #204	; 0xcc
 800a554:	4a5a      	ldr	r2, [pc, #360]	; (800a6c0 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x29c>)
 800a556:	495b      	ldr	r1, [pc, #364]	; (800a6c4 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a0>)
 800a558:	68f8      	ldr	r0, [r7, #12]
 800a55a:	47a0      	blx	r4
 800a55c:	2301      	movs	r3, #1
 800a55e:	e0a6      	b.n	800a6ae <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x28a>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	691b      	ldr	r3, [r3, #16]
 800a564:	f113 0f80 	cmn.w	r3, #128	; 0x80
 800a568:	d012      	beq.n	800a590 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x16c>
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	695c      	ldr	r4, [r3, #20]
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	691b      	ldr	r3, [r3, #16]
 800a572:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 800a576:	9203      	str	r2, [sp, #12]
 800a578:	9302      	str	r3, [sp, #8]
 800a57a:	4b5a      	ldr	r3, [pc, #360]	; (800a6e4 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c0>)
 800a57c:	9301      	str	r3, [sp, #4]
 800a57e:	4b53      	ldr	r3, [pc, #332]	; (800a6cc <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a8>)
 800a580:	9300      	str	r3, [sp, #0]
 800a582:	23cd      	movs	r3, #205	; 0xcd
 800a584:	4a4e      	ldr	r2, [pc, #312]	; (800a6c0 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x29c>)
 800a586:	4952      	ldr	r1, [pc, #328]	; (800a6d0 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ac>)
 800a588:	68f8      	ldr	r0, [r7, #12]
 800a58a:	47a0      	blx	r4
 800a58c:	2301      	movs	r3, #1
 800a58e:	e08e      	b.n	800a6ae <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x28a>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	edd3 7a03 	vldr	s15, [r3, #12]
 800a596:	ed9f 7a54 	vldr	s14, [pc, #336]	; 800a6e8 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c4>
 800a59a:	eef4 7a47 	vcmp.f32	s15, s14
 800a59e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5a2:	d00a      	beq.n	800a5ba <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x196>
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	695c      	ldr	r4, [r3, #20]
 800a5a8:	4b50      	ldr	r3, [pc, #320]	; (800a6ec <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c8>)
 800a5aa:	9300      	str	r3, [sp, #0]
 800a5ac:	23ce      	movs	r3, #206	; 0xce
 800a5ae:	4a44      	ldr	r2, [pc, #272]	; (800a6c0 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x29c>)
 800a5b0:	494f      	ldr	r1, [pc, #316]	; (800a6f0 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 800a5b2:	68f8      	ldr	r0, [r7, #12]
 800a5b4:	47a0      	blx	r4
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	e079      	b.n	800a6ae <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x28a>

    static const int kScaledDiffIntegerBits = 5;

    int input_left_shift;
    tflite::PreprocessSoftmaxScaling(
        static_cast<double>(params->beta),
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	681b      	ldr	r3, [r3, #0]
    tflite::PreprocessSoftmaxScaling(
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f7f5 fff2 	bl	80005a8 <__aeabi_f2d>
 800a5c4:	4680      	mov	r8, r0
 800a5c6:	4689      	mov	r9, r1
        static_cast<double>(input->params.scale), kScaledDiffIntegerBits,
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	68db      	ldr	r3, [r3, #12]
    tflite::PreprocessSoftmaxScaling(
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f7f5 ffeb 	bl	80005a8 <__aeabi_f2d>
 800a5d2:	4682      	mov	sl, r0
 800a5d4:	468b      	mov	fp, r1
 800a5d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5d8:	3308      	adds	r3, #8
 800a5da:	f107 0214 	add.w	r2, r7, #20
 800a5de:	4619      	mov	r1, r3
 800a5e0:	2005      	movs	r0, #5
 800a5e2:	ec4b ab11 	vmov	d1, sl, fp
 800a5e6:	ec49 8b10 	vmov	d0, r8, r9
 800a5ea:	f7fa ff35 	bl	8005458 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>
        &op_data->input_multiplier, &input_left_shift);
    op_data->input_left_shift = input_left_shift;
 800a5ee:	697a      	ldr	r2, [r7, #20]
 800a5f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f2:	60da      	str	r2, [r3, #12]
    op_data->diff_min =
        -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
                                            op_data->input_left_shift);
 800a5f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f6:	68db      	ldr	r3, [r3, #12]
        -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
 800a5f8:	221f      	movs	r2, #31
 800a5fa:	4619      	mov	r1, r3
 800a5fc:	2005      	movs	r0, #5
 800a5fe:	f7fa ff73 	bl	80054e8 <_ZN6tflite20CalculateInputRadiusEiii>
 800a602:	4603      	mov	r3, r0
 800a604:	4618      	mov	r0, r3
 800a606:	f7f5 ffbd 	bl	8000584 <__aeabi_i2d>
 800a60a:	4602      	mov	r2, r0
 800a60c:	460b      	mov	r3, r1
 800a60e:	4614      	mov	r4, r2
 800a610:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
    op_data->diff_min =
 800a614:	4620      	mov	r0, r4
 800a616:	4629      	mov	r1, r5
 800a618:	f7f6 face 	bl	8000bb8 <__aeabi_d2iz>
 800a61c:	4602      	mov	r2, r0
 800a61e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a620:	619a      	str	r2, [r3, #24]
                                            op_data->input_left_shift);
 800a622:	e043      	b.n	800a6ac <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x288>
  } else {
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	781b      	ldrb	r3, [r3, #0]
 800a628:	2b01      	cmp	r3, #1
 800a62a:	d018      	beq.n	800a65e <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x23a>
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	695c      	ldr	r4, [r3, #20]
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	781b      	ldrb	r3, [r3, #0]
 800a634:	4618      	mov	r0, r3
 800a636:	f7fa fddd 	bl	80051f4 <TfLiteTypeGetName>
 800a63a:	4605      	mov	r5, r0
 800a63c:	2001      	movs	r0, #1
 800a63e:	f7fa fdd9 	bl	80051f4 <TfLiteTypeGetName>
 800a642:	4603      	mov	r3, r0
 800a644:	9303      	str	r3, [sp, #12]
 800a646:	9502      	str	r5, [sp, #8]
 800a648:	4b2a      	ldr	r3, [pc, #168]	; (800a6f4 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 800a64a:	9301      	str	r3, [sp, #4]
 800a64c:	4b22      	ldr	r3, [pc, #136]	; (800a6d8 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b4>)
 800a64e:	9300      	str	r3, [sp, #0]
 800a650:	23de      	movs	r3, #222	; 0xde
 800a652:	4a1b      	ldr	r2, [pc, #108]	; (800a6c0 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x29c>)
 800a654:	491b      	ldr	r1, [pc, #108]	; (800a6c4 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a0>)
 800a656:	68f8      	ldr	r0, [r7, #12]
 800a658:	47a0      	blx	r4
 800a65a:	2301      	movs	r3, #1
 800a65c:	e027      	b.n	800a6ae <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x28a>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	781b      	ldrb	r3, [r3, #0]
 800a662:	2b01      	cmp	r3, #1
 800a664:	d018      	beq.n	800a698 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x274>
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	695c      	ldr	r4, [r3, #20]
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	781b      	ldrb	r3, [r3, #0]
 800a66e:	4618      	mov	r0, r3
 800a670:	f7fa fdc0 	bl	80051f4 <TfLiteTypeGetName>
 800a674:	4605      	mov	r5, r0
 800a676:	2001      	movs	r0, #1
 800a678:	f7fa fdbc 	bl	80051f4 <TfLiteTypeGetName>
 800a67c:	4603      	mov	r3, r0
 800a67e:	9303      	str	r3, [sp, #12]
 800a680:	9502      	str	r5, [sp, #8]
 800a682:	4b1c      	ldr	r3, [pc, #112]	; (800a6f4 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 800a684:	9301      	str	r3, [sp, #4]
 800a686:	4b0d      	ldr	r3, [pc, #52]	; (800a6bc <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x298>)
 800a688:	9300      	str	r3, [sp, #0]
 800a68a:	23df      	movs	r3, #223	; 0xdf
 800a68c:	4a0c      	ldr	r2, [pc, #48]	; (800a6c0 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x29c>)
 800a68e:	490d      	ldr	r1, [pc, #52]	; (800a6c4 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a0>)
 800a690:	68f8      	ldr	r0, [r7, #12]
 800a692:	47a0      	blx	r4
 800a694:	2301      	movs	r3, #1
 800a696:	e00a      	b.n	800a6ae <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x28a>
    op_data->beta = static_cast<double>(params->beta);
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	4618      	mov	r0, r3
 800a69e:	f7f5 ff83 	bl	80005a8 <__aeabi_f2d>
 800a6a2:	4602      	mov	r2, r0
 800a6a4:	460b      	mov	r3, r1
 800a6a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a6a8:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return kTfLiteOk;
 800a6ac:	2300      	movs	r3, #0
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3718      	adds	r7, #24
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a6b8:	0801144c 	.word	0x0801144c
 800a6bc:	0801145c 	.word	0x0801145c
 800a6c0:	08011398 	.word	0x08011398
 800a6c4:	08011430 	.word	0x08011430
 800a6c8:	08011488 	.word	0x08011488
 800a6cc:	0801148c 	.word	0x0801148c
 800a6d0:	0801146c 	.word	0x0801146c
 800a6d4:	080114a8 	.word	0x080114a8
 800a6d8:	080114b4 	.word	0x080114b4
 800a6dc:	ffff8000 	.word	0xffff8000
 800a6e0:	080114c0 	.word	0x080114c0
 800a6e4:	080114c8 	.word	0x080114c8
 800a6e8:	3b800000 	.word	0x3b800000
 800a6ec:	080114e8 	.word	0x080114e8
 800a6f0:	080114d0 	.word	0x080114d0
 800a6f4:	0801150c 	.word	0x0801150c

0800a6f8 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:

}  // namespace

TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 800a6f8:	b590      	push	{r4, r7, lr}
 800a6fa:	b089      	sub	sp, #36	; 0x24
 800a6fc:	af04      	add	r7, sp, #16
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 800a702:	6838      	ldr	r0, [r7, #0]
 800a704:	f7fb fffa 	bl	80066fc <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800a708:	4603      	mov	r3, r0
 800a70a:	2b01      	cmp	r3, #1
 800a70c:	bf14      	ite	ne
 800a70e:	2301      	movne	r3, #1
 800a710:	2300      	moveq	r3, #0
 800a712:	b2db      	uxtb	r3, r3
 800a714:	2b00      	cmp	r3, #0
 800a716:	d013      	beq.n	800a740 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x48>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	695c      	ldr	r4, [r3, #20]
 800a71c:	6838      	ldr	r0, [r7, #0]
 800a71e:	f7fb ffed 	bl	80066fc <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800a722:	4603      	mov	r3, r0
 800a724:	2201      	movs	r2, #1
 800a726:	9203      	str	r2, [sp, #12]
 800a728:	9302      	str	r3, [sp, #8]
 800a72a:	4b25      	ldr	r3, [pc, #148]	; (800a7c0 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xc8>)
 800a72c:	9301      	str	r3, [sp, #4]
 800a72e:	4b25      	ldr	r3, [pc, #148]	; (800a7c4 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xcc>)
 800a730:	9300      	str	r3, [sp, #0]
 800a732:	23e8      	movs	r3, #232	; 0xe8
 800a734:	4a24      	ldr	r2, [pc, #144]	; (800a7c8 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd0>)
 800a736:	4925      	ldr	r1, [pc, #148]	; (800a7cc <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	47a0      	blx	r4
 800a73c:	2301      	movs	r3, #1
 800a73e:	e03b      	b.n	800a7b8 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xc0>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 800a740:	6838      	ldr	r0, [r7, #0]
 800a742:	f7fb ffe8 	bl	8006716 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 800a746:	4603      	mov	r3, r0
 800a748:	2b01      	cmp	r3, #1
 800a74a:	bf14      	ite	ne
 800a74c:	2301      	movne	r3, #1
 800a74e:	2300      	moveq	r3, #0
 800a750:	b2db      	uxtb	r3, r3
 800a752:	2b00      	cmp	r3, #0
 800a754:	d013      	beq.n	800a77e <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x86>
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	695c      	ldr	r4, [r3, #20]
 800a75a:	6838      	ldr	r0, [r7, #0]
 800a75c:	f7fb ffdb 	bl	8006716 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 800a760:	4603      	mov	r3, r0
 800a762:	2201      	movs	r2, #1
 800a764:	9203      	str	r2, [sp, #12]
 800a766:	9302      	str	r3, [sp, #8]
 800a768:	4b15      	ldr	r3, [pc, #84]	; (800a7c0 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xc8>)
 800a76a:	9301      	str	r3, [sp, #4]
 800a76c:	4b18      	ldr	r3, [pc, #96]	; (800a7d0 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd8>)
 800a76e:	9300      	str	r3, [sp, #0]
 800a770:	23e9      	movs	r3, #233	; 0xe9
 800a772:	4a15      	ldr	r2, [pc, #84]	; (800a7c8 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd0>)
 800a774:	4915      	ldr	r1, [pc, #84]	; (800a7cc <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	47a0      	blx	r4
 800a77a:	2301      	movs	r3, #1
 800a77c:	e01c      	b.n	800a7b8 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xc0>
  const TfLiteTensor* input = GetInput(context, node, 0);
 800a77e:	2200      	movs	r2, #0
 800a780:	6839      	ldr	r1, [r7, #0]
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f7fb fbba 	bl	8005efc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800a788:	60f8      	str	r0, [r7, #12]
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 800a78a:	68f8      	ldr	r0, [r7, #12]
 800a78c:	f7fa ff8a 	bl	80056a4 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 800a790:	4603      	mov	r3, r0
 800a792:	2b00      	cmp	r3, #0
 800a794:	bfd4      	ite	le
 800a796:	2301      	movle	r3, #1
 800a798:	2300      	movgt	r3, #0
 800a79a:	b2db      	uxtb	r3, r3
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d00a      	beq.n	800a7b6 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xbe>
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	695c      	ldr	r4, [r3, #20]
 800a7a4:	4b0b      	ldr	r3, [pc, #44]	; (800a7d4 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xdc>)
 800a7a6:	9300      	str	r3, [sp, #0]
 800a7a8:	23eb      	movs	r3, #235	; 0xeb
 800a7aa:	4a07      	ldr	r2, [pc, #28]	; (800a7c8 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd0>)
 800a7ac:	490a      	ldr	r1, [pc, #40]	; (800a7d8 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xe0>)
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	47a0      	blx	r4
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	e000      	b.n	800a7b8 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xc0>

  return kTfLiteOk;
 800a7b6:	2300      	movs	r3, #0
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	3714      	adds	r7, #20
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd90      	pop	{r4, r7, pc}
 800a7c0:	0801151c 	.word	0x0801151c
 800a7c4:	08011520 	.word	0x08011520
 800a7c8:	08011398 	.word	0x08011398
 800a7cc:	0801146c 	.word	0x0801146c
 800a7d0:	08011530 	.word	0x08011530
 800a7d4:	08011544 	.word	0x08011544
 800a7d8:	080114d0 	.word	0x080114d0

0800a7dc <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>:

// Takes a tensor and performs softmax along the last dimension.
void SoftmaxFloat(const TfLiteTensor* input, TfLiteTensor* output,
                  const SoftmaxParams& op_data) {
 800a7dc:	b590      	push	{r4, r7, lr}
 800a7de:	b093      	sub	sp, #76	; 0x4c
 800a7e0:	af02      	add	r7, sp, #8
 800a7e2:	60f8      	str	r0, [r7, #12]
 800a7e4:	60b9      	str	r1, [r7, #8]
 800a7e6:	607a      	str	r2, [r7, #4]
  tflite::reference_ops::Softmax(
      op_data, GetTensorShape(input), GetTensorData<float>(input),
 800a7e8:	f107 0310 	add.w	r3, r7, #16
 800a7ec:	68f9      	ldr	r1, [r7, #12]
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f7fb fcc8 	bl	8006184 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::Softmax(
 800a7f4:	68f8      	ldr	r0, [r7, #12]
 800a7f6:	f7fb fce3 	bl	80061c0 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 800a7fa:	4604      	mov	r4, r0
      GetTensorShape(output), GetTensorData<float>(output));
 800a7fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a800:	68b9      	ldr	r1, [r7, #8]
 800a802:	4618      	mov	r0, r3
 800a804:	f7fb fcbe 	bl	8006184 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::Softmax(
 800a808:	68b8      	ldr	r0, [r7, #8]
 800a80a:	f7fb fcea 	bl	80061e2 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 800a80e:	4602      	mov	r2, r0
 800a810:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a814:	f107 0110 	add.w	r1, r7, #16
 800a818:	9200      	str	r2, [sp, #0]
 800a81a:	4622      	mov	r2, r4
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f7ff fd49 	bl	800a2b4 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>
      GetTensorShape(output), GetTensorData<float>(output));
 800a822:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a826:	4618      	mov	r0, r3
 800a828:	f7fb fbd7 	bl	8005fda <_ZN6tflite12RuntimeShapeD1Ev>
      op_data, GetTensorShape(input), GetTensorData<float>(input),
 800a82c:	f107 0310 	add.w	r3, r7, #16
 800a830:	4618      	mov	r0, r3
 800a832:	f7fb fbd2 	bl	8005fda <_ZN6tflite12RuntimeShapeD1Ev>
}
 800a836:	bf00      	nop
 800a838:	3744      	adds	r7, #68	; 0x44
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd90      	pop	{r4, r7, pc}

0800a83e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>:

void SoftmaxQuantized(const TfLiteTensor* input, TfLiteTensor* output,
                      const SoftmaxParams& op_data) {
 800a83e:	b590      	push	{r4, r7, lr}
 800a840:	b0ab      	sub	sp, #172	; 0xac
 800a842:	af02      	add	r7, sp, #8
 800a844:	60f8      	str	r0, [r7, #12]
 800a846:	60b9      	str	r1, [r7, #8]
 800a848:	607a      	str	r2, [r7, #4]
  if (input->type == kTfLiteUInt8) {
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	781b      	ldrb	r3, [r3, #0]
 800a84e:	2b03      	cmp	r3, #3
 800a850:	d127      	bne.n	800a8a2 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x64>
    tflite::reference_ops::Softmax(
        op_data, GetTensorShape(input), GetTensorData<uint8_t>(input),
 800a852:	f107 0310 	add.w	r3, r7, #16
 800a856:	68f9      	ldr	r1, [r7, #12]
 800a858:	4618      	mov	r0, r3
 800a85a:	f7fb fc93 	bl	8006184 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    tflite::reference_ops::Softmax(
 800a85e:	68f8      	ldr	r0, [r7, #12]
 800a860:	f7fb fb78 	bl	8005f54 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 800a864:	4604      	mov	r4, r0
        GetTensorShape(output), GetTensorData<uint8_t>(output));
 800a866:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a86a:	68b9      	ldr	r1, [r7, #8]
 800a86c:	4618      	mov	r0, r3
 800a86e:	f7fb fc89 	bl	8006184 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    tflite::reference_ops::Softmax(
 800a872:	68b8      	ldr	r0, [r7, #8]
 800a874:	f7fb fb7f 	bl	8005f76 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>
 800a878:	4602      	mov	r2, r0
 800a87a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a87e:	f107 0110 	add.w	r1, r7, #16
 800a882:	9200      	str	r2, [sp, #0]
 800a884:	4622      	mov	r2, r4
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f000 f8c4 	bl	800aa14 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
        GetTensorShape(output), GetTensorData<uint8_t>(output));
 800a88c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a890:	4618      	mov	r0, r3
 800a892:	f7fb fba2 	bl	8005fda <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, GetTensorShape(input), GetTensorData<uint8_t>(input),
 800a896:	f107 0310 	add.w	r3, r7, #16
 800a89a:	4618      	mov	r0, r3
 800a89c:	f7fb fb9d 	bl	8005fda <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::reference_ops::Softmax(
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
          GetTensorShape(output), GetTensorData<int8_t>(output));
    }
  }
}
 800a8a0:	e052      	b.n	800a948 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x10a>
    if (output->type == kTfLiteInt16) {
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	781b      	ldrb	r3, [r3, #0]
 800a8a6:	2b07      	cmp	r3, #7
 800a8a8:	d127      	bne.n	800a8fa <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xbc>
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
 800a8aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a8ae:	68f9      	ldr	r1, [r7, #12]
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f7fb fc67 	bl	8006184 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      tflite::reference_ops::Softmax(
 800a8b6:	68f8      	ldr	r0, [r7, #12]
 800a8b8:	f7fb fca4 	bl	8006204 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 800a8bc:	4604      	mov	r4, r0
          GetTensorShape(output), GetTensorData<int16_t>(output));
 800a8be:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a8c2:	68b9      	ldr	r1, [r7, #8]
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f7fb fc5d 	bl	8006184 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      tflite::reference_ops::Softmax(
 800a8ca:	68b8      	ldr	r0, [r7, #8]
 800a8cc:	f7fe f85e 	bl	800898c <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor>
 800a8d0:	4602      	mov	r2, r0
 800a8d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a8d6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800a8da:	9200      	str	r2, [sp, #0]
 800a8dc:	4622      	mov	r2, r4
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f000 f9b3 	bl	800ac4a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
          GetTensorShape(output), GetTensorData<int16_t>(output));
 800a8e4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f7fb fb76 	bl	8005fda <_ZN6tflite12RuntimeShapeD1Ev>
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
 800a8ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f7fb fb71 	bl	8005fda <_ZN6tflite12RuntimeShapeD1Ev>
}
 800a8f8:	e026      	b.n	800a948 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x10a>
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
 800a8fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a8fe:	68f9      	ldr	r1, [r7, #12]
 800a900:	4618      	mov	r0, r3
 800a902:	f7fb fc3f 	bl	8006184 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      tflite::reference_ops::Softmax(
 800a906:	68f8      	ldr	r0, [r7, #12]
 800a908:	f7fb fc7c 	bl	8006204 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 800a90c:	4604      	mov	r4, r0
          GetTensorShape(output), GetTensorData<int8_t>(output));
 800a90e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800a912:	68b9      	ldr	r1, [r7, #8]
 800a914:	4618      	mov	r0, r3
 800a916:	f7fb fc35 	bl	8006184 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      tflite::reference_ops::Softmax(
 800a91a:	68b8      	ldr	r0, [r7, #8]
 800a91c:	f7fb fc83 	bl	8006226 <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>
 800a920:	4602      	mov	r2, r0
 800a922:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800a926:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800a92a:	9200      	str	r2, [sp, #0]
 800a92c:	4622      	mov	r2, r4
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f000 faa9 	bl	800ae86 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
          GetTensorShape(output), GetTensorData<int8_t>(output));
 800a934:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800a938:	4618      	mov	r0, r3
 800a93a:	f7fb fb4e 	bl	8005fda <_ZN6tflite12RuntimeShapeD1Ev>
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
 800a93e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a942:	4618      	mov	r0, r3
 800a944:	f7fb fb49 	bl	8005fda <_ZN6tflite12RuntimeShapeD1Ev>
}
 800a948:	bf00      	nop
 800a94a:	37a4      	adds	r7, #164	; 0xa4
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd90      	pop	{r4, r7, pc}

0800a950 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
 800a950:	b590      	push	{r4, r7, lr}
 800a952:	b097      	sub	sp, #92	; 0x5c
 800a954:	af02      	add	r7, sp, #8
 800a956:	6078      	str	r0, [r7, #4]
 800a958:	6039      	str	r1, [r7, #0]
  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	695b      	ldr	r3, [r3, #20]
 800a95e:	64fb      	str	r3, [r7, #76]	; 0x4c

  const TfLiteTensor* input = GetInput(context, node, 0);
 800a960:	2200      	movs	r2, #0
 800a962:	6839      	ldr	r1, [r7, #0]
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f7fb fac9 	bl	8005efc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800a96a:	64b8      	str	r0, [r7, #72]	; 0x48
  TfLiteTensor* output = GetOutput(context, node, 0);
 800a96c:	2200      	movs	r2, #0
 800a96e:	6839      	ldr	r1, [r7, #0]
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f7fb fad9 	bl	8005f28 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800a976:	6478      	str	r0, [r7, #68]	; 0x44

  SoftmaxParams op_data;
  TF_LITE_ENSURE_STATUS(
 800a978:	f107 0308 	add.w	r3, r7, #8
 800a97c:	9300      	str	r3, [sp, #0]
 800a97e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a980:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a982:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f7ff fd4d 	bl	800a424 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
 800a98a:	4603      	mov	r3, r0
 800a98c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a990:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a994:	2b00      	cmp	r3, #0
 800a996:	d002      	beq.n	800a99e <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x4e>
 800a998:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a99c:	e02a      	b.n	800a9f4 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xa4>
      CalculateSoftmaxParams(context, input, output, params, &op_data));

  switch (input->type) {
 800a99e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9a0:	781b      	ldrb	r3, [r3, #0]
 800a9a2:	2b09      	cmp	r3, #9
 800a9a4:	d00f      	beq.n	800a9c6 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x76>
 800a9a6:	2b09      	cmp	r3, #9
 800a9a8:	dc16      	bgt.n	800a9d8 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x88>
 800a9aa:	2b01      	cmp	r3, #1
 800a9ac:	d002      	beq.n	800a9b4 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x64>
 800a9ae:	2b03      	cmp	r3, #3
 800a9b0:	d009      	beq.n	800a9c6 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x76>
 800a9b2:	e011      	b.n	800a9d8 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x88>
    case kTfLiteFloat32: {
      SoftmaxFloat(input, output, op_data);
 800a9b4:	f107 0308 	add.w	r3, r7, #8
 800a9b8:	461a      	mov	r2, r3
 800a9ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a9bc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800a9be:	f7ff ff0d 	bl	800a7dc <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	e016      	b.n	800a9f4 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xa4>
    }
    case kTfLiteInt8:
    case kTfLiteUInt8: {
      SoftmaxQuantized(input, output, op_data);
 800a9c6:	f107 0308 	add.w	r3, r7, #8
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a9ce:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800a9d0:	f7ff ff35 	bl	800a83e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	e00d      	b.n	800a9f4 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xa4>
    }
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	695c      	ldr	r4, [r3, #20]
 800a9dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9de:	781b      	ldrb	r3, [r3, #0]
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f7fa fc07 	bl	80051f4 <TfLiteTypeGetName>
 800a9e6:	4602      	mov	r2, r0
 800a9e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9ea:	781b      	ldrb	r3, [r3, #0]
 800a9ec:	4903      	ldr	r1, [pc, #12]	; (800a9fc <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xac>)
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 800a9f2:	2301      	movs	r3, #1
  }
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	3754      	adds	r7, #84	; 0x54
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd90      	pop	{r4, r7, pc}
 800a9fc:	08011560 	.word	0x08011560

0800aa00 <_ZN6tflite3ops5micro16Register_SOFTMAXEv>:
}  // namespace activations

TfLiteRegistration* Register_SOFTMAX() {
 800aa00:	b480      	push	{r7}
 800aa02:	af00      	add	r7, sp, #0
                                 /*invoke=*/activations::SoftmaxEval,
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
 800aa04:	4b02      	ldr	r3, [pc, #8]	; (800aa10 <_ZN6tflite3ops5micro16Register_SOFTMAXEv+0x10>)
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0e:	4770      	bx	lr
 800aa10:	20006cd4 	.word	0x20006cd4

0800aa14 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:

// Quantized softmax with int8/uint8 input and int8/uint8/int16 output.
template <typename InputT, typename OutputT>
inline void Softmax(const SoftmaxParams& params,
 800aa14:	b590      	push	{r4, r7, lr}
 800aa16:	b09f      	sub	sp, #124	; 0x7c
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	60f8      	str	r0, [r7, #12]
 800aa1c:	60b9      	str	r1, [r7, #8]
 800aa1e:	607a      	str	r2, [r7, #4]
 800aa20:	603b      	str	r3, [r7, #0]
                    const RuntimeShape& input_shape, const InputT* input_data,
                    const RuntimeShape& output_shape, OutputT* output_data) {
  const int32 input_beta_multiplier = params.input_multiplier;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	689b      	ldr	r3, [r3, #8]
 800aa26:	667b      	str	r3, [r7, #100]	; 0x64
  const int32 input_beta_left_shift = params.input_left_shift;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	68db      	ldr	r3, [r3, #12]
 800aa2c:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	699b      	ldr	r3, [r3, #24]
 800aa32:	65fb      	str	r3, [r7, #92]	; 0x5c
  using FixedPointScaledDiff =
      gemmlowp::FixedPoint<int32, kScaledDiffIntegerBits>;
  using FixedPointAccum = gemmlowp::FixedPoint<int32, kAccumulationIntegerBits>;
  using FixedPoint0 = gemmlowp::FixedPoint<int32, 0>;

  const int trailing_dim = input_shape.DimensionsCount() - 1;
 800aa34:	68b8      	ldr	r0, [r7, #8]
 800aa36:	f7fb fae6 	bl	8006006 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	3b01      	subs	r3, #1
 800aa3e:	65bb      	str	r3, [r7, #88]	; 0x58
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 800aa40:	683a      	ldr	r2, [r7, #0]
 800aa42:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aa44:	68b8      	ldr	r0, [r7, #8]
 800aa46:	f7fd ffb2 	bl	80089ae <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 800aa4a:	6578      	str	r0, [r7, #84]	; 0x54
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 800aa4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aa4e:	683a      	ldr	r2, [r7, #0]
 800aa50:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aa52:	68b8      	ldr	r0, [r7, #8]
 800aa54:	f7fb fe6c 	bl	8006730 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800aa58:	6538      	str	r0, [r7, #80]	; 0x50

  for (int i = 0; i < outer_size; ++i) {
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	677b      	str	r3, [r7, #116]	; 0x74
 800aa5e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800aa60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa62:	429a      	cmp	r2, r3
 800aa64:	f280 80ed 	bge.w	800ac42 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22e>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 800aa68:	2300      	movs	r3, #0
 800aa6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 800aa6e:	2300      	movs	r3, #0
 800aa70:	673b      	str	r3, [r7, #112]	; 0x70
 800aa72:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800aa74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa76:	429a      	cmp	r2, r3
 800aa78:	da16      	bge.n	800aaa8 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x94>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 800aa7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa7c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aa7e:	fb02 f203 	mul.w	r2, r2, r3
 800aa82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aa84:	4413      	add	r3, r2
 800aa86:	461a      	mov	r2, r3
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	441a      	add	r2, r3
 800aa8c:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800aa90:	4611      	mov	r1, r2
 800aa92:	4618      	mov	r0, r3
 800aa94:	f7ff f9fc 	bl	8009e90 <_ZSt3maxIhERKT_S2_S2_>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	781b      	ldrb	r3, [r3, #0]
 800aa9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 800aaa0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aaa2:	3301      	adds	r3, #1
 800aaa4:	673b      	str	r3, [r7, #112]	; 0x70
 800aaa6:	e7e4      	b.n	800aa72 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    }

    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 800aaa8:	f000 fb0b 	bl	800b0c2 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 800aaac:	4603      	mov	r3, r0
 800aaae:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 800aab0:	2300      	movs	r3, #0
 800aab2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aab4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800aab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aab8:	429a      	cmp	r2, r3
 800aaba:	da2f      	bge.n	800ab1c <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x108>
      int32 input_diff =
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
 800aabc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aabe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aac0:	fb02 f203 	mul.w	r2, r2, r3
 800aac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aac6:	4413      	add	r3, r2
 800aac8:	461a      	mov	r2, r3
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	4413      	add	r3, r2
 800aace:	781b      	ldrb	r3, [r3, #0]
 800aad0:	461a      	mov	r2, r3
 800aad2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32 input_diff =
 800aad6:	1ad3      	subs	r3, r2, r3
 800aad8:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 800aada:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aadc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aade:	429a      	cmp	r2, r3
 800aae0:	db18      	blt.n	800ab14 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x100>
        const int32 input_diff_rescaled =
            MultiplyByQuantizedMultiplierGreaterThanOne(
 800aae2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aae4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800aae6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800aae8:	f7ff fba6 	bl	800a238 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 800aaec:	64b8      	str	r0, [r7, #72]	; 0x48
                input_diff, input_beta_multiplier, input_beta_left_shift);
        const FixedPointScaledDiff scaled_diff_f8 =
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 800aaee:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800aaf0:	f000 faef 	bl	800b0d2 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 800aaf8:	69f8      	ldr	r0, [r7, #28]
 800aafa:	f000 fb19 	bl	800b130 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 800aafe:	4603      	mov	r3, r0
 800ab00:	4618      	mov	r0, r3
 800ab02:	f000 fc5d 	bl	800b3c0 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 800ab06:	4603      	mov	r3, r0
 800ab08:	4619      	mov	r1, r3
 800ab0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab0c:	f000 faf2 	bl	800b0f4 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800ab10:	4603      	mov	r3, r0
 800ab12:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 800ab14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab16:	3301      	adds	r3, #1
 800ab18:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ab1a:	e7cb      	b.n	800aab4 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa0>
      }
    }

    int num_bits_over_unit;
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 800ab1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ab20:	4618      	mov	r0, r3
 800ab22:	f000 fc67 	bl	800b3f4 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 800ab26:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800ab2e:	210c      	movs	r1, #12
 800ab30:	4618      	mov	r0, r3
 800ab32:	f7ff fb94 	bl	800a25e <_ZN6tflite13GetReciprocalEliPi>
 800ab36:	4603      	mov	r3, r0
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f7fe f88a 	bl	8008c52 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	623b      	str	r3, [r7, #32]

    for (int c = 0; c < depth; ++c) {
 800ab42:	2300      	movs	r3, #0
 800ab44:	66bb      	str	r3, [r7, #104]	; 0x68
 800ab46:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ab48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	da75      	bge.n	800ac3a <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x226>
      int32 input_diff =
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
 800ab4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ab50:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ab52:	fb02 f203 	mul.w	r2, r2, r3
 800ab56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ab58:	4413      	add	r3, r2
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	4413      	add	r3, r2
 800ab60:	781b      	ldrb	r3, [r3, #0]
 800ab62:	461a      	mov	r2, r3
 800ab64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32 input_diff =
 800ab68:	1ad3      	subs	r3, r2, r3
 800ab6a:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 800ab6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab70:	429a      	cmp	r2, r3
 800ab72:	db50      	blt.n	800ac16 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x202>
        const int32 input_diff_rescaled =
            MultiplyByQuantizedMultiplierGreaterThanOne(
 800ab74:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ab76:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800ab78:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ab7a:	f7ff fb5d 	bl	800a238 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 800ab7e:	6438      	str	r0, [r7, #64]	; 0x40
                input_diff, input_beta_multiplier, input_beta_left_shift);
        const FixedPointScaledDiff scaled_diff_f8 =
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 800ab80:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ab82:	f000 faa6 	bl	800b0d2 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 800ab86:	4603      	mov	r3, r0
 800ab88:	61bb      	str	r3, [r7, #24]

        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 800ab8a:	69b8      	ldr	r0, [r7, #24]
 800ab8c:	f000 fad0 	bl	800b130 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 800ab90:	4603      	mov	r3, r0
 800ab92:	617b      	str	r3, [r7, #20]
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
            (shifted_scale * exp_in_0).raw(),
 800ab94:	6979      	ldr	r1, [r7, #20]
 800ab96:	6a38      	ldr	r0, [r7, #32]
 800ab98:	f7fe fb54 	bl	8009244 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	633b      	str	r3, [r7, #48]	; 0x30
 800aba0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800aba4:	4618      	mov	r0, r3
 800aba6:	f7fd ff43 	bl	8008a30 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800abaa:	4603      	mov	r3, r0
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
 800abac:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 800abae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abb0:	3217      	adds	r2, #23
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
 800abb2:	4611      	mov	r1, r2
 800abb4:	4618      	mov	r0, r3
 800abb6:	f7fb fc5f 	bl	8006478 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800abba:	63f8      	str	r0, [r7, #60]	; 0x3c

        const int32 shifted_output =
            unsat_output +
            static_cast<int32>(std::numeric_limits<OutputT>::min());
 800abbc:	f7fa fd62 	bl	8005684 <_ZNSt14numeric_limitsIhE3minEv>
 800abc0:	4603      	mov	r3, r0
 800abc2:	461a      	mov	r2, r3
            unsat_output +
 800abc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abc6:	4413      	add	r3, r2
        const int32 shifted_output =
 800abc8:	613b      	str	r3, [r7, #16]

        output_data[i * depth + c] = static_cast<OutputT>(std::max(
            std::min(shifted_output,
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
 800abca:	f7fa fd63 	bl	8005694 <_ZNSt14numeric_limitsIhE3maxEv>
 800abce:	4603      	mov	r3, r0
 800abd0:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
 800abd2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800abd6:	f107 0310 	add.w	r3, r7, #16
 800abda:	4611      	mov	r1, r2
 800abdc:	4618      	mov	r0, r3
 800abde:	f7fb f979 	bl	8005ed4 <_ZSt3minIlERKT_S2_S2_>
 800abe2:	4604      	mov	r4, r0
 800abe4:	f7fa fd4e 	bl	8005684 <_ZNSt14numeric_limitsIhE3minEv>
 800abe8:	4603      	mov	r3, r0
 800abea:	63bb      	str	r3, [r7, #56]	; 0x38
 800abec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800abf0:	4619      	mov	r1, r3
 800abf2:	4620      	mov	r0, r4
 800abf4:	f7fb f95a 	bl	8005eac <_ZSt3maxIlERKT_S2_S2_>
 800abf8:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 800abfa:	6819      	ldr	r1, [r3, #0]
 800abfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800abfe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ac00:	fb02 f203 	mul.w	r2, r2, r3
 800ac04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ac06:	4413      	add	r3, r2
 800ac08:	461a      	mov	r2, r3
 800ac0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ac0e:	4413      	add	r3, r2
 800ac10:	b2ca      	uxtb	r2, r1
 800ac12:	701a      	strb	r2, [r3, #0]
 800ac14:	e00d      	b.n	800ac32 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x21e>
      } else {
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 800ac16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ac18:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ac1a:	fb02 f203 	mul.w	r2, r2, r3
 800ac1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ac20:	4413      	add	r3, r2
 800ac22:	461a      	mov	r2, r3
 800ac24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ac28:	189c      	adds	r4, r3, r2
 800ac2a:	f7fa fd2b 	bl	8005684 <_ZNSt14numeric_limitsIhE3minEv>
 800ac2e:	4603      	mov	r3, r0
 800ac30:	7023      	strb	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 800ac32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ac34:	3301      	adds	r3, #1
 800ac36:	66bb      	str	r3, [r7, #104]	; 0x68
 800ac38:	e785      	b.n	800ab46 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x132>
  for (int i = 0; i < outer_size; ++i) {
 800ac3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ac3c:	3301      	adds	r3, #1
 800ac3e:	677b      	str	r3, [r7, #116]	; 0x74
 800ac40:	e70d      	b.n	800aa5e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
      }
    }
  }
}
 800ac42:	bf00      	nop
 800ac44:	377c      	adds	r7, #124	; 0x7c
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd90      	pop	{r4, r7, pc}

0800ac4a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 800ac4a:	b590      	push	{r4, r7, lr}
 800ac4c:	b09f      	sub	sp, #124	; 0x7c
 800ac4e:	af00      	add	r7, sp, #0
 800ac50:	60f8      	str	r0, [r7, #12]
 800ac52:	60b9      	str	r1, [r7, #8]
 800ac54:	607a      	str	r2, [r7, #4]
 800ac56:	603b      	str	r3, [r7, #0]
  const int32 input_beta_multiplier = params.input_multiplier;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	689b      	ldr	r3, [r3, #8]
 800ac5c:	667b      	str	r3, [r7, #100]	; 0x64
  const int32 input_beta_left_shift = params.input_left_shift;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	68db      	ldr	r3, [r3, #12]
 800ac62:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	699b      	ldr	r3, [r3, #24]
 800ac68:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 800ac6a:	68b8      	ldr	r0, [r7, #8]
 800ac6c:	f7fb f9cb 	bl	8006006 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800ac70:	4603      	mov	r3, r0
 800ac72:	3b01      	subs	r3, #1
 800ac74:	65bb      	str	r3, [r7, #88]	; 0x58
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 800ac76:	683a      	ldr	r2, [r7, #0]
 800ac78:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ac7a:	68b8      	ldr	r0, [r7, #8]
 800ac7c:	f7fd fe97 	bl	80089ae <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 800ac80:	6578      	str	r0, [r7, #84]	; 0x54
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 800ac82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ac84:	683a      	ldr	r2, [r7, #0]
 800ac86:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ac88:	68b8      	ldr	r0, [r7, #8]
 800ac8a:	f7fb fd51 	bl	8006730 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800ac8e:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 800ac90:	2300      	movs	r3, #0
 800ac92:	677b      	str	r3, [r7, #116]	; 0x74
 800ac94:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ac96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	f280 80f0 	bge.w	800ae7e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x234>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 800ac9e:	2380      	movs	r3, #128	; 0x80
 800aca0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 800aca4:	2300      	movs	r3, #0
 800aca6:	673b      	str	r3, [r7, #112]	; 0x70
 800aca8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800acaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acac:	429a      	cmp	r2, r3
 800acae:	da17      	bge.n	800ace0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x96>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 800acb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800acb2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800acb4:	fb02 f203 	mul.w	r2, r2, r3
 800acb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800acba:	4413      	add	r3, r2
 800acbc:	461a      	mov	r2, r3
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	441a      	add	r2, r3
 800acc2:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800acc6:	4611      	mov	r1, r2
 800acc8:	4618      	mov	r0, r3
 800acca:	f7ff f909 	bl	8009ee0 <_ZSt3maxIaERKT_S2_S2_>
 800acce:	4603      	mov	r3, r0
 800acd0:	f993 3000 	ldrsb.w	r3, [r3]
 800acd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 800acd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800acda:	3301      	adds	r3, #1
 800acdc:	673b      	str	r3, [r7, #112]	; 0x70
 800acde:	e7e3      	b.n	800aca8 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 800ace0:	f000 f9ef 	bl	800b0c2 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 800ace4:	4603      	mov	r3, r0
 800ace6:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 800ace8:	2300      	movs	r3, #0
 800acea:	66fb      	str	r3, [r7, #108]	; 0x6c
 800acec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800acee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acf0:	429a      	cmp	r2, r3
 800acf2:	da30      	bge.n	800ad56 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x10c>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
 800acf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800acf6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800acf8:	fb02 f203 	mul.w	r2, r2, r3
 800acfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acfe:	4413      	add	r3, r2
 800ad00:	461a      	mov	r2, r3
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	4413      	add	r3, r2
 800ad06:	f993 3000 	ldrsb.w	r3, [r3]
 800ad0a:	461a      	mov	r2, r3
 800ad0c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32 input_diff =
 800ad10:	1ad3      	subs	r3, r2, r3
 800ad12:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 800ad14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ad16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	db18      	blt.n	800ad4e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x104>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 800ad1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ad1e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800ad20:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ad22:	f7ff fa89 	bl	800a238 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 800ad26:	64b8      	str	r0, [r7, #72]	; 0x48
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 800ad28:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ad2a:	f000 f9d2 	bl	800b0d2 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 800ad32:	69f8      	ldr	r0, [r7, #28]
 800ad34:	f000 f9fc 	bl	800b130 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f000 fb40 	bl	800b3c0 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 800ad40:	4603      	mov	r3, r0
 800ad42:	4619      	mov	r1, r3
 800ad44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad46:	f000 f9d5 	bl	800b0f4 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 800ad4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad50:	3301      	adds	r3, #1
 800ad52:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ad54:	e7ca      	b.n	800acec <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa2>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 800ad56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f000 fb4a 	bl	800b3f4 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 800ad60:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800ad68:	210c      	movs	r1, #12
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	f7ff fa77 	bl	800a25e <_ZN6tflite13GetReciprocalEliPi>
 800ad70:	4603      	mov	r3, r0
 800ad72:	4618      	mov	r0, r3
 800ad74:	f7fd ff6d 	bl	8008c52 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	66bb      	str	r3, [r7, #104]	; 0x68
 800ad80:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ad82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad84:	429a      	cmp	r2, r3
 800ad86:	da76      	bge.n	800ae76 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22c>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
 800ad88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad8a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ad8c:	fb02 f203 	mul.w	r2, r2, r3
 800ad90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ad92:	4413      	add	r3, r2
 800ad94:	461a      	mov	r2, r3
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	4413      	add	r3, r2
 800ad9a:	f993 3000 	ldrsb.w	r3, [r3]
 800ad9e:	461a      	mov	r2, r3
 800ada0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32 input_diff =
 800ada4:	1ad3      	subs	r3, r2, r3
 800ada6:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 800ada8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800adaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800adac:	429a      	cmp	r2, r3
 800adae:	db50      	blt.n	800ae52 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x208>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 800adb0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800adb2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800adb4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800adb6:	f7ff fa3f 	bl	800a238 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 800adba:	6438      	str	r0, [r7, #64]	; 0x40
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 800adbc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800adbe:	f000 f988 	bl	800b0d2 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 800adc2:	4603      	mov	r3, r0
 800adc4:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 800adc6:	69b8      	ldr	r0, [r7, #24]
 800adc8:	f000 f9b2 	bl	800b130 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 800adcc:	4603      	mov	r3, r0
 800adce:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 800add0:	6979      	ldr	r1, [r7, #20]
 800add2:	6a38      	ldr	r0, [r7, #32]
 800add4:	f7fe fa36 	bl	8009244 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800add8:	4603      	mov	r3, r0
 800adda:	633b      	str	r3, [r7, #48]	; 0x30
 800addc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ade0:	4618      	mov	r0, r3
 800ade2:	f7fd fe25 	bl	8008a30 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800ade6:	4603      	mov	r3, r0
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
 800ade8:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 800adea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adec:	320f      	adds	r2, #15
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
 800adee:	4611      	mov	r1, r2
 800adf0:	4618      	mov	r0, r3
 800adf2:	f7fb fb41 	bl	8006478 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800adf6:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32>(std::numeric_limits<OutputT>::min());
 800adf8:	f7f6 f934 	bl	8001064 <_ZNSt14numeric_limitsIsE3minEv>
 800adfc:	4603      	mov	r3, r0
 800adfe:	461a      	mov	r2, r3
            unsat_output +
 800ae00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae02:	4413      	add	r3, r2
        const int32 shifted_output =
 800ae04:	613b      	str	r3, [r7, #16]
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
 800ae06:	f7f6 f937 	bl	8001078 <_ZNSt14numeric_limitsIsE3maxEv>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
 800ae0e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800ae12:	f107 0310 	add.w	r3, r7, #16
 800ae16:	4611      	mov	r1, r2
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f7fb f85b 	bl	8005ed4 <_ZSt3minIlERKT_S2_S2_>
 800ae1e:	4604      	mov	r4, r0
 800ae20:	f7f6 f920 	bl	8001064 <_ZNSt14numeric_limitsIsE3minEv>
 800ae24:	4603      	mov	r3, r0
 800ae26:	63bb      	str	r3, [r7, #56]	; 0x38
 800ae28:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ae2c:	4619      	mov	r1, r3
 800ae2e:	4620      	mov	r0, r4
 800ae30:	f7fb f83c 	bl	8005eac <_ZSt3maxIlERKT_S2_S2_>
 800ae34:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 800ae36:	6819      	ldr	r1, [r3, #0]
 800ae38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ae3a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ae3c:	fb02 f203 	mul.w	r2, r2, r3
 800ae40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ae42:	4413      	add	r3, r2
 800ae44:	005b      	lsls	r3, r3, #1
 800ae46:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ae4a:	4413      	add	r3, r2
 800ae4c:	b20a      	sxth	r2, r1
 800ae4e:	801a      	strh	r2, [r3, #0]
 800ae50:	e00d      	b.n	800ae6e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x224>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 800ae52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ae54:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ae56:	fb02 f203 	mul.w	r2, r2, r3
 800ae5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ae5c:	4413      	add	r3, r2
 800ae5e:	005b      	lsls	r3, r3, #1
 800ae60:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ae64:	18d4      	adds	r4, r2, r3
 800ae66:	f7f6 f8fd 	bl	8001064 <_ZNSt14numeric_limitsIsE3minEv>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	8023      	strh	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 800ae6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ae70:	3301      	adds	r3, #1
 800ae72:	66bb      	str	r3, [r7, #104]	; 0x68
 800ae74:	e784      	b.n	800ad80 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x136>
  for (int i = 0; i < outer_size; ++i) {
 800ae76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ae78:	3301      	adds	r3, #1
 800ae7a:	677b      	str	r3, [r7, #116]	; 0x74
 800ae7c:	e70a      	b.n	800ac94 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 800ae7e:	bf00      	nop
 800ae80:	377c      	adds	r7, #124	; 0x7c
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd90      	pop	{r4, r7, pc}

0800ae86 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 800ae86:	b590      	push	{r4, r7, lr}
 800ae88:	b09f      	sub	sp, #124	; 0x7c
 800ae8a:	af00      	add	r7, sp, #0
 800ae8c:	60f8      	str	r0, [r7, #12]
 800ae8e:	60b9      	str	r1, [r7, #8]
 800ae90:	607a      	str	r2, [r7, #4]
 800ae92:	603b      	str	r3, [r7, #0]
  const int32 input_beta_multiplier = params.input_multiplier;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	689b      	ldr	r3, [r3, #8]
 800ae98:	667b      	str	r3, [r7, #100]	; 0x64
  const int32 input_beta_left_shift = params.input_left_shift;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	68db      	ldr	r3, [r3, #12]
 800ae9e:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	699b      	ldr	r3, [r3, #24]
 800aea4:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 800aea6:	68b8      	ldr	r0, [r7, #8]
 800aea8:	f7fb f8ad 	bl	8006006 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800aeac:	4603      	mov	r3, r0
 800aeae:	3b01      	subs	r3, #1
 800aeb0:	65bb      	str	r3, [r7, #88]	; 0x58
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 800aeb2:	683a      	ldr	r2, [r7, #0]
 800aeb4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aeb6:	68b8      	ldr	r0, [r7, #8]
 800aeb8:	f7fd fd79 	bl	80089ae <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 800aebc:	6578      	str	r0, [r7, #84]	; 0x54
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 800aebe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aec0:	683a      	ldr	r2, [r7, #0]
 800aec2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aec4:	68b8      	ldr	r0, [r7, #8]
 800aec6:	f7fb fc33 	bl	8006730 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800aeca:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 800aecc:	2300      	movs	r3, #0
 800aece:	677b      	str	r3, [r7, #116]	; 0x74
 800aed0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800aed2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aed4:	429a      	cmp	r2, r3
 800aed6:	f280 80f0 	bge.w	800b0ba <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x234>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 800aeda:	2380      	movs	r3, #128	; 0x80
 800aedc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 800aee0:	2300      	movs	r3, #0
 800aee2:	673b      	str	r3, [r7, #112]	; 0x70
 800aee4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800aee6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aee8:	429a      	cmp	r2, r3
 800aeea:	da17      	bge.n	800af1c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x96>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 800aeec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aeee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aef0:	fb02 f203 	mul.w	r2, r2, r3
 800aef4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aef6:	4413      	add	r3, r2
 800aef8:	461a      	mov	r2, r3
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	441a      	add	r2, r3
 800aefe:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800af02:	4611      	mov	r1, r2
 800af04:	4618      	mov	r0, r3
 800af06:	f7fe ffeb 	bl	8009ee0 <_ZSt3maxIaERKT_S2_S2_>
 800af0a:	4603      	mov	r3, r0
 800af0c:	f993 3000 	ldrsb.w	r3, [r3]
 800af10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 800af14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800af16:	3301      	adds	r3, #1
 800af18:	673b      	str	r3, [r7, #112]	; 0x70
 800af1a:	e7e3      	b.n	800aee4 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 800af1c:	f000 f8d1 	bl	800b0c2 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 800af20:	4603      	mov	r3, r0
 800af22:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 800af24:	2300      	movs	r3, #0
 800af26:	66fb      	str	r3, [r7, #108]	; 0x6c
 800af28:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800af2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af2c:	429a      	cmp	r2, r3
 800af2e:	da30      	bge.n	800af92 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x10c>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
 800af30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800af32:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800af34:	fb02 f203 	mul.w	r2, r2, r3
 800af38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af3a:	4413      	add	r3, r2
 800af3c:	461a      	mov	r2, r3
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	4413      	add	r3, r2
 800af42:	f993 3000 	ldrsb.w	r3, [r3]
 800af46:	461a      	mov	r2, r3
 800af48:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32 input_diff =
 800af4c:	1ad3      	subs	r3, r2, r3
 800af4e:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 800af50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800af52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800af54:	429a      	cmp	r2, r3
 800af56:	db18      	blt.n	800af8a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x104>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 800af58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800af5a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800af5c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800af5e:	f7ff f96b 	bl	800a238 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 800af62:	64b8      	str	r0, [r7, #72]	; 0x48
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 800af64:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800af66:	f000 f8b4 	bl	800b0d2 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 800af6a:	4603      	mov	r3, r0
 800af6c:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 800af6e:	69f8      	ldr	r0, [r7, #28]
 800af70:	f000 f8de 	bl	800b130 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 800af74:	4603      	mov	r3, r0
 800af76:	4618      	mov	r0, r3
 800af78:	f000 fa22 	bl	800b3c0 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 800af7c:	4603      	mov	r3, r0
 800af7e:	4619      	mov	r1, r3
 800af80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af82:	f000 f8b7 	bl	800b0f4 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800af86:	4603      	mov	r3, r0
 800af88:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 800af8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af8c:	3301      	adds	r3, #1
 800af8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800af90:	e7ca      	b.n	800af28 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa2>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 800af92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800af96:	4618      	mov	r0, r3
 800af98:	f000 fa2c 	bl	800b3f4 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 800af9c:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800afa4:	210c      	movs	r1, #12
 800afa6:	4618      	mov	r0, r3
 800afa8:	f7ff f959 	bl	800a25e <_ZN6tflite13GetReciprocalEliPi>
 800afac:	4603      	mov	r3, r0
 800afae:	4618      	mov	r0, r3
 800afb0:	f7fd fe4f 	bl	8008c52 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800afb4:	4603      	mov	r3, r0
 800afb6:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 800afb8:	2300      	movs	r3, #0
 800afba:	66bb      	str	r3, [r7, #104]	; 0x68
 800afbc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800afbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800afc0:	429a      	cmp	r2, r3
 800afc2:	da76      	bge.n	800b0b2 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22c>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
 800afc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800afc6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800afc8:	fb02 f203 	mul.w	r2, r2, r3
 800afcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800afce:	4413      	add	r3, r2
 800afd0:	461a      	mov	r2, r3
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	4413      	add	r3, r2
 800afd6:	f993 3000 	ldrsb.w	r3, [r3]
 800afda:	461a      	mov	r2, r3
 800afdc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32 input_diff =
 800afe0:	1ad3      	subs	r3, r2, r3
 800afe2:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 800afe4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800afe6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800afe8:	429a      	cmp	r2, r3
 800afea:	db50      	blt.n	800b08e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x208>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 800afec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800afee:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800aff0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800aff2:	f7ff f921 	bl	800a238 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 800aff6:	6438      	str	r0, [r7, #64]	; 0x40
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 800aff8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800affa:	f000 f86a 	bl	800b0d2 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 800affe:	4603      	mov	r3, r0
 800b000:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 800b002:	69b8      	ldr	r0, [r7, #24]
 800b004:	f000 f894 	bl	800b130 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 800b008:	4603      	mov	r3, r0
 800b00a:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 800b00c:	6979      	ldr	r1, [r7, #20]
 800b00e:	6a38      	ldr	r0, [r7, #32]
 800b010:	f7fe f918 	bl	8009244 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800b014:	4603      	mov	r3, r0
 800b016:	633b      	str	r3, [r7, #48]	; 0x30
 800b018:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b01c:	4618      	mov	r0, r3
 800b01e:	f7fd fd07 	bl	8008a30 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800b022:	4603      	mov	r3, r0
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
 800b024:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 800b026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b028:	3217      	adds	r2, #23
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
 800b02a:	4611      	mov	r1, r2
 800b02c:	4618      	mov	r0, r3
 800b02e:	f7fb fa23 	bl	8006478 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800b032:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32>(std::numeric_limits<OutputT>::min());
 800b034:	f7fa fb15 	bl	8005662 <_ZNSt14numeric_limitsIaE3minEv>
 800b038:	4603      	mov	r3, r0
 800b03a:	461a      	mov	r2, r3
            unsat_output +
 800b03c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b03e:	4413      	add	r3, r2
        const int32 shifted_output =
 800b040:	613b      	str	r3, [r7, #16]
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
 800b042:	f7fa fb17 	bl	8005674 <_ZNSt14numeric_limitsIaE3maxEv>
 800b046:	4603      	mov	r3, r0
 800b048:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
 800b04a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800b04e:	f107 0310 	add.w	r3, r7, #16
 800b052:	4611      	mov	r1, r2
 800b054:	4618      	mov	r0, r3
 800b056:	f7fa ff3d 	bl	8005ed4 <_ZSt3minIlERKT_S2_S2_>
 800b05a:	4604      	mov	r4, r0
 800b05c:	f7fa fb01 	bl	8005662 <_ZNSt14numeric_limitsIaE3minEv>
 800b060:	4603      	mov	r3, r0
 800b062:	63bb      	str	r3, [r7, #56]	; 0x38
 800b064:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b068:	4619      	mov	r1, r3
 800b06a:	4620      	mov	r0, r4
 800b06c:	f7fa ff1e 	bl	8005eac <_ZSt3maxIlERKT_S2_S2_>
 800b070:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 800b072:	6819      	ldr	r1, [r3, #0]
 800b074:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b076:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b078:	fb02 f203 	mul.w	r2, r2, r3
 800b07c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b07e:	4413      	add	r3, r2
 800b080:	461a      	mov	r2, r3
 800b082:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b086:	4413      	add	r3, r2
 800b088:	b24a      	sxtb	r2, r1
 800b08a:	701a      	strb	r2, [r3, #0]
 800b08c:	e00d      	b.n	800b0aa <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x224>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 800b08e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b090:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b092:	fb02 f203 	mul.w	r2, r2, r3
 800b096:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b098:	4413      	add	r3, r2
 800b09a:	461a      	mov	r2, r3
 800b09c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b0a0:	189c      	adds	r4, r3, r2
 800b0a2:	f7fa fade 	bl	8005662 <_ZNSt14numeric_limitsIaE3minEv>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	7023      	strb	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 800b0aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b0ac:	3301      	adds	r3, #1
 800b0ae:	66bb      	str	r3, [r7, #104]	; 0x68
 800b0b0:	e784      	b.n	800afbc <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x136>
  for (int i = 0; i < outer_size; ++i) {
 800b0b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b0b4:	3301      	adds	r3, #1
 800b0b6:	677b      	str	r3, [r7, #116]	; 0x74
 800b0b8:	e70a      	b.n	800aed0 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 800b0ba:	bf00      	nop
 800b0bc:	377c      	adds	r7, #124	; 0x7c
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd90      	pop	{r4, r7, pc}

0800b0c2 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>:
  static FixedPoint Zero() { return FromScalarRaw(0); }
 800b0c2:	b580      	push	{r7, lr}
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	2000      	movs	r0, #0
 800b0c8:	f000 f99f 	bl	800b40a <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	bd80      	pop	{r7, pc}

0800b0d2 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 800b0d2:	b580      	push	{r7, lr}
 800b0d4:	b084      	sub	sp, #16
 800b0d6:	af00      	add	r7, sp, #0
 800b0d8:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 800b0da:	f107 030c 	add.w	r3, r7, #12
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f000 f9a7 	bl	800b432 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800b0e4:	4602      	mov	r2, r0
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6013      	str	r3, [r2, #0]
    return retval;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
  }
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	3710      	adds	r7, #16
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}

0800b0f4 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 800b0f4:	b590      	push	{r4, r7, lr}
 800b0f6:	b083      	sub	sp, #12
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
 800b0fc:	6039      	str	r1, [r7, #0]
 800b0fe:	1d3b      	adds	r3, r7, #4
 800b100:	4618      	mov	r0, r3
 800b102:	f000 f977 	bl	800b3f4 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 800b106:	4603      	mov	r3, r0
 800b108:	681c      	ldr	r4, [r3, #0]
 800b10a:	463b      	mov	r3, r7
 800b10c:	4618      	mov	r0, r3
 800b10e:	f000 f971 	bl	800b3f4 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 800b112:	4603      	mov	r3, r0
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	4619      	mov	r1, r3
 800b118:	4620      	mov	r0, r4
 800b11a:	f7fb fa9f 	bl	800665c <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800b11e:	4603      	mov	r3, r0
 800b120:	4618      	mov	r0, r3
 800b122:	f000 f991 	bl	800b448 <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>
 800b126:	4603      	mov	r3, r0
 800b128:	4618      	mov	r0, r3
 800b12a:	370c      	adds	r7, #12
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd90      	pop	{r4, r7, pc}

0800b130 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
 800b130:	b590      	push	{r4, r7, lr}
 800b132:	b091      	sub	sp, #68	; 0x44
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
  const InputF kOneQuarter = InputF::template ConstantPOT<-2>();
 800b138:	f000 f997 	bl	800b46a <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>
 800b13c:	4603      	mov	r3, r0
 800b13e:	637b      	str	r3, [r7, #52]	; 0x34
  InputF mask = kOneQuarter - InputF::FromScalarRaw(1);
 800b140:	2001      	movs	r0, #1
 800b142:	f000 f99b 	bl	800b47c <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 800b146:	4603      	mov	r3, r0
 800b148:	4619      	mov	r1, r3
 800b14a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b14c:	f000 f9aa 	bl	800b4a4 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800b150:	4603      	mov	r3, r0
 800b152:	633b      	str	r3, [r7, #48]	; 0x30
  InputF a_mod_quarter_minus_one_quarter = (a & mask) - kOneQuarter;
 800b154:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f000 f9c2 	bl	800b4e0 <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800b15c:	4603      	mov	r3, r0
 800b15e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b160:	4618      	mov	r0, r3
 800b162:	f000 f99f 	bl	800b4a4 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800b166:	4603      	mov	r3, r0
 800b168:	62fb      	str	r3, [r7, #44]	; 0x2c
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
 800b16a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b16c:	f000 f9d6 	bl	800b51c <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 800b170:	4603      	mov	r3, r0
 800b172:	4618      	mov	r0, r3
 800b174:	f7fe f804 	bl	8009180 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>
 800b178:	4603      	mov	r3, r0
 800b17a:	62bb      	str	r3, [r7, #40]	; 0x28
  tRawType remainder = (a_mod_quarter_minus_one_quarter - a).raw();
 800b17c:	6879      	ldr	r1, [r7, #4]
 800b17e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b180:	f000 f990 	bl	800b4a4 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800b184:	4603      	mov	r3, r0
 800b186:	63bb      	str	r3, [r7, #56]	; 0x38
 800b188:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b18c:	4618      	mov	r0, r3
 800b18e:	f000 f950 	bl	800b432 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800b192:	4603      	mov	r3, r0
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	63fb      	str	r3, [r7, #60]	; 0x3c
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
 800b198:	4883      	ldr	r0, [pc, #524]	; (800b3a8 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x278>)
 800b19a:	f7fd fc68 	bl	8008a6e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f7fd fc50 	bl	8008a46 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	627b      	str	r3, [r7, #36]	; 0x24
 800b1aa:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800b1ae:	f7fb fa19 	bl	80065e4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	4619      	mov	r1, r3
 800b1b6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b1b8:	f7fb fa1f 	bl	80065fa <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	4618      	mov	r0, r3
 800b1c0:	f7fb fa6e 	bl	80066a0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800b1c4:	4604      	mov	r4, r0
 800b1c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b1c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1ca:	f7fe f83b 	bl	8009244 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1d2:	4619      	mov	r1, r3
 800b1d4:	4620      	mov	r0, r4
 800b1d6:	f7fd fed5 	bl	8008f84 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
 800b1de:	4873      	ldr	r0, [pc, #460]	; (800b3ac <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x27c>)
 800b1e0:	f7fd fc45 	bl	8008a6e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f7fd fc2d 	bl	8008a46 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	623b      	str	r3, [r7, #32]
 800b1f0:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800b1f4:	f7fb f9f6 	bl	80065e4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	4619      	mov	r1, r3
 800b1fc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b1fe:	f7fb f9fc 	bl	80065fa <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800b202:	4603      	mov	r3, r0
 800b204:	4618      	mov	r0, r3
 800b206:	f7fb fa4b 	bl	80066a0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800b20a:	4604      	mov	r4, r0
 800b20c:	6a39      	ldr	r1, [r7, #32]
 800b20e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b210:	f7fe f818 	bl	8009244 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800b214:	4603      	mov	r3, r0
 800b216:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b218:	4619      	mov	r1, r3
 800b21a:	4620      	mov	r0, r4
 800b21c:	f7fd feb2 	bl	8008f84 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800b220:	4603      	mov	r3, r0
 800b222:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
 800b224:	4862      	ldr	r0, [pc, #392]	; (800b3b0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x280>)
 800b226:	f7fd fc22 	bl	8008a6e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800b22a:	4603      	mov	r3, r0
 800b22c:	4618      	mov	r0, r3
 800b22e:	f7fd fc0a 	bl	8008a46 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800b232:	4603      	mov	r3, r0
 800b234:	61fb      	str	r3, [r7, #28]
 800b236:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800b23a:	f7fb f9d3 	bl	80065e4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800b23e:	4603      	mov	r3, r0
 800b240:	4619      	mov	r1, r3
 800b242:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b244:	f7fb f9d9 	bl	80065fa <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800b248:	4603      	mov	r3, r0
 800b24a:	4618      	mov	r0, r3
 800b24c:	f7fb fa28 	bl	80066a0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800b250:	4604      	mov	r4, r0
 800b252:	69f9      	ldr	r1, [r7, #28]
 800b254:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b256:	f7fd fff5 	bl	8009244 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800b25a:	4603      	mov	r3, r0
 800b25c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b25e:	4619      	mov	r1, r3
 800b260:	4620      	mov	r0, r4
 800b262:	f7fd fe8f 	bl	8008f84 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800b266:	4603      	mov	r3, r0
 800b268:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
 800b26a:	4852      	ldr	r0, [pc, #328]	; (800b3b4 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x284>)
 800b26c:	f7fd fbff 	bl	8008a6e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800b270:	4603      	mov	r3, r0
 800b272:	4618      	mov	r0, r3
 800b274:	f7fd fbe7 	bl	8008a46 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800b278:	4603      	mov	r3, r0
 800b27a:	61bb      	str	r3, [r7, #24]
 800b27c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800b280:	f7fb f9b0 	bl	80065e4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800b284:	4603      	mov	r3, r0
 800b286:	4619      	mov	r1, r3
 800b288:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b28a:	f7fb f9b6 	bl	80065fa <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800b28e:	4603      	mov	r3, r0
 800b290:	4618      	mov	r0, r3
 800b292:	f7fb fa05 	bl	80066a0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800b296:	4604      	mov	r4, r0
 800b298:	69b9      	ldr	r1, [r7, #24]
 800b29a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b29c:	f7fd ffd2 	bl	8009244 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2a4:	4619      	mov	r1, r3
 800b2a6:	4620      	mov	r0, r4
 800b2a8:	f7fd fe6c 	bl	8008f84 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
 800b2b0:	4841      	ldr	r0, [pc, #260]	; (800b3b8 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x288>)
 800b2b2:	f7fd fbdc 	bl	8008a6e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	f7fd fbc4 	bl	8008a46 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800b2be:	4603      	mov	r3, r0
 800b2c0:	617b      	str	r3, [r7, #20]
 800b2c2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800b2c6:	f7fb f98d 	bl	80065e4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	4619      	mov	r1, r3
 800b2ce:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b2d0:	f7fb f993 	bl	80065fa <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f7fb f9e2 	bl	80066a0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800b2dc:	4604      	mov	r4, r0
 800b2de:	6979      	ldr	r1, [r7, #20]
 800b2e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2e2:	f7fd ffaf 	bl	8009244 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2ea:	4619      	mov	r1, r3
 800b2ec:	4620      	mov	r0, r4
 800b2ee:	f7fd fe49 	bl	8008f84 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
 800b2f6:	4831      	ldr	r0, [pc, #196]	; (800b3bc <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x28c>)
 800b2f8:	f7fd fbb9 	bl	8008a6e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	4618      	mov	r0, r3
 800b300:	f7fd fba1 	bl	8008a46 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800b304:	4603      	mov	r3, r0
 800b306:	613b      	str	r3, [r7, #16]
 800b308:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800b30c:	f7fb f96a 	bl	80065e4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800b310:	4603      	mov	r3, r0
 800b312:	4619      	mov	r1, r3
 800b314:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b316:	f7fb f970 	bl	80065fa <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800b31a:	4603      	mov	r3, r0
 800b31c:	4618      	mov	r0, r3
 800b31e:	f7fb f9bf 	bl	80066a0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800b322:	4604      	mov	r4, r0
 800b324:	6939      	ldr	r1, [r7, #16]
 800b326:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b328:	f7fd ff8c 	bl	8009244 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800b32c:	4603      	mov	r3, r0
 800b32e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b330:	4619      	mov	r1, r3
 800b332:	4620      	mov	r0, r4
 800b334:	f7fd fe26 	bl	8008f84 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800b338:	4603      	mov	r3, r0
 800b33a:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
 800b33c:	20f2      	movs	r0, #242	; 0xf2
 800b33e:	f7fd fb96 	bl	8008a6e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800b342:	4603      	mov	r3, r0
 800b344:	4618      	mov	r0, r3
 800b346:	f7fd fb7e 	bl	8008a46 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800b34a:	4603      	mov	r3, r0
 800b34c:	60fb      	str	r3, [r7, #12]
 800b34e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800b352:	f7fb f947 	bl	80065e4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800b356:	4603      	mov	r3, r0
 800b358:	4619      	mov	r1, r3
 800b35a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b35c:	f7fb f94d 	bl	80065fa <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800b360:	4603      	mov	r3, r0
 800b362:	4618      	mov	r0, r3
 800b364:	f7fb f99c 	bl	80066a0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800b368:	4604      	mov	r4, r0
 800b36a:	68f9      	ldr	r1, [r7, #12]
 800b36c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b36e:	f7fd ff69 	bl	8009244 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800b372:	4603      	mov	r3, r0
 800b374:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b376:	4619      	mov	r1, r3
 800b378:	4620      	mov	r0, r4
 800b37a:	f7fd fe03 	bl	8008f84 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800b37e:	4603      	mov	r3, r0
 800b380:	62bb      	str	r3, [r7, #40]	; 0x28
  result = SelectUsingMask(MaskIfZero(a), ResultF::One(), result);
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f000 f8e4 	bl	800b550 <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>
 800b388:	4604      	mov	r4, r0
 800b38a:	f7fd fcd3 	bl	8008d34 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 800b38e:	4603      	mov	r3, r0
 800b390:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b392:	4619      	mov	r1, r3
 800b394:	4620      	mov	r0, r4
 800b396:	f7fd fdf5 	bl	8008f84 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800b39a:	4603      	mov	r3, r0
 800b39c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800b39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	3744      	adds	r7, #68	; 0x44
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd90      	pop	{r4, r7, pc}
 800b3a8:	63afbe7b 	.word	0x63afbe7b
 800b3ac:	4da2cbf2 	.word	0x4da2cbf2
 800b3b0:	2f16ac6c 	.word	0x2f16ac6c
 800b3b4:	1152aaa4 	.word	0x1152aaa4
 800b3b8:	02582ab7 	.word	0x02582ab7
 800b3bc:	000afe11 	.word	0x000afe11

0800b3c0 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 800b3c0:	b5b0      	push	{r4, r5, r7, lr}
 800b3c2:	b084      	sub	sp, #16
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 800b3c8:	1d3b      	adds	r3, r7, #4
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f7fd fb30 	bl	8008a30 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	681d      	ldr	r5, [r3, #0]
 800b3d4:	f107 030c 	add.w	r3, r7, #12
 800b3d8:	4618      	mov	r0, r3
 800b3da:	f000 f80b 	bl	800b3f4 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 800b3de:	4604      	mov	r4, r0
 800b3e0:	4628      	mov	r0, r5
 800b3e2:	f000 f8c7 	bl	800b574 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	6023      	str	r3, [r4, #0]
  return result;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3710      	adds	r7, #16
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bdb0      	pop	{r4, r5, r7, pc}

0800b3f4 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>:
  RawType& raw() { return i_; }
 800b3f4:	b480      	push	{r7}
 800b3f6:	b083      	sub	sp, #12
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	4618      	mov	r0, r3
 800b400:	370c      	adds	r7, #12
 800b402:	46bd      	mov	sp, r7
 800b404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b408:	4770      	bx	lr

0800b40a <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 800b40a:	b590      	push	{r4, r7, lr}
 800b40c:	b085      	sub	sp, #20
 800b40e:	af00      	add	r7, sp, #0
 800b410:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 800b412:	f107 030c 	add.w	r3, r7, #12
 800b416:	4618      	mov	r0, r3
 800b418:	f7ff ffec 	bl	800b3f4 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 800b41c:	4604      	mov	r4, r0
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	f7fb f8e0 	bl	80065e4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800b424:	4603      	mov	r3, r0
 800b426:	6023      	str	r3, [r4, #0]
    return retval;
 800b428:	68fb      	ldr	r3, [r7, #12]
  }
 800b42a:	4618      	mov	r0, r3
 800b42c:	3714      	adds	r7, #20
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd90      	pop	{r4, r7, pc}

0800b432 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>:
  RawType& raw() { return i_; }
 800b432:	b480      	push	{r7}
 800b434:	b083      	sub	sp, #12
 800b436:	af00      	add	r7, sp, #0
 800b438:	6078      	str	r0, [r7, #4]
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	4618      	mov	r0, r3
 800b43e:	370c      	adds	r7, #12
 800b440:	46bd      	mov	sp, r7
 800b442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b446:	4770      	bx	lr

0800b448 <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 800b448:	b580      	push	{r7, lr}
 800b44a:	b084      	sub	sp, #16
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 800b450:	f107 030c 	add.w	r3, r7, #12
 800b454:	4618      	mov	r0, r3
 800b456:	f7ff ffcd 	bl	800b3f4 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 800b45a:	4602      	mov	r2, r0
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	6013      	str	r3, [r2, #0]
    return retval;
 800b460:	68fb      	ldr	r3, [r7, #12]
  }
 800b462:	4618      	mov	r0, r3
 800b464:	3710      	adds	r7, #16
 800b466:	46bd      	mov	sp, r7
 800b468:	bd80      	pop	{r7, pc}

0800b46a <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>:
  static FixedPoint ConstantPOT() {
 800b46a:	b580      	push	{r7, lr}
 800b46c:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 800b46e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800b472:	f000 f803 	bl	800b47c <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 800b476:	4603      	mov	r3, r0
  }
 800b478:	4618      	mov	r0, r3
 800b47a:	bd80      	pop	{r7, pc}

0800b47c <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 800b47c:	b590      	push	{r4, r7, lr}
 800b47e:	b085      	sub	sp, #20
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 800b484:	f107 030c 	add.w	r3, r7, #12
 800b488:	4618      	mov	r0, r3
 800b48a:	f7ff ffd2 	bl	800b432 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800b48e:	4604      	mov	r4, r0
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	f7fb f8a7 	bl	80065e4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800b496:	4603      	mov	r3, r0
 800b498:	6023      	str	r3, [r4, #0]
    return retval;
 800b49a:	68fb      	ldr	r3, [r7, #12]
  }
 800b49c:	4618      	mov	r0, r3
 800b49e:	3714      	adds	r7, #20
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd90      	pop	{r4, r7, pc}

0800b4a4 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 800b4a4:	b590      	push	{r4, r7, lr}
 800b4a6:	b083      	sub	sp, #12
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
 800b4ac:	6039      	str	r1, [r7, #0]
 800b4ae:	1d3b      	adds	r3, r7, #4
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f7ff ffbe 	bl	800b432 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	681c      	ldr	r4, [r3, #0]
 800b4ba:	463b      	mov	r3, r7
 800b4bc:	4618      	mov	r0, r3
 800b4be:	f7ff ffb8 	bl	800b432 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	4619      	mov	r1, r3
 800b4c8:	4620      	mov	r0, r4
 800b4ca:	f7fd fae9 	bl	8008aa0 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f7ff fdfe 	bl	800b0d2 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	4618      	mov	r0, r3
 800b4da:	370c      	adds	r7, #12
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd90      	pop	{r4, r7, pc}

0800b4e0 <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator&, BitAnd)
 800b4e0:	b590      	push	{r4, r7, lr}
 800b4e2:	b083      	sub	sp, #12
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
 800b4e8:	6039      	str	r1, [r7, #0]
 800b4ea:	1d3b      	adds	r3, r7, #4
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f7ff ffa0 	bl	800b432 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	681c      	ldr	r4, [r3, #0]
 800b4f6:	463b      	mov	r3, r7
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f7ff ff9a 	bl	800b432 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800b4fe:	4603      	mov	r3, r0
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	4619      	mov	r1, r3
 800b504:	4620      	mov	r0, r4
 800b506:	f7fb f878 	bl	80065fa <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800b50a:	4603      	mov	r3, r0
 800b50c:	4618      	mov	r0, r3
 800b50e:	f7ff fde0 	bl	800b0d2 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 800b512:	4603      	mov	r3, r0
 800b514:	4618      	mov	r0, r3
 800b516:	370c      	adds	r7, #12
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd90      	pop	{r4, r7, pc}

0800b51c <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 800b51c:	b5b0      	push	{r4, r5, r7, lr}
 800b51e:	b084      	sub	sp, #16
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 800b524:	1d3b      	adds	r3, r7, #4
 800b526:	4618      	mov	r0, r3
 800b528:	f7ff ff83 	bl	800b432 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800b52c:	4603      	mov	r3, r0
 800b52e:	681d      	ldr	r5, [r3, #0]
 800b530:	f107 030c 	add.w	r3, r7, #12
 800b534:	4618      	mov	r0, r3
 800b536:	f7fd fa7b 	bl	8008a30 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800b53a:	4604      	mov	r4, r0
 800b53c:	4628      	mov	r0, r5
 800b53e:	f000 f825 	bl	800b58c <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>
 800b542:	4603      	mov	r3, r0
 800b544:	6023      	str	r3, [r4, #0]
  return result;
 800b546:	68fb      	ldr	r3, [r7, #12]
}
 800b548:	4618      	mov	r0, r3
 800b54a:	3710      	adds	r7, #16
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bdb0      	pop	{r4, r5, r7, pc}

0800b550 <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>:
MAKE_FIXEDPOINT_UNARY_FUNC_RETURNING_RAW(MaskIfZero)
 800b550:	b580      	push	{r7, lr}
 800b552:	b082      	sub	sp, #8
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
 800b558:	1d3b      	adds	r3, r7, #4
 800b55a:	4618      	mov	r0, r3
 800b55c:	f7ff ff69 	bl	800b432 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800b560:	4603      	mov	r3, r0
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	4618      	mov	r0, r3
 800b566:	f7fd fd74 	bl	8009052 <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>
 800b56a:	4603      	mov	r3, r0
 800b56c:	4618      	mov	r0, r3
 800b56e:	3708      	adds	r7, #8
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}

0800b574 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800b574:	b580      	push	{r7, lr}
 800b576:	b082      	sub	sp, #8
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	f000 f811 	bl	800b5a4 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>
 800b582:	4603      	mov	r3, r0
}
 800b584:	4618      	mov	r0, r3
 800b586:	3708      	adds	r7, #8
 800b588:	46bd      	mov	sp, r7
 800b58a:	bd80      	pop	{r7, pc}

0800b58c <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b082      	sub	sp, #8
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f000 f813 	bl	800b5c0 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>
 800b59a:	4603      	mov	r3, r0
}
 800b59c:	4618      	mov	r0, r3
 800b59e:	3708      	adds	r7, #8
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bd80      	pop	{r7, pc}

0800b5a4 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b082      	sub	sp, #8
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 800b5ac:	210c      	movs	r1, #12
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f7fa ff62 	bl	8006478 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800b5b4:	4603      	mov	r3, r0
  }
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	3708      	adds	r7, #8
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}
	...

0800b5c0 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b08a      	sub	sp, #40	; 0x28
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 800b5c8:	f7fa fe3e 	bl	8006248 <_ZNSt14numeric_limitsIlE3minEv>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f7fb f808 	bl	80065e4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800b5d4:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 800b5d6:	f7f9 fe6b 	bl	80052b0 <_ZNSt14numeric_limitsIlE3maxEv>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	4618      	mov	r0, r3
 800b5de:	f7fb f801 	bl	80065e4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800b5e2:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 800b5e4:	2320      	movs	r3, #32
 800b5e6:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 800b5e8:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
 800b5ec:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 800b5ee:	f06f 407c 	mvn.w	r0, #4227858432	; 0xfc000000
 800b5f2:	f7fa fff7 	bl	80065e4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	4619      	mov	r1, r3
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f7fb f83c 	bl	8006678 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 800b600:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 800b602:	480f      	ldr	r0, [pc, #60]	; (800b640 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl+0x80>)
 800b604:	f7fa ffee 	bl	80065e4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800b608:	4603      	mov	r3, r0
 800b60a:	4619      	mov	r1, r3
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f7fb f811 	bl	8006634 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 800b612:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 800b614:	2105      	movs	r1, #5
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f7fd fa5d 	bl	8008ad6 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 800b61c:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 800b61e:	68fa      	ldr	r2, [r7, #12]
 800b620:	6a39      	ldr	r1, [r7, #32]
 800b622:	6978      	ldr	r0, [r7, #20]
 800b624:	f7fd fa9d 	bl	8008b62 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800b628:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 800b62a:	68fa      	ldr	r2, [r7, #12]
 800b62c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b62e:	6938      	ldr	r0, [r7, #16]
 800b630:	f7fd fa97 	bl	8008b62 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800b634:	60f8      	str	r0, [r7, #12]
    return result;
 800b636:	68fb      	ldr	r3, [r7, #12]
  }
 800b638:	4618      	mov	r0, r3
 800b63a:	3728      	adds	r7, #40	; 0x28
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}
 800b640:	fc000001 	.word	0xfc000001

0800b644 <_ZNSt12_Vector_baseIPvSaIS0_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 800b644:	b580      	push	{r7, lr}
 800b646:	b082      	sub	sp, #8
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f000 fb89 	bl	800bd64 <_ZNSaIPvED1Ev>
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	4618      	mov	r0, r3
 800b656:	3708      	adds	r7, #8
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}

0800b65c <_ZNSt12_Vector_baseIPvSaIS0_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b082      	sub	sp, #8
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	4618      	mov	r0, r3
 800b668:	f000 fb6c 	bl	800bd44 <_ZNSt12_Vector_baseIPvSaIS0_EE12_Vector_implC1Ev>
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	4618      	mov	r0, r3
 800b670:	3708      	adds	r7, #8
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}

0800b676 <_ZNSt6vectorIPvSaIS0_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 800b676:	b580      	push	{r7, lr}
 800b678:	b082      	sub	sp, #8
 800b67a:	af00      	add	r7, sp, #0
 800b67c:	6078      	str	r0, [r7, #4]
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	4618      	mov	r0, r3
 800b682:	f7ff ffeb 	bl	800b65c <_ZNSt12_Vector_baseIPvSaIS0_EEC1Ev>
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	4618      	mov	r0, r3
 800b68a:	3708      	adds	r7, #8
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}

0800b690 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv>:
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static TfLiteStatus AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes, void** ptr) {
 800b690:	b580      	push	{r7, lr}
 800b692:	b084      	sub	sp, #16
 800b694:	af00      	add	r7, sp, #0
 800b696:	60f8      	str	r0, [r7, #12]
 800b698:	60b9      	str	r1, [r7, #8]
 800b69a:	607a      	str	r2, [r7, #4]
  if (current_location - bytes < tensor_boundary) {
 800b69c:	4b18      	ldr	r3, [pc, #96]	; (800b700 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x70>)
 800b69e:	681a      	ldr	r2, [r3, #0]
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	425b      	negs	r3, r3
 800b6a4:	441a      	add	r2, r3
 800b6a6:	4b17      	ldr	r3, [pc, #92]	; (800b704 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x74>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	429a      	cmp	r2, r3
 800b6ac:	d217      	bcs.n	800b6de <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x4e>
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    *ptr = malloc(bytes);
 800b6ae:	68b8      	ldr	r0, [r7, #8]
 800b6b0:	f003 f9c2 	bl	800ea38 <malloc>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	461a      	mov	r2, r3
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	601a      	str	r2, [r3, #0]
    if (*ptr == NULL) {
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d106      	bne.n	800b6d2 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x42>
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	4619      	mov	r1, r3
 800b6c8:	480f      	ldr	r0, [pc, #60]	; (800b708 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x78>)
 800b6ca:	f003 fd9d 	bl	800f208 <iprintf>
      return kTfLiteError;
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	e011      	b.n	800b6f6 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x66>
    }
    overflow_buffers.push_back(*ptr);
 800b6d2:	6879      	ldr	r1, [r7, #4]
 800b6d4:	480d      	ldr	r0, [pc, #52]	; (800b70c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x7c>)
 800b6d6:	f000 fb6a 	bl	800bdae <_ZNSt6vectorIPvSaIS0_EE9push_backERKS0_>
    return kTfLiteOk;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	e00b      	b.n	800b6f6 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x66>
  }

  current_location -= bytes;
 800b6de:	4b08      	ldr	r3, [pc, #32]	; (800b700 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x70>)
 800b6e0:	681a      	ldr	r2, [r3, #0]
 800b6e2:	68bb      	ldr	r3, [r7, #8]
 800b6e4:	425b      	negs	r3, r3
 800b6e6:	4413      	add	r3, r2
 800b6e8:	4a05      	ldr	r2, [pc, #20]	; (800b700 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x70>)
 800b6ea:	6013      	str	r3, [r2, #0]

  *ptr = current_location;
 800b6ec:	4b04      	ldr	r3, [pc, #16]	; (800b700 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x70>)
 800b6ee:	681a      	ldr	r2, [r3, #0]
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800b6f4:	2300      	movs	r3, #0
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3710      	adds	r7, #16
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}
 800b6fe:	bf00      	nop
 800b700:	20006f3c 	.word	0x20006f3c
 800b704:	20006f38 	.word	0x20006f38
 800b708:	08011694 	.word	0x08011694
 800b70c:	200074ec 	.word	0x200074ec

0800b710 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800b710:	b580      	push	{r7, lr}
 800b712:	b082      	sub	sp, #8
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	f000 fb7d 	bl	800be18 <_ZNSaIN12_GLOBAL__N_116scratch_buffer_tEED2Ev>
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	4618      	mov	r0, r3
 800b722:	3708      	adds	r7, #8
 800b724:	46bd      	mov	sp, r7
 800b726:	bd80      	pop	{r7, pc}

0800b728 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEC2Ev>:
      _Vector_base() = default;
 800b728:	b580      	push	{r7, lr}
 800b72a:	b082      	sub	sp, #8
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	4618      	mov	r0, r3
 800b734:	f000 fb60 	bl	800bdf8 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_Vector_implC1Ev>
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	4618      	mov	r0, r3
 800b73c:	3708      	adds	r7, #8
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}

0800b742 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEC1Ev>:
      vector() = default;
 800b742:	b580      	push	{r7, lr}
 800b744:	b082      	sub	sp, #8
 800b746:	af00      	add	r7, sp, #0
 800b748:	6078      	str	r0, [r7, #4]
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	4618      	mov	r0, r3
 800b74e:	f7ff ffeb 	bl	800b728 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEC2Ev>
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	4618      	mov	r0, r3
 800b756:	3708      	adds	r7, #8
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}

0800b75c <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi>:
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b088      	sub	sp, #32
 800b760:	af00      	add	r7, sp, #0
 800b762:	60f8      	str	r0, [r7, #12]
 800b764:	60b9      	str	r1, [r7, #8]
 800b766:	607a      	str	r2, [r7, #4]
  scratch_buffer_t b;
  b.bytes = bytes;
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	617b      	str	r3, [r7, #20]

  TfLiteStatus s = AllocatePersistentBuffer(ctx, b.bytes, &b.ptr);
 800b76c:	6979      	ldr	r1, [r7, #20]
 800b76e:	f107 0314 	add.w	r3, r7, #20
 800b772:	3304      	adds	r3, #4
 800b774:	461a      	mov	r2, r3
 800b776:	68f8      	ldr	r0, [r7, #12]
 800b778:	f7ff ff8a 	bl	800b690 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv>
 800b77c:	4603      	mov	r3, r0
 800b77e:	77fb      	strb	r3, [r7, #31]
  if (s != kTfLiteOk) {
 800b780:	7ffb      	ldrb	r3, [r7, #31]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d001      	beq.n	800b78a <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x2e>
    return s;
 800b786:	7ffb      	ldrb	r3, [r7, #31]
 800b788:	e00e      	b.n	800b7a8 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x4c>
  }

  scratch_buffers.push_back(b);
 800b78a:	f107 0314 	add.w	r3, r7, #20
 800b78e:	4619      	mov	r1, r3
 800b790:	4807      	ldr	r0, [pc, #28]	; (800b7b0 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x54>)
 800b792:	f000 fb66 	bl	800be62 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE9push_backERKS1_>

  *buffer_idx = scratch_buffers.size() - 1;
 800b796:	4806      	ldr	r0, [pc, #24]	; (800b7b0 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x54>)
 800b798:	f000 fb89 	bl	800beae <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 800b79c:	4603      	mov	r3, r0
 800b79e:	3b01      	subs	r3, #1
 800b7a0:	461a      	mov	r2, r3
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	601a      	str	r2, [r3, #0]

  return kTfLiteOk;
 800b7a6:	2300      	movs	r3, #0
}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3720      	adds	r7, #32
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}
 800b7b0:	200074f8 	.word	0x200074f8

0800b7b4 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti>:

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b082      	sub	sp, #8
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
 800b7bc:	6039      	str	r1, [r7, #0]
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
 800b7be:	480d      	ldr	r0, [pc, #52]	; (800b7f4 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x40>)
 800b7c0:	f000 fb75 	bl	800beae <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	461a      	mov	r2, r3
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	4293      	cmp	r3, r2
 800b7cc:	bfac      	ite	ge
 800b7ce:	2301      	movge	r3, #1
 800b7d0:	2300      	movlt	r3, #0
 800b7d2:	b2db      	uxtb	r3, r3
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d001      	beq.n	800b7dc <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x28>
    return NULL;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	e006      	b.n	800b7ea <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x36>
  }
  return scratch_buffers[buffer_idx].ptr;
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	4619      	mov	r1, r3
 800b7e0:	4804      	ldr	r0, [pc, #16]	; (800b7f4 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x40>)
 800b7e2:	f000 fb74 	bl	800bece <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEixEj>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	685b      	ldr	r3, [r3, #4]
}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	3708      	adds	r7, #8
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}
 800b7f2:	bf00      	nop
 800b7f4:	200074f8 	.word	0x200074f8

0800b7f8 <_Z18trained_model_initPFPvjjE>:
} // namespace

  TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
 800b7f8:	b5b0      	push	{r4, r5, r7, lr}
 800b7fa:	b08a      	sub	sp, #40	; 0x28
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f44f 31b5 	mov.w	r1, #92672	; 0x16a00
 800b806:	2010      	movs	r0, #16
 800b808:	4798      	blx	r3
 800b80a:	4603      	mov	r3, r0
 800b80c:	4a80      	ldr	r2, [pc, #512]	; (800ba10 <_Z18trained_model_initPFPvjjE+0x218>)
 800b80e:	6013      	str	r3, [r2, #0]
  if (!tensor_arena) {
 800b810:	4b7f      	ldr	r3, [pc, #508]	; (800ba10 <_Z18trained_model_initPFPvjjE+0x218>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d104      	bne.n	800b822 <_Z18trained_model_initPFPvjjE+0x2a>
    printf("ERR: failed to allocate tensor arena\n");
 800b818:	487e      	ldr	r0, [pc, #504]	; (800ba14 <_Z18trained_model_initPFPvjjE+0x21c>)
 800b81a:	f003 fd7b 	bl	800f314 <puts>
    return kTfLiteError;
 800b81e:	2301      	movs	r3, #1
 800b820:	e1f4      	b.n	800bc0c <_Z18trained_model_initPFPvjjE+0x414>
  }
#endif
  tensor_boundary = tensor_arena;
 800b822:	4b7b      	ldr	r3, [pc, #492]	; (800ba10 <_Z18trained_model_initPFPvjjE+0x218>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	4a7c      	ldr	r2, [pc, #496]	; (800ba18 <_Z18trained_model_initPFPvjjE+0x220>)
 800b828:	6013      	str	r3, [r2, #0]
  current_location = tensor_arena + kTensorArenaSize;
 800b82a:	4b79      	ldr	r3, [pc, #484]	; (800ba10 <_Z18trained_model_initPFPvjjE+0x218>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	f503 33b5 	add.w	r3, r3, #92672	; 0x16a00
 800b832:	4a7a      	ldr	r2, [pc, #488]	; (800ba1c <_Z18trained_model_initPFPvjjE+0x224>)
 800b834:	6013      	str	r3, [r2, #0]
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
 800b836:	4b7a      	ldr	r3, [pc, #488]	; (800ba20 <_Z18trained_model_initPFPvjjE+0x228>)
 800b838:	4a7a      	ldr	r2, [pc, #488]	; (800ba24 <_Z18trained_model_initPFPvjjE+0x22c>)
 800b83a:	639a      	str	r2, [r3, #56]	; 0x38
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
 800b83c:	4b78      	ldr	r3, [pc, #480]	; (800ba20 <_Z18trained_model_initPFPvjjE+0x228>)
 800b83e:	4a7a      	ldr	r2, [pc, #488]	; (800ba28 <_Z18trained_model_initPFPvjjE+0x230>)
 800b840:	641a      	str	r2, [r3, #64]	; 0x40
  ctx.GetScratchBuffer = &GetScratchBuffer;
 800b842:	4b77      	ldr	r3, [pc, #476]	; (800ba20 <_Z18trained_model_initPFPvjjE+0x228>)
 800b844:	4a79      	ldr	r2, [pc, #484]	; (800ba2c <_Z18trained_model_initPFPvjjE+0x234>)
 800b846:	645a      	str	r2, [r3, #68]	; 0x44
  ctx.tensors = tflTensors;
 800b848:	4b75      	ldr	r3, [pc, #468]	; (800ba20 <_Z18trained_model_initPFPvjjE+0x228>)
 800b84a:	4a79      	ldr	r2, [pc, #484]	; (800ba30 <_Z18trained_model_initPFPvjjE+0x238>)
 800b84c:	609a      	str	r2, [r3, #8]
  ctx.tensors_size = 15;
 800b84e:	4b74      	ldr	r3, [pc, #464]	; (800ba20 <_Z18trained_model_initPFPvjjE+0x228>)
 800b850:	220f      	movs	r2, #15
 800b852:	601a      	str	r2, [r3, #0]
  for(size_t i = 0; i < 15; ++i) {
 800b854:	2300      	movs	r3, #0
 800b856:	627b      	str	r3, [r7, #36]	; 0x24
 800b858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b85a:	2b0e      	cmp	r3, #14
 800b85c:	f200 80cd 	bhi.w	800b9fa <_Z18trained_model_initPFPvjjE+0x202>
    tflTensors[i].type = tensorData[i].type;
 800b860:	4974      	ldr	r1, [pc, #464]	; (800ba34 <_Z18trained_model_initPFPvjjE+0x23c>)
 800b862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b864:	4613      	mov	r3, r2
 800b866:	005b      	lsls	r3, r3, #1
 800b868:	4413      	add	r3, r2
 800b86a:	00db      	lsls	r3, r3, #3
 800b86c:	440b      	add	r3, r1
 800b86e:	3301      	adds	r3, #1
 800b870:	7819      	ldrb	r1, [r3, #0]
 800b872:	4a6f      	ldr	r2, [pc, #444]	; (800ba30 <_Z18trained_model_initPFPvjjE+0x238>)
 800b874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b876:	019b      	lsls	r3, r3, #6
 800b878:	4413      	add	r3, r2
 800b87a:	460a      	mov	r2, r1
 800b87c:	701a      	strb	r2, [r3, #0]
    tflTensors[i].is_variable = 0;
 800b87e:	4a6c      	ldr	r2, [pc, #432]	; (800ba30 <_Z18trained_model_initPFPvjjE+0x238>)
 800b880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b882:	019b      	lsls	r3, r3, #6
 800b884:	4413      	add	r3, r2
 800b886:	332d      	adds	r3, #45	; 0x2d
 800b888:	2200      	movs	r2, #0
 800b88a:	701a      	strb	r2, [r3, #0]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
 800b88c:	4969      	ldr	r1, [pc, #420]	; (800ba34 <_Z18trained_model_initPFPvjjE+0x23c>)
 800b88e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b890:	4613      	mov	r3, r2
 800b892:	005b      	lsls	r3, r3, #1
 800b894:	4413      	add	r3, r2
 800b896:	00db      	lsls	r3, r3, #3
 800b898:	440b      	add	r3, r1
 800b89a:	7819      	ldrb	r1, [r3, #0]
 800b89c:	4a64      	ldr	r2, [pc, #400]	; (800ba30 <_Z18trained_model_initPFPvjjE+0x238>)
 800b89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a0:	019b      	lsls	r3, r3, #6
 800b8a2:	4413      	add	r3, r2
 800b8a4:	3314      	adds	r3, #20
 800b8a6:	460a      	mov	r2, r1
 800b8a8:	701a      	strb	r2, [r3, #0]
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
 800b8aa:	4962      	ldr	r1, [pc, #392]	; (800ba34 <_Z18trained_model_initPFPvjjE+0x23c>)
 800b8ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8ae:	4613      	mov	r3, r2
 800b8b0:	005b      	lsls	r3, r3, #1
 800b8b2:	4413      	add	r3, r2
 800b8b4:	00db      	lsls	r3, r3, #3
 800b8b6:	440b      	add	r3, r1
 800b8b8:	330c      	adds	r3, #12
 800b8ba:	681a      	ldr	r2, [r3, #0]
 800b8bc:	495c      	ldr	r1, [pc, #368]	; (800ba30 <_Z18trained_model_initPFPvjjE+0x238>)
 800b8be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8c0:	019b      	lsls	r3, r3, #6
 800b8c2:	440b      	add	r3, r1
 800b8c4:	3318      	adds	r3, #24
 800b8c6:	601a      	str	r2, [r3, #0]
    tflTensors[i].dims = tensorData[i].dims;
 800b8c8:	495a      	ldr	r1, [pc, #360]	; (800ba34 <_Z18trained_model_initPFPvjjE+0x23c>)
 800b8ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8cc:	4613      	mov	r3, r2
 800b8ce:	005b      	lsls	r3, r3, #1
 800b8d0:	4413      	add	r3, r2
 800b8d2:	00db      	lsls	r3, r3, #3
 800b8d4:	440b      	add	r3, r1
 800b8d6:	3308      	adds	r3, #8
 800b8d8:	681a      	ldr	r2, [r3, #0]
 800b8da:	4955      	ldr	r1, [pc, #340]	; (800ba30 <_Z18trained_model_initPFPvjjE+0x238>)
 800b8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8de:	019b      	lsls	r3, r3, #6
 800b8e0:	440b      	add	r3, r1
 800b8e2:	3308      	adds	r3, #8
 800b8e4:	601a      	str	r2, [r3, #0]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
 800b8e6:	4a52      	ldr	r2, [pc, #328]	; (800ba30 <_Z18trained_model_initPFPvjjE+0x238>)
 800b8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ea:	019b      	lsls	r3, r3, #6
 800b8ec:	4413      	add	r3, r2
 800b8ee:	3314      	adds	r3, #20
 800b8f0:	781b      	ldrb	r3, [r3, #0]
 800b8f2:	2b02      	cmp	r3, #2
 800b8f4:	d115      	bne.n	800b922 <_Z18trained_model_initPFPvjjE+0x12a>
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 800b8f6:	494f      	ldr	r1, [pc, #316]	; (800ba34 <_Z18trained_model_initPFPvjjE+0x23c>)
 800b8f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8fa:	4613      	mov	r3, r2
 800b8fc:	005b      	lsls	r3, r3, #1
 800b8fe:	4413      	add	r3, r2
 800b900:	00db      	lsls	r3, r3, #3
 800b902:	440b      	add	r3, r1
 800b904:	3304      	adds	r3, #4
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	461a      	mov	r2, r3
 800b90a:	4b41      	ldr	r3, [pc, #260]	; (800ba10 <_Z18trained_model_initPFPvjjE+0x218>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	4413      	add	r3, r2
 800b910:	61bb      	str	r3, [r7, #24]

     tflTensors[i].data.data =  start;
 800b912:	4a47      	ldr	r2, [pc, #284]	; (800ba30 <_Z18trained_model_initPFPvjjE+0x238>)
 800b914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b916:	019b      	lsls	r3, r3, #6
 800b918:	4413      	add	r3, r2
 800b91a:	3304      	adds	r3, #4
 800b91c:	69ba      	ldr	r2, [r7, #24]
 800b91e:	601a      	str	r2, [r3, #0]
 800b920:	e00e      	b.n	800b940 <_Z18trained_model_initPFPvjjE+0x148>
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
 800b922:	4944      	ldr	r1, [pc, #272]	; (800ba34 <_Z18trained_model_initPFPvjjE+0x23c>)
 800b924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b926:	4613      	mov	r3, r2
 800b928:	005b      	lsls	r3, r3, #1
 800b92a:	4413      	add	r3, r2
 800b92c:	00db      	lsls	r3, r3, #3
 800b92e:	440b      	add	r3, r1
 800b930:	3304      	adds	r3, #4
 800b932:	681a      	ldr	r2, [r3, #0]
 800b934:	493e      	ldr	r1, [pc, #248]	; (800ba30 <_Z18trained_model_initPFPvjjE+0x238>)
 800b936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b938:	019b      	lsls	r3, r3, #6
 800b93a:	440b      	add	r3, r1
 800b93c:	3304      	adds	r3, #4
 800b93e:	601a      	str	r2, [r3, #0]
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
 800b940:	4a3b      	ldr	r2, [pc, #236]	; (800ba30 <_Z18trained_model_initPFPvjjE+0x238>)
 800b942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b944:	019b      	lsls	r3, r3, #6
 800b946:	4413      	add	r3, r2
 800b948:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800b94c:	4939      	ldr	r1, [pc, #228]	; (800ba34 <_Z18trained_model_initPFPvjjE+0x23c>)
 800b94e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b950:	4613      	mov	r3, r2
 800b952:	005b      	lsls	r3, r3, #1
 800b954:	4413      	add	r3, r2
 800b956:	00db      	lsls	r3, r3, #3
 800b958:	440b      	add	r3, r1
 800b95a:	f103 0210 	add.w	r2, r3, #16
 800b95e:	4603      	mov	r3, r0
 800b960:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b964:	e883 0003 	stmia.w	r3, {r0, r1}
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
 800b968:	4a31      	ldr	r2, [pc, #196]	; (800ba30 <_Z18trained_model_initPFPvjjE+0x238>)
 800b96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b96c:	019b      	lsls	r3, r3, #6
 800b96e:	4413      	add	r3, r2
 800b970:	3330      	adds	r3, #48	; 0x30
 800b972:	781b      	ldrb	r3, [r3, #0]
 800b974:	2b01      	cmp	r3, #1
 800b976:	d11b      	bne.n	800b9b0 <_Z18trained_model_initPFPvjjE+0x1b8>
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
 800b978:	492e      	ldr	r1, [pc, #184]	; (800ba34 <_Z18trained_model_initPFPvjjE+0x23c>)
 800b97a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b97c:	4613      	mov	r3, r2
 800b97e:	005b      	lsls	r3, r3, #1
 800b980:	4413      	add	r3, r2
 800b982:	00db      	lsls	r3, r3, #3
 800b984:	440b      	add	r3, r1
 800b986:	3314      	adds	r3, #20
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	617b      	str	r3, [r7, #20]
      tflTensors[i].params.scale = quant->scale->data[0];
 800b98c:	697b      	ldr	r3, [r7, #20]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	685a      	ldr	r2, [r3, #4]
 800b992:	4927      	ldr	r1, [pc, #156]	; (800ba30 <_Z18trained_model_initPFPvjjE+0x238>)
 800b994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b996:	019b      	lsls	r3, r3, #6
 800b998:	440b      	add	r3, r1
 800b99a:	330c      	adds	r3, #12
 800b99c:	601a      	str	r2, [r3, #0]
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
 800b99e:	697b      	ldr	r3, [r7, #20]
 800b9a0:	685b      	ldr	r3, [r3, #4]
 800b9a2:	685a      	ldr	r2, [r3, #4]
 800b9a4:	4922      	ldr	r1, [pc, #136]	; (800ba30 <_Z18trained_model_initPFPvjjE+0x238>)
 800b9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a8:	019b      	lsls	r3, r3, #6
 800b9aa:	440b      	add	r3, r1
 800b9ac:	3310      	adds	r3, #16
 800b9ae:	601a      	str	r2, [r3, #0]
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
 800b9b0:	4a1f      	ldr	r2, [pc, #124]	; (800ba30 <_Z18trained_model_initPFPvjjE+0x238>)
 800b9b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b4:	019b      	lsls	r3, r3, #6
 800b9b6:	4413      	add	r3, r2
 800b9b8:	3314      	adds	r3, #20
 800b9ba:	781b      	ldrb	r3, [r3, #0]
 800b9bc:	2b02      	cmp	r3, #2
 800b9be:	d118      	bne.n	800b9f2 <_Z18trained_model_initPFPvjjE+0x1fa>
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
 800b9c0:	4a1b      	ldr	r2, [pc, #108]	; (800ba30 <_Z18trained_model_initPFPvjjE+0x238>)
 800b9c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c4:	019b      	lsls	r3, r3, #6
 800b9c6:	4413      	add	r3, r2
 800b9c8:	3304      	adds	r3, #4
 800b9ca:	6819      	ldr	r1, [r3, #0]
 800b9cc:	4819      	ldr	r0, [pc, #100]	; (800ba34 <_Z18trained_model_initPFPvjjE+0x23c>)
 800b9ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9d0:	4613      	mov	r3, r2
 800b9d2:	005b      	lsls	r3, r3, #1
 800b9d4:	4413      	add	r3, r2
 800b9d6:	00db      	lsls	r3, r3, #3
 800b9d8:	4403      	add	r3, r0
 800b9da:	330c      	adds	r3, #12
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	440b      	add	r3, r1
 800b9e0:	613b      	str	r3, [r7, #16]
      if (data_end_ptr > tensor_boundary) {
 800b9e2:	4b0d      	ldr	r3, [pc, #52]	; (800ba18 <_Z18trained_model_initPFPvjjE+0x220>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	693a      	ldr	r2, [r7, #16]
 800b9e8:	429a      	cmp	r2, r3
 800b9ea:	d902      	bls.n	800b9f2 <_Z18trained_model_initPFPvjjE+0x1fa>
        tensor_boundary = data_end_ptr;
 800b9ec:	4a0a      	ldr	r2, [pc, #40]	; (800ba18 <_Z18trained_model_initPFPvjjE+0x220>)
 800b9ee:	693b      	ldr	r3, [r7, #16]
 800b9f0:	6013      	str	r3, [r2, #0]
  for(size_t i = 0; i < 15; ++i) {
 800b9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9f4:	3301      	adds	r3, #1
 800b9f6:	627b      	str	r3, [r7, #36]	; 0x24
 800b9f8:	e72e      	b.n	800b858 <_Z18trained_model_initPFPvjjE+0x60>
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
 800b9fa:	4b07      	ldr	r3, [pc, #28]	; (800ba18 <_Z18trained_model_initPFPvjjE+0x220>)
 800b9fc:	681a      	ldr	r2, [r3, #0]
 800b9fe:	4b07      	ldr	r3, [pc, #28]	; (800ba1c <_Z18trained_model_initPFPvjjE+0x224>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	429a      	cmp	r2, r3
 800ba04:	d91a      	bls.n	800ba3c <_Z18trained_model_initPFPvjjE+0x244>
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
 800ba06:	480c      	ldr	r0, [pc, #48]	; (800ba38 <_Z18trained_model_initPFPvjjE+0x240>)
 800ba08:	f003 fc84 	bl	800f314 <puts>
    return kTfLiteError;
 800ba0c:	2301      	movs	r3, #1
 800ba0e:	e0fd      	b.n	800bc0c <_Z18trained_model_initPFPvjjE+0x414>
 800ba10:	20006f34 	.word	0x20006f34
 800ba14:	080116cc 	.word	0x080116cc
 800ba18:	20006f38 	.word	0x20006f38
 800ba1c:	20006f3c 	.word	0x20006f3c
 800ba20:	20006f40 	.word	0x20006f40
 800ba24:	0800b691 	.word	0x0800b691
 800ba28:	0800b75d 	.word	0x0800b75d
 800ba2c:	0800b7b5 	.word	0x0800b7b5
 800ba30:	20006f90 	.word	0x20006f90
 800ba34:	20006cf4 	.word	0x20006cf4
 800ba38:	080116f4 	.word	0x080116f4
  }
  registrations[OP_CONV_2D] = *tflite::ops::micro::Register_CONV_2D();
 800ba3c:	f7fc f8f2 	bl	8007c24 <_ZN6tflite3ops5micro16Register_CONV_2DEv>
 800ba40:	4603      	mov	r3, r0
 800ba42:	4a74      	ldr	r2, [pc, #464]	; (800bc14 <_Z18trained_model_initPFPvjjE+0x41c>)
 800ba44:	4614      	mov	r4, r2
 800ba46:	461d      	mov	r5, r3
 800ba48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ba4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ba4c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ba50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  registrations[OP_MAX_POOL_2D] = *tflite::ops::micro::Register_MAX_POOL_2D();
 800ba54:	f7fe f9fe 	bl	8009e54 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv>
 800ba58:	4602      	mov	r2, r0
 800ba5a:	4b6e      	ldr	r3, [pc, #440]	; (800bc14 <_Z18trained_model_initPFPvjjE+0x41c>)
 800ba5c:	f103 0420 	add.w	r4, r3, #32
 800ba60:	4615      	mov	r5, r2
 800ba62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ba64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ba66:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ba6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  registrations[OP_RESHAPE] = *tflite::ops::micro::Register_RESHAPE();
 800ba6e:	f7fe fbd9 	bl	800a224 <_ZN6tflite3ops5micro16Register_RESHAPEEv>
 800ba72:	4602      	mov	r2, r0
 800ba74:	4b67      	ldr	r3, [pc, #412]	; (800bc14 <_Z18trained_model_initPFPvjjE+0x41c>)
 800ba76:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800ba7a:	4615      	mov	r5, r2
 800ba7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ba7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ba80:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ba84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  registrations[OP_FULLY_CONNECTED] = *tflite::ops::micro::Register_FULLY_CONNECTED();
 800ba88:	f7fc ff76 	bl	8008978 <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv>
 800ba8c:	4602      	mov	r2, r0
 800ba8e:	4b61      	ldr	r3, [pc, #388]	; (800bc14 <_Z18trained_model_initPFPvjjE+0x41c>)
 800ba90:	f103 0460 	add.w	r4, r3, #96	; 0x60
 800ba94:	4615      	mov	r5, r2
 800ba96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ba98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ba9a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ba9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  registrations[OP_SOFTMAX] = *tflite::ops::micro::Register_SOFTMAX();
 800baa2:	f7fe ffad 	bl	800aa00 <_ZN6tflite3ops5micro16Register_SOFTMAXEv>
 800baa6:	4602      	mov	r2, r0
 800baa8:	4b5a      	ldr	r3, [pc, #360]	; (800bc14 <_Z18trained_model_initPFPvjjE+0x41c>)
 800baaa:	f103 0480 	add.w	r4, r3, #128	; 0x80
 800baae:	4615      	mov	r5, r2
 800bab0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bab2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bab4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800bab8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  for(size_t i = 0; i < 7; ++i) {
 800babc:	2300      	movs	r3, #0
 800babe:	623b      	str	r3, [r7, #32]
 800bac0:	6a3b      	ldr	r3, [r7, #32]
 800bac2:	2b06      	cmp	r3, #6
 800bac4:	d86f      	bhi.n	800bba6 <_Z18trained_model_initPFPvjjE+0x3ae>
    tflNodes[i].inputs = nodeData[i].inputs;
 800bac6:	4a54      	ldr	r2, [pc, #336]	; (800bc18 <_Z18trained_model_initPFPvjjE+0x420>)
 800bac8:	6a3b      	ldr	r3, [r7, #32]
 800baca:	011b      	lsls	r3, r3, #4
 800bacc:	4413      	add	r3, r2
 800bace:	6819      	ldr	r1, [r3, #0]
 800bad0:	4852      	ldr	r0, [pc, #328]	; (800bc1c <_Z18trained_model_initPFPvjjE+0x424>)
 800bad2:	6a3a      	ldr	r2, [r7, #32]
 800bad4:	4613      	mov	r3, r2
 800bad6:	00db      	lsls	r3, r3, #3
 800bad8:	4413      	add	r3, r2
 800bada:	009b      	lsls	r3, r3, #2
 800badc:	4403      	add	r3, r0
 800bade:	6019      	str	r1, [r3, #0]
    tflNodes[i].outputs = nodeData[i].outputs;
 800bae0:	4a4d      	ldr	r2, [pc, #308]	; (800bc18 <_Z18trained_model_initPFPvjjE+0x420>)
 800bae2:	6a3b      	ldr	r3, [r7, #32]
 800bae4:	011b      	lsls	r3, r3, #4
 800bae6:	4413      	add	r3, r2
 800bae8:	3304      	adds	r3, #4
 800baea:	6819      	ldr	r1, [r3, #0]
 800baec:	484b      	ldr	r0, [pc, #300]	; (800bc1c <_Z18trained_model_initPFPvjjE+0x424>)
 800baee:	6a3a      	ldr	r2, [r7, #32]
 800baf0:	4613      	mov	r3, r2
 800baf2:	00db      	lsls	r3, r3, #3
 800baf4:	4413      	add	r3, r2
 800baf6:	009b      	lsls	r3, r3, #2
 800baf8:	4403      	add	r3, r0
 800bafa:	3304      	adds	r3, #4
 800bafc:	6019      	str	r1, [r3, #0]
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
 800bafe:	4a46      	ldr	r2, [pc, #280]	; (800bc18 <_Z18trained_model_initPFPvjjE+0x420>)
 800bb00:	6a3b      	ldr	r3, [r7, #32]
 800bb02:	011b      	lsls	r3, r3, #4
 800bb04:	4413      	add	r3, r2
 800bb06:	3308      	adds	r3, #8
 800bb08:	6819      	ldr	r1, [r3, #0]
 800bb0a:	4844      	ldr	r0, [pc, #272]	; (800bc1c <_Z18trained_model_initPFPvjjE+0x424>)
 800bb0c:	6a3a      	ldr	r2, [r7, #32]
 800bb0e:	4613      	mov	r3, r2
 800bb10:	00db      	lsls	r3, r3, #3
 800bb12:	4413      	add	r3, r2
 800bb14:	009b      	lsls	r3, r3, #2
 800bb16:	4403      	add	r3, r0
 800bb18:	3314      	adds	r3, #20
 800bb1a:	6019      	str	r1, [r3, #0]
    tflNodes[i].custom_initial_data = nullptr;
 800bb1c:	493f      	ldr	r1, [pc, #252]	; (800bc1c <_Z18trained_model_initPFPvjjE+0x424>)
 800bb1e:	6a3a      	ldr	r2, [r7, #32]
 800bb20:	4613      	mov	r3, r2
 800bb22:	00db      	lsls	r3, r3, #3
 800bb24:	4413      	add	r3, r2
 800bb26:	009b      	lsls	r3, r3, #2
 800bb28:	440b      	add	r3, r1
 800bb2a:	3318      	adds	r3, #24
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	601a      	str	r2, [r3, #0]
    tflNodes[i].custom_initial_data_size = 0;
 800bb30:	493a      	ldr	r1, [pc, #232]	; (800bc1c <_Z18trained_model_initPFPvjjE+0x424>)
 800bb32:	6a3a      	ldr	r2, [r7, #32]
 800bb34:	4613      	mov	r3, r2
 800bb36:	00db      	lsls	r3, r3, #3
 800bb38:	4413      	add	r3, r2
 800bb3a:	009b      	lsls	r3, r3, #2
 800bb3c:	440b      	add	r3, r1
 800bb3e:	331c      	adds	r3, #28
 800bb40:	2200      	movs	r2, #0
 800bb42:	601a      	str	r2, [r3, #0]
    if (registrations[nodeData[i].used_op_index].init) {
 800bb44:	4a34      	ldr	r2, [pc, #208]	; (800bc18 <_Z18trained_model_initPFPvjjE+0x420>)
 800bb46:	6a3b      	ldr	r3, [r7, #32]
 800bb48:	011b      	lsls	r3, r3, #4
 800bb4a:	4413      	add	r3, r2
 800bb4c:	330c      	adds	r3, #12
 800bb4e:	781b      	ldrb	r3, [r3, #0]
 800bb50:	4a30      	ldr	r2, [pc, #192]	; (800bc14 <_Z18trained_model_initPFPvjjE+0x41c>)
 800bb52:	015b      	lsls	r3, r3, #5
 800bb54:	4413      	add	r3, r2
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d020      	beq.n	800bb9e <_Z18trained_model_initPFPvjjE+0x3a6>
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
 800bb5c:	4a2e      	ldr	r2, [pc, #184]	; (800bc18 <_Z18trained_model_initPFPvjjE+0x420>)
 800bb5e:	6a3b      	ldr	r3, [r7, #32]
 800bb60:	011b      	lsls	r3, r3, #4
 800bb62:	4413      	add	r3, r2
 800bb64:	330c      	adds	r3, #12
 800bb66:	781b      	ldrb	r3, [r3, #0]
 800bb68:	4a2a      	ldr	r2, [pc, #168]	; (800bc14 <_Z18trained_model_initPFPvjjE+0x41c>)
 800bb6a:	015b      	lsls	r3, r3, #5
 800bb6c:	4413      	add	r3, r2
 800bb6e:	681c      	ldr	r4, [r3, #0]
 800bb70:	492a      	ldr	r1, [pc, #168]	; (800bc1c <_Z18trained_model_initPFPvjjE+0x424>)
 800bb72:	6a3a      	ldr	r2, [r7, #32]
 800bb74:	4613      	mov	r3, r2
 800bb76:	00db      	lsls	r3, r3, #3
 800bb78:	4413      	add	r3, r2
 800bb7a:	009b      	lsls	r3, r3, #2
 800bb7c:	440b      	add	r3, r1
 800bb7e:	3314      	adds	r3, #20
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	2200      	movs	r2, #0
 800bb84:	4619      	mov	r1, r3
 800bb86:	4826      	ldr	r0, [pc, #152]	; (800bc20 <_Z18trained_model_initPFPvjjE+0x428>)
 800bb88:	47a0      	blx	r4
 800bb8a:	4601      	mov	r1, r0
 800bb8c:	4823      	ldr	r0, [pc, #140]	; (800bc1c <_Z18trained_model_initPFPvjjE+0x424>)
 800bb8e:	6a3a      	ldr	r2, [r7, #32]
 800bb90:	4613      	mov	r3, r2
 800bb92:	00db      	lsls	r3, r3, #3
 800bb94:	4413      	add	r3, r2
 800bb96:	009b      	lsls	r3, r3, #2
 800bb98:	4403      	add	r3, r0
 800bb9a:	3310      	adds	r3, #16
 800bb9c:	6019      	str	r1, [r3, #0]
  for(size_t i = 0; i < 7; ++i) {
 800bb9e:	6a3b      	ldr	r3, [r7, #32]
 800bba0:	3301      	adds	r3, #1
 800bba2:	623b      	str	r3, [r7, #32]
 800bba4:	e78c      	b.n	800bac0 <_Z18trained_model_initPFPvjjE+0x2c8>
    }
  }
  for(size_t i = 0; i < 7; ++i) {
 800bba6:	2300      	movs	r3, #0
 800bba8:	61fb      	str	r3, [r7, #28]
 800bbaa:	69fb      	ldr	r3, [r7, #28]
 800bbac:	2b06      	cmp	r3, #6
 800bbae:	d82c      	bhi.n	800bc0a <_Z18trained_model_initPFPvjjE+0x412>
    if (registrations[nodeData[i].used_op_index].prepare) {
 800bbb0:	4a19      	ldr	r2, [pc, #100]	; (800bc18 <_Z18trained_model_initPFPvjjE+0x420>)
 800bbb2:	69fb      	ldr	r3, [r7, #28]
 800bbb4:	011b      	lsls	r3, r3, #4
 800bbb6:	4413      	add	r3, r2
 800bbb8:	330c      	adds	r3, #12
 800bbba:	781b      	ldrb	r3, [r3, #0]
 800bbbc:	4a15      	ldr	r2, [pc, #84]	; (800bc14 <_Z18trained_model_initPFPvjjE+0x41c>)
 800bbbe:	015b      	lsls	r3, r3, #5
 800bbc0:	4413      	add	r3, r2
 800bbc2:	3308      	adds	r3, #8
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d01b      	beq.n	800bc02 <_Z18trained_model_initPFPvjjE+0x40a>
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
 800bbca:	4a13      	ldr	r2, [pc, #76]	; (800bc18 <_Z18trained_model_initPFPvjjE+0x420>)
 800bbcc:	69fb      	ldr	r3, [r7, #28]
 800bbce:	011b      	lsls	r3, r3, #4
 800bbd0:	4413      	add	r3, r2
 800bbd2:	330c      	adds	r3, #12
 800bbd4:	781b      	ldrb	r3, [r3, #0]
 800bbd6:	4a0f      	ldr	r2, [pc, #60]	; (800bc14 <_Z18trained_model_initPFPvjjE+0x41c>)
 800bbd8:	015b      	lsls	r3, r3, #5
 800bbda:	4413      	add	r3, r2
 800bbdc:	3308      	adds	r3, #8
 800bbde:	681c      	ldr	r4, [r3, #0]
 800bbe0:	69fa      	ldr	r2, [r7, #28]
 800bbe2:	4613      	mov	r3, r2
 800bbe4:	00db      	lsls	r3, r3, #3
 800bbe6:	4413      	add	r3, r2
 800bbe8:	009b      	lsls	r3, r3, #2
 800bbea:	4a0c      	ldr	r2, [pc, #48]	; (800bc1c <_Z18trained_model_initPFPvjjE+0x424>)
 800bbec:	4413      	add	r3, r2
 800bbee:	4619      	mov	r1, r3
 800bbf0:	480b      	ldr	r0, [pc, #44]	; (800bc20 <_Z18trained_model_initPFPvjjE+0x428>)
 800bbf2:	47a0      	blx	r4
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	73fb      	strb	r3, [r7, #15]
      if (status != kTfLiteOk) {
 800bbf8:	7bfb      	ldrb	r3, [r7, #15]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d001      	beq.n	800bc02 <_Z18trained_model_initPFPvjjE+0x40a>
        return status;
 800bbfe:	7bfb      	ldrb	r3, [r7, #15]
 800bc00:	e004      	b.n	800bc0c <_Z18trained_model_initPFPvjjE+0x414>
  for(size_t i = 0; i < 7; ++i) {
 800bc02:	69fb      	ldr	r3, [r7, #28]
 800bc04:	3301      	adds	r3, #1
 800bc06:	61fb      	str	r3, [r7, #28]
 800bc08:	e7cf      	b.n	800bbaa <_Z18trained_model_initPFPvjjE+0x3b2>
      }
    }
  }
  return kTfLiteOk;
 800bc0a:	2300      	movs	r3, #0
}
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	3728      	adds	r7, #40	; 0x28
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bdb0      	pop	{r4, r5, r7, pc}
 800bc14:	20007350 	.word	0x20007350
 800bc18:	08016140 	.word	0x08016140
 800bc1c:	200073f0 	.word	0x200073f0
 800bc20:	20006f40 	.word	0x20006f40

0800bc24 <_Z19trained_model_inputi>:

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
 800bc24:	b480      	push	{r7}
 800bc26:	b083      	sub	sp, #12
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
  return &ctx.tensors[inTensorIndices[index]];
 800bc2c:	4b05      	ldr	r3, [pc, #20]	; (800bc44 <_Z19trained_model_inputi+0x20>)
 800bc2e:	689a      	ldr	r2, [r3, #8]
 800bc30:	2300      	movs	r3, #0
 800bc32:	019b      	lsls	r3, r3, #6
 800bc34:	4413      	add	r3, r2
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	370c      	adds	r7, #12
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc40:	4770      	bx	lr
 800bc42:	bf00      	nop
 800bc44:	20006f40 	.word	0x20006f40

0800bc48 <_Z20trained_model_outputi>:

static const int outTensorIndices[] = {
  14, 
};
TfLiteTensor* trained_model_output(int index) {
 800bc48:	b480      	push	{r7}
 800bc4a:	b083      	sub	sp, #12
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
  return &ctx.tensors[outTensorIndices[index]];
 800bc50:	4b05      	ldr	r3, [pc, #20]	; (800bc68 <_Z20trained_model_outputi+0x20>)
 800bc52:	689a      	ldr	r2, [r3, #8]
 800bc54:	230e      	movs	r3, #14
 800bc56:	019b      	lsls	r3, r3, #6
 800bc58:	4413      	add	r3, r2
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	370c      	adds	r7, #12
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc64:	4770      	bx	lr
 800bc66:	bf00      	nop
 800bc68:	20006f40 	.word	0x20006f40

0800bc6c <_Z20trained_model_invokev>:

TfLiteStatus trained_model_invoke() {
 800bc6c:	b590      	push	{r4, r7, lr}
 800bc6e:	b083      	sub	sp, #12
 800bc70:	af00      	add	r7, sp, #0
  for(size_t i = 0; i < 7; ++i) {
 800bc72:	2300      	movs	r3, #0
 800bc74:	607b      	str	r3, [r7, #4]
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2b06      	cmp	r3, #6
 800bc7a:	d81f      	bhi.n	800bcbc <_Z20trained_model_invokev+0x50>
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
 800bc7c:	4a12      	ldr	r2, [pc, #72]	; (800bcc8 <_Z20trained_model_invokev+0x5c>)
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	011b      	lsls	r3, r3, #4
 800bc82:	4413      	add	r3, r2
 800bc84:	330c      	adds	r3, #12
 800bc86:	781b      	ldrb	r3, [r3, #0]
 800bc88:	4a10      	ldr	r2, [pc, #64]	; (800bccc <_Z20trained_model_invokev+0x60>)
 800bc8a:	015b      	lsls	r3, r3, #5
 800bc8c:	4413      	add	r3, r2
 800bc8e:	330c      	adds	r3, #12
 800bc90:	681c      	ldr	r4, [r3, #0]
 800bc92:	687a      	ldr	r2, [r7, #4]
 800bc94:	4613      	mov	r3, r2
 800bc96:	00db      	lsls	r3, r3, #3
 800bc98:	4413      	add	r3, r2
 800bc9a:	009b      	lsls	r3, r3, #2
 800bc9c:	4a0c      	ldr	r2, [pc, #48]	; (800bcd0 <_Z20trained_model_invokev+0x64>)
 800bc9e:	4413      	add	r3, r2
 800bca0:	4619      	mov	r1, r3
 800bca2:	480c      	ldr	r0, [pc, #48]	; (800bcd4 <_Z20trained_model_invokev+0x68>)
 800bca4:	47a0      	blx	r4
 800bca6:	4603      	mov	r3, r0
 800bca8:	70fb      	strb	r3, [r7, #3]
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
 800bcaa:	78fb      	ldrb	r3, [r7, #3]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d001      	beq.n	800bcb4 <_Z20trained_model_invokev+0x48>
      return status;
 800bcb0:	78fb      	ldrb	r3, [r7, #3]
 800bcb2:	e004      	b.n	800bcbe <_Z20trained_model_invokev+0x52>
  for(size_t i = 0; i < 7; ++i) {
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	3301      	adds	r3, #1
 800bcb8:	607b      	str	r3, [r7, #4]
 800bcba:	e7dc      	b.n	800bc76 <_Z20trained_model_invokev+0xa>
    }
  }
  return kTfLiteOk;
 800bcbc:	2300      	movs	r3, #0
}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	370c      	adds	r7, #12
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	bd90      	pop	{r4, r7, pc}
 800bcc6:	bf00      	nop
 800bcc8:	08016140 	.word	0x08016140
 800bccc:	20007350 	.word	0x20007350
 800bcd0:	200073f0 	.word	0x200073f0
 800bcd4:	20006f40 	.word	0x20006f40

0800bcd8 <_Z19trained_model_resetPFvPvE>:

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b084      	sub	sp, #16
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
 800bce0:	4b15      	ldr	r3, [pc, #84]	; (800bd38 <_Z19trained_model_resetPFvPvE+0x60>)
 800bce2:	681a      	ldr	r2, [r3, #0]
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	4610      	mov	r0, r2
 800bce8:	4798      	blx	r3
#endif
  scratch_buffers.clear();
 800bcea:	4814      	ldr	r0, [pc, #80]	; (800bd3c <_Z19trained_model_resetPFvPvE+0x64>)
 800bcec:	f000 f8ff 	bl	800beee <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE5clearEv>
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	60fb      	str	r3, [r7, #12]
 800bcf4:	4812      	ldr	r0, [pc, #72]	; (800bd40 <_Z19trained_model_resetPFvPvE+0x68>)
 800bcf6:	f000 f908 	bl	800bf0a <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 800bcfa:	4602      	mov	r2, r0
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	4293      	cmp	r3, r2
 800bd00:	bf34      	ite	cc
 800bd02:	2301      	movcc	r3, #1
 800bd04:	2300      	movcs	r3, #0
 800bd06:	b2db      	uxtb	r3, r3
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d00c      	beq.n	800bd26 <_Z19trained_model_resetPFvPvE+0x4e>
    free(overflow_buffers[ix]);
 800bd0c:	68f9      	ldr	r1, [r7, #12]
 800bd0e:	480c      	ldr	r0, [pc, #48]	; (800bd40 <_Z19trained_model_resetPFvPvE+0x68>)
 800bd10:	f000 f90b 	bl	800bf2a <_ZNSt6vectorIPvSaIS0_EEixEj>
 800bd14:	4603      	mov	r3, r0
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	4618      	mov	r0, r3
 800bd1a:	f002 fe95 	bl	800ea48 <free>
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	3301      	adds	r3, #1
 800bd22:	60fb      	str	r3, [r7, #12]
 800bd24:	e7e6      	b.n	800bcf4 <_Z19trained_model_resetPFvPvE+0x1c>
  }
  overflow_buffers.clear();
 800bd26:	4806      	ldr	r0, [pc, #24]	; (800bd40 <_Z19trained_model_resetPFvPvE+0x68>)
 800bd28:	f000 f90f 	bl	800bf4a <_ZNSt6vectorIPvSaIS0_EE5clearEv>
  return kTfLiteOk;
 800bd2c:	2300      	movs	r3, #0
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	3710      	adds	r7, #16
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}
 800bd36:	bf00      	nop
 800bd38:	20006f34 	.word	0x20006f34
 800bd3c:	200074f8 	.word	0x200074f8
 800bd40:	200074ec 	.word	0x200074ec

0800bd44 <_ZNSt12_Vector_baseIPvSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b082      	sub	sp, #8
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800bd4c:	6878      	ldr	r0, [r7, #4]
 800bd4e:	f000 f90a 	bl	800bf66 <_ZNSaIPvEC1Ev>
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	4618      	mov	r0, r3
 800bd56:	f000 f912 	bl	800bf7e <_ZNSt12_Vector_baseIPvSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	3708      	adds	r7, #8
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}

0800bd64 <_ZNSaIPvED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b082      	sub	sp, #8
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
 800bd6c:	6878      	ldr	r0, [r7, #4]
 800bd6e:	f000 f91a 	bl	800bfa6 <_ZN9__gnu_cxx13new_allocatorIPvED1Ev>
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	4618      	mov	r0, r3
 800bd76:	3708      	adds	r7, #8
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}

0800bd7c <_ZNSt12_Vector_baseIPvSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b082      	sub	sp, #8
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	689a      	ldr	r2, [r3, #8]
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	1ad3      	subs	r3, r2, r3
 800bd92:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 800bd94:	461a      	mov	r2, r3
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f000 f910 	bl	800bfbc <_ZNSt12_Vector_baseIPvSaIS0_EE13_M_deallocateEPS0_j>
      }
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f7ff fc50 	bl	800b644 <_ZNSt12_Vector_baseIPvSaIS0_EE12_Vector_implD1Ev>
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	4618      	mov	r0, r3
 800bda8:	3708      	adds	r7, #8
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	bd80      	pop	{r7, pc}

0800bdae <_ZNSt6vectorIPvSaIS0_EE9push_backERKS0_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 800bdae:	b580      	push	{r7, lr}
 800bdb0:	b082      	sub	sp, #8
 800bdb2:	af00      	add	r7, sp, #0
 800bdb4:	6078      	str	r0, [r7, #4]
 800bdb6:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	685a      	ldr	r2, [r3, #4]
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	689b      	ldr	r3, [r3, #8]
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	d00c      	beq.n	800bdde <_ZNSt6vectorIPvSaIS0_EE9push_backERKS0_+0x30>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800bdc4:	6878      	ldr	r0, [r7, #4]
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	685b      	ldr	r3, [r3, #4]
 800bdca:	683a      	ldr	r2, [r7, #0]
 800bdcc:	4619      	mov	r1, r3
 800bdce:	f000 f908 	bl	800bfe2 <_ZNSt16allocator_traitsISaIPvEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	685b      	ldr	r3, [r3, #4]
 800bdd6:	1d1a      	adds	r2, r3, #4
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 800bddc:	e008      	b.n	800bdf0 <_ZNSt6vectorIPvSaIS0_EE9push_backERKS0_+0x42>
	  _M_realloc_insert(end(), __x);
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f000 f912 	bl	800c008 <_ZNSt6vectorIPvSaIS0_EE3endEv>
 800bde4:	4603      	mov	r3, r0
 800bde6:	683a      	ldr	r2, [r7, #0]
 800bde8:	4619      	mov	r1, r3
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	f000 f934 	bl	800c058 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 800bdf0:	bf00      	nop
 800bdf2:	3708      	adds	r7, #8
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd80      	pop	{r7, pc}

0800bdf8 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b082      	sub	sp, #8
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800be00:	6878      	ldr	r0, [r7, #4]
 800be02:	f000 f9e5 	bl	800c1d0 <_ZNSaIN12_GLOBAL__N_116scratch_buffer_tEEC2Ev>
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	4618      	mov	r0, r3
 800be0a:	f000 f9ed 	bl	800c1e8 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_Vector_impl_dataC2Ev>
	{ }
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	4618      	mov	r0, r3
 800be12:	3708      	adds	r7, #8
 800be14:	46bd      	mov	sp, r7
 800be16:	bd80      	pop	{r7, pc}

0800be18 <_ZNSaIN12_GLOBAL__N_116scratch_buffer_tEED2Ev>:
 800be18:	b580      	push	{r7, lr}
 800be1a:	b082      	sub	sp, #8
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f000 f9f5 	bl	800c210 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEED2Ev>
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	4618      	mov	r0, r3
 800be2a:	3708      	adds	r7, #8
 800be2c:	46bd      	mov	sp, r7
 800be2e:	bd80      	pop	{r7, pc}

0800be30 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED2Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800be30:	b580      	push	{r7, lr}
 800be32:	b082      	sub	sp, #8
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	689a      	ldr	r2, [r3, #8]
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	1ad3      	subs	r3, r2, r3
 800be46:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 800be48:	461a      	mov	r2, r3
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	f000 f9eb 	bl	800c226 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE13_M_deallocateEPS1_j>
      }
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	4618      	mov	r0, r3
 800be54:	f7ff fc5c 	bl	800b710 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_Vector_implD1Ev>
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	4618      	mov	r0, r3
 800be5c:	3708      	adds	r7, #8
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}

0800be62 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 800be62:	b580      	push	{r7, lr}
 800be64:	b082      	sub	sp, #8
 800be66:	af00      	add	r7, sp, #0
 800be68:	6078      	str	r0, [r7, #4]
 800be6a:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	685a      	ldr	r2, [r3, #4]
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	689b      	ldr	r3, [r3, #8]
 800be74:	429a      	cmp	r2, r3
 800be76:	d00d      	beq.n	800be94 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE9push_backERKS1_+0x32>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	685b      	ldr	r3, [r3, #4]
 800be7e:	683a      	ldr	r2, [r7, #0]
 800be80:	4619      	mov	r1, r3
 800be82:	f000 f9e3 	bl	800c24c <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	685b      	ldr	r3, [r3, #4]
 800be8a:	f103 0208 	add.w	r2, r3, #8
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	605a      	str	r2, [r3, #4]
      }
 800be92:	e008      	b.n	800bea6 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE9push_backERKS1_+0x44>
	  _M_realloc_insert(end(), __x);
 800be94:	6878      	ldr	r0, [r7, #4]
 800be96:	f000 f9ec 	bl	800c272 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE3endEv>
 800be9a:	4603      	mov	r3, r0
 800be9c:	683a      	ldr	r2, [r7, #0]
 800be9e:	4619      	mov	r1, r3
 800bea0:	6878      	ldr	r0, [r7, #4]
 800bea2:	f000 fa0d 	bl	800c2c0 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 800bea6:	bf00      	nop
 800bea8:	3708      	adds	r7, #8
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}

0800beae <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800beae:	b480      	push	{r7}
 800beb0:	b083      	sub	sp, #12
 800beb2:	af00      	add	r7, sp, #0
 800beb4:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	685a      	ldr	r2, [r3, #4]
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	1ad3      	subs	r3, r2, r3
 800bec0:	10db      	asrs	r3, r3, #3
 800bec2:	4618      	mov	r0, r3
 800bec4:	370c      	adds	r7, #12
 800bec6:	46bd      	mov	sp, r7
 800bec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800becc:	4770      	bx	lr

0800bece <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800bece:	b480      	push	{r7}
 800bed0:	b083      	sub	sp, #12
 800bed2:	af00      	add	r7, sp, #0
 800bed4:	6078      	str	r0, [r7, #4]
 800bed6:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681a      	ldr	r2, [r3, #0]
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	00db      	lsls	r3, r3, #3
 800bee0:	4413      	add	r3, r2
      }
 800bee2:	4618      	mov	r0, r3
 800bee4:	370c      	adds	r7, #12
 800bee6:	46bd      	mov	sp, r7
 800bee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beec:	4770      	bx	lr

0800beee <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 800beee:	b580      	push	{r7, lr}
 800bef0:	b082      	sub	sp, #8
 800bef2:	af00      	add	r7, sp, #0
 800bef4:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	4619      	mov	r1, r3
 800befc:	6878      	ldr	r0, [r7, #4]
 800befe:	f000 fa9b 	bl	800c438 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_M_erase_at_endEPS1_>
 800bf02:	bf00      	nop
 800bf04:	3708      	adds	r7, #8
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}

0800bf0a <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800bf0a:	b480      	push	{r7}
 800bf0c:	b083      	sub	sp, #12
 800bf0e:	af00      	add	r7, sp, #0
 800bf10:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	685a      	ldr	r2, [r3, #4]
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	1ad3      	subs	r3, r2, r3
 800bf1c:	109b      	asrs	r3, r3, #2
 800bf1e:	4618      	mov	r0, r3
 800bf20:	370c      	adds	r7, #12
 800bf22:	46bd      	mov	sp, r7
 800bf24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf28:	4770      	bx	lr

0800bf2a <_ZNSt6vectorIPvSaIS0_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800bf2a:	b480      	push	{r7}
 800bf2c:	b083      	sub	sp, #12
 800bf2e:	af00      	add	r7, sp, #0
 800bf30:	6078      	str	r0, [r7, #4]
 800bf32:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681a      	ldr	r2, [r3, #0]
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	009b      	lsls	r3, r3, #2
 800bf3c:	4413      	add	r3, r2
      }
 800bf3e:	4618      	mov	r0, r3
 800bf40:	370c      	adds	r7, #12
 800bf42:	46bd      	mov	sp, r7
 800bf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf48:	4770      	bx	lr

0800bf4a <_ZNSt6vectorIPvSaIS0_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 800bf4a:	b580      	push	{r7, lr}
 800bf4c:	b082      	sub	sp, #8
 800bf4e:	af00      	add	r7, sp, #0
 800bf50:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	4619      	mov	r1, r3
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	f000 fa8e 	bl	800c47a <_ZNSt6vectorIPvSaIS0_EE15_M_erase_at_endEPS0_>
 800bf5e:	bf00      	nop
 800bf60:	3708      	adds	r7, #8
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}

0800bf66 <_ZNSaIPvEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800bf66:	b580      	push	{r7, lr}
 800bf68:	b082      	sub	sp, #8
 800bf6a:	af00      	add	r7, sp, #0
 800bf6c:	6078      	str	r0, [r7, #4]
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f000 faa4 	bl	800c4bc <_ZN9__gnu_cxx13new_allocatorIPvEC1Ev>
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	4618      	mov	r0, r3
 800bf78:	3708      	adds	r7, #8
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}

0800bf7e <_ZNSt12_Vector_baseIPvSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800bf7e:	b480      	push	{r7}
 800bf80:	b083      	sub	sp, #12
 800bf82:	af00      	add	r7, sp, #0
 800bf84:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2200      	movs	r2, #0
 800bf8a:	601a      	str	r2, [r3, #0]
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2200      	movs	r2, #0
 800bf90:	605a      	str	r2, [r3, #4]
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2200      	movs	r2, #0
 800bf96:	609a      	str	r2, [r3, #8]
	{ }
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	370c      	adds	r7, #12
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa4:	4770      	bx	lr

0800bfa6 <_ZN9__gnu_cxx13new_allocatorIPvED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800bfa6:	b480      	push	{r7}
 800bfa8:	b083      	sub	sp, #12
 800bfaa:	af00      	add	r7, sp, #0
 800bfac:	6078      	str	r0, [r7, #4]
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	370c      	adds	r7, #12
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfba:	4770      	bx	lr

0800bfbc <_ZNSt12_Vector_baseIPvSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b084      	sub	sp, #16
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	60f8      	str	r0, [r7, #12]
 800bfc4:	60b9      	str	r1, [r7, #8]
 800bfc6:	607a      	str	r2, [r7, #4]
	if (__p)
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d005      	beq.n	800bfda <_ZNSt12_Vector_baseIPvSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	687a      	ldr	r2, [r7, #4]
 800bfd2:	68b9      	ldr	r1, [r7, #8]
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	f000 fa7c 	bl	800c4d2 <_ZNSt16allocator_traitsISaIPvEE10deallocateERS1_PS0_j>
      }
 800bfda:	bf00      	nop
 800bfdc:	3710      	adds	r7, #16
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}

0800bfe2 <_ZNSt16allocator_traitsISaIPvEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800bfe2:	b580      	push	{r7, lr}
 800bfe4:	b084      	sub	sp, #16
 800bfe6:	af00      	add	r7, sp, #0
 800bfe8:	60f8      	str	r0, [r7, #12]
 800bfea:	60b9      	str	r1, [r7, #8]
 800bfec:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f000 fa7e 	bl	800c4f0 <_ZSt7forwardIRKPvEOT_RNSt16remove_referenceIS3_E4typeE>
 800bff4:	4603      	mov	r3, r0
 800bff6:	461a      	mov	r2, r3
 800bff8:	68b9      	ldr	r1, [r7, #8]
 800bffa:	68f8      	ldr	r0, [r7, #12]
 800bffc:	f000 fa83 	bl	800c506 <_ZN9__gnu_cxx13new_allocatorIPvE9constructIS1_JRKS1_EEEvPT_DpOT0_>
 800c000:	bf00      	nop
 800c002:	3710      	adds	r7, #16
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}

0800c008 <_ZNSt6vectorIPvSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800c008:	b580      	push	{r7, lr}
 800c00a:	b084      	sub	sp, #16
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	1d1a      	adds	r2, r3, #4
 800c014:	f107 030c 	add.w	r3, r7, #12
 800c018:	4611      	mov	r1, r2
 800c01a:	4618      	mov	r0, r3
 800c01c:	f000 fa89 	bl	800c532 <_ZN9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	4618      	mov	r0, r3
 800c024:	3710      	adds	r7, #16
 800c026:	46bd      	mov	sp, r7
 800c028:	bd80      	pop	{r7, pc}

0800c02a <_ZNSt6vectorIPvSaIS0_EE15_S_use_relocateEv>:
      _S_use_relocate()
 800c02a:	b580      	push	{r7, lr}
 800c02c:	b082      	sub	sp, #8
 800c02e:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 800c030:	4618      	mov	r0, r3
 800c032:	f000 f805 	bl	800c040 <_ZNSt6vectorIPvSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 800c036:	4603      	mov	r3, r0
      }
 800c038:	4618      	mov	r0, r3
 800c03a:	3708      	adds	r7, #8
 800c03c:	46bd      	mov	sp, r7
 800c03e:	bd80      	pop	{r7, pc}

0800c040 <_ZNSt6vectorIPvSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 800c040:	b480      	push	{r7}
 800c042:	b083      	sub	sp, #12
 800c044:	af00      	add	r7, sp, #0
 800c046:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 800c048:	2301      	movs	r3, #1
      }
 800c04a:	4618      	mov	r0, r3
 800c04c:	370c      	adds	r7, #12
 800c04e:	46bd      	mov	sp, r7
 800c050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c054:	4770      	bx	lr
	...

0800c058 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 800c058:	b5b0      	push	{r4, r5, r7, lr}
 800c05a:	b08c      	sub	sp, #48	; 0x30
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	60f8      	str	r0, [r7, #12]
 800c060:	60b9      	str	r1, [r7, #8]
 800c062:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 800c064:	4a59      	ldr	r2, [pc, #356]	; (800c1cc <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x174>)
 800c066:	2101      	movs	r1, #1
 800c068:	68f8      	ldr	r0, [r7, #12]
 800c06a:	f000 fa72 	bl	800c552 <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc>
 800c06e:	62b8      	str	r0, [r7, #40]	; 0x28
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      pointer __old_start = this->_M_impl._M_start;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	685b      	ldr	r3, [r3, #4]
 800c07a:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 800c07c:	68f8      	ldr	r0, [r7, #12]
 800c07e:	f000 faaf 	bl	800c5e0 <_ZNSt6vectorIPvSaIS0_EE5beginEv>
 800c082:	4603      	mov	r3, r0
 800c084:	617b      	str	r3, [r7, #20]
 800c086:	f107 0214 	add.w	r2, r7, #20
 800c08a:	f107 0308 	add.w	r3, r7, #8
 800c08e:	4611      	mov	r1, r2
 800c090:	4618      	mov	r0, r3
 800c092:	f000 fab5 	bl	800c600 <_ZN9__gnu_cxxmiIPPvSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 800c096:	4603      	mov	r3, r0
 800c098:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f000 fac3 	bl	800c62a <_ZNSt12_Vector_baseIPvSaIS0_EE11_M_allocateEj>
 800c0a4:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 800c0a6:	69bb      	ldr	r3, [r7, #24]
 800c0a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800c0aa:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800c0ac:	69fb      	ldr	r3, [r7, #28]
 800c0ae:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 800c0b0:	69ba      	ldr	r2, [r7, #24]
 800c0b2:	18d5      	adds	r5, r2, r3
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	f000 fa1b 	bl	800c4f0 <_ZSt7forwardIRKPvEOT_RNSt16remove_referenceIS3_E4typeE>
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	461a      	mov	r2, r3
 800c0be:	4629      	mov	r1, r5
 800c0c0:	4620      	mov	r0, r4
 800c0c2:	f7ff ff8e 	bl	800bfe2 <_ZNSt16allocator_traitsISaIPvEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800c0ca:	f7ff ffae 	bl	800c02a <_ZNSt6vectorIPvSaIS0_EE15_S_use_relocateEv>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d027      	beq.n	800c124 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800c0d4:	f107 0308 	add.w	r3, r7, #8
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f000 face 	bl	800c67a <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 800c0de:	4603      	mov	r3, r0
 800c0e0:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	f000 fad3 	bl	800c690 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 800c0ea:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800c0ec:	69ba      	ldr	r2, [r7, #24]
 800c0ee:	4621      	mov	r1, r4
 800c0f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c0f2:	f000 faae 	bl	800c652 <_ZNSt6vectorIPvSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 800c0f6:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 800c0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0fa:	3304      	adds	r3, #4
 800c0fc:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800c0fe:	f107 0308 	add.w	r3, r7, #8
 800c102:	4618      	mov	r0, r3
 800c104:	f000 fab9 	bl	800c67a <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 800c108:	4603      	mov	r3, r0
 800c10a:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	4618      	mov	r0, r3
 800c110:	f000 fabe 	bl	800c690 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 800c114:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800c116:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c118:	6a39      	ldr	r1, [r7, #32]
 800c11a:	4620      	mov	r0, r4
 800c11c:	f000 fa99 	bl	800c652 <_ZNSt6vectorIPvSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 800c120:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c122:	e026      	b.n	800c172 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 800c124:	f107 0308 	add.w	r3, r7, #8
 800c128:	4618      	mov	r0, r3
 800c12a:	f000 faa6 	bl	800c67a <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 800c12e:	4603      	mov	r3, r0
 800c130:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	4618      	mov	r0, r3
 800c136:	f000 faab 	bl	800c690 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 800c13a:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 800c13c:	69ba      	ldr	r2, [r7, #24]
 800c13e:	4621      	mov	r1, r4
 800c140:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c142:	f000 fab0 	bl	800c6a6 <_ZSt34__uninitialized_move_if_noexcept_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>
 800c146:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 800c148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c14a:	3304      	adds	r3, #4
 800c14c:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 800c14e:	f107 0308 	add.w	r3, r7, #8
 800c152:	4618      	mov	r0, r3
 800c154:	f000 fa91 	bl	800c67a <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 800c158:	4603      	mov	r3, r0
 800c15a:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	4618      	mov	r0, r3
 800c160:	f000 fa96 	bl	800c690 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 800c164:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 800c166:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c168:	6a39      	ldr	r1, [r7, #32]
 800c16a:	4620      	mov	r0, r4
 800c16c:	f000 fa9b 	bl	800c6a6 <_ZSt34__uninitialized_move_if_noexcept_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>
 800c170:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 800c172:	f7ff ff5a 	bl	800c02a <_ZNSt6vectorIPvSaIS0_EE15_S_use_relocateEv>
 800c176:	4603      	mov	r3, r0
 800c178:	f083 0301 	eor.w	r3, r3, #1
 800c17c:	b2db      	uxtb	r3, r3
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d009      	beq.n	800c196 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	4618      	mov	r0, r3
 800c186:	f000 fa83 	bl	800c690 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 800c18a:	4603      	mov	r3, r0
 800c18c:	461a      	mov	r2, r3
 800c18e:	6a39      	ldr	r1, [r7, #32]
 800c190:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c192:	f000 faa1 	bl	800c6d8 <_ZSt8_DestroyIPPvS0_EvT_S2_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 800c196:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	689a      	ldr	r2, [r3, #8]
 800c19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c19e:	1ad3      	subs	r3, r2, r3
 800c1a0:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800c1a2:	461a      	mov	r2, r3
 800c1a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c1a6:	f7ff ff09 	bl	800bfbc <_ZNSt12_Vector_baseIPvSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	69ba      	ldr	r2, [r7, #24]
 800c1ae:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c1b4:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800c1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1b8:	009b      	lsls	r3, r3, #2
 800c1ba:	69ba      	ldr	r2, [r7, #24]
 800c1bc:	441a      	add	r2, r3
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	609a      	str	r2, [r3, #8]
    }
 800c1c2:	bf00      	nop
 800c1c4:	3730      	adds	r7, #48	; 0x30
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bdb0      	pop	{r4, r5, r7, pc}
 800c1ca:	bf00      	nop
 800c1cc:	08011748 	.word	0x08011748

0800c1d0 <_ZNSaIN12_GLOBAL__N_116scratch_buffer_tEEC2Ev>:
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b082      	sub	sp, #8
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f000 fa8b 	bl	800c6f4 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEEC2Ev>
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	3708      	adds	r7, #8
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}

0800c1e8 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_Vector_impl_dataC2Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800c1e8:	b480      	push	{r7}
 800c1ea:	b083      	sub	sp, #12
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	601a      	str	r2, [r3, #0]
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	605a      	str	r2, [r3, #4]
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2200      	movs	r2, #0
 800c200:	609a      	str	r2, [r3, #8]
	{ }
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	4618      	mov	r0, r3
 800c206:	370c      	adds	r7, #12
 800c208:	46bd      	mov	sp, r7
 800c20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20e:	4770      	bx	lr

0800c210 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEED2Ev>:
 800c210:	b480      	push	{r7}
 800c212:	b083      	sub	sp, #12
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	4618      	mov	r0, r3
 800c21c:	370c      	adds	r7, #12
 800c21e:	46bd      	mov	sp, r7
 800c220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c224:	4770      	bx	lr

0800c226 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800c226:	b580      	push	{r7, lr}
 800c228:	b084      	sub	sp, #16
 800c22a:	af00      	add	r7, sp, #0
 800c22c:	60f8      	str	r0, [r7, #12]
 800c22e:	60b9      	str	r1, [r7, #8]
 800c230:	607a      	str	r2, [r7, #4]
	if (__p)
 800c232:	68bb      	ldr	r3, [r7, #8]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d005      	beq.n	800c244 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	687a      	ldr	r2, [r7, #4]
 800c23c:	68b9      	ldr	r1, [r7, #8]
 800c23e:	4618      	mov	r0, r3
 800c240:	f000 fa63 	bl	800c70a <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE10deallocateERS2_PS1_j>
      }
 800c244:	bf00      	nop
 800c246:	3710      	adds	r7, #16
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}

0800c24c <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b084      	sub	sp, #16
 800c250:	af00      	add	r7, sp, #0
 800c252:	60f8      	str	r0, [r7, #12]
 800c254:	60b9      	str	r1, [r7, #8]
 800c256:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800c258:	6878      	ldr	r0, [r7, #4]
 800c25a:	f000 fa65 	bl	800c728 <_ZSt7forwardIRKN12_GLOBAL__N_116scratch_buffer_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 800c25e:	4603      	mov	r3, r0
 800c260:	461a      	mov	r2, r3
 800c262:	68b9      	ldr	r1, [r7, #8]
 800c264:	68f8      	ldr	r0, [r7, #12]
 800c266:	f000 fa6a 	bl	800c73e <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE9constructIS2_JRKS2_EEEvPT_DpOT0_>
 800c26a:	bf00      	nop
 800c26c:	3710      	adds	r7, #16
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd80      	pop	{r7, pc}

0800c272 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800c272:	b580      	push	{r7, lr}
 800c274:	b084      	sub	sp, #16
 800c276:	af00      	add	r7, sp, #0
 800c278:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	1d1a      	adds	r2, r3, #4
 800c27e:	f107 030c 	add.w	r3, r7, #12
 800c282:	4611      	mov	r1, r2
 800c284:	4618      	mov	r0, r3
 800c286:	f000 fa73 	bl	800c770 <_ZN9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	4618      	mov	r0, r3
 800c28e:	3710      	adds	r7, #16
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}

0800c294 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 800c294:	b580      	push	{r7, lr}
 800c296:	b082      	sub	sp, #8
 800c298:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 800c29a:	4618      	mov	r0, r3
 800c29c:	f000 f805 	bl	800c2aa <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 800c2a0:	4603      	mov	r3, r0
      }
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	3708      	adds	r7, #8
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}

0800c2aa <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 800c2aa:	b480      	push	{r7}
 800c2ac:	b083      	sub	sp, #12
 800c2ae:	af00      	add	r7, sp, #0
 800c2b0:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 800c2b2:	2301      	movs	r3, #1
      }
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	370c      	adds	r7, #12
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2be:	4770      	bx	lr

0800c2c0 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800c2c0:	b5b0      	push	{r4, r5, r7, lr}
 800c2c2:	b08c      	sub	sp, #48	; 0x30
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	60f8      	str	r0, [r7, #12]
 800c2c8:	60b9      	str	r1, [r7, #8]
 800c2ca:	607a      	str	r2, [r7, #4]
      const size_type __len =
 800c2cc:	4a59      	ldr	r2, [pc, #356]	; (800c434 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x174>)
 800c2ce:	2101      	movs	r1, #1
 800c2d0:	68f8      	ldr	r0, [r7, #12]
 800c2d2:	f000 fa5d 	bl	800c790 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc>
 800c2d6:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	685b      	ldr	r3, [r3, #4]
 800c2e2:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 800c2e4:	68f8      	ldr	r0, [r7, #12]
 800c2e6:	f000 fa9a 	bl	800c81e <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE5beginEv>
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	617b      	str	r3, [r7, #20]
 800c2ee:	f107 0214 	add.w	r2, r7, #20
 800c2f2:	f107 0308 	add.w	r3, r7, #8
 800c2f6:	4611      	mov	r1, r2
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	f000 faa0 	bl	800c83e <_ZN9__gnu_cxxmiIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800c2fe:	4603      	mov	r3, r0
 800c300:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c306:	4618      	mov	r0, r3
 800c308:	f000 faae 	bl	800c868 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_M_allocateEj>
 800c30c:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 800c30e:	69bb      	ldr	r3, [r7, #24]
 800c310:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 800c312:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800c314:	69fb      	ldr	r3, [r7, #28]
 800c316:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 800c318:	69ba      	ldr	r2, [r7, #24]
 800c31a:	18d5      	adds	r5, r2, r3
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f000 fa03 	bl	800c728 <_ZSt7forwardIRKN12_GLOBAL__N_116scratch_buffer_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 800c322:	4603      	mov	r3, r0
 800c324:	461a      	mov	r2, r3
 800c326:	4629      	mov	r1, r5
 800c328:	4620      	mov	r0, r4
 800c32a:	f7ff ff8f 	bl	800c24c <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 800c32e:	2300      	movs	r3, #0
 800c330:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800c332:	f7ff ffaf 	bl	800c294 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_S_use_relocateEv>
 800c336:	4603      	mov	r3, r0
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d027      	beq.n	800c38c <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800c33c:	f107 0308 	add.w	r3, r7, #8
 800c340:	4618      	mov	r0, r3
 800c342:	f000 fab9 	bl	800c8b8 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 800c346:	4603      	mov	r3, r0
 800c348:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	4618      	mov	r0, r3
 800c34e:	f000 fabe 	bl	800c8ce <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 800c352:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800c354:	69ba      	ldr	r2, [r7, #24]
 800c356:	4621      	mov	r1, r4
 800c358:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c35a:	f000 fa99 	bl	800c890 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800c35e:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 800c360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c362:	3308      	adds	r3, #8
 800c364:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800c366:	f107 0308 	add.w	r3, r7, #8
 800c36a:	4618      	mov	r0, r3
 800c36c:	f000 faa4 	bl	800c8b8 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 800c370:	4603      	mov	r3, r0
 800c372:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	4618      	mov	r0, r3
 800c378:	f000 faa9 	bl	800c8ce <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 800c37c:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800c37e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c380:	6a39      	ldr	r1, [r7, #32]
 800c382:	4620      	mov	r0, r4
 800c384:	f000 fa84 	bl	800c890 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800c388:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c38a:	e026      	b.n	800c3da <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 800c38c:	f107 0308 	add.w	r3, r7, #8
 800c390:	4618      	mov	r0, r3
 800c392:	f000 fa91 	bl	800c8b8 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 800c396:	4603      	mov	r3, r0
 800c398:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	4618      	mov	r0, r3
 800c39e:	f000 fa96 	bl	800c8ce <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 800c3a2:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 800c3a4:	69ba      	ldr	r2, [r7, #24]
 800c3a6:	4621      	mov	r1, r4
 800c3a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c3aa:	f000 fa9b 	bl	800c8e4 <_ZSt34__uninitialized_move_if_noexcept_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>
 800c3ae:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 800c3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3b2:	3308      	adds	r3, #8
 800c3b4:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 800c3b6:	f107 0308 	add.w	r3, r7, #8
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f000 fa7c 	bl	800c8b8 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f000 fa81 	bl	800c8ce <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 800c3cc:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 800c3ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c3d0:	6a39      	ldr	r1, [r7, #32]
 800c3d2:	4620      	mov	r0, r4
 800c3d4:	f000 fa86 	bl	800c8e4 <_ZSt34__uninitialized_move_if_noexcept_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>
 800c3d8:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 800c3da:	f7ff ff5b 	bl	800c294 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_S_use_relocateEv>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	f083 0301 	eor.w	r3, r3, #1
 800c3e4:	b2db      	uxtb	r3, r3
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d009      	beq.n	800c3fe <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	f000 fa6e 	bl	800c8ce <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	461a      	mov	r2, r3
 800c3f6:	6a39      	ldr	r1, [r7, #32]
 800c3f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c3fa:	f000 fa8c 	bl	800c916 <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tES1_EvT_S3_RSaIT0_E>
      _M_deallocate(__old_start,
 800c3fe:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	689a      	ldr	r2, [r3, #8]
 800c404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c406:	1ad3      	subs	r3, r2, r3
 800c408:	10db      	asrs	r3, r3, #3
      _M_deallocate(__old_start,
 800c40a:	461a      	mov	r2, r3
 800c40c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c40e:	f7ff ff0a 	bl	800c226 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	69ba      	ldr	r2, [r7, #24]
 800c416:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c41c:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800c41e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c420:	00db      	lsls	r3, r3, #3
 800c422:	69ba      	ldr	r2, [r7, #24]
 800c424:	441a      	add	r2, r3
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	609a      	str	r2, [r3, #8]
    }
 800c42a:	bf00      	nop
 800c42c:	3730      	adds	r7, #48	; 0x30
 800c42e:	46bd      	mov	sp, r7
 800c430:	bdb0      	pop	{r4, r5, r7, pc}
 800c432:	bf00      	nop
 800c434:	08011748 	.word	0x08011748

0800c438 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_M_erase_at_endEPS1_>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 800c438:	b590      	push	{r4, r7, lr}
 800c43a:	b085      	sub	sp, #20
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
 800c440:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	685a      	ldr	r2, [r3, #4]
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	1ad3      	subs	r3, r2, r3
 800c44a:	10db      	asrs	r3, r3, #3
 800c44c:	60fb      	str	r3, [r7, #12]
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d00e      	beq.n	800c472 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_M_erase_at_endEPS1_+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	4618      	mov	r0, r3
 800c45c:	f000 fa37 	bl	800c8ce <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 800c460:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800c462:	461a      	mov	r2, r3
 800c464:	4621      	mov	r1, r4
 800c466:	6838      	ldr	r0, [r7, #0]
 800c468:	f000 fa55 	bl	800c916 <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tES1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	683a      	ldr	r2, [r7, #0]
 800c470:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 800c472:	bf00      	nop
 800c474:	3714      	adds	r7, #20
 800c476:	46bd      	mov	sp, r7
 800c478:	bd90      	pop	{r4, r7, pc}

0800c47a <_ZNSt6vectorIPvSaIS0_EE15_M_erase_at_endEPS0_>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 800c47a:	b590      	push	{r4, r7, lr}
 800c47c:	b085      	sub	sp, #20
 800c47e:	af00      	add	r7, sp, #0
 800c480:	6078      	str	r0, [r7, #4]
 800c482:	6039      	str	r1, [r7, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	685a      	ldr	r2, [r3, #4]
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	1ad3      	subs	r3, r2, r3
 800c48c:	109b      	asrs	r3, r3, #2
 800c48e:	60fb      	str	r3, [r7, #12]
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d00e      	beq.n	800c4b4 <_ZNSt6vectorIPvSaIS0_EE15_M_erase_at_endEPS0_+0x3a>
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	4618      	mov	r0, r3
 800c49e:	f000 f8f7 	bl	800c690 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 800c4a2:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800c4a4:	461a      	mov	r2, r3
 800c4a6:	4621      	mov	r1, r4
 800c4a8:	6838      	ldr	r0, [r7, #0]
 800c4aa:	f000 f915 	bl	800c6d8 <_ZSt8_DestroyIPPvS0_EvT_S2_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	683a      	ldr	r2, [r7, #0]
 800c4b2:	605a      	str	r2, [r3, #4]
      }
 800c4b4:	bf00      	nop
 800c4b6:	3714      	adds	r7, #20
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bd90      	pop	{r4, r7, pc}

0800c4bc <_ZN9__gnu_cxx13new_allocatorIPvEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800c4bc:	b480      	push	{r7}
 800c4be:	b083      	sub	sp, #12
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	370c      	adds	r7, #12
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d0:	4770      	bx	lr

0800c4d2 <_ZNSt16allocator_traitsISaIPvEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800c4d2:	b580      	push	{r7, lr}
 800c4d4:	b084      	sub	sp, #16
 800c4d6:	af00      	add	r7, sp, #0
 800c4d8:	60f8      	str	r0, [r7, #12]
 800c4da:	60b9      	str	r1, [r7, #8]
 800c4dc:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800c4de:	687a      	ldr	r2, [r7, #4]
 800c4e0:	68b9      	ldr	r1, [r7, #8]
 800c4e2:	68f8      	ldr	r0, [r7, #12]
 800c4e4:	f000 fa25 	bl	800c932 <_ZN9__gnu_cxx13new_allocatorIPvE10deallocateEPS1_j>
 800c4e8:	bf00      	nop
 800c4ea:	3710      	adds	r7, #16
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd80      	pop	{r7, pc}

0800c4f0 <_ZSt7forwardIRKPvEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c4f0:	b480      	push	{r7}
 800c4f2:	b083      	sub	sp, #12
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	370c      	adds	r7, #12
 800c4fe:	46bd      	mov	sp, r7
 800c500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c504:	4770      	bx	lr

0800c506 <_ZN9__gnu_cxx13new_allocatorIPvE9constructIS1_JRKS1_EEEvPT_DpOT0_>:
      }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 800c506:	b590      	push	{r4, r7, lr}
 800c508:	b085      	sub	sp, #20
 800c50a:	af00      	add	r7, sp, #0
 800c50c:	60f8      	str	r0, [r7, #12]
 800c50e:	60b9      	str	r1, [r7, #8]
 800c510:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	f7ff ffec 	bl	800c4f0 <_ZSt7forwardIRKPvEOT_RNSt16remove_referenceIS3_E4typeE>
 800c518:	4603      	mov	r3, r0
 800c51a:	681c      	ldr	r4, [r3, #0]
 800c51c:	68bb      	ldr	r3, [r7, #8]
 800c51e:	4619      	mov	r1, r3
 800c520:	2004      	movs	r0, #4
 800c522:	f7f4 fd93 	bl	800104c <_ZnwjPv>
 800c526:	4603      	mov	r3, r0
 800c528:	601c      	str	r4, [r3, #0]
 800c52a:	bf00      	nop
 800c52c:	3714      	adds	r7, #20
 800c52e:	46bd      	mov	sp, r7
 800c530:	bd90      	pop	{r4, r7, pc}

0800c532 <_ZN9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEEC1ERKS2_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800c532:	b480      	push	{r7}
 800c534:	b083      	sub	sp, #12
 800c536:	af00      	add	r7, sp, #0
 800c538:	6078      	str	r0, [r7, #4]
 800c53a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	681a      	ldr	r2, [r3, #0]
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	601a      	str	r2, [r3, #0]
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	4618      	mov	r0, r3
 800c548:	370c      	adds	r7, #12
 800c54a:	46bd      	mov	sp, r7
 800c54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c550:	4770      	bx	lr

0800c552 <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800c552:	b590      	push	{r4, r7, lr}
 800c554:	b087      	sub	sp, #28
 800c556:	af00      	add	r7, sp, #0
 800c558:	60f8      	str	r0, [r7, #12]
 800c55a:	60b9      	str	r1, [r7, #8]
 800c55c:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800c55e:	68f8      	ldr	r0, [r7, #12]
 800c560:	f000 f9f4 	bl	800c94c <_ZNKSt6vectorIPvSaIS0_EE8max_sizeEv>
 800c564:	4604      	mov	r4, r0
 800c566:	68f8      	ldr	r0, [r7, #12]
 800c568:	f7ff fccf 	bl	800bf0a <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 800c56c:	4603      	mov	r3, r0
 800c56e:	1ae2      	subs	r2, r4, r3
 800c570:	68bb      	ldr	r3, [r7, #8]
 800c572:	429a      	cmp	r2, r3
 800c574:	bf34      	ite	cc
 800c576:	2301      	movcc	r3, #1
 800c578:	2300      	movcs	r3, #0
 800c57a:	b2db      	uxtb	r3, r3
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d002      	beq.n	800c586 <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f000 fe61 	bl	800d248 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800c586:	68f8      	ldr	r0, [r7, #12]
 800c588:	f7ff fcbf 	bl	800bf0a <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 800c58c:	4604      	mov	r4, r0
 800c58e:	68f8      	ldr	r0, [r7, #12]
 800c590:	f7ff fcbb 	bl	800bf0a <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 800c594:	4603      	mov	r3, r0
 800c596:	613b      	str	r3, [r7, #16]
 800c598:	f107 0208 	add.w	r2, r7, #8
 800c59c:	f107 0310 	add.w	r3, r7, #16
 800c5a0:	4611      	mov	r1, r2
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	f7f6 fdfd 	bl	80031a2 <_ZSt3maxIjERKT_S2_S2_>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	4423      	add	r3, r4
 800c5ae:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800c5b0:	68f8      	ldr	r0, [r7, #12]
 800c5b2:	f7ff fcaa 	bl	800bf0a <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 800c5b6:	4602      	mov	r2, r0
 800c5b8:	697b      	ldr	r3, [r7, #20]
 800c5ba:	4293      	cmp	r3, r2
 800c5bc:	d306      	bcc.n	800c5cc <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc+0x7a>
 800c5be:	68f8      	ldr	r0, [r7, #12]
 800c5c0:	f000 f9c4 	bl	800c94c <_ZNKSt6vectorIPvSaIS0_EE8max_sizeEv>
 800c5c4:	4602      	mov	r2, r0
 800c5c6:	697b      	ldr	r3, [r7, #20]
 800c5c8:	4293      	cmp	r3, r2
 800c5ca:	d904      	bls.n	800c5d6 <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc+0x84>
 800c5cc:	68f8      	ldr	r0, [r7, #12]
 800c5ce:	f000 f9bd 	bl	800c94c <_ZNKSt6vectorIPvSaIS0_EE8max_sizeEv>
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	e000      	b.n	800c5d8 <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc+0x86>
 800c5d6:	697b      	ldr	r3, [r7, #20]
      }
 800c5d8:	4618      	mov	r0, r3
 800c5da:	371c      	adds	r7, #28
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bd90      	pop	{r4, r7, pc}

0800c5e0 <_ZNSt6vectorIPvSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b084      	sub	sp, #16
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800c5e8:	687a      	ldr	r2, [r7, #4]
 800c5ea:	f107 030c 	add.w	r3, r7, #12
 800c5ee:	4611      	mov	r1, r2
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	f7ff ff9e 	bl	800c532 <_ZN9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	3710      	adds	r7, #16
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	bd80      	pop	{r7, pc}

0800c600 <_ZN9__gnu_cxxmiIPPvSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800c600:	b590      	push	{r4, r7, lr}
 800c602:	b083      	sub	sp, #12
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
 800c608:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800c60a:	6878      	ldr	r0, [r7, #4]
 800c60c:	f000 f835 	bl	800c67a <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 800c610:	4603      	mov	r3, r0
 800c612:	681c      	ldr	r4, [r3, #0]
 800c614:	6838      	ldr	r0, [r7, #0]
 800c616:	f000 f830 	bl	800c67a <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 800c61a:	4603      	mov	r3, r0
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	1ae3      	subs	r3, r4, r3
 800c620:	109b      	asrs	r3, r3, #2
 800c622:	4618      	mov	r0, r3
 800c624:	370c      	adds	r7, #12
 800c626:	46bd      	mov	sp, r7
 800c628:	bd90      	pop	{r4, r7, pc}

0800c62a <_ZNSt12_Vector_baseIPvSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800c62a:	b580      	push	{r7, lr}
 800c62c:	b082      	sub	sp, #8
 800c62e:	af00      	add	r7, sp, #0
 800c630:	6078      	str	r0, [r7, #4]
 800c632:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d006      	beq.n	800c648 <_ZNSt12_Vector_baseIPvSaIS0_EE11_M_allocateEj+0x1e>
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	6839      	ldr	r1, [r7, #0]
 800c63e:	4618      	mov	r0, r3
 800c640:	f000 f995 	bl	800c96e <_ZNSt16allocator_traitsISaIPvEE8allocateERS1_j>
 800c644:	4603      	mov	r3, r0
 800c646:	e000      	b.n	800c64a <_ZNSt12_Vector_baseIPvSaIS0_EE11_M_allocateEj+0x20>
 800c648:	2300      	movs	r3, #0
      }
 800c64a:	4618      	mov	r0, r3
 800c64c:	3708      	adds	r7, #8
 800c64e:	46bd      	mov	sp, r7
 800c650:	bd80      	pop	{r7, pc}

0800c652 <_ZNSt6vectorIPvSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800c652:	b590      	push	{r4, r7, lr}
 800c654:	b089      	sub	sp, #36	; 0x24
 800c656:	af02      	add	r7, sp, #8
 800c658:	60f8      	str	r0, [r7, #12]
 800c65a:	60b9      	str	r1, [r7, #8]
 800c65c:	607a      	str	r2, [r7, #4]
 800c65e:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800c660:	f88d 4000 	strb.w	r4, [sp]
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	687a      	ldr	r2, [r7, #4]
 800c668:	68b9      	ldr	r1, [r7, #8]
 800c66a:	68f8      	ldr	r0, [r7, #12]
 800c66c:	f000 f98e 	bl	800c98c <_ZNSt6vectorIPvSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 800c670:	4603      	mov	r3, r0
      }
 800c672:	4618      	mov	r0, r3
 800c674:	371c      	adds	r7, #28
 800c676:	46bd      	mov	sp, r7
 800c678:	bd90      	pop	{r4, r7, pc}

0800c67a <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800c67a:	b480      	push	{r7}
 800c67c:	b083      	sub	sp, #12
 800c67e:	af00      	add	r7, sp, #0
 800c680:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	4618      	mov	r0, r3
 800c686:	370c      	adds	r7, #12
 800c688:	46bd      	mov	sp, r7
 800c68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68e:	4770      	bx	lr

0800c690 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800c690:	b480      	push	{r7}
 800c692:	b083      	sub	sp, #12
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	4618      	mov	r0, r3
 800c69c:	370c      	adds	r7, #12
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a4:	4770      	bx	lr

0800c6a6 <_ZSt34__uninitialized_move_if_noexcept_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800c6a6:	b590      	push	{r4, r7, lr}
 800c6a8:	b085      	sub	sp, #20
 800c6aa:	af00      	add	r7, sp, #0
 800c6ac:	60f8      	str	r0, [r7, #12]
 800c6ae:	60b9      	str	r1, [r7, #8]
 800c6b0:	607a      	str	r2, [r7, #4]
 800c6b2:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800c6b4:	68f8      	ldr	r0, [r7, #12]
 800c6b6:	f000 f97b 	bl	800c9b0 <_ZSt32__make_move_if_noexcept_iteratorIPvSt13move_iteratorIPS0_EET0_PT_>
 800c6ba:	4604      	mov	r4, r0
 800c6bc:	68b8      	ldr	r0, [r7, #8]
 800c6be:	f000 f977 	bl	800c9b0 <_ZSt32__make_move_if_noexcept_iteratorIPvSt13move_iteratorIPS0_EET0_PT_>
 800c6c2:	4601      	mov	r1, r0
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	687a      	ldr	r2, [r7, #4]
 800c6c8:	4620      	mov	r0, r4
 800c6ca:	f000 f980 	bl	800c9ce <_ZSt22__uninitialized_copy_aISt13move_iteratorIPPvES2_S1_ET0_T_S5_S4_RSaIT1_E>
 800c6ce:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	3714      	adds	r7, #20
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd90      	pop	{r4, r7, pc}

0800c6d8 <_ZSt8_DestroyIPPvS0_EvT_S2_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b084      	sub	sp, #16
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	60f8      	str	r0, [r7, #12]
 800c6e0:	60b9      	str	r1, [r7, #8]
 800c6e2:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 800c6e4:	68b9      	ldr	r1, [r7, #8]
 800c6e6:	68f8      	ldr	r0, [r7, #12]
 800c6e8:	f000 f982 	bl	800c9f0 <_ZSt8_DestroyIPPvEvT_S2_>
    }
 800c6ec:	bf00      	nop
 800c6ee:	3710      	adds	r7, #16
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd80      	pop	{r7, pc}

0800c6f4 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEEC2Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800c6f4:	b480      	push	{r7}
 800c6f6:	b083      	sub	sp, #12
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	4618      	mov	r0, r3
 800c700:	370c      	adds	r7, #12
 800c702:	46bd      	mov	sp, r7
 800c704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c708:	4770      	bx	lr

0800c70a <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800c70a:	b580      	push	{r7, lr}
 800c70c:	b084      	sub	sp, #16
 800c70e:	af00      	add	r7, sp, #0
 800c710:	60f8      	str	r0, [r7, #12]
 800c712:	60b9      	str	r1, [r7, #8]
 800c714:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800c716:	687a      	ldr	r2, [r7, #4]
 800c718:	68b9      	ldr	r1, [r7, #8]
 800c71a:	68f8      	ldr	r0, [r7, #12]
 800c71c:	f000 f975 	bl	800ca0a <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE10deallocateEPS2_j>
 800c720:	bf00      	nop
 800c722:	3710      	adds	r7, #16
 800c724:	46bd      	mov	sp, r7
 800c726:	bd80      	pop	{r7, pc}

0800c728 <_ZSt7forwardIRKN12_GLOBAL__N_116scratch_buffer_tEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c728:	b480      	push	{r7}
 800c72a:	b083      	sub	sp, #12
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	4618      	mov	r0, r3
 800c734:	370c      	adds	r7, #12
 800c736:	46bd      	mov	sp, r7
 800c738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73c:	4770      	bx	lr

0800c73e <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800c73e:	b590      	push	{r4, r7, lr}
 800c740:	b085      	sub	sp, #20
 800c742:	af00      	add	r7, sp, #0
 800c744:	60f8      	str	r0, [r7, #12]
 800c746:	60b9      	str	r1, [r7, #8]
 800c748:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f7ff ffec 	bl	800c728 <_ZSt7forwardIRKN12_GLOBAL__N_116scratch_buffer_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 800c750:	4604      	mov	r4, r0
 800c752:	68bb      	ldr	r3, [r7, #8]
 800c754:	4619      	mov	r1, r3
 800c756:	2008      	movs	r0, #8
 800c758:	f7f4 fc78 	bl	800104c <_ZnwjPv>
 800c75c:	4603      	mov	r3, r0
 800c75e:	4622      	mov	r2, r4
 800c760:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c764:	e883 0003 	stmia.w	r3, {r0, r1}
 800c768:	bf00      	nop
 800c76a:	3714      	adds	r7, #20
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bd90      	pop	{r4, r7, pc}

0800c770 <_ZN9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800c770:	b480      	push	{r7}
 800c772:	b083      	sub	sp, #12
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
 800c778:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	681a      	ldr	r2, [r3, #0]
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	601a      	str	r2, [r3, #0]
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	4618      	mov	r0, r3
 800c786:	370c      	adds	r7, #12
 800c788:	46bd      	mov	sp, r7
 800c78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78e:	4770      	bx	lr

0800c790 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800c790:	b590      	push	{r4, r7, lr}
 800c792:	b087      	sub	sp, #28
 800c794:	af00      	add	r7, sp, #0
 800c796:	60f8      	str	r0, [r7, #12]
 800c798:	60b9      	str	r1, [r7, #8]
 800c79a:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800c79c:	68f8      	ldr	r0, [r7, #12]
 800c79e:	f000 f941 	bl	800ca24 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE8max_sizeEv>
 800c7a2:	4604      	mov	r4, r0
 800c7a4:	68f8      	ldr	r0, [r7, #12]
 800c7a6:	f7ff fb82 	bl	800beae <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	1ae2      	subs	r2, r4, r3
 800c7ae:	68bb      	ldr	r3, [r7, #8]
 800c7b0:	429a      	cmp	r2, r3
 800c7b2:	bf34      	ite	cc
 800c7b4:	2301      	movcc	r3, #1
 800c7b6:	2300      	movcs	r3, #0
 800c7b8:	b2db      	uxtb	r3, r3
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d002      	beq.n	800c7c4 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800c7be:	6878      	ldr	r0, [r7, #4]
 800c7c0:	f000 fd42 	bl	800d248 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800c7c4:	68f8      	ldr	r0, [r7, #12]
 800c7c6:	f7ff fb72 	bl	800beae <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 800c7ca:	4604      	mov	r4, r0
 800c7cc:	68f8      	ldr	r0, [r7, #12]
 800c7ce:	f7ff fb6e 	bl	800beae <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	613b      	str	r3, [r7, #16]
 800c7d6:	f107 0208 	add.w	r2, r7, #8
 800c7da:	f107 0310 	add.w	r3, r7, #16
 800c7de:	4611      	mov	r1, r2
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f7f6 fcde 	bl	80031a2 <_ZSt3maxIjERKT_S2_S2_>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	4423      	add	r3, r4
 800c7ec:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800c7ee:	68f8      	ldr	r0, [r7, #12]
 800c7f0:	f7ff fb5d 	bl	800beae <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 800c7f4:	4602      	mov	r2, r0
 800c7f6:	697b      	ldr	r3, [r7, #20]
 800c7f8:	4293      	cmp	r3, r2
 800c7fa:	d306      	bcc.n	800c80a <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc+0x7a>
 800c7fc:	68f8      	ldr	r0, [r7, #12]
 800c7fe:	f000 f911 	bl	800ca24 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE8max_sizeEv>
 800c802:	4602      	mov	r2, r0
 800c804:	697b      	ldr	r3, [r7, #20]
 800c806:	4293      	cmp	r3, r2
 800c808:	d904      	bls.n	800c814 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc+0x84>
 800c80a:	68f8      	ldr	r0, [r7, #12]
 800c80c:	f000 f90a 	bl	800ca24 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE8max_sizeEv>
 800c810:	4603      	mov	r3, r0
 800c812:	e000      	b.n	800c816 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc+0x86>
 800c814:	697b      	ldr	r3, [r7, #20]
      }
 800c816:	4618      	mov	r0, r3
 800c818:	371c      	adds	r7, #28
 800c81a:	46bd      	mov	sp, r7
 800c81c:	bd90      	pop	{r4, r7, pc}

0800c81e <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800c81e:	b580      	push	{r7, lr}
 800c820:	b084      	sub	sp, #16
 800c822:	af00      	add	r7, sp, #0
 800c824:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800c826:	687a      	ldr	r2, [r7, #4]
 800c828:	f107 030c 	add.w	r3, r7, #12
 800c82c:	4611      	mov	r1, r2
 800c82e:	4618      	mov	r0, r3
 800c830:	f7ff ff9e 	bl	800c770 <_ZN9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	4618      	mov	r0, r3
 800c838:	3710      	adds	r7, #16
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}

0800c83e <_ZN9__gnu_cxxmiIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800c83e:	b590      	push	{r4, r7, lr}
 800c840:	b083      	sub	sp, #12
 800c842:	af00      	add	r7, sp, #0
 800c844:	6078      	str	r0, [r7, #4]
 800c846:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800c848:	6878      	ldr	r0, [r7, #4]
 800c84a:	f000 f835 	bl	800c8b8 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 800c84e:	4603      	mov	r3, r0
 800c850:	681c      	ldr	r4, [r3, #0]
 800c852:	6838      	ldr	r0, [r7, #0]
 800c854:	f000 f830 	bl	800c8b8 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 800c858:	4603      	mov	r3, r0
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	1ae3      	subs	r3, r4, r3
 800c85e:	10db      	asrs	r3, r3, #3
 800c860:	4618      	mov	r0, r3
 800c862:	370c      	adds	r7, #12
 800c864:	46bd      	mov	sp, r7
 800c866:	bd90      	pop	{r4, r7, pc}

0800c868 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800c868:	b580      	push	{r7, lr}
 800c86a:	b082      	sub	sp, #8
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
 800c870:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d006      	beq.n	800c886 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_M_allocateEj+0x1e>
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	6839      	ldr	r1, [r7, #0]
 800c87c:	4618      	mov	r0, r3
 800c87e:	f000 f8e2 	bl	800ca46 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE8allocateERS2_j>
 800c882:	4603      	mov	r3, r0
 800c884:	e000      	b.n	800c888 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_M_allocateEj+0x20>
 800c886:	2300      	movs	r3, #0
      }
 800c888:	4618      	mov	r0, r3
 800c88a:	3708      	adds	r7, #8
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}

0800c890 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800c890:	b590      	push	{r4, r7, lr}
 800c892:	b089      	sub	sp, #36	; 0x24
 800c894:	af02      	add	r7, sp, #8
 800c896:	60f8      	str	r0, [r7, #12]
 800c898:	60b9      	str	r1, [r7, #8]
 800c89a:	607a      	str	r2, [r7, #4]
 800c89c:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800c89e:	f88d 4000 	strb.w	r4, [sp]
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	687a      	ldr	r2, [r7, #4]
 800c8a6:	68b9      	ldr	r1, [r7, #8]
 800c8a8:	68f8      	ldr	r0, [r7, #12]
 800c8aa:	f000 f8db 	bl	800ca64 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 800c8ae:	4603      	mov	r3, r0
      }
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	371c      	adds	r7, #28
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	bd90      	pop	{r4, r7, pc}

0800c8b8 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800c8b8:	b480      	push	{r7}
 800c8ba:	b083      	sub	sp, #12
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	370c      	adds	r7, #12
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8cc:	4770      	bx	lr

0800c8ce <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800c8ce:	b480      	push	{r7}
 800c8d0:	b083      	sub	sp, #12
 800c8d2:	af00      	add	r7, sp, #0
 800c8d4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	4618      	mov	r0, r3
 800c8da:	370c      	adds	r7, #12
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e2:	4770      	bx	lr

0800c8e4 <_ZSt34__uninitialized_move_if_noexcept_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800c8e4:	b590      	push	{r4, r7, lr}
 800c8e6:	b085      	sub	sp, #20
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	60f8      	str	r0, [r7, #12]
 800c8ec:	60b9      	str	r1, [r7, #8]
 800c8ee:	607a      	str	r2, [r7, #4]
 800c8f0:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800c8f2:	68f8      	ldr	r0, [r7, #12]
 800c8f4:	f000 f8c8 	bl	800ca88 <_ZSt32__make_move_if_noexcept_iteratorIN12_GLOBAL__N_116scratch_buffer_tESt13move_iteratorIPS1_EET0_PT_>
 800c8f8:	4604      	mov	r4, r0
 800c8fa:	68b8      	ldr	r0, [r7, #8]
 800c8fc:	f000 f8c4 	bl	800ca88 <_ZSt32__make_move_if_noexcept_iteratorIN12_GLOBAL__N_116scratch_buffer_tESt13move_iteratorIPS1_EET0_PT_>
 800c900:	4601      	mov	r1, r0
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	687a      	ldr	r2, [r7, #4]
 800c906:	4620      	mov	r0, r4
 800c908:	f000 f8cd 	bl	800caa6 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_S2_ET0_T_S6_S5_RSaIT1_E>
 800c90c:	4603      	mov	r3, r0
    }
 800c90e:	4618      	mov	r0, r3
 800c910:	3714      	adds	r7, #20
 800c912:	46bd      	mov	sp, r7
 800c914:	bd90      	pop	{r4, r7, pc}

0800c916 <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tES1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800c916:	b580      	push	{r7, lr}
 800c918:	b084      	sub	sp, #16
 800c91a:	af00      	add	r7, sp, #0
 800c91c:	60f8      	str	r0, [r7, #12]
 800c91e:	60b9      	str	r1, [r7, #8]
 800c920:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800c922:	68b9      	ldr	r1, [r7, #8]
 800c924:	68f8      	ldr	r0, [r7, #12]
 800c926:	f000 f8cf 	bl	800cac8 <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tEEvT_S3_>
    }
 800c92a:	bf00      	nop
 800c92c:	3710      	adds	r7, #16
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}

0800c932 <_ZN9__gnu_cxx13new_allocatorIPvE10deallocateEPS1_j>:
      deallocate(pointer __p, size_type)
 800c932:	b580      	push	{r7, lr}
 800c934:	b084      	sub	sp, #16
 800c936:	af00      	add	r7, sp, #0
 800c938:	60f8      	str	r0, [r7, #12]
 800c93a:	60b9      	str	r1, [r7, #8]
 800c93c:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800c93e:	68b8      	ldr	r0, [r7, #8]
 800c940:	f000 fc68 	bl	800d214 <_ZdlPv>
      }
 800c944:	bf00      	nop
 800c946:	3710      	adds	r7, #16
 800c948:	46bd      	mov	sp, r7
 800c94a:	bd80      	pop	{r7, pc}

0800c94c <_ZNKSt6vectorIPvSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b082      	sub	sp, #8
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	4618      	mov	r0, r3
 800c958:	f000 f8dd 	bl	800cb16 <_ZNKSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 800c95c:	4603      	mov	r3, r0
 800c95e:	4618      	mov	r0, r3
 800c960:	f000 f8bf 	bl	800cae2 <_ZNSt6vectorIPvSaIS0_EE11_S_max_sizeERKS1_>
 800c964:	4603      	mov	r3, r0
 800c966:	4618      	mov	r0, r3
 800c968:	3708      	adds	r7, #8
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}

0800c96e <_ZNSt16allocator_traitsISaIPvEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 800c96e:	b580      	push	{r7, lr}
 800c970:	b082      	sub	sp, #8
 800c972:	af00      	add	r7, sp, #0
 800c974:	6078      	str	r0, [r7, #4]
 800c976:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800c978:	2200      	movs	r2, #0
 800c97a:	6839      	ldr	r1, [r7, #0]
 800c97c:	6878      	ldr	r0, [r7, #4]
 800c97e:	f000 f8d5 	bl	800cb2c <_ZN9__gnu_cxx13new_allocatorIPvE8allocateEjPKv>
 800c982:	4603      	mov	r3, r0
 800c984:	4618      	mov	r0, r3
 800c986:	3708      	adds	r7, #8
 800c988:	46bd      	mov	sp, r7
 800c98a:	bd80      	pop	{r7, pc}

0800c98c <_ZNSt6vectorIPvSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b084      	sub	sp, #16
 800c990:	af00      	add	r7, sp, #0
 800c992:	60f8      	str	r0, [r7, #12]
 800c994:	60b9      	str	r1, [r7, #8]
 800c996:	607a      	str	r2, [r7, #4]
 800c998:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	687a      	ldr	r2, [r7, #4]
 800c99e:	68b9      	ldr	r1, [r7, #8]
 800c9a0:	68f8      	ldr	r0, [r7, #12]
 800c9a2:	f000 f8e1 	bl	800cb68 <_ZSt12__relocate_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>
 800c9a6:	4603      	mov	r3, r0
      }
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	3710      	adds	r7, #16
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bd80      	pop	{r7, pc}

0800c9b0 <_ZSt32__make_move_if_noexcept_iteratorIPvSt13move_iteratorIPS0_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b084      	sub	sp, #16
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800c9b8:	f107 030c 	add.w	r3, r7, #12
 800c9bc:	6879      	ldr	r1, [r7, #4]
 800c9be:	4618      	mov	r0, r3
 800c9c0:	f000 f8ef 	bl	800cba2 <_ZNSt13move_iteratorIPPvEC1ES1_>
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	3710      	adds	r7, #16
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bd80      	pop	{r7, pc}

0800c9ce <_ZSt22__uninitialized_copy_aISt13move_iteratorIPPvES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800c9ce:	b580      	push	{r7, lr}
 800c9d0:	b084      	sub	sp, #16
 800c9d2:	af00      	add	r7, sp, #0
 800c9d4:	60f8      	str	r0, [r7, #12]
 800c9d6:	60b9      	str	r1, [r7, #8]
 800c9d8:	607a      	str	r2, [r7, #4]
 800c9da:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800c9dc:	687a      	ldr	r2, [r7, #4]
 800c9de:	68b9      	ldr	r1, [r7, #8]
 800c9e0:	68f8      	ldr	r0, [r7, #12]
 800c9e2:	f000 f8ed 	bl	800cbc0 <_ZSt18uninitialized_copyISt13move_iteratorIPPvES2_ET0_T_S5_S4_>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	3710      	adds	r7, #16
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}

0800c9f0 <_ZSt8_DestroyIPPvEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b082      	sub	sp, #8
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
 800c9f8:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800c9fa:	6839      	ldr	r1, [r7, #0]
 800c9fc:	6878      	ldr	r0, [r7, #4]
 800c9fe:	f000 f8f1 	bl	800cbe4 <_ZNSt12_Destroy_auxILb1EE9__destroyIPPvEEvT_S4_>
    }
 800ca02:	bf00      	nop
 800ca04:	3708      	adds	r7, #8
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bd80      	pop	{r7, pc}

0800ca0a <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 800ca0a:	b580      	push	{r7, lr}
 800ca0c:	b084      	sub	sp, #16
 800ca0e:	af00      	add	r7, sp, #0
 800ca10:	60f8      	str	r0, [r7, #12]
 800ca12:	60b9      	str	r1, [r7, #8]
 800ca14:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800ca16:	68b8      	ldr	r0, [r7, #8]
 800ca18:	f000 fbfc 	bl	800d214 <_ZdlPv>
      }
 800ca1c:	bf00      	nop
 800ca1e:	3710      	adds	r7, #16
 800ca20:	46bd      	mov	sp, r7
 800ca22:	bd80      	pop	{r7, pc}

0800ca24 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b082      	sub	sp, #8
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f000 f8fd 	bl	800cc2e <_ZNKSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 800ca34:	4603      	mov	r3, r0
 800ca36:	4618      	mov	r0, r3
 800ca38:	f000 f8df 	bl	800cbfa <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_S_max_sizeERKS2_>
 800ca3c:	4603      	mov	r3, r0
 800ca3e:	4618      	mov	r0, r3
 800ca40:	3708      	adds	r7, #8
 800ca42:	46bd      	mov	sp, r7
 800ca44:	bd80      	pop	{r7, pc}

0800ca46 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800ca46:	b580      	push	{r7, lr}
 800ca48:	b082      	sub	sp, #8
 800ca4a:	af00      	add	r7, sp, #0
 800ca4c:	6078      	str	r0, [r7, #4]
 800ca4e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800ca50:	2200      	movs	r2, #0
 800ca52:	6839      	ldr	r1, [r7, #0]
 800ca54:	6878      	ldr	r0, [r7, #4]
 800ca56:	f000 f8f5 	bl	800cc44 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8allocateEjPKv>
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	3708      	adds	r7, #8
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd80      	pop	{r7, pc}

0800ca64 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b084      	sub	sp, #16
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	60f8      	str	r0, [r7, #12]
 800ca6c:	60b9      	str	r1, [r7, #8]
 800ca6e:	607a      	str	r2, [r7, #4]
 800ca70:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	687a      	ldr	r2, [r7, #4]
 800ca76:	68b9      	ldr	r1, [r7, #8]
 800ca78:	68f8      	ldr	r0, [r7, #12]
 800ca7a:	f000 f901 	bl	800cc80 <_ZSt12__relocate_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>
 800ca7e:	4603      	mov	r3, r0
      }
 800ca80:	4618      	mov	r0, r3
 800ca82:	3710      	adds	r7, #16
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bd80      	pop	{r7, pc}

0800ca88 <_ZSt32__make_move_if_noexcept_iteratorIN12_GLOBAL__N_116scratch_buffer_tESt13move_iteratorIPS1_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b084      	sub	sp, #16
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800ca90:	f107 030c 	add.w	r3, r7, #12
 800ca94:	6879      	ldr	r1, [r7, #4]
 800ca96:	4618      	mov	r0, r3
 800ca98:	f000 f90f 	bl	800ccba <_ZNSt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEEC1ES2_>
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	4618      	mov	r0, r3
 800caa0:	3710      	adds	r7, #16
 800caa2:	46bd      	mov	sp, r7
 800caa4:	bd80      	pop	{r7, pc}

0800caa6 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800caa6:	b580      	push	{r7, lr}
 800caa8:	b084      	sub	sp, #16
 800caaa:	af00      	add	r7, sp, #0
 800caac:	60f8      	str	r0, [r7, #12]
 800caae:	60b9      	str	r1, [r7, #8]
 800cab0:	607a      	str	r2, [r7, #4]
 800cab2:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800cab4:	687a      	ldr	r2, [r7, #4]
 800cab6:	68b9      	ldr	r1, [r7, #8]
 800cab8:	68f8      	ldr	r0, [r7, #12]
 800caba:	f000 f90d 	bl	800ccd8 <_ZSt18uninitialized_copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_ET0_T_S6_S5_>
 800cabe:	4603      	mov	r3, r0
 800cac0:	4618      	mov	r0, r3
 800cac2:	3710      	adds	r7, #16
 800cac4:	46bd      	mov	sp, r7
 800cac6:	bd80      	pop	{r7, pc}

0800cac8 <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800cac8:	b580      	push	{r7, lr}
 800caca:	b082      	sub	sp, #8
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
 800cad0:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800cad2:	6839      	ldr	r1, [r7, #0]
 800cad4:	6878      	ldr	r0, [r7, #4]
 800cad6:	f000 f911 	bl	800ccfc <_ZNSt12_Destroy_auxILb1EE9__destroyIPN12_GLOBAL__N_116scratch_buffer_tEEEvT_S5_>
    }
 800cada:	bf00      	nop
 800cadc:	3708      	adds	r7, #8
 800cade:	46bd      	mov	sp, r7
 800cae0:	bd80      	pop	{r7, pc}

0800cae2 <_ZNSt6vectorIPvSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800cae2:	b580      	push	{r7, lr}
 800cae4:	b084      	sub	sp, #16
 800cae6:	af00      	add	r7, sp, #0
 800cae8:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800caea:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800caee:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800caf0:	6878      	ldr	r0, [r7, #4]
 800caf2:	f000 f90e 	bl	800cd12 <_ZNSt16allocator_traitsISaIPvEE8max_sizeERKS1_>
 800caf6:	4603      	mov	r3, r0
 800caf8:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800cafa:	f107 0208 	add.w	r2, r7, #8
 800cafe:	f107 030c 	add.w	r3, r7, #12
 800cb02:	4611      	mov	r1, r2
 800cb04:	4618      	mov	r0, r3
 800cb06:	f7f6 fc16 	bl	8003336 <_ZSt3minIjERKT_S2_S2_>
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	681b      	ldr	r3, [r3, #0]
      }
 800cb0e:	4618      	mov	r0, r3
 800cb10:	3710      	adds	r7, #16
 800cb12:	46bd      	mov	sp, r7
 800cb14:	bd80      	pop	{r7, pc}

0800cb16 <_ZNKSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800cb16:	b480      	push	{r7}
 800cb18:	b083      	sub	sp, #12
 800cb1a:	af00      	add	r7, sp, #0
 800cb1c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	4618      	mov	r0, r3
 800cb22:	370c      	adds	r7, #12
 800cb24:	46bd      	mov	sp, r7
 800cb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2a:	4770      	bx	lr

0800cb2c <_ZN9__gnu_cxx13new_allocatorIPvE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b084      	sub	sp, #16
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	60f8      	str	r0, [r7, #12]
 800cb34:	60b9      	str	r1, [r7, #8]
 800cb36:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800cb38:	68f8      	ldr	r0, [r7, #12]
 800cb3a:	f000 f8f6 	bl	800cd2a <_ZNK9__gnu_cxx13new_allocatorIPvE8max_sizeEv>
 800cb3e:	4602      	mov	r2, r0
 800cb40:	68bb      	ldr	r3, [r7, #8]
 800cb42:	4293      	cmp	r3, r2
 800cb44:	bf8c      	ite	hi
 800cb46:	2301      	movhi	r3, #1
 800cb48:	2300      	movls	r3, #0
 800cb4a:	b2db      	uxtb	r3, r3
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d001      	beq.n	800cb54 <_ZN9__gnu_cxx13new_allocatorIPvE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800cb50:	f000 fb77 	bl	800d242 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800cb54:	68bb      	ldr	r3, [r7, #8]
 800cb56:	009b      	lsls	r3, r3, #2
 800cb58:	4618      	mov	r0, r3
 800cb5a:	f000 fb5f 	bl	800d21c <_Znwj>
 800cb5e:	4603      	mov	r3, r0
      }
 800cb60:	4618      	mov	r0, r3
 800cb62:	3710      	adds	r7, #16
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bd80      	pop	{r7, pc}

0800cb68 <_ZSt12__relocate_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800cb68:	b5b0      	push	{r4, r5, r7, lr}
 800cb6a:	b084      	sub	sp, #16
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	60f8      	str	r0, [r7, #12]
 800cb70:	60b9      	str	r1, [r7, #8]
 800cb72:	607a      	str	r2, [r7, #4]
 800cb74:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 800cb76:	68f8      	ldr	r0, [r7, #12]
 800cb78:	f000 f8e3 	bl	800cd42 <_ZSt12__niter_baseIPPvET_S2_>
 800cb7c:	4604      	mov	r4, r0
 800cb7e:	68b8      	ldr	r0, [r7, #8]
 800cb80:	f000 f8df 	bl	800cd42 <_ZSt12__niter_baseIPPvET_S2_>
 800cb84:	4605      	mov	r5, r0
 800cb86:	6878      	ldr	r0, [r7, #4]
 800cb88:	f000 f8db 	bl	800cd42 <_ZSt12__niter_baseIPPvET_S2_>
 800cb8c:	4602      	mov	r2, r0
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	4629      	mov	r1, r5
 800cb92:	4620      	mov	r0, r4
 800cb94:	f000 f8e0 	bl	800cd58 <_ZSt14__relocate_a_1IPvS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>
 800cb98:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	3710      	adds	r7, #16
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bdb0      	pop	{r4, r5, r7, pc}

0800cba2 <_ZNSt13move_iteratorIPPvEC1ES1_>:
      move_iterator(iterator_type __i)
 800cba2:	b480      	push	{r7}
 800cba4:	b083      	sub	sp, #12
 800cba6:	af00      	add	r7, sp, #0
 800cba8:	6078      	str	r0, [r7, #4]
 800cbaa:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	683a      	ldr	r2, [r7, #0]
 800cbb0:	601a      	str	r2, [r3, #0]
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	370c      	adds	r7, #12
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbbe:	4770      	bx	lr

0800cbc0 <_ZSt18uninitialized_copyISt13move_iteratorIPPvES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b086      	sub	sp, #24
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	60f8      	str	r0, [r7, #12]
 800cbc8:	60b9      	str	r1, [r7, #8]
 800cbca:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800cbcc:	2301      	movs	r3, #1
 800cbce:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800cbd0:	687a      	ldr	r2, [r7, #4]
 800cbd2:	68b9      	ldr	r1, [r7, #8]
 800cbd4:	68f8      	ldr	r0, [r7, #12]
 800cbd6:	f000 f8dd 	bl	800cd94 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPPvES4_EET0_T_S7_S6_>
 800cbda:	4603      	mov	r3, r0
    }
 800cbdc:	4618      	mov	r0, r3
 800cbde:	3718      	adds	r7, #24
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	bd80      	pop	{r7, pc}

0800cbe4 <_ZNSt12_Destroy_auxILb1EE9__destroyIPPvEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800cbe4:	b480      	push	{r7}
 800cbe6:	b083      	sub	sp, #12
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
 800cbec:	6039      	str	r1, [r7, #0]
 800cbee:	bf00      	nop
 800cbf0:	370c      	adds	r7, #12
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf8:	4770      	bx	lr

0800cbfa <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800cbfa:	b580      	push	{r7, lr}
 800cbfc:	b084      	sub	sp, #16
 800cbfe:	af00      	add	r7, sp, #0
 800cc00:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800cc02:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800cc06:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f000 f8d3 	bl	800cdb4 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE8max_sizeERKS2_>
 800cc0e:	4603      	mov	r3, r0
 800cc10:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800cc12:	f107 0208 	add.w	r2, r7, #8
 800cc16:	f107 030c 	add.w	r3, r7, #12
 800cc1a:	4611      	mov	r1, r2
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	f7f6 fb8a 	bl	8003336 <_ZSt3minIjERKT_S2_S2_>
 800cc22:	4603      	mov	r3, r0
 800cc24:	681b      	ldr	r3, [r3, #0]
      }
 800cc26:	4618      	mov	r0, r3
 800cc28:	3710      	adds	r7, #16
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	bd80      	pop	{r7, pc}

0800cc2e <_ZNKSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800cc2e:	b480      	push	{r7}
 800cc30:	b083      	sub	sp, #12
 800cc32:	af00      	add	r7, sp, #0
 800cc34:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	4618      	mov	r0, r3
 800cc3a:	370c      	adds	r7, #12
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc42:	4770      	bx	lr

0800cc44 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b084      	sub	sp, #16
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	60f8      	str	r0, [r7, #12]
 800cc4c:	60b9      	str	r1, [r7, #8]
 800cc4e:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800cc50:	68f8      	ldr	r0, [r7, #12]
 800cc52:	f000 f8bb 	bl	800cdcc <_ZNK9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8max_sizeEv>
 800cc56:	4602      	mov	r2, r0
 800cc58:	68bb      	ldr	r3, [r7, #8]
 800cc5a:	4293      	cmp	r3, r2
 800cc5c:	bf8c      	ite	hi
 800cc5e:	2301      	movhi	r3, #1
 800cc60:	2300      	movls	r3, #0
 800cc62:	b2db      	uxtb	r3, r3
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d001      	beq.n	800cc6c <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800cc68:	f000 faeb 	bl	800d242 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800cc6c:	68bb      	ldr	r3, [r7, #8]
 800cc6e:	00db      	lsls	r3, r3, #3
 800cc70:	4618      	mov	r0, r3
 800cc72:	f000 fad3 	bl	800d21c <_Znwj>
 800cc76:	4603      	mov	r3, r0
      }
 800cc78:	4618      	mov	r0, r3
 800cc7a:	3710      	adds	r7, #16
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd80      	pop	{r7, pc}

0800cc80 <_ZSt12__relocate_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800cc80:	b5b0      	push	{r4, r5, r7, lr}
 800cc82:	b084      	sub	sp, #16
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	60f8      	str	r0, [r7, #12]
 800cc88:	60b9      	str	r1, [r7, #8]
 800cc8a:	607a      	str	r2, [r7, #4]
 800cc8c:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 800cc8e:	68f8      	ldr	r0, [r7, #12]
 800cc90:	f000 f8a8 	bl	800cde4 <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 800cc94:	4604      	mov	r4, r0
 800cc96:	68b8      	ldr	r0, [r7, #8]
 800cc98:	f000 f8a4 	bl	800cde4 <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 800cc9c:	4605      	mov	r5, r0
 800cc9e:	6878      	ldr	r0, [r7, #4]
 800cca0:	f000 f8a0 	bl	800cde4 <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 800cca4:	4602      	mov	r2, r0
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	4629      	mov	r1, r5
 800ccaa:	4620      	mov	r0, r4
 800ccac:	f000 f8a5 	bl	800cdfa <_ZSt14__relocate_a_1IN12_GLOBAL__N_116scratch_buffer_tES1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 800ccb0:	4603      	mov	r3, r0
    }
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	3710      	adds	r7, #16
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bdb0      	pop	{r4, r5, r7, pc}

0800ccba <_ZNSt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEEC1ES2_>:
      move_iterator(iterator_type __i)
 800ccba:	b480      	push	{r7}
 800ccbc:	b083      	sub	sp, #12
 800ccbe:	af00      	add	r7, sp, #0
 800ccc0:	6078      	str	r0, [r7, #4]
 800ccc2:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	683a      	ldr	r2, [r7, #0]
 800ccc8:	601a      	str	r2, [r3, #0]
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	4618      	mov	r0, r3
 800ccce:	370c      	adds	r7, #12
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd6:	4770      	bx	lr

0800ccd8 <_ZSt18uninitialized_copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b086      	sub	sp, #24
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	60f8      	str	r0, [r7, #12]
 800cce0:	60b9      	str	r1, [r7, #8]
 800cce2:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800cce4:	2301      	movs	r3, #1
 800cce6:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800cce8:	687a      	ldr	r2, [r7, #4]
 800ccea:	68b9      	ldr	r1, [r7, #8]
 800ccec:	68f8      	ldr	r0, [r7, #12]
 800ccee:	f000 f8a2 	bl	800ce36 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES5_EET0_T_S8_S7_>
 800ccf2:	4603      	mov	r3, r0
    }
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	3718      	adds	r7, #24
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	bd80      	pop	{r7, pc}

0800ccfc <_ZNSt12_Destroy_auxILb1EE9__destroyIPN12_GLOBAL__N_116scratch_buffer_tEEEvT_S5_>:
 800ccfc:	b480      	push	{r7}
 800ccfe:	b083      	sub	sp, #12
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
 800cd04:	6039      	str	r1, [r7, #0]
 800cd06:	bf00      	nop
 800cd08:	370c      	adds	r7, #12
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd10:	4770      	bx	lr

0800cd12 <_ZNSt16allocator_traitsISaIPvEE8max_sizeERKS1_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 800cd12:	b580      	push	{r7, lr}
 800cd14:	b082      	sub	sp, #8
 800cd16:	af00      	add	r7, sp, #0
 800cd18:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 800cd1a:	6878      	ldr	r0, [r7, #4]
 800cd1c:	f000 f805 	bl	800cd2a <_ZNK9__gnu_cxx13new_allocatorIPvE8max_sizeEv>
 800cd20:	4603      	mov	r3, r0
 800cd22:	4618      	mov	r0, r3
 800cd24:	3708      	adds	r7, #8
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bd80      	pop	{r7, pc}

0800cd2a <_ZNK9__gnu_cxx13new_allocatorIPvE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800cd2a:	b480      	push	{r7}
 800cd2c:	b083      	sub	sp, #12
 800cd2e:	af00      	add	r7, sp, #0
 800cd30:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800cd32:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 800cd36:	4618      	mov	r0, r3
 800cd38:	370c      	adds	r7, #12
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd40:	4770      	bx	lr

0800cd42 <_ZSt12__niter_baseIPPvET_S2_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    inline _Iterator
    __niter_base(_Iterator __it)
 800cd42:	b480      	push	{r7}
 800cd44:	b083      	sub	sp, #12
 800cd46:	af00      	add	r7, sp, #0
 800cd48:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	370c      	adds	r7, #12
 800cd50:	46bd      	mov	sp, r7
 800cd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd56:	4770      	bx	lr

0800cd58 <_ZSt14__relocate_a_1IPvS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b086      	sub	sp, #24
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	60f8      	str	r0, [r7, #12]
 800cd60:	60b9      	str	r1, [r7, #8]
 800cd62:	607a      	str	r2, [r7, #4]
 800cd64:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 800cd66:	68ba      	ldr	r2, [r7, #8]
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	1ad3      	subs	r3, r2, r3
 800cd6c:	109b      	asrs	r3, r3, #2
 800cd6e:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 800cd70:	697b      	ldr	r3, [r7, #20]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	dd06      	ble.n	800cd84 <_ZSt14__relocate_a_1IPvS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800cd76:	697b      	ldr	r3, [r7, #20]
 800cd78:	009b      	lsls	r3, r3, #2
 800cd7a:	461a      	mov	r2, r3
 800cd7c:	68f9      	ldr	r1, [r7, #12]
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f001 fe78 	bl	800ea74 <memmove>
      return __result + __count;
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	009b      	lsls	r3, r3, #2
 800cd88:	687a      	ldr	r2, [r7, #4]
 800cd8a:	4413      	add	r3, r2
    }
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	3718      	adds	r7, #24
 800cd90:	46bd      	mov	sp, r7
 800cd92:	bd80      	pop	{r7, pc}

0800cd94 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPPvES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b084      	sub	sp, #16
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	60f8      	str	r0, [r7, #12]
 800cd9c:	60b9      	str	r1, [r7, #8]
 800cd9e:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800cda0:	687a      	ldr	r2, [r7, #4]
 800cda2:	68b9      	ldr	r1, [r7, #8]
 800cda4:	68f8      	ldr	r0, [r7, #12]
 800cda6:	f000 f856 	bl	800ce56 <_ZSt4copyISt13move_iteratorIPPvES2_ET0_T_S5_S4_>
 800cdaa:	4603      	mov	r3, r0
 800cdac:	4618      	mov	r0, r3
 800cdae:	3710      	adds	r7, #16
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	bd80      	pop	{r7, pc}

0800cdb4 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a) noexcept
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b082      	sub	sp, #8
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 800cdbc:	6878      	ldr	r0, [r7, #4]
 800cdbe:	f000 f805 	bl	800cdcc <_ZNK9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8max_sizeEv>
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	3708      	adds	r7, #8
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	bd80      	pop	{r7, pc}

0800cdcc <_ZNK9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800cdcc:	b480      	push	{r7}
 800cdce:	b083      	sub	sp, #12
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800cdd4:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      }
 800cdd8:	4618      	mov	r0, r3
 800cdda:	370c      	adds	r7, #12
 800cddc:	46bd      	mov	sp, r7
 800cdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde2:	4770      	bx	lr

0800cde4 <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>:
    __niter_base(_Iterator __it)
 800cde4:	b480      	push	{r7}
 800cde6:	b083      	sub	sp, #12
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
    { return __it; }
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	4618      	mov	r0, r3
 800cdf0:	370c      	adds	r7, #12
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf8:	4770      	bx	lr

0800cdfa <_ZSt14__relocate_a_1IN12_GLOBAL__N_116scratch_buffer_tES1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 800cdfa:	b580      	push	{r7, lr}
 800cdfc:	b086      	sub	sp, #24
 800cdfe:	af00      	add	r7, sp, #0
 800ce00:	60f8      	str	r0, [r7, #12]
 800ce02:	60b9      	str	r1, [r7, #8]
 800ce04:	607a      	str	r2, [r7, #4]
 800ce06:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 800ce08:	68ba      	ldr	r2, [r7, #8]
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	1ad3      	subs	r3, r2, r3
 800ce0e:	10db      	asrs	r3, r3, #3
 800ce10:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 800ce12:	697b      	ldr	r3, [r7, #20]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	dd06      	ble.n	800ce26 <_ZSt14__relocate_a_1IN12_GLOBAL__N_116scratch_buffer_tES1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800ce18:	697b      	ldr	r3, [r7, #20]
 800ce1a:	00db      	lsls	r3, r3, #3
 800ce1c:	461a      	mov	r2, r3
 800ce1e:	68f9      	ldr	r1, [r7, #12]
 800ce20:	6878      	ldr	r0, [r7, #4]
 800ce22:	f001 fe27 	bl	800ea74 <memmove>
      return __result + __count;
 800ce26:	697b      	ldr	r3, [r7, #20]
 800ce28:	00db      	lsls	r3, r3, #3
 800ce2a:	687a      	ldr	r2, [r7, #4]
 800ce2c:	4413      	add	r3, r2
    }
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3718      	adds	r7, #24
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}

0800ce36 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800ce36:	b580      	push	{r7, lr}
 800ce38:	b084      	sub	sp, #16
 800ce3a:	af00      	add	r7, sp, #0
 800ce3c:	60f8      	str	r0, [r7, #12]
 800ce3e:	60b9      	str	r1, [r7, #8]
 800ce40:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800ce42:	687a      	ldr	r2, [r7, #4]
 800ce44:	68b9      	ldr	r1, [r7, #8]
 800ce46:	68f8      	ldr	r0, [r7, #12]
 800ce48:	f000 f81d 	bl	800ce86 <_ZSt4copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_ET0_T_S6_S5_>
 800ce4c:	4603      	mov	r3, r0
 800ce4e:	4618      	mov	r0, r3
 800ce50:	3710      	adds	r7, #16
 800ce52:	46bd      	mov	sp, r7
 800ce54:	bd80      	pop	{r7, pc}

0800ce56 <_ZSt4copyISt13move_iteratorIPPvES2_ET0_T_S5_S4_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 800ce56:	b590      	push	{r4, r7, lr}
 800ce58:	b085      	sub	sp, #20
 800ce5a:	af00      	add	r7, sp, #0
 800ce5c:	60f8      	str	r0, [r7, #12]
 800ce5e:	60b9      	str	r1, [r7, #8]
 800ce60:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800ce62:	68f8      	ldr	r0, [r7, #12]
 800ce64:	f000 f827 	bl	800ceb6 <_ZSt12__miter_baseIPPvEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800ce68:	4604      	mov	r4, r0
 800ce6a:	68b8      	ldr	r0, [r7, #8]
 800ce6c:	f000 f823 	bl	800ceb6 <_ZSt12__miter_baseIPPvEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800ce70:	4603      	mov	r3, r0
 800ce72:	687a      	ldr	r2, [r7, #4]
 800ce74:	4619      	mov	r1, r3
 800ce76:	4620      	mov	r0, r4
 800ce78:	f000 f82e 	bl	800ced8 <_ZSt14__copy_move_a2ILb1EPPvS1_ET1_T0_S3_S2_>
 800ce7c:	4603      	mov	r3, r0
    }
 800ce7e:	4618      	mov	r0, r3
 800ce80:	3714      	adds	r7, #20
 800ce82:	46bd      	mov	sp, r7
 800ce84:	bd90      	pop	{r4, r7, pc}

0800ce86 <_ZSt4copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_ET0_T_S6_S5_>:
    copy(_II __first, _II __last, _OI __result)
 800ce86:	b590      	push	{r4, r7, lr}
 800ce88:	b085      	sub	sp, #20
 800ce8a:	af00      	add	r7, sp, #0
 800ce8c:	60f8      	str	r0, [r7, #12]
 800ce8e:	60b9      	str	r1, [r7, #8]
 800ce90:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800ce92:	68f8      	ldr	r0, [r7, #12]
 800ce94:	f000 f843 	bl	800cf1e <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800ce98:	4604      	mov	r4, r0
 800ce9a:	68b8      	ldr	r0, [r7, #8]
 800ce9c:	f000 f83f 	bl	800cf1e <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800cea0:	4603      	mov	r3, r0
 800cea2:	687a      	ldr	r2, [r7, #4]
 800cea4:	4619      	mov	r1, r3
 800cea6:	4620      	mov	r0, r4
 800cea8:	f000 f84a 	bl	800cf40 <_ZSt14__copy_move_a2ILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>
 800ceac:	4603      	mov	r3, r0
    }
 800ceae:	4618      	mov	r0, r3
 800ceb0:	3714      	adds	r7, #20
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bd90      	pop	{r4, r7, pc}

0800ceb6 <_ZSt12__miter_baseIPPvEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 800ceb6:	b580      	push	{r7, lr}
 800ceb8:	b082      	sub	sp, #8
 800ceba:	af00      	add	r7, sp, #0
 800cebc:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 800cebe:	1d3b      	adds	r3, r7, #4
 800cec0:	4618      	mov	r0, r3
 800cec2:	f000 f860 	bl	800cf86 <_ZNKSt13move_iteratorIPPvE4baseEv>
 800cec6:	4603      	mov	r3, r0
 800cec8:	4618      	mov	r0, r3
 800ceca:	f000 f868 	bl	800cf9e <_ZSt12__miter_baseIPPvET_S2_>
 800cece:	4603      	mov	r3, r0
 800ced0:	4618      	mov	r0, r3
 800ced2:	3708      	adds	r7, #8
 800ced4:	46bd      	mov	sp, r7
 800ced6:	bd80      	pop	{r7, pc}

0800ced8 <_ZSt14__copy_move_a2ILb1EPPvS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800ced8:	b5b0      	push	{r4, r5, r7, lr}
 800ceda:	b084      	sub	sp, #16
 800cedc:	af00      	add	r7, sp, #0
 800cede:	60f8      	str	r0, [r7, #12]
 800cee0:	60b9      	str	r1, [r7, #8]
 800cee2:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800cee4:	68f8      	ldr	r0, [r7, #12]
 800cee6:	f7ff ff2c 	bl	800cd42 <_ZSt12__niter_baseIPPvET_S2_>
 800ceea:	4604      	mov	r4, r0
 800ceec:	68b8      	ldr	r0, [r7, #8]
 800ceee:	f7ff ff28 	bl	800cd42 <_ZSt12__niter_baseIPPvET_S2_>
 800cef2:	4605      	mov	r5, r0
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	4618      	mov	r0, r3
 800cef8:	f7ff ff23 	bl	800cd42 <_ZSt12__niter_baseIPPvET_S2_>
 800cefc:	4603      	mov	r3, r0
 800cefe:	461a      	mov	r2, r3
 800cf00:	4629      	mov	r1, r5
 800cf02:	4620      	mov	r0, r4
 800cf04:	f000 f856 	bl	800cfb4 <_ZSt13__copy_move_aILb1EPPvS1_ET1_T0_S3_S2_>
 800cf08:	4602      	mov	r2, r0
 800cf0a:	1d3b      	adds	r3, r7, #4
 800cf0c:	4611      	mov	r1, r2
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f000 f862 	bl	800cfd8 <_ZSt12__niter_wrapIPPvET_RKS2_S2_>
 800cf14:	4603      	mov	r3, r0
    }
 800cf16:	4618      	mov	r0, r3
 800cf18:	3710      	adds	r7, #16
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	bdb0      	pop	{r4, r5, r7, pc}

0800cf1e <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 800cf1e:	b580      	push	{r7, lr}
 800cf20:	b082      	sub	sp, #8
 800cf22:	af00      	add	r7, sp, #0
 800cf24:	6078      	str	r0, [r7, #4]
    { return __miter_base(__it.base()); }
 800cf26:	1d3b      	adds	r3, r7, #4
 800cf28:	4618      	mov	r0, r3
 800cf2a:	f000 f861 	bl	800cff0 <_ZNKSt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEE4baseEv>
 800cf2e:	4603      	mov	r3, r0
 800cf30:	4618      	mov	r0, r3
 800cf32:	f000 f869 	bl	800d008 <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 800cf36:	4603      	mov	r3, r0
 800cf38:	4618      	mov	r0, r3
 800cf3a:	3708      	adds	r7, #8
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	bd80      	pop	{r7, pc}

0800cf40 <_ZSt14__copy_move_a2ILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800cf40:	b5b0      	push	{r4, r5, r7, lr}
 800cf42:	b084      	sub	sp, #16
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	60f8      	str	r0, [r7, #12]
 800cf48:	60b9      	str	r1, [r7, #8]
 800cf4a:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800cf4c:	68f8      	ldr	r0, [r7, #12]
 800cf4e:	f7ff ff49 	bl	800cde4 <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 800cf52:	4604      	mov	r4, r0
 800cf54:	68b8      	ldr	r0, [r7, #8]
 800cf56:	f7ff ff45 	bl	800cde4 <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 800cf5a:	4605      	mov	r5, r0
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	4618      	mov	r0, r3
 800cf60:	f7ff ff40 	bl	800cde4 <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 800cf64:	4603      	mov	r3, r0
 800cf66:	461a      	mov	r2, r3
 800cf68:	4629      	mov	r1, r5
 800cf6a:	4620      	mov	r0, r4
 800cf6c:	f000 f857 	bl	800d01e <_ZSt13__copy_move_aILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>
 800cf70:	4602      	mov	r2, r0
 800cf72:	1d3b      	adds	r3, r7, #4
 800cf74:	4611      	mov	r1, r2
 800cf76:	4618      	mov	r0, r3
 800cf78:	f000 f863 	bl	800d042 <_ZSt12__niter_wrapIPN12_GLOBAL__N_116scratch_buffer_tEET_RKS3_S3_>
 800cf7c:	4603      	mov	r3, r0
    }
 800cf7e:	4618      	mov	r0, r3
 800cf80:	3710      	adds	r7, #16
 800cf82:	46bd      	mov	sp, r7
 800cf84:	bdb0      	pop	{r4, r5, r7, pc}

0800cf86 <_ZNKSt13move_iteratorIPPvE4baseEv>:
      base() const
 800cf86:	b480      	push	{r7}
 800cf88:	b083      	sub	sp, #12
 800cf8a:	af00      	add	r7, sp, #0
 800cf8c:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	4618      	mov	r0, r3
 800cf94:	370c      	adds	r7, #12
 800cf96:	46bd      	mov	sp, r7
 800cf98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9c:	4770      	bx	lr

0800cf9e <_ZSt12__miter_baseIPPvET_S2_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 800cf9e:	b480      	push	{r7}
 800cfa0:	b083      	sub	sp, #12
 800cfa2:	af00      	add	r7, sp, #0
 800cfa4:	6078      	str	r0, [r7, #4]
    { return __it; }
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	370c      	adds	r7, #12
 800cfac:	46bd      	mov	sp, r7
 800cfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb2:	4770      	bx	lr

0800cfb4 <_ZSt13__copy_move_aILb1EPPvS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b086      	sub	sp, #24
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	60f8      	str	r0, [r7, #12]
 800cfbc:	60b9      	str	r1, [r7, #8]
 800cfbe:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 800cfc0:	2301      	movs	r3, #1
 800cfc2:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 800cfc4:	687a      	ldr	r2, [r7, #4]
 800cfc6:	68b9      	ldr	r1, [r7, #8]
 800cfc8:	68f8      	ldr	r0, [r7, #12]
 800cfca:	f000 f846 	bl	800d05a <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPvEEPT_PKS4_S7_S5_>
 800cfce:	4603      	mov	r3, r0
    }
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	3718      	adds	r7, #24
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bd80      	pop	{r7, pc}

0800cfd8 <_ZSt12__niter_wrapIPPvET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800cfd8:	b480      	push	{r7}
 800cfda:	b083      	sub	sp, #12
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
 800cfe0:	6039      	str	r1, [r7, #0]
    { return __res; }
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	370c      	adds	r7, #12
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfee:	4770      	bx	lr

0800cff0 <_ZNKSt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEE4baseEv>:
      base() const
 800cff0:	b480      	push	{r7}
 800cff2:	b083      	sub	sp, #12
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	4618      	mov	r0, r3
 800cffe:	370c      	adds	r7, #12
 800d000:	46bd      	mov	sp, r7
 800d002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d006:	4770      	bx	lr

0800d008 <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>:
    __miter_base(_Iterator __it)
 800d008:	b480      	push	{r7}
 800d00a:	b083      	sub	sp, #12
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
    { return __it; }
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	4618      	mov	r0, r3
 800d014:	370c      	adds	r7, #12
 800d016:	46bd      	mov	sp, r7
 800d018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01c:	4770      	bx	lr

0800d01e <_ZSt13__copy_move_aILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800d01e:	b580      	push	{r7, lr}
 800d020:	b086      	sub	sp, #24
 800d022:	af00      	add	r7, sp, #0
 800d024:	60f8      	str	r0, [r7, #12]
 800d026:	60b9      	str	r1, [r7, #8]
 800d028:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 800d02a:	2301      	movs	r3, #1
 800d02c:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 800d02e:	687a      	ldr	r2, [r7, #4]
 800d030:	68b9      	ldr	r1, [r7, #8]
 800d032:	68f8      	ldr	r0, [r7, #12]
 800d034:	f000 f82e 	bl	800d094 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN12_GLOBAL__N_116scratch_buffer_tEEEPT_PKS5_S8_S6_>
 800d038:	4603      	mov	r3, r0
    }
 800d03a:	4618      	mov	r0, r3
 800d03c:	3718      	adds	r7, #24
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}

0800d042 <_ZSt12__niter_wrapIPN12_GLOBAL__N_116scratch_buffer_tEET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800d042:	b480      	push	{r7}
 800d044:	b083      	sub	sp, #12
 800d046:	af00      	add	r7, sp, #0
 800d048:	6078      	str	r0, [r7, #4]
 800d04a:	6039      	str	r1, [r7, #0]
    { return __res; }
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	4618      	mov	r0, r3
 800d050:	370c      	adds	r7, #12
 800d052:	46bd      	mov	sp, r7
 800d054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d058:	4770      	bx	lr

0800d05a <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPvEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800d05a:	b580      	push	{r7, lr}
 800d05c:	b086      	sub	sp, #24
 800d05e:	af00      	add	r7, sp, #0
 800d060:	60f8      	str	r0, [r7, #12]
 800d062:	60b9      	str	r1, [r7, #8]
 800d064:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800d066:	68ba      	ldr	r2, [r7, #8]
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	1ad3      	subs	r3, r2, r3
 800d06c:	109b      	asrs	r3, r3, #2
 800d06e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800d070:	697b      	ldr	r3, [r7, #20]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d006      	beq.n	800d084 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPvEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800d076:	697b      	ldr	r3, [r7, #20]
 800d078:	009b      	lsls	r3, r3, #2
 800d07a:	461a      	mov	r2, r3
 800d07c:	68f9      	ldr	r1, [r7, #12]
 800d07e:	6878      	ldr	r0, [r7, #4]
 800d080:	f001 fcf8 	bl	800ea74 <memmove>
	  return __result + _Num;
 800d084:	697b      	ldr	r3, [r7, #20]
 800d086:	009b      	lsls	r3, r3, #2
 800d088:	687a      	ldr	r2, [r7, #4]
 800d08a:	4413      	add	r3, r2
	}
 800d08c:	4618      	mov	r0, r3
 800d08e:	3718      	adds	r7, #24
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}

0800d094 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN12_GLOBAL__N_116scratch_buffer_tEEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800d094:	b580      	push	{r7, lr}
 800d096:	b086      	sub	sp, #24
 800d098:	af00      	add	r7, sp, #0
 800d09a:	60f8      	str	r0, [r7, #12]
 800d09c:	60b9      	str	r1, [r7, #8]
 800d09e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800d0a0:	68ba      	ldr	r2, [r7, #8]
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	1ad3      	subs	r3, r2, r3
 800d0a6:	10db      	asrs	r3, r3, #3
 800d0a8:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800d0aa:	697b      	ldr	r3, [r7, #20]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d006      	beq.n	800d0be <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN12_GLOBAL__N_116scratch_buffer_tEEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800d0b0:	697b      	ldr	r3, [r7, #20]
 800d0b2:	00db      	lsls	r3, r3, #3
 800d0b4:	461a      	mov	r2, r3
 800d0b6:	68f9      	ldr	r1, [r7, #12]
 800d0b8:	6878      	ldr	r0, [r7, #4]
 800d0ba:	f001 fcdb 	bl	800ea74 <memmove>
	  return __result + _Num;
 800d0be:	697b      	ldr	r3, [r7, #20]
 800d0c0:	00db      	lsls	r3, r3, #3
 800d0c2:	687a      	ldr	r2, [r7, #4]
 800d0c4:	4413      	add	r3, r2
	}
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	3718      	adds	r7, #24
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	bd80      	pop	{r7, pc}
	...

0800d0d0 <_Z41__static_initialization_and_destruction_0ii>:
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b082      	sub	sp, #8
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
 800d0d8:	6039      	str	r1, [r7, #0]
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	2b01      	cmp	r3, #1
 800d0de:	d139      	bne.n	800d154 <_Z41__static_initialization_and_destruction_0ii+0x84>
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d0e6:	4293      	cmp	r3, r2
 800d0e8:	d134      	bne.n	800d154 <_Z41__static_initialization_and_destruction_0ii+0x84>
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 73728, (TfLiteIntArray*)&tensor_dimension0, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
 800d0ea:	4b23      	ldr	r3, [pc, #140]	; (800d178 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
};const NodeInfo_t nodeData[] = {
 800d0f2:	4a22      	ldr	r2, [pc, #136]	; (800d17c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800d0f4:	6053      	str	r3, [r2, #4]
 800d0f6:	4b20      	ldr	r3, [pc, #128]	; (800d178 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	4a20      	ldr	r2, [pc, #128]	; (800d17c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800d0fc:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 73728, (TfLiteIntArray*)&tensor_dimension9, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
 800d100:	4b1d      	ldr	r3, [pc, #116]	; (800d178 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
};const NodeInfo_t nodeData[] = {
 800d108:	4a1c      	ldr	r2, [pc, #112]	; (800d17c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800d10a:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800d10e:	4b1a      	ldr	r3, [pc, #104]	; (800d178 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	4a1a      	ldr	r2, [pc, #104]	; (800d17c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800d114:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 9216, (TfLiteIntArray*)&tensor_dimension11, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
 800d118:	4b17      	ldr	r3, [pc, #92]	; (800d178 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
};const NodeInfo_t nodeData[] = {
 800d120:	4a16      	ldr	r2, [pc, #88]	; (800d17c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800d122:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 800d126:	4b14      	ldr	r3, [pc, #80]	; (800d178 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	4a14      	ldr	r2, [pc, #80]	; (800d17c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800d12c:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2304, (TfLiteIntArray*)&tensor_dimension13, 5, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
 800d130:	4b11      	ldr	r3, [pc, #68]	; (800d178 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
};const NodeInfo_t nodeData[] = {
 800d138:	4a10      	ldr	r2, [pc, #64]	; (800d17c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800d13a:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
 800d13e:	4b0e      	ldr	r3, [pc, #56]	; (800d178 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	4a0e      	ldr	r2, [pc, #56]	; (800d17c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800d144:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
static std::vector<void*> overflow_buffers;
 800d148:	480d      	ldr	r0, [pc, #52]	; (800d180 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800d14a:	f7fe fa94 	bl	800b676 <_ZNSt6vectorIPvSaIS0_EEC1Ev>
static std::vector<scratch_buffer_t> scratch_buffers;
 800d14e:	480d      	ldr	r0, [pc, #52]	; (800d184 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800d150:	f7fe faf7 	bl	800b742 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEC1Ev>
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d10a      	bne.n	800d170 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d160:	4293      	cmp	r3, r2
 800d162:	d105      	bne.n	800d170 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 800d164:	4807      	ldr	r0, [pc, #28]	; (800d184 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800d166:	f000 f80f 	bl	800d188 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED1Ev>
static std::vector<void*> overflow_buffers;
 800d16a:	4805      	ldr	r0, [pc, #20]	; (800d180 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800d16c:	f000 f827 	bl	800d1be <_ZNSt6vectorIPvSaIS0_EED1Ev>
}
 800d170:	bf00      	nop
 800d172:	3708      	adds	r7, #8
 800d174:	46bd      	mov	sp, r7
 800d176:	bd80      	pop	{r7, pc}
 800d178:	20006f34 	.word	0x20006f34
 800d17c:	20006cf4 	.word	0x20006cf4
 800d180:	200074ec 	.word	0x200074ec
 800d184:	200074f8 	.word	0x200074f8

0800d188 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800d188:	b5b0      	push	{r4, r5, r7, lr}
 800d18a:	b082      	sub	sp, #8
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681c      	ldr	r4, [r3, #0]
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	4618      	mov	r0, r3
 800d19c:	f7ff fb97 	bl	800c8ce <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 800d1a0:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800d1a2:	461a      	mov	r2, r3
 800d1a4:	4629      	mov	r1, r5
 800d1a6:	4620      	mov	r0, r4
 800d1a8:	f7ff fbb5 	bl	800c916 <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tES1_EvT_S3_RSaIT0_E>
      }
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	f7fe fe3e 	bl	800be30 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED2Ev>
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	3708      	adds	r7, #8
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	bdb0      	pop	{r4, r5, r7, pc}

0800d1be <_ZNSt6vectorIPvSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800d1be:	b5b0      	push	{r4, r5, r7, lr}
 800d1c0:	b082      	sub	sp, #8
 800d1c2:	af00      	add	r7, sp, #0
 800d1c4:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681c      	ldr	r4, [r3, #0]
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	f7ff fa5d 	bl	800c690 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 800d1d6:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800d1d8:	461a      	mov	r2, r3
 800d1da:	4629      	mov	r1, r5
 800d1dc:	4620      	mov	r0, r4
 800d1de:	f7ff fa7b 	bl	800c6d8 <_ZSt8_DestroyIPPvS0_EvT_S2_RSaIT0_E>
      }
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	f7fe fdc9 	bl	800bd7c <_ZNSt12_Vector_baseIPvSaIS0_EED1Ev>
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	3708      	adds	r7, #8
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	bdb0      	pop	{r4, r5, r7, pc}

0800d1f4 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE>:
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	af00      	add	r7, sp, #0
 800d1f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d1fc:	2001      	movs	r0, #1
 800d1fe:	f7ff ff67 	bl	800d0d0 <_Z41__static_initialization_and_destruction_0ii>
 800d202:	bd80      	pop	{r7, pc}

0800d204 <_GLOBAL__sub_D__Z18trained_model_initPFPvjjE>:
 800d204:	b580      	push	{r7, lr}
 800d206:	af00      	add	r7, sp, #0
 800d208:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d20c:	2000      	movs	r0, #0
 800d20e:	f7ff ff5f 	bl	800d0d0 <_Z41__static_initialization_and_destruction_0ii>
 800d212:	bd80      	pop	{r7, pc}

0800d214 <_ZdlPv>:
 800d214:	f001 bc18 	b.w	800ea48 <free>

0800d218 <_ZdaPv>:
 800d218:	f7ff bffc 	b.w	800d214 <_ZdlPv>

0800d21c <_Znwj>:
 800d21c:	2801      	cmp	r0, #1
 800d21e:	bf38      	it	cc
 800d220:	2001      	movcc	r0, #1
 800d222:	b510      	push	{r4, lr}
 800d224:	4604      	mov	r4, r0
 800d226:	4620      	mov	r0, r4
 800d228:	f001 fc06 	bl	800ea38 <malloc>
 800d22c:	b930      	cbnz	r0, 800d23c <_Znwj+0x20>
 800d22e:	f000 f80f 	bl	800d250 <_ZSt15get_new_handlerv>
 800d232:	b908      	cbnz	r0, 800d238 <_Znwj+0x1c>
 800d234:	f001 fb92 	bl	800e95c <abort>
 800d238:	4780      	blx	r0
 800d23a:	e7f4      	b.n	800d226 <_Znwj+0xa>
 800d23c:	bd10      	pop	{r4, pc}

0800d23e <_Znaj>:
 800d23e:	f7ff bfed 	b.w	800d21c <_Znwj>

0800d242 <_ZSt17__throw_bad_allocv>:
 800d242:	b508      	push	{r3, lr}
 800d244:	f001 fb8a 	bl	800e95c <abort>

0800d248 <_ZSt20__throw_length_errorPKc>:
 800d248:	b508      	push	{r3, lr}
 800d24a:	f001 fb87 	bl	800e95c <abort>
	...

0800d250 <_ZSt15get_new_handlerv>:
 800d250:	4b02      	ldr	r3, [pc, #8]	; (800d25c <_ZSt15get_new_handlerv+0xc>)
 800d252:	6818      	ldr	r0, [r3, #0]
 800d254:	f3bf 8f5b 	dmb	ish
 800d258:	4770      	bx	lr
 800d25a:	bf00      	nop
 800d25c:	20007504 	.word	0x20007504

0800d260 <floor>:
 800d260:	ec51 0b10 	vmov	r0, r1, d0
 800d264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d268:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800d26c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800d270:	2e13      	cmp	r6, #19
 800d272:	ee10 5a10 	vmov	r5, s0
 800d276:	ee10 8a10 	vmov	r8, s0
 800d27a:	460c      	mov	r4, r1
 800d27c:	dc32      	bgt.n	800d2e4 <floor+0x84>
 800d27e:	2e00      	cmp	r6, #0
 800d280:	da14      	bge.n	800d2ac <floor+0x4c>
 800d282:	a333      	add	r3, pc, #204	; (adr r3, 800d350 <floor+0xf0>)
 800d284:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d288:	f7f3 f830 	bl	80002ec <__adddf3>
 800d28c:	2200      	movs	r2, #0
 800d28e:	2300      	movs	r3, #0
 800d290:	f7f3 fc72 	bl	8000b78 <__aeabi_dcmpgt>
 800d294:	b138      	cbz	r0, 800d2a6 <floor+0x46>
 800d296:	2c00      	cmp	r4, #0
 800d298:	da57      	bge.n	800d34a <floor+0xea>
 800d29a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d29e:	431d      	orrs	r5, r3
 800d2a0:	d001      	beq.n	800d2a6 <floor+0x46>
 800d2a2:	4c2d      	ldr	r4, [pc, #180]	; (800d358 <floor+0xf8>)
 800d2a4:	2500      	movs	r5, #0
 800d2a6:	4621      	mov	r1, r4
 800d2a8:	4628      	mov	r0, r5
 800d2aa:	e025      	b.n	800d2f8 <floor+0x98>
 800d2ac:	4f2b      	ldr	r7, [pc, #172]	; (800d35c <floor+0xfc>)
 800d2ae:	4137      	asrs	r7, r6
 800d2b0:	ea01 0307 	and.w	r3, r1, r7
 800d2b4:	4303      	orrs	r3, r0
 800d2b6:	d01f      	beq.n	800d2f8 <floor+0x98>
 800d2b8:	a325      	add	r3, pc, #148	; (adr r3, 800d350 <floor+0xf0>)
 800d2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2be:	f7f3 f815 	bl	80002ec <__adddf3>
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	f7f3 fc57 	bl	8000b78 <__aeabi_dcmpgt>
 800d2ca:	2800      	cmp	r0, #0
 800d2cc:	d0eb      	beq.n	800d2a6 <floor+0x46>
 800d2ce:	2c00      	cmp	r4, #0
 800d2d0:	bfbe      	ittt	lt
 800d2d2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d2d6:	fa43 f606 	asrlt.w	r6, r3, r6
 800d2da:	19a4      	addlt	r4, r4, r6
 800d2dc:	ea24 0407 	bic.w	r4, r4, r7
 800d2e0:	2500      	movs	r5, #0
 800d2e2:	e7e0      	b.n	800d2a6 <floor+0x46>
 800d2e4:	2e33      	cmp	r6, #51	; 0x33
 800d2e6:	dd0b      	ble.n	800d300 <floor+0xa0>
 800d2e8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d2ec:	d104      	bne.n	800d2f8 <floor+0x98>
 800d2ee:	ee10 2a10 	vmov	r2, s0
 800d2f2:	460b      	mov	r3, r1
 800d2f4:	f7f2 fffa 	bl	80002ec <__adddf3>
 800d2f8:	ec41 0b10 	vmov	d0, r0, r1
 800d2fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d300:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800d304:	f04f 33ff 	mov.w	r3, #4294967295
 800d308:	fa23 f707 	lsr.w	r7, r3, r7
 800d30c:	4207      	tst	r7, r0
 800d30e:	d0f3      	beq.n	800d2f8 <floor+0x98>
 800d310:	a30f      	add	r3, pc, #60	; (adr r3, 800d350 <floor+0xf0>)
 800d312:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d316:	f7f2 ffe9 	bl	80002ec <__adddf3>
 800d31a:	2200      	movs	r2, #0
 800d31c:	2300      	movs	r3, #0
 800d31e:	f7f3 fc2b 	bl	8000b78 <__aeabi_dcmpgt>
 800d322:	2800      	cmp	r0, #0
 800d324:	d0bf      	beq.n	800d2a6 <floor+0x46>
 800d326:	2c00      	cmp	r4, #0
 800d328:	da02      	bge.n	800d330 <floor+0xd0>
 800d32a:	2e14      	cmp	r6, #20
 800d32c:	d103      	bne.n	800d336 <floor+0xd6>
 800d32e:	3401      	adds	r4, #1
 800d330:	ea25 0507 	bic.w	r5, r5, r7
 800d334:	e7b7      	b.n	800d2a6 <floor+0x46>
 800d336:	2301      	movs	r3, #1
 800d338:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d33c:	fa03 f606 	lsl.w	r6, r3, r6
 800d340:	4435      	add	r5, r6
 800d342:	4545      	cmp	r5, r8
 800d344:	bf38      	it	cc
 800d346:	18e4      	addcc	r4, r4, r3
 800d348:	e7f2      	b.n	800d330 <floor+0xd0>
 800d34a:	2500      	movs	r5, #0
 800d34c:	462c      	mov	r4, r5
 800d34e:	e7aa      	b.n	800d2a6 <floor+0x46>
 800d350:	8800759c 	.word	0x8800759c
 800d354:	7e37e43c 	.word	0x7e37e43c
 800d358:	bff00000 	.word	0xbff00000
 800d35c:	000fffff 	.word	0x000fffff

0800d360 <frexp>:
 800d360:	b570      	push	{r4, r5, r6, lr}
 800d362:	2100      	movs	r1, #0
 800d364:	ec55 4b10 	vmov	r4, r5, d0
 800d368:	6001      	str	r1, [r0, #0]
 800d36a:	4916      	ldr	r1, [pc, #88]	; (800d3c4 <frexp+0x64>)
 800d36c:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800d370:	428a      	cmp	r2, r1
 800d372:	4606      	mov	r6, r0
 800d374:	462b      	mov	r3, r5
 800d376:	dc22      	bgt.n	800d3be <frexp+0x5e>
 800d378:	ee10 1a10 	vmov	r1, s0
 800d37c:	4311      	orrs	r1, r2
 800d37e:	d01e      	beq.n	800d3be <frexp+0x5e>
 800d380:	4911      	ldr	r1, [pc, #68]	; (800d3c8 <frexp+0x68>)
 800d382:	4029      	ands	r1, r5
 800d384:	b969      	cbnz	r1, 800d3a2 <frexp+0x42>
 800d386:	4b11      	ldr	r3, [pc, #68]	; (800d3cc <frexp+0x6c>)
 800d388:	2200      	movs	r2, #0
 800d38a:	ee10 0a10 	vmov	r0, s0
 800d38e:	4629      	mov	r1, r5
 800d390:	f7f3 f962 	bl	8000658 <__aeabi_dmul>
 800d394:	460b      	mov	r3, r1
 800d396:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800d39a:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800d39e:	4604      	mov	r4, r0
 800d3a0:	6031      	str	r1, [r6, #0]
 800d3a2:	6831      	ldr	r1, [r6, #0]
 800d3a4:	1512      	asrs	r2, r2, #20
 800d3a6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d3aa:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 800d3ae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d3b2:	440a      	add	r2, r1
 800d3b4:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 800d3b8:	6032      	str	r2, [r6, #0]
 800d3ba:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 800d3be:	ec45 4b10 	vmov	d0, r4, r5
 800d3c2:	bd70      	pop	{r4, r5, r6, pc}
 800d3c4:	7fefffff 	.word	0x7fefffff
 800d3c8:	7ff00000 	.word	0x7ff00000
 800d3cc:	43500000 	.word	0x43500000

0800d3d0 <round>:
 800d3d0:	ec51 0b10 	vmov	r0, r1, d0
 800d3d4:	b570      	push	{r4, r5, r6, lr}
 800d3d6:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800d3da:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800d3de:	2c13      	cmp	r4, #19
 800d3e0:	ee10 2a10 	vmov	r2, s0
 800d3e4:	460b      	mov	r3, r1
 800d3e6:	dc19      	bgt.n	800d41c <round+0x4c>
 800d3e8:	2c00      	cmp	r4, #0
 800d3ea:	da09      	bge.n	800d400 <round+0x30>
 800d3ec:	3401      	adds	r4, #1
 800d3ee:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800d3f2:	d103      	bne.n	800d3fc <round+0x2c>
 800d3f4:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d3f8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d3fc:	2100      	movs	r1, #0
 800d3fe:	e028      	b.n	800d452 <round+0x82>
 800d400:	4d15      	ldr	r5, [pc, #84]	; (800d458 <round+0x88>)
 800d402:	4125      	asrs	r5, r4
 800d404:	ea01 0605 	and.w	r6, r1, r5
 800d408:	4332      	orrs	r2, r6
 800d40a:	d00e      	beq.n	800d42a <round+0x5a>
 800d40c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800d410:	fa42 f404 	asr.w	r4, r2, r4
 800d414:	4423      	add	r3, r4
 800d416:	ea23 0305 	bic.w	r3, r3, r5
 800d41a:	e7ef      	b.n	800d3fc <round+0x2c>
 800d41c:	2c33      	cmp	r4, #51	; 0x33
 800d41e:	dd07      	ble.n	800d430 <round+0x60>
 800d420:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800d424:	d101      	bne.n	800d42a <round+0x5a>
 800d426:	f7f2 ff61 	bl	80002ec <__adddf3>
 800d42a:	ec41 0b10 	vmov	d0, r0, r1
 800d42e:	bd70      	pop	{r4, r5, r6, pc}
 800d430:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800d434:	f04f 35ff 	mov.w	r5, #4294967295
 800d438:	40f5      	lsrs	r5, r6
 800d43a:	4228      	tst	r0, r5
 800d43c:	d0f5      	beq.n	800d42a <round+0x5a>
 800d43e:	2101      	movs	r1, #1
 800d440:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800d444:	fa01 f404 	lsl.w	r4, r1, r4
 800d448:	1912      	adds	r2, r2, r4
 800d44a:	bf28      	it	cs
 800d44c:	185b      	addcs	r3, r3, r1
 800d44e:	ea22 0105 	bic.w	r1, r2, r5
 800d452:	4608      	mov	r0, r1
 800d454:	4619      	mov	r1, r3
 800d456:	e7e8      	b.n	800d42a <round+0x5a>
 800d458:	000fffff 	.word	0x000fffff

0800d45c <roundf>:
 800d45c:	ee10 0a10 	vmov	r0, s0
 800d460:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800d464:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 800d468:	2a16      	cmp	r2, #22
 800d46a:	dc15      	bgt.n	800d498 <roundf+0x3c>
 800d46c:	2a00      	cmp	r2, #0
 800d46e:	da08      	bge.n	800d482 <roundf+0x26>
 800d470:	3201      	adds	r2, #1
 800d472:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800d476:	d101      	bne.n	800d47c <roundf+0x20>
 800d478:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800d47c:	ee00 3a10 	vmov	s0, r3
 800d480:	4770      	bx	lr
 800d482:	4908      	ldr	r1, [pc, #32]	; (800d4a4 <roundf+0x48>)
 800d484:	4111      	asrs	r1, r2
 800d486:	4208      	tst	r0, r1
 800d488:	d0fa      	beq.n	800d480 <roundf+0x24>
 800d48a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d48e:	4113      	asrs	r3, r2
 800d490:	4403      	add	r3, r0
 800d492:	ea23 0301 	bic.w	r3, r3, r1
 800d496:	e7f1      	b.n	800d47c <roundf+0x20>
 800d498:	2a80      	cmp	r2, #128	; 0x80
 800d49a:	d1f1      	bne.n	800d480 <roundf+0x24>
 800d49c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d4a0:	4770      	bx	lr
 800d4a2:	bf00      	nop
 800d4a4:	007fffff 	.word	0x007fffff

0800d4a8 <pow>:
 800d4a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4ac:	ec59 8b10 	vmov	r8, r9, d0
 800d4b0:	ec57 6b11 	vmov	r6, r7, d1
 800d4b4:	f000 f91c 	bl	800d6f0 <__ieee754_pow>
 800d4b8:	4b4e      	ldr	r3, [pc, #312]	; (800d5f4 <pow+0x14c>)
 800d4ba:	f993 3000 	ldrsb.w	r3, [r3]
 800d4be:	3301      	adds	r3, #1
 800d4c0:	ec55 4b10 	vmov	r4, r5, d0
 800d4c4:	d015      	beq.n	800d4f2 <pow+0x4a>
 800d4c6:	4632      	mov	r2, r6
 800d4c8:	463b      	mov	r3, r7
 800d4ca:	4630      	mov	r0, r6
 800d4cc:	4639      	mov	r1, r7
 800d4ce:	f7f3 fb5d 	bl	8000b8c <__aeabi_dcmpun>
 800d4d2:	b970      	cbnz	r0, 800d4f2 <pow+0x4a>
 800d4d4:	4642      	mov	r2, r8
 800d4d6:	464b      	mov	r3, r9
 800d4d8:	4640      	mov	r0, r8
 800d4da:	4649      	mov	r1, r9
 800d4dc:	f7f3 fb56 	bl	8000b8c <__aeabi_dcmpun>
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	b148      	cbz	r0, 800d4fa <pow+0x52>
 800d4e6:	4630      	mov	r0, r6
 800d4e8:	4639      	mov	r1, r7
 800d4ea:	f7f3 fb1d 	bl	8000b28 <__aeabi_dcmpeq>
 800d4ee:	2800      	cmp	r0, #0
 800d4f0:	d17d      	bne.n	800d5ee <pow+0x146>
 800d4f2:	ec45 4b10 	vmov	d0, r4, r5
 800d4f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4fa:	4640      	mov	r0, r8
 800d4fc:	4649      	mov	r1, r9
 800d4fe:	f7f3 fb13 	bl	8000b28 <__aeabi_dcmpeq>
 800d502:	b1e0      	cbz	r0, 800d53e <pow+0x96>
 800d504:	2200      	movs	r2, #0
 800d506:	2300      	movs	r3, #0
 800d508:	4630      	mov	r0, r6
 800d50a:	4639      	mov	r1, r7
 800d50c:	f7f3 fb0c 	bl	8000b28 <__aeabi_dcmpeq>
 800d510:	2800      	cmp	r0, #0
 800d512:	d16c      	bne.n	800d5ee <pow+0x146>
 800d514:	ec47 6b10 	vmov	d0, r6, r7
 800d518:	f001 f8e5 	bl	800e6e6 <finite>
 800d51c:	2800      	cmp	r0, #0
 800d51e:	d0e8      	beq.n	800d4f2 <pow+0x4a>
 800d520:	2200      	movs	r2, #0
 800d522:	2300      	movs	r3, #0
 800d524:	4630      	mov	r0, r6
 800d526:	4639      	mov	r1, r7
 800d528:	f7f3 fb08 	bl	8000b3c <__aeabi_dcmplt>
 800d52c:	2800      	cmp	r0, #0
 800d52e:	d0e0      	beq.n	800d4f2 <pow+0x4a>
 800d530:	f001 fa42 	bl	800e9b8 <__errno>
 800d534:	2321      	movs	r3, #33	; 0x21
 800d536:	6003      	str	r3, [r0, #0]
 800d538:	2400      	movs	r4, #0
 800d53a:	4d2f      	ldr	r5, [pc, #188]	; (800d5f8 <pow+0x150>)
 800d53c:	e7d9      	b.n	800d4f2 <pow+0x4a>
 800d53e:	ec45 4b10 	vmov	d0, r4, r5
 800d542:	f001 f8d0 	bl	800e6e6 <finite>
 800d546:	bbb8      	cbnz	r0, 800d5b8 <pow+0x110>
 800d548:	ec49 8b10 	vmov	d0, r8, r9
 800d54c:	f001 f8cb 	bl	800e6e6 <finite>
 800d550:	b390      	cbz	r0, 800d5b8 <pow+0x110>
 800d552:	ec47 6b10 	vmov	d0, r6, r7
 800d556:	f001 f8c6 	bl	800e6e6 <finite>
 800d55a:	b368      	cbz	r0, 800d5b8 <pow+0x110>
 800d55c:	4622      	mov	r2, r4
 800d55e:	462b      	mov	r3, r5
 800d560:	4620      	mov	r0, r4
 800d562:	4629      	mov	r1, r5
 800d564:	f7f3 fb12 	bl	8000b8c <__aeabi_dcmpun>
 800d568:	b160      	cbz	r0, 800d584 <pow+0xdc>
 800d56a:	f001 fa25 	bl	800e9b8 <__errno>
 800d56e:	2321      	movs	r3, #33	; 0x21
 800d570:	6003      	str	r3, [r0, #0]
 800d572:	2200      	movs	r2, #0
 800d574:	2300      	movs	r3, #0
 800d576:	4610      	mov	r0, r2
 800d578:	4619      	mov	r1, r3
 800d57a:	f7f3 f997 	bl	80008ac <__aeabi_ddiv>
 800d57e:	4604      	mov	r4, r0
 800d580:	460d      	mov	r5, r1
 800d582:	e7b6      	b.n	800d4f2 <pow+0x4a>
 800d584:	f001 fa18 	bl	800e9b8 <__errno>
 800d588:	2322      	movs	r3, #34	; 0x22
 800d58a:	6003      	str	r3, [r0, #0]
 800d58c:	2200      	movs	r2, #0
 800d58e:	2300      	movs	r3, #0
 800d590:	4640      	mov	r0, r8
 800d592:	4649      	mov	r1, r9
 800d594:	f7f3 fad2 	bl	8000b3c <__aeabi_dcmplt>
 800d598:	2400      	movs	r4, #0
 800d59a:	b158      	cbz	r0, 800d5b4 <pow+0x10c>
 800d59c:	ec47 6b10 	vmov	d0, r6, r7
 800d5a0:	f001 f8b6 	bl	800e710 <rint>
 800d5a4:	4632      	mov	r2, r6
 800d5a6:	ec51 0b10 	vmov	r0, r1, d0
 800d5aa:	463b      	mov	r3, r7
 800d5ac:	f7f3 fabc 	bl	8000b28 <__aeabi_dcmpeq>
 800d5b0:	2800      	cmp	r0, #0
 800d5b2:	d0c2      	beq.n	800d53a <pow+0x92>
 800d5b4:	4d11      	ldr	r5, [pc, #68]	; (800d5fc <pow+0x154>)
 800d5b6:	e79c      	b.n	800d4f2 <pow+0x4a>
 800d5b8:	2200      	movs	r2, #0
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	4620      	mov	r0, r4
 800d5be:	4629      	mov	r1, r5
 800d5c0:	f7f3 fab2 	bl	8000b28 <__aeabi_dcmpeq>
 800d5c4:	2800      	cmp	r0, #0
 800d5c6:	d094      	beq.n	800d4f2 <pow+0x4a>
 800d5c8:	ec49 8b10 	vmov	d0, r8, r9
 800d5cc:	f001 f88b 	bl	800e6e6 <finite>
 800d5d0:	2800      	cmp	r0, #0
 800d5d2:	d08e      	beq.n	800d4f2 <pow+0x4a>
 800d5d4:	ec47 6b10 	vmov	d0, r6, r7
 800d5d8:	f001 f885 	bl	800e6e6 <finite>
 800d5dc:	2800      	cmp	r0, #0
 800d5de:	d088      	beq.n	800d4f2 <pow+0x4a>
 800d5e0:	f001 f9ea 	bl	800e9b8 <__errno>
 800d5e4:	2322      	movs	r3, #34	; 0x22
 800d5e6:	6003      	str	r3, [r0, #0]
 800d5e8:	2400      	movs	r4, #0
 800d5ea:	2500      	movs	r5, #0
 800d5ec:	e781      	b.n	800d4f2 <pow+0x4a>
 800d5ee:	4d04      	ldr	r5, [pc, #16]	; (800d600 <pow+0x158>)
 800d5f0:	2400      	movs	r4, #0
 800d5f2:	e77e      	b.n	800d4f2 <pow+0x4a>
 800d5f4:	20006e5c 	.word	0x20006e5c
 800d5f8:	fff00000 	.word	0xfff00000
 800d5fc:	7ff00000 	.word	0x7ff00000
 800d600:	3ff00000 	.word	0x3ff00000

0800d604 <expf>:
 800d604:	b508      	push	{r3, lr}
 800d606:	ed2d 8b02 	vpush	{d8}
 800d60a:	eef0 8a40 	vmov.f32	s17, s0
 800d60e:	f000 fe45 	bl	800e29c <__ieee754_expf>
 800d612:	4b16      	ldr	r3, [pc, #88]	; (800d66c <expf+0x68>)
 800d614:	f993 3000 	ldrsb.w	r3, [r3]
 800d618:	3301      	adds	r3, #1
 800d61a:	eeb0 8a40 	vmov.f32	s16, s0
 800d61e:	d011      	beq.n	800d644 <expf+0x40>
 800d620:	eeb0 0a68 	vmov.f32	s0, s17
 800d624:	f001 f986 	bl	800e934 <finitef>
 800d628:	b160      	cbz	r0, 800d644 <expf+0x40>
 800d62a:	eddf 7a11 	vldr	s15, [pc, #68]	; 800d670 <expf+0x6c>
 800d62e:	eef4 8ae7 	vcmpe.f32	s17, s15
 800d632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d636:	dd0a      	ble.n	800d64e <expf+0x4a>
 800d638:	f001 f9be 	bl	800e9b8 <__errno>
 800d63c:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 800d674 <expf+0x70>
 800d640:	2322      	movs	r3, #34	; 0x22
 800d642:	6003      	str	r3, [r0, #0]
 800d644:	eeb0 0a48 	vmov.f32	s0, s16
 800d648:	ecbd 8b02 	vpop	{d8}
 800d64c:	bd08      	pop	{r3, pc}
 800d64e:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800d678 <expf+0x74>
 800d652:	eef4 8ae7 	vcmpe.f32	s17, s15
 800d656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d65a:	d5f3      	bpl.n	800d644 <expf+0x40>
 800d65c:	f001 f9ac 	bl	800e9b8 <__errno>
 800d660:	2322      	movs	r3, #34	; 0x22
 800d662:	ed9f 8a06 	vldr	s16, [pc, #24]	; 800d67c <expf+0x78>
 800d666:	6003      	str	r3, [r0, #0]
 800d668:	e7ec      	b.n	800d644 <expf+0x40>
 800d66a:	bf00      	nop
 800d66c:	20006e5c 	.word	0x20006e5c
 800d670:	42b17180 	.word	0x42b17180
 800d674:	7f800000 	.word	0x7f800000
 800d678:	c2cff1b5 	.word	0xc2cff1b5
 800d67c:	00000000 	.word	0x00000000

0800d680 <log10f>:
 800d680:	b508      	push	{r3, lr}
 800d682:	ed2d 8b02 	vpush	{d8}
 800d686:	eeb0 8a40 	vmov.f32	s16, s0
 800d68a:	f000 ffcb 	bl	800e624 <__ieee754_log10f>
 800d68e:	4b14      	ldr	r3, [pc, #80]	; (800d6e0 <log10f+0x60>)
 800d690:	f993 3000 	ldrsb.w	r3, [r3]
 800d694:	3301      	adds	r3, #1
 800d696:	d014      	beq.n	800d6c2 <log10f+0x42>
 800d698:	eeb4 8a48 	vcmp.f32	s16, s16
 800d69c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6a0:	d60f      	bvs.n	800d6c2 <log10f+0x42>
 800d6a2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800d6a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6aa:	d80a      	bhi.n	800d6c2 <log10f+0x42>
 800d6ac:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d6b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6b4:	d108      	bne.n	800d6c8 <log10f+0x48>
 800d6b6:	f001 f97f 	bl	800e9b8 <__errno>
 800d6ba:	2322      	movs	r3, #34	; 0x22
 800d6bc:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800d6e4 <log10f+0x64>
 800d6c0:	6003      	str	r3, [r0, #0]
 800d6c2:	ecbd 8b02 	vpop	{d8}
 800d6c6:	bd08      	pop	{r3, pc}
 800d6c8:	f001 f976 	bl	800e9b8 <__errno>
 800d6cc:	ecbd 8b02 	vpop	{d8}
 800d6d0:	2321      	movs	r3, #33	; 0x21
 800d6d2:	6003      	str	r3, [r0, #0]
 800d6d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d6d8:	4803      	ldr	r0, [pc, #12]	; (800d6e8 <log10f+0x68>)
 800d6da:	f001 b939 	b.w	800e950 <nanf>
 800d6de:	bf00      	nop
 800d6e0:	20006e5c 	.word	0x20006e5c
 800d6e4:	ff800000 	.word	0xff800000
 800d6e8:	08016243 	.word	0x08016243
 800d6ec:	00000000 	.word	0x00000000

0800d6f0 <__ieee754_pow>:
 800d6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6f4:	ed2d 8b06 	vpush	{d8-d10}
 800d6f8:	b08d      	sub	sp, #52	; 0x34
 800d6fa:	ed8d 1b02 	vstr	d1, [sp, #8]
 800d6fe:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800d702:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800d706:	ea56 0100 	orrs.w	r1, r6, r0
 800d70a:	ec53 2b10 	vmov	r2, r3, d0
 800d70e:	f000 84d1 	beq.w	800e0b4 <__ieee754_pow+0x9c4>
 800d712:	497f      	ldr	r1, [pc, #508]	; (800d910 <__ieee754_pow+0x220>)
 800d714:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800d718:	428c      	cmp	r4, r1
 800d71a:	ee10 8a10 	vmov	r8, s0
 800d71e:	4699      	mov	r9, r3
 800d720:	dc09      	bgt.n	800d736 <__ieee754_pow+0x46>
 800d722:	d103      	bne.n	800d72c <__ieee754_pow+0x3c>
 800d724:	b97a      	cbnz	r2, 800d746 <__ieee754_pow+0x56>
 800d726:	42a6      	cmp	r6, r4
 800d728:	dd02      	ble.n	800d730 <__ieee754_pow+0x40>
 800d72a:	e00c      	b.n	800d746 <__ieee754_pow+0x56>
 800d72c:	428e      	cmp	r6, r1
 800d72e:	dc02      	bgt.n	800d736 <__ieee754_pow+0x46>
 800d730:	428e      	cmp	r6, r1
 800d732:	d110      	bne.n	800d756 <__ieee754_pow+0x66>
 800d734:	b178      	cbz	r0, 800d756 <__ieee754_pow+0x66>
 800d736:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d73a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d73e:	ea54 0308 	orrs.w	r3, r4, r8
 800d742:	f000 84b7 	beq.w	800e0b4 <__ieee754_pow+0x9c4>
 800d746:	4873      	ldr	r0, [pc, #460]	; (800d914 <__ieee754_pow+0x224>)
 800d748:	b00d      	add	sp, #52	; 0x34
 800d74a:	ecbd 8b06 	vpop	{d8-d10}
 800d74e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d752:	f000 bfd5 	b.w	800e700 <nan>
 800d756:	f1b9 0f00 	cmp.w	r9, #0
 800d75a:	da36      	bge.n	800d7ca <__ieee754_pow+0xda>
 800d75c:	496e      	ldr	r1, [pc, #440]	; (800d918 <__ieee754_pow+0x228>)
 800d75e:	428e      	cmp	r6, r1
 800d760:	dc51      	bgt.n	800d806 <__ieee754_pow+0x116>
 800d762:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800d766:	428e      	cmp	r6, r1
 800d768:	f340 84af 	ble.w	800e0ca <__ieee754_pow+0x9da>
 800d76c:	1531      	asrs	r1, r6, #20
 800d76e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d772:	2914      	cmp	r1, #20
 800d774:	dd0f      	ble.n	800d796 <__ieee754_pow+0xa6>
 800d776:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800d77a:	fa20 fc01 	lsr.w	ip, r0, r1
 800d77e:	fa0c f101 	lsl.w	r1, ip, r1
 800d782:	4281      	cmp	r1, r0
 800d784:	f040 84a1 	bne.w	800e0ca <__ieee754_pow+0x9da>
 800d788:	f00c 0c01 	and.w	ip, ip, #1
 800d78c:	f1cc 0102 	rsb	r1, ip, #2
 800d790:	9100      	str	r1, [sp, #0]
 800d792:	b180      	cbz	r0, 800d7b6 <__ieee754_pow+0xc6>
 800d794:	e059      	b.n	800d84a <__ieee754_pow+0x15a>
 800d796:	2800      	cmp	r0, #0
 800d798:	d155      	bne.n	800d846 <__ieee754_pow+0x156>
 800d79a:	f1c1 0114 	rsb	r1, r1, #20
 800d79e:	fa46 fc01 	asr.w	ip, r6, r1
 800d7a2:	fa0c f101 	lsl.w	r1, ip, r1
 800d7a6:	42b1      	cmp	r1, r6
 800d7a8:	f040 848c 	bne.w	800e0c4 <__ieee754_pow+0x9d4>
 800d7ac:	f00c 0c01 	and.w	ip, ip, #1
 800d7b0:	f1cc 0102 	rsb	r1, ip, #2
 800d7b4:	9100      	str	r1, [sp, #0]
 800d7b6:	4959      	ldr	r1, [pc, #356]	; (800d91c <__ieee754_pow+0x22c>)
 800d7b8:	428e      	cmp	r6, r1
 800d7ba:	d12d      	bne.n	800d818 <__ieee754_pow+0x128>
 800d7bc:	2f00      	cmp	r7, #0
 800d7be:	da79      	bge.n	800d8b4 <__ieee754_pow+0x1c4>
 800d7c0:	4956      	ldr	r1, [pc, #344]	; (800d91c <__ieee754_pow+0x22c>)
 800d7c2:	2000      	movs	r0, #0
 800d7c4:	f7f3 f872 	bl	80008ac <__aeabi_ddiv>
 800d7c8:	e016      	b.n	800d7f8 <__ieee754_pow+0x108>
 800d7ca:	2100      	movs	r1, #0
 800d7cc:	9100      	str	r1, [sp, #0]
 800d7ce:	2800      	cmp	r0, #0
 800d7d0:	d13b      	bne.n	800d84a <__ieee754_pow+0x15a>
 800d7d2:	494f      	ldr	r1, [pc, #316]	; (800d910 <__ieee754_pow+0x220>)
 800d7d4:	428e      	cmp	r6, r1
 800d7d6:	d1ee      	bne.n	800d7b6 <__ieee754_pow+0xc6>
 800d7d8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800d7dc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d7e0:	ea53 0308 	orrs.w	r3, r3, r8
 800d7e4:	f000 8466 	beq.w	800e0b4 <__ieee754_pow+0x9c4>
 800d7e8:	4b4d      	ldr	r3, [pc, #308]	; (800d920 <__ieee754_pow+0x230>)
 800d7ea:	429c      	cmp	r4, r3
 800d7ec:	dd0d      	ble.n	800d80a <__ieee754_pow+0x11a>
 800d7ee:	2f00      	cmp	r7, #0
 800d7f0:	f280 8464 	bge.w	800e0bc <__ieee754_pow+0x9cc>
 800d7f4:	2000      	movs	r0, #0
 800d7f6:	2100      	movs	r1, #0
 800d7f8:	ec41 0b10 	vmov	d0, r0, r1
 800d7fc:	b00d      	add	sp, #52	; 0x34
 800d7fe:	ecbd 8b06 	vpop	{d8-d10}
 800d802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d806:	2102      	movs	r1, #2
 800d808:	e7e0      	b.n	800d7cc <__ieee754_pow+0xdc>
 800d80a:	2f00      	cmp	r7, #0
 800d80c:	daf2      	bge.n	800d7f4 <__ieee754_pow+0x104>
 800d80e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800d812:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d816:	e7ef      	b.n	800d7f8 <__ieee754_pow+0x108>
 800d818:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800d81c:	d104      	bne.n	800d828 <__ieee754_pow+0x138>
 800d81e:	4610      	mov	r0, r2
 800d820:	4619      	mov	r1, r3
 800d822:	f7f2 ff19 	bl	8000658 <__aeabi_dmul>
 800d826:	e7e7      	b.n	800d7f8 <__ieee754_pow+0x108>
 800d828:	493e      	ldr	r1, [pc, #248]	; (800d924 <__ieee754_pow+0x234>)
 800d82a:	428f      	cmp	r7, r1
 800d82c:	d10d      	bne.n	800d84a <__ieee754_pow+0x15a>
 800d82e:	f1b9 0f00 	cmp.w	r9, #0
 800d832:	db0a      	blt.n	800d84a <__ieee754_pow+0x15a>
 800d834:	ec43 2b10 	vmov	d0, r2, r3
 800d838:	b00d      	add	sp, #52	; 0x34
 800d83a:	ecbd 8b06 	vpop	{d8-d10}
 800d83e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d842:	f000 bc77 	b.w	800e134 <__ieee754_sqrt>
 800d846:	2100      	movs	r1, #0
 800d848:	9100      	str	r1, [sp, #0]
 800d84a:	ec43 2b10 	vmov	d0, r2, r3
 800d84e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d852:	f000 ff3f 	bl	800e6d4 <fabs>
 800d856:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d85a:	ec51 0b10 	vmov	r0, r1, d0
 800d85e:	f1b8 0f00 	cmp.w	r8, #0
 800d862:	d12a      	bne.n	800d8ba <__ieee754_pow+0x1ca>
 800d864:	b12c      	cbz	r4, 800d872 <__ieee754_pow+0x182>
 800d866:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800d91c <__ieee754_pow+0x22c>
 800d86a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800d86e:	45e6      	cmp	lr, ip
 800d870:	d123      	bne.n	800d8ba <__ieee754_pow+0x1ca>
 800d872:	2f00      	cmp	r7, #0
 800d874:	da05      	bge.n	800d882 <__ieee754_pow+0x192>
 800d876:	4602      	mov	r2, r0
 800d878:	460b      	mov	r3, r1
 800d87a:	2000      	movs	r0, #0
 800d87c:	4927      	ldr	r1, [pc, #156]	; (800d91c <__ieee754_pow+0x22c>)
 800d87e:	f7f3 f815 	bl	80008ac <__aeabi_ddiv>
 800d882:	f1b9 0f00 	cmp.w	r9, #0
 800d886:	dab7      	bge.n	800d7f8 <__ieee754_pow+0x108>
 800d888:	9b00      	ldr	r3, [sp, #0]
 800d88a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d88e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d892:	4323      	orrs	r3, r4
 800d894:	d108      	bne.n	800d8a8 <__ieee754_pow+0x1b8>
 800d896:	4602      	mov	r2, r0
 800d898:	460b      	mov	r3, r1
 800d89a:	4610      	mov	r0, r2
 800d89c:	4619      	mov	r1, r3
 800d89e:	f7f2 fd23 	bl	80002e8 <__aeabi_dsub>
 800d8a2:	4602      	mov	r2, r0
 800d8a4:	460b      	mov	r3, r1
 800d8a6:	e78d      	b.n	800d7c4 <__ieee754_pow+0xd4>
 800d8a8:	9b00      	ldr	r3, [sp, #0]
 800d8aa:	2b01      	cmp	r3, #1
 800d8ac:	d1a4      	bne.n	800d7f8 <__ieee754_pow+0x108>
 800d8ae:	4602      	mov	r2, r0
 800d8b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d8b4:	4610      	mov	r0, r2
 800d8b6:	4619      	mov	r1, r3
 800d8b8:	e79e      	b.n	800d7f8 <__ieee754_pow+0x108>
 800d8ba:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800d8be:	f10c 35ff 	add.w	r5, ip, #4294967295
 800d8c2:	950a      	str	r5, [sp, #40]	; 0x28
 800d8c4:	9d00      	ldr	r5, [sp, #0]
 800d8c6:	46ac      	mov	ip, r5
 800d8c8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800d8ca:	ea5c 0505 	orrs.w	r5, ip, r5
 800d8ce:	d0e4      	beq.n	800d89a <__ieee754_pow+0x1aa>
 800d8d0:	4b15      	ldr	r3, [pc, #84]	; (800d928 <__ieee754_pow+0x238>)
 800d8d2:	429e      	cmp	r6, r3
 800d8d4:	f340 80fc 	ble.w	800dad0 <__ieee754_pow+0x3e0>
 800d8d8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800d8dc:	429e      	cmp	r6, r3
 800d8de:	4b10      	ldr	r3, [pc, #64]	; (800d920 <__ieee754_pow+0x230>)
 800d8e0:	dd07      	ble.n	800d8f2 <__ieee754_pow+0x202>
 800d8e2:	429c      	cmp	r4, r3
 800d8e4:	dc0a      	bgt.n	800d8fc <__ieee754_pow+0x20c>
 800d8e6:	2f00      	cmp	r7, #0
 800d8e8:	da84      	bge.n	800d7f4 <__ieee754_pow+0x104>
 800d8ea:	a307      	add	r3, pc, #28	; (adr r3, 800d908 <__ieee754_pow+0x218>)
 800d8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8f0:	e795      	b.n	800d81e <__ieee754_pow+0x12e>
 800d8f2:	429c      	cmp	r4, r3
 800d8f4:	dbf7      	blt.n	800d8e6 <__ieee754_pow+0x1f6>
 800d8f6:	4b09      	ldr	r3, [pc, #36]	; (800d91c <__ieee754_pow+0x22c>)
 800d8f8:	429c      	cmp	r4, r3
 800d8fa:	dd17      	ble.n	800d92c <__ieee754_pow+0x23c>
 800d8fc:	2f00      	cmp	r7, #0
 800d8fe:	dcf4      	bgt.n	800d8ea <__ieee754_pow+0x1fa>
 800d900:	e778      	b.n	800d7f4 <__ieee754_pow+0x104>
 800d902:	bf00      	nop
 800d904:	f3af 8000 	nop.w
 800d908:	8800759c 	.word	0x8800759c
 800d90c:	7e37e43c 	.word	0x7e37e43c
 800d910:	7ff00000 	.word	0x7ff00000
 800d914:	08016243 	.word	0x08016243
 800d918:	433fffff 	.word	0x433fffff
 800d91c:	3ff00000 	.word	0x3ff00000
 800d920:	3fefffff 	.word	0x3fefffff
 800d924:	3fe00000 	.word	0x3fe00000
 800d928:	41e00000 	.word	0x41e00000
 800d92c:	4b64      	ldr	r3, [pc, #400]	; (800dac0 <__ieee754_pow+0x3d0>)
 800d92e:	2200      	movs	r2, #0
 800d930:	f7f2 fcda 	bl	80002e8 <__aeabi_dsub>
 800d934:	a356      	add	r3, pc, #344	; (adr r3, 800da90 <__ieee754_pow+0x3a0>)
 800d936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d93a:	4604      	mov	r4, r0
 800d93c:	460d      	mov	r5, r1
 800d93e:	f7f2 fe8b 	bl	8000658 <__aeabi_dmul>
 800d942:	a355      	add	r3, pc, #340	; (adr r3, 800da98 <__ieee754_pow+0x3a8>)
 800d944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d948:	4606      	mov	r6, r0
 800d94a:	460f      	mov	r7, r1
 800d94c:	4620      	mov	r0, r4
 800d94e:	4629      	mov	r1, r5
 800d950:	f7f2 fe82 	bl	8000658 <__aeabi_dmul>
 800d954:	4b5b      	ldr	r3, [pc, #364]	; (800dac4 <__ieee754_pow+0x3d4>)
 800d956:	4682      	mov	sl, r0
 800d958:	468b      	mov	fp, r1
 800d95a:	2200      	movs	r2, #0
 800d95c:	4620      	mov	r0, r4
 800d95e:	4629      	mov	r1, r5
 800d960:	f7f2 fe7a 	bl	8000658 <__aeabi_dmul>
 800d964:	4602      	mov	r2, r0
 800d966:	460b      	mov	r3, r1
 800d968:	a14d      	add	r1, pc, #308	; (adr r1, 800daa0 <__ieee754_pow+0x3b0>)
 800d96a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d96e:	f7f2 fcbb 	bl	80002e8 <__aeabi_dsub>
 800d972:	4622      	mov	r2, r4
 800d974:	462b      	mov	r3, r5
 800d976:	f7f2 fe6f 	bl	8000658 <__aeabi_dmul>
 800d97a:	4602      	mov	r2, r0
 800d97c:	460b      	mov	r3, r1
 800d97e:	2000      	movs	r0, #0
 800d980:	4951      	ldr	r1, [pc, #324]	; (800dac8 <__ieee754_pow+0x3d8>)
 800d982:	f7f2 fcb1 	bl	80002e8 <__aeabi_dsub>
 800d986:	4622      	mov	r2, r4
 800d988:	4680      	mov	r8, r0
 800d98a:	4689      	mov	r9, r1
 800d98c:	462b      	mov	r3, r5
 800d98e:	4620      	mov	r0, r4
 800d990:	4629      	mov	r1, r5
 800d992:	f7f2 fe61 	bl	8000658 <__aeabi_dmul>
 800d996:	4602      	mov	r2, r0
 800d998:	460b      	mov	r3, r1
 800d99a:	4640      	mov	r0, r8
 800d99c:	4649      	mov	r1, r9
 800d99e:	f7f2 fe5b 	bl	8000658 <__aeabi_dmul>
 800d9a2:	a341      	add	r3, pc, #260	; (adr r3, 800daa8 <__ieee754_pow+0x3b8>)
 800d9a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9a8:	f7f2 fe56 	bl	8000658 <__aeabi_dmul>
 800d9ac:	4602      	mov	r2, r0
 800d9ae:	460b      	mov	r3, r1
 800d9b0:	4650      	mov	r0, sl
 800d9b2:	4659      	mov	r1, fp
 800d9b4:	f7f2 fc98 	bl	80002e8 <__aeabi_dsub>
 800d9b8:	4602      	mov	r2, r0
 800d9ba:	460b      	mov	r3, r1
 800d9bc:	4680      	mov	r8, r0
 800d9be:	4689      	mov	r9, r1
 800d9c0:	4630      	mov	r0, r6
 800d9c2:	4639      	mov	r1, r7
 800d9c4:	f7f2 fc92 	bl	80002ec <__adddf3>
 800d9c8:	2400      	movs	r4, #0
 800d9ca:	4632      	mov	r2, r6
 800d9cc:	463b      	mov	r3, r7
 800d9ce:	4620      	mov	r0, r4
 800d9d0:	460d      	mov	r5, r1
 800d9d2:	f7f2 fc89 	bl	80002e8 <__aeabi_dsub>
 800d9d6:	4602      	mov	r2, r0
 800d9d8:	460b      	mov	r3, r1
 800d9da:	4640      	mov	r0, r8
 800d9dc:	4649      	mov	r1, r9
 800d9de:	f7f2 fc83 	bl	80002e8 <__aeabi_dsub>
 800d9e2:	9b00      	ldr	r3, [sp, #0]
 800d9e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d9e6:	3b01      	subs	r3, #1
 800d9e8:	4313      	orrs	r3, r2
 800d9ea:	4682      	mov	sl, r0
 800d9ec:	468b      	mov	fp, r1
 800d9ee:	f040 81f1 	bne.w	800ddd4 <__ieee754_pow+0x6e4>
 800d9f2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800dab0 <__ieee754_pow+0x3c0>
 800d9f6:	eeb0 8a47 	vmov.f32	s16, s14
 800d9fa:	eef0 8a67 	vmov.f32	s17, s15
 800d9fe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800da02:	2600      	movs	r6, #0
 800da04:	4632      	mov	r2, r6
 800da06:	463b      	mov	r3, r7
 800da08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da0c:	f7f2 fc6c 	bl	80002e8 <__aeabi_dsub>
 800da10:	4622      	mov	r2, r4
 800da12:	462b      	mov	r3, r5
 800da14:	f7f2 fe20 	bl	8000658 <__aeabi_dmul>
 800da18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800da1c:	4680      	mov	r8, r0
 800da1e:	4689      	mov	r9, r1
 800da20:	4650      	mov	r0, sl
 800da22:	4659      	mov	r1, fp
 800da24:	f7f2 fe18 	bl	8000658 <__aeabi_dmul>
 800da28:	4602      	mov	r2, r0
 800da2a:	460b      	mov	r3, r1
 800da2c:	4640      	mov	r0, r8
 800da2e:	4649      	mov	r1, r9
 800da30:	f7f2 fc5c 	bl	80002ec <__adddf3>
 800da34:	4632      	mov	r2, r6
 800da36:	463b      	mov	r3, r7
 800da38:	4680      	mov	r8, r0
 800da3a:	4689      	mov	r9, r1
 800da3c:	4620      	mov	r0, r4
 800da3e:	4629      	mov	r1, r5
 800da40:	f7f2 fe0a 	bl	8000658 <__aeabi_dmul>
 800da44:	460b      	mov	r3, r1
 800da46:	4604      	mov	r4, r0
 800da48:	460d      	mov	r5, r1
 800da4a:	4602      	mov	r2, r0
 800da4c:	4649      	mov	r1, r9
 800da4e:	4640      	mov	r0, r8
 800da50:	f7f2 fc4c 	bl	80002ec <__adddf3>
 800da54:	4b1d      	ldr	r3, [pc, #116]	; (800dacc <__ieee754_pow+0x3dc>)
 800da56:	4299      	cmp	r1, r3
 800da58:	ec45 4b19 	vmov	d9, r4, r5
 800da5c:	4606      	mov	r6, r0
 800da5e:	460f      	mov	r7, r1
 800da60:	468b      	mov	fp, r1
 800da62:	f340 82fe 	ble.w	800e062 <__ieee754_pow+0x972>
 800da66:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800da6a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800da6e:	4303      	orrs	r3, r0
 800da70:	f000 81f0 	beq.w	800de54 <__ieee754_pow+0x764>
 800da74:	a310      	add	r3, pc, #64	; (adr r3, 800dab8 <__ieee754_pow+0x3c8>)
 800da76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da7a:	ec51 0b18 	vmov	r0, r1, d8
 800da7e:	f7f2 fdeb 	bl	8000658 <__aeabi_dmul>
 800da82:	a30d      	add	r3, pc, #52	; (adr r3, 800dab8 <__ieee754_pow+0x3c8>)
 800da84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da88:	e6cb      	b.n	800d822 <__ieee754_pow+0x132>
 800da8a:	bf00      	nop
 800da8c:	f3af 8000 	nop.w
 800da90:	60000000 	.word	0x60000000
 800da94:	3ff71547 	.word	0x3ff71547
 800da98:	f85ddf44 	.word	0xf85ddf44
 800da9c:	3e54ae0b 	.word	0x3e54ae0b
 800daa0:	55555555 	.word	0x55555555
 800daa4:	3fd55555 	.word	0x3fd55555
 800daa8:	652b82fe 	.word	0x652b82fe
 800daac:	3ff71547 	.word	0x3ff71547
 800dab0:	00000000 	.word	0x00000000
 800dab4:	bff00000 	.word	0xbff00000
 800dab8:	8800759c 	.word	0x8800759c
 800dabc:	7e37e43c 	.word	0x7e37e43c
 800dac0:	3ff00000 	.word	0x3ff00000
 800dac4:	3fd00000 	.word	0x3fd00000
 800dac8:	3fe00000 	.word	0x3fe00000
 800dacc:	408fffff 	.word	0x408fffff
 800dad0:	4bd7      	ldr	r3, [pc, #860]	; (800de30 <__ieee754_pow+0x740>)
 800dad2:	ea03 0309 	and.w	r3, r3, r9
 800dad6:	2200      	movs	r2, #0
 800dad8:	b92b      	cbnz	r3, 800dae6 <__ieee754_pow+0x3f6>
 800dada:	4bd6      	ldr	r3, [pc, #856]	; (800de34 <__ieee754_pow+0x744>)
 800dadc:	f7f2 fdbc 	bl	8000658 <__aeabi_dmul>
 800dae0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800dae4:	460c      	mov	r4, r1
 800dae6:	1523      	asrs	r3, r4, #20
 800dae8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800daec:	4413      	add	r3, r2
 800daee:	9309      	str	r3, [sp, #36]	; 0x24
 800daf0:	4bd1      	ldr	r3, [pc, #836]	; (800de38 <__ieee754_pow+0x748>)
 800daf2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800daf6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800dafa:	429c      	cmp	r4, r3
 800dafc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800db00:	dd08      	ble.n	800db14 <__ieee754_pow+0x424>
 800db02:	4bce      	ldr	r3, [pc, #824]	; (800de3c <__ieee754_pow+0x74c>)
 800db04:	429c      	cmp	r4, r3
 800db06:	f340 8163 	ble.w	800ddd0 <__ieee754_pow+0x6e0>
 800db0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db0c:	3301      	adds	r3, #1
 800db0e:	9309      	str	r3, [sp, #36]	; 0x24
 800db10:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800db14:	2400      	movs	r4, #0
 800db16:	00e3      	lsls	r3, r4, #3
 800db18:	930b      	str	r3, [sp, #44]	; 0x2c
 800db1a:	4bc9      	ldr	r3, [pc, #804]	; (800de40 <__ieee754_pow+0x750>)
 800db1c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800db20:	ed93 7b00 	vldr	d7, [r3]
 800db24:	4629      	mov	r1, r5
 800db26:	ec53 2b17 	vmov	r2, r3, d7
 800db2a:	eeb0 8a47 	vmov.f32	s16, s14
 800db2e:	eef0 8a67 	vmov.f32	s17, s15
 800db32:	4682      	mov	sl, r0
 800db34:	f7f2 fbd8 	bl	80002e8 <__aeabi_dsub>
 800db38:	4652      	mov	r2, sl
 800db3a:	4606      	mov	r6, r0
 800db3c:	460f      	mov	r7, r1
 800db3e:	462b      	mov	r3, r5
 800db40:	ec51 0b18 	vmov	r0, r1, d8
 800db44:	f7f2 fbd2 	bl	80002ec <__adddf3>
 800db48:	4602      	mov	r2, r0
 800db4a:	460b      	mov	r3, r1
 800db4c:	2000      	movs	r0, #0
 800db4e:	49bd      	ldr	r1, [pc, #756]	; (800de44 <__ieee754_pow+0x754>)
 800db50:	f7f2 feac 	bl	80008ac <__aeabi_ddiv>
 800db54:	ec41 0b19 	vmov	d9, r0, r1
 800db58:	4602      	mov	r2, r0
 800db5a:	460b      	mov	r3, r1
 800db5c:	4630      	mov	r0, r6
 800db5e:	4639      	mov	r1, r7
 800db60:	f7f2 fd7a 	bl	8000658 <__aeabi_dmul>
 800db64:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800db68:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800db6c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800db70:	2300      	movs	r3, #0
 800db72:	9304      	str	r3, [sp, #16]
 800db74:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800db78:	46ab      	mov	fp, r5
 800db7a:	106d      	asrs	r5, r5, #1
 800db7c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800db80:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800db84:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800db88:	2200      	movs	r2, #0
 800db8a:	4640      	mov	r0, r8
 800db8c:	4649      	mov	r1, r9
 800db8e:	4614      	mov	r4, r2
 800db90:	461d      	mov	r5, r3
 800db92:	f7f2 fd61 	bl	8000658 <__aeabi_dmul>
 800db96:	4602      	mov	r2, r0
 800db98:	460b      	mov	r3, r1
 800db9a:	4630      	mov	r0, r6
 800db9c:	4639      	mov	r1, r7
 800db9e:	f7f2 fba3 	bl	80002e8 <__aeabi_dsub>
 800dba2:	ec53 2b18 	vmov	r2, r3, d8
 800dba6:	4606      	mov	r6, r0
 800dba8:	460f      	mov	r7, r1
 800dbaa:	4620      	mov	r0, r4
 800dbac:	4629      	mov	r1, r5
 800dbae:	f7f2 fb9b 	bl	80002e8 <__aeabi_dsub>
 800dbb2:	4602      	mov	r2, r0
 800dbb4:	460b      	mov	r3, r1
 800dbb6:	4650      	mov	r0, sl
 800dbb8:	4659      	mov	r1, fp
 800dbba:	f7f2 fb95 	bl	80002e8 <__aeabi_dsub>
 800dbbe:	4642      	mov	r2, r8
 800dbc0:	464b      	mov	r3, r9
 800dbc2:	f7f2 fd49 	bl	8000658 <__aeabi_dmul>
 800dbc6:	4602      	mov	r2, r0
 800dbc8:	460b      	mov	r3, r1
 800dbca:	4630      	mov	r0, r6
 800dbcc:	4639      	mov	r1, r7
 800dbce:	f7f2 fb8b 	bl	80002e8 <__aeabi_dsub>
 800dbd2:	ec53 2b19 	vmov	r2, r3, d9
 800dbd6:	f7f2 fd3f 	bl	8000658 <__aeabi_dmul>
 800dbda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dbde:	ec41 0b18 	vmov	d8, r0, r1
 800dbe2:	4610      	mov	r0, r2
 800dbe4:	4619      	mov	r1, r3
 800dbe6:	f7f2 fd37 	bl	8000658 <__aeabi_dmul>
 800dbea:	a37d      	add	r3, pc, #500	; (adr r3, 800dde0 <__ieee754_pow+0x6f0>)
 800dbec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbf0:	4604      	mov	r4, r0
 800dbf2:	460d      	mov	r5, r1
 800dbf4:	f7f2 fd30 	bl	8000658 <__aeabi_dmul>
 800dbf8:	a37b      	add	r3, pc, #492	; (adr r3, 800dde8 <__ieee754_pow+0x6f8>)
 800dbfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbfe:	f7f2 fb75 	bl	80002ec <__adddf3>
 800dc02:	4622      	mov	r2, r4
 800dc04:	462b      	mov	r3, r5
 800dc06:	f7f2 fd27 	bl	8000658 <__aeabi_dmul>
 800dc0a:	a379      	add	r3, pc, #484	; (adr r3, 800ddf0 <__ieee754_pow+0x700>)
 800dc0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc10:	f7f2 fb6c 	bl	80002ec <__adddf3>
 800dc14:	4622      	mov	r2, r4
 800dc16:	462b      	mov	r3, r5
 800dc18:	f7f2 fd1e 	bl	8000658 <__aeabi_dmul>
 800dc1c:	a376      	add	r3, pc, #472	; (adr r3, 800ddf8 <__ieee754_pow+0x708>)
 800dc1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc22:	f7f2 fb63 	bl	80002ec <__adddf3>
 800dc26:	4622      	mov	r2, r4
 800dc28:	462b      	mov	r3, r5
 800dc2a:	f7f2 fd15 	bl	8000658 <__aeabi_dmul>
 800dc2e:	a374      	add	r3, pc, #464	; (adr r3, 800de00 <__ieee754_pow+0x710>)
 800dc30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc34:	f7f2 fb5a 	bl	80002ec <__adddf3>
 800dc38:	4622      	mov	r2, r4
 800dc3a:	462b      	mov	r3, r5
 800dc3c:	f7f2 fd0c 	bl	8000658 <__aeabi_dmul>
 800dc40:	a371      	add	r3, pc, #452	; (adr r3, 800de08 <__ieee754_pow+0x718>)
 800dc42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc46:	f7f2 fb51 	bl	80002ec <__adddf3>
 800dc4a:	4622      	mov	r2, r4
 800dc4c:	4606      	mov	r6, r0
 800dc4e:	460f      	mov	r7, r1
 800dc50:	462b      	mov	r3, r5
 800dc52:	4620      	mov	r0, r4
 800dc54:	4629      	mov	r1, r5
 800dc56:	f7f2 fcff 	bl	8000658 <__aeabi_dmul>
 800dc5a:	4602      	mov	r2, r0
 800dc5c:	460b      	mov	r3, r1
 800dc5e:	4630      	mov	r0, r6
 800dc60:	4639      	mov	r1, r7
 800dc62:	f7f2 fcf9 	bl	8000658 <__aeabi_dmul>
 800dc66:	4642      	mov	r2, r8
 800dc68:	4604      	mov	r4, r0
 800dc6a:	460d      	mov	r5, r1
 800dc6c:	464b      	mov	r3, r9
 800dc6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dc72:	f7f2 fb3b 	bl	80002ec <__adddf3>
 800dc76:	ec53 2b18 	vmov	r2, r3, d8
 800dc7a:	f7f2 fced 	bl	8000658 <__aeabi_dmul>
 800dc7e:	4622      	mov	r2, r4
 800dc80:	462b      	mov	r3, r5
 800dc82:	f7f2 fb33 	bl	80002ec <__adddf3>
 800dc86:	4642      	mov	r2, r8
 800dc88:	4682      	mov	sl, r0
 800dc8a:	468b      	mov	fp, r1
 800dc8c:	464b      	mov	r3, r9
 800dc8e:	4640      	mov	r0, r8
 800dc90:	4649      	mov	r1, r9
 800dc92:	f7f2 fce1 	bl	8000658 <__aeabi_dmul>
 800dc96:	4b6c      	ldr	r3, [pc, #432]	; (800de48 <__ieee754_pow+0x758>)
 800dc98:	2200      	movs	r2, #0
 800dc9a:	4606      	mov	r6, r0
 800dc9c:	460f      	mov	r7, r1
 800dc9e:	f7f2 fb25 	bl	80002ec <__adddf3>
 800dca2:	4652      	mov	r2, sl
 800dca4:	465b      	mov	r3, fp
 800dca6:	f7f2 fb21 	bl	80002ec <__adddf3>
 800dcaa:	9c04      	ldr	r4, [sp, #16]
 800dcac:	460d      	mov	r5, r1
 800dcae:	4622      	mov	r2, r4
 800dcb0:	460b      	mov	r3, r1
 800dcb2:	4640      	mov	r0, r8
 800dcb4:	4649      	mov	r1, r9
 800dcb6:	f7f2 fccf 	bl	8000658 <__aeabi_dmul>
 800dcba:	4b63      	ldr	r3, [pc, #396]	; (800de48 <__ieee754_pow+0x758>)
 800dcbc:	4680      	mov	r8, r0
 800dcbe:	4689      	mov	r9, r1
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	4620      	mov	r0, r4
 800dcc4:	4629      	mov	r1, r5
 800dcc6:	f7f2 fb0f 	bl	80002e8 <__aeabi_dsub>
 800dcca:	4632      	mov	r2, r6
 800dccc:	463b      	mov	r3, r7
 800dcce:	f7f2 fb0b 	bl	80002e8 <__aeabi_dsub>
 800dcd2:	4602      	mov	r2, r0
 800dcd4:	460b      	mov	r3, r1
 800dcd6:	4650      	mov	r0, sl
 800dcd8:	4659      	mov	r1, fp
 800dcda:	f7f2 fb05 	bl	80002e8 <__aeabi_dsub>
 800dcde:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dce2:	f7f2 fcb9 	bl	8000658 <__aeabi_dmul>
 800dce6:	4622      	mov	r2, r4
 800dce8:	4606      	mov	r6, r0
 800dcea:	460f      	mov	r7, r1
 800dcec:	462b      	mov	r3, r5
 800dcee:	ec51 0b18 	vmov	r0, r1, d8
 800dcf2:	f7f2 fcb1 	bl	8000658 <__aeabi_dmul>
 800dcf6:	4602      	mov	r2, r0
 800dcf8:	460b      	mov	r3, r1
 800dcfa:	4630      	mov	r0, r6
 800dcfc:	4639      	mov	r1, r7
 800dcfe:	f7f2 faf5 	bl	80002ec <__adddf3>
 800dd02:	4606      	mov	r6, r0
 800dd04:	460f      	mov	r7, r1
 800dd06:	4602      	mov	r2, r0
 800dd08:	460b      	mov	r3, r1
 800dd0a:	4640      	mov	r0, r8
 800dd0c:	4649      	mov	r1, r9
 800dd0e:	f7f2 faed 	bl	80002ec <__adddf3>
 800dd12:	9c04      	ldr	r4, [sp, #16]
 800dd14:	a33e      	add	r3, pc, #248	; (adr r3, 800de10 <__ieee754_pow+0x720>)
 800dd16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd1a:	4620      	mov	r0, r4
 800dd1c:	460d      	mov	r5, r1
 800dd1e:	f7f2 fc9b 	bl	8000658 <__aeabi_dmul>
 800dd22:	4642      	mov	r2, r8
 800dd24:	ec41 0b18 	vmov	d8, r0, r1
 800dd28:	464b      	mov	r3, r9
 800dd2a:	4620      	mov	r0, r4
 800dd2c:	4629      	mov	r1, r5
 800dd2e:	f7f2 fadb 	bl	80002e8 <__aeabi_dsub>
 800dd32:	4602      	mov	r2, r0
 800dd34:	460b      	mov	r3, r1
 800dd36:	4630      	mov	r0, r6
 800dd38:	4639      	mov	r1, r7
 800dd3a:	f7f2 fad5 	bl	80002e8 <__aeabi_dsub>
 800dd3e:	a336      	add	r3, pc, #216	; (adr r3, 800de18 <__ieee754_pow+0x728>)
 800dd40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd44:	f7f2 fc88 	bl	8000658 <__aeabi_dmul>
 800dd48:	a335      	add	r3, pc, #212	; (adr r3, 800de20 <__ieee754_pow+0x730>)
 800dd4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd4e:	4606      	mov	r6, r0
 800dd50:	460f      	mov	r7, r1
 800dd52:	4620      	mov	r0, r4
 800dd54:	4629      	mov	r1, r5
 800dd56:	f7f2 fc7f 	bl	8000658 <__aeabi_dmul>
 800dd5a:	4602      	mov	r2, r0
 800dd5c:	460b      	mov	r3, r1
 800dd5e:	4630      	mov	r0, r6
 800dd60:	4639      	mov	r1, r7
 800dd62:	f7f2 fac3 	bl	80002ec <__adddf3>
 800dd66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dd68:	4b38      	ldr	r3, [pc, #224]	; (800de4c <__ieee754_pow+0x75c>)
 800dd6a:	4413      	add	r3, r2
 800dd6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd70:	f7f2 fabc 	bl	80002ec <__adddf3>
 800dd74:	4682      	mov	sl, r0
 800dd76:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dd78:	468b      	mov	fp, r1
 800dd7a:	f7f2 fc03 	bl	8000584 <__aeabi_i2d>
 800dd7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dd80:	4b33      	ldr	r3, [pc, #204]	; (800de50 <__ieee754_pow+0x760>)
 800dd82:	4413      	add	r3, r2
 800dd84:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dd88:	4606      	mov	r6, r0
 800dd8a:	460f      	mov	r7, r1
 800dd8c:	4652      	mov	r2, sl
 800dd8e:	465b      	mov	r3, fp
 800dd90:	ec51 0b18 	vmov	r0, r1, d8
 800dd94:	f7f2 faaa 	bl	80002ec <__adddf3>
 800dd98:	4642      	mov	r2, r8
 800dd9a:	464b      	mov	r3, r9
 800dd9c:	f7f2 faa6 	bl	80002ec <__adddf3>
 800dda0:	4632      	mov	r2, r6
 800dda2:	463b      	mov	r3, r7
 800dda4:	f7f2 faa2 	bl	80002ec <__adddf3>
 800dda8:	9c04      	ldr	r4, [sp, #16]
 800ddaa:	4632      	mov	r2, r6
 800ddac:	463b      	mov	r3, r7
 800ddae:	4620      	mov	r0, r4
 800ddb0:	460d      	mov	r5, r1
 800ddb2:	f7f2 fa99 	bl	80002e8 <__aeabi_dsub>
 800ddb6:	4642      	mov	r2, r8
 800ddb8:	464b      	mov	r3, r9
 800ddba:	f7f2 fa95 	bl	80002e8 <__aeabi_dsub>
 800ddbe:	ec53 2b18 	vmov	r2, r3, d8
 800ddc2:	f7f2 fa91 	bl	80002e8 <__aeabi_dsub>
 800ddc6:	4602      	mov	r2, r0
 800ddc8:	460b      	mov	r3, r1
 800ddca:	4650      	mov	r0, sl
 800ddcc:	4659      	mov	r1, fp
 800ddce:	e606      	b.n	800d9de <__ieee754_pow+0x2ee>
 800ddd0:	2401      	movs	r4, #1
 800ddd2:	e6a0      	b.n	800db16 <__ieee754_pow+0x426>
 800ddd4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800de28 <__ieee754_pow+0x738>
 800ddd8:	e60d      	b.n	800d9f6 <__ieee754_pow+0x306>
 800ddda:	bf00      	nop
 800dddc:	f3af 8000 	nop.w
 800dde0:	4a454eef 	.word	0x4a454eef
 800dde4:	3fca7e28 	.word	0x3fca7e28
 800dde8:	93c9db65 	.word	0x93c9db65
 800ddec:	3fcd864a 	.word	0x3fcd864a
 800ddf0:	a91d4101 	.word	0xa91d4101
 800ddf4:	3fd17460 	.word	0x3fd17460
 800ddf8:	518f264d 	.word	0x518f264d
 800ddfc:	3fd55555 	.word	0x3fd55555
 800de00:	db6fabff 	.word	0xdb6fabff
 800de04:	3fdb6db6 	.word	0x3fdb6db6
 800de08:	33333303 	.word	0x33333303
 800de0c:	3fe33333 	.word	0x3fe33333
 800de10:	e0000000 	.word	0xe0000000
 800de14:	3feec709 	.word	0x3feec709
 800de18:	dc3a03fd 	.word	0xdc3a03fd
 800de1c:	3feec709 	.word	0x3feec709
 800de20:	145b01f5 	.word	0x145b01f5
 800de24:	be3e2fe0 	.word	0xbe3e2fe0
 800de28:	00000000 	.word	0x00000000
 800de2c:	3ff00000 	.word	0x3ff00000
 800de30:	7ff00000 	.word	0x7ff00000
 800de34:	43400000 	.word	0x43400000
 800de38:	0003988e 	.word	0x0003988e
 800de3c:	000bb679 	.word	0x000bb679
 800de40:	080161b0 	.word	0x080161b0
 800de44:	3ff00000 	.word	0x3ff00000
 800de48:	40080000 	.word	0x40080000
 800de4c:	080161d0 	.word	0x080161d0
 800de50:	080161c0 	.word	0x080161c0
 800de54:	a3b5      	add	r3, pc, #724	; (adr r3, 800e12c <__ieee754_pow+0xa3c>)
 800de56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de5a:	4640      	mov	r0, r8
 800de5c:	4649      	mov	r1, r9
 800de5e:	f7f2 fa45 	bl	80002ec <__adddf3>
 800de62:	4622      	mov	r2, r4
 800de64:	ec41 0b1a 	vmov	d10, r0, r1
 800de68:	462b      	mov	r3, r5
 800de6a:	4630      	mov	r0, r6
 800de6c:	4639      	mov	r1, r7
 800de6e:	f7f2 fa3b 	bl	80002e8 <__aeabi_dsub>
 800de72:	4602      	mov	r2, r0
 800de74:	460b      	mov	r3, r1
 800de76:	ec51 0b1a 	vmov	r0, r1, d10
 800de7a:	f7f2 fe7d 	bl	8000b78 <__aeabi_dcmpgt>
 800de7e:	2800      	cmp	r0, #0
 800de80:	f47f adf8 	bne.w	800da74 <__ieee754_pow+0x384>
 800de84:	4aa4      	ldr	r2, [pc, #656]	; (800e118 <__ieee754_pow+0xa28>)
 800de86:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800de8a:	4293      	cmp	r3, r2
 800de8c:	f340 810b 	ble.w	800e0a6 <__ieee754_pow+0x9b6>
 800de90:	151b      	asrs	r3, r3, #20
 800de92:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800de96:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800de9a:	fa4a f303 	asr.w	r3, sl, r3
 800de9e:	445b      	add	r3, fp
 800dea0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800dea4:	4e9d      	ldr	r6, [pc, #628]	; (800e11c <__ieee754_pow+0xa2c>)
 800dea6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800deaa:	4116      	asrs	r6, r2
 800deac:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800deb0:	2000      	movs	r0, #0
 800deb2:	ea23 0106 	bic.w	r1, r3, r6
 800deb6:	f1c2 0214 	rsb	r2, r2, #20
 800deba:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800debe:	fa4a fa02 	asr.w	sl, sl, r2
 800dec2:	f1bb 0f00 	cmp.w	fp, #0
 800dec6:	4602      	mov	r2, r0
 800dec8:	460b      	mov	r3, r1
 800deca:	4620      	mov	r0, r4
 800decc:	4629      	mov	r1, r5
 800dece:	bfb8      	it	lt
 800ded0:	f1ca 0a00 	rsblt	sl, sl, #0
 800ded4:	f7f2 fa08 	bl	80002e8 <__aeabi_dsub>
 800ded8:	ec41 0b19 	vmov	d9, r0, r1
 800dedc:	4642      	mov	r2, r8
 800dede:	464b      	mov	r3, r9
 800dee0:	ec51 0b19 	vmov	r0, r1, d9
 800dee4:	f7f2 fa02 	bl	80002ec <__adddf3>
 800dee8:	2400      	movs	r4, #0
 800deea:	a379      	add	r3, pc, #484	; (adr r3, 800e0d0 <__ieee754_pow+0x9e0>)
 800deec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800def0:	4620      	mov	r0, r4
 800def2:	460d      	mov	r5, r1
 800def4:	f7f2 fbb0 	bl	8000658 <__aeabi_dmul>
 800def8:	ec53 2b19 	vmov	r2, r3, d9
 800defc:	4606      	mov	r6, r0
 800defe:	460f      	mov	r7, r1
 800df00:	4620      	mov	r0, r4
 800df02:	4629      	mov	r1, r5
 800df04:	f7f2 f9f0 	bl	80002e8 <__aeabi_dsub>
 800df08:	4602      	mov	r2, r0
 800df0a:	460b      	mov	r3, r1
 800df0c:	4640      	mov	r0, r8
 800df0e:	4649      	mov	r1, r9
 800df10:	f7f2 f9ea 	bl	80002e8 <__aeabi_dsub>
 800df14:	a370      	add	r3, pc, #448	; (adr r3, 800e0d8 <__ieee754_pow+0x9e8>)
 800df16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df1a:	f7f2 fb9d 	bl	8000658 <__aeabi_dmul>
 800df1e:	a370      	add	r3, pc, #448	; (adr r3, 800e0e0 <__ieee754_pow+0x9f0>)
 800df20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df24:	4680      	mov	r8, r0
 800df26:	4689      	mov	r9, r1
 800df28:	4620      	mov	r0, r4
 800df2a:	4629      	mov	r1, r5
 800df2c:	f7f2 fb94 	bl	8000658 <__aeabi_dmul>
 800df30:	4602      	mov	r2, r0
 800df32:	460b      	mov	r3, r1
 800df34:	4640      	mov	r0, r8
 800df36:	4649      	mov	r1, r9
 800df38:	f7f2 f9d8 	bl	80002ec <__adddf3>
 800df3c:	4604      	mov	r4, r0
 800df3e:	460d      	mov	r5, r1
 800df40:	4602      	mov	r2, r0
 800df42:	460b      	mov	r3, r1
 800df44:	4630      	mov	r0, r6
 800df46:	4639      	mov	r1, r7
 800df48:	f7f2 f9d0 	bl	80002ec <__adddf3>
 800df4c:	4632      	mov	r2, r6
 800df4e:	463b      	mov	r3, r7
 800df50:	4680      	mov	r8, r0
 800df52:	4689      	mov	r9, r1
 800df54:	f7f2 f9c8 	bl	80002e8 <__aeabi_dsub>
 800df58:	4602      	mov	r2, r0
 800df5a:	460b      	mov	r3, r1
 800df5c:	4620      	mov	r0, r4
 800df5e:	4629      	mov	r1, r5
 800df60:	f7f2 f9c2 	bl	80002e8 <__aeabi_dsub>
 800df64:	4642      	mov	r2, r8
 800df66:	4606      	mov	r6, r0
 800df68:	460f      	mov	r7, r1
 800df6a:	464b      	mov	r3, r9
 800df6c:	4640      	mov	r0, r8
 800df6e:	4649      	mov	r1, r9
 800df70:	f7f2 fb72 	bl	8000658 <__aeabi_dmul>
 800df74:	a35c      	add	r3, pc, #368	; (adr r3, 800e0e8 <__ieee754_pow+0x9f8>)
 800df76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df7a:	4604      	mov	r4, r0
 800df7c:	460d      	mov	r5, r1
 800df7e:	f7f2 fb6b 	bl	8000658 <__aeabi_dmul>
 800df82:	a35b      	add	r3, pc, #364	; (adr r3, 800e0f0 <__ieee754_pow+0xa00>)
 800df84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df88:	f7f2 f9ae 	bl	80002e8 <__aeabi_dsub>
 800df8c:	4622      	mov	r2, r4
 800df8e:	462b      	mov	r3, r5
 800df90:	f7f2 fb62 	bl	8000658 <__aeabi_dmul>
 800df94:	a358      	add	r3, pc, #352	; (adr r3, 800e0f8 <__ieee754_pow+0xa08>)
 800df96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df9a:	f7f2 f9a7 	bl	80002ec <__adddf3>
 800df9e:	4622      	mov	r2, r4
 800dfa0:	462b      	mov	r3, r5
 800dfa2:	f7f2 fb59 	bl	8000658 <__aeabi_dmul>
 800dfa6:	a356      	add	r3, pc, #344	; (adr r3, 800e100 <__ieee754_pow+0xa10>)
 800dfa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfac:	f7f2 f99c 	bl	80002e8 <__aeabi_dsub>
 800dfb0:	4622      	mov	r2, r4
 800dfb2:	462b      	mov	r3, r5
 800dfb4:	f7f2 fb50 	bl	8000658 <__aeabi_dmul>
 800dfb8:	a353      	add	r3, pc, #332	; (adr r3, 800e108 <__ieee754_pow+0xa18>)
 800dfba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfbe:	f7f2 f995 	bl	80002ec <__adddf3>
 800dfc2:	4622      	mov	r2, r4
 800dfc4:	462b      	mov	r3, r5
 800dfc6:	f7f2 fb47 	bl	8000658 <__aeabi_dmul>
 800dfca:	4602      	mov	r2, r0
 800dfcc:	460b      	mov	r3, r1
 800dfce:	4640      	mov	r0, r8
 800dfd0:	4649      	mov	r1, r9
 800dfd2:	f7f2 f989 	bl	80002e8 <__aeabi_dsub>
 800dfd6:	4604      	mov	r4, r0
 800dfd8:	460d      	mov	r5, r1
 800dfda:	4602      	mov	r2, r0
 800dfdc:	460b      	mov	r3, r1
 800dfde:	4640      	mov	r0, r8
 800dfe0:	4649      	mov	r1, r9
 800dfe2:	f7f2 fb39 	bl	8000658 <__aeabi_dmul>
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	ec41 0b19 	vmov	d9, r0, r1
 800dfec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dff0:	4620      	mov	r0, r4
 800dff2:	4629      	mov	r1, r5
 800dff4:	f7f2 f978 	bl	80002e8 <__aeabi_dsub>
 800dff8:	4602      	mov	r2, r0
 800dffa:	460b      	mov	r3, r1
 800dffc:	ec51 0b19 	vmov	r0, r1, d9
 800e000:	f7f2 fc54 	bl	80008ac <__aeabi_ddiv>
 800e004:	4632      	mov	r2, r6
 800e006:	4604      	mov	r4, r0
 800e008:	460d      	mov	r5, r1
 800e00a:	463b      	mov	r3, r7
 800e00c:	4640      	mov	r0, r8
 800e00e:	4649      	mov	r1, r9
 800e010:	f7f2 fb22 	bl	8000658 <__aeabi_dmul>
 800e014:	4632      	mov	r2, r6
 800e016:	463b      	mov	r3, r7
 800e018:	f7f2 f968 	bl	80002ec <__adddf3>
 800e01c:	4602      	mov	r2, r0
 800e01e:	460b      	mov	r3, r1
 800e020:	4620      	mov	r0, r4
 800e022:	4629      	mov	r1, r5
 800e024:	f7f2 f960 	bl	80002e8 <__aeabi_dsub>
 800e028:	4642      	mov	r2, r8
 800e02a:	464b      	mov	r3, r9
 800e02c:	f7f2 f95c 	bl	80002e8 <__aeabi_dsub>
 800e030:	460b      	mov	r3, r1
 800e032:	4602      	mov	r2, r0
 800e034:	493a      	ldr	r1, [pc, #232]	; (800e120 <__ieee754_pow+0xa30>)
 800e036:	2000      	movs	r0, #0
 800e038:	f7f2 f956 	bl	80002e8 <__aeabi_dsub>
 800e03c:	e9cd 0100 	strd	r0, r1, [sp]
 800e040:	9b01      	ldr	r3, [sp, #4]
 800e042:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800e046:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e04a:	da2f      	bge.n	800e0ac <__ieee754_pow+0x9bc>
 800e04c:	4650      	mov	r0, sl
 800e04e:	ed9d 0b00 	vldr	d0, [sp]
 800e052:	f000 fbe9 	bl	800e828 <scalbn>
 800e056:	ec51 0b10 	vmov	r0, r1, d0
 800e05a:	ec53 2b18 	vmov	r2, r3, d8
 800e05e:	f7ff bbe0 	b.w	800d822 <__ieee754_pow+0x132>
 800e062:	4b30      	ldr	r3, [pc, #192]	; (800e124 <__ieee754_pow+0xa34>)
 800e064:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e068:	429e      	cmp	r6, r3
 800e06a:	f77f af0b 	ble.w	800de84 <__ieee754_pow+0x794>
 800e06e:	4b2e      	ldr	r3, [pc, #184]	; (800e128 <__ieee754_pow+0xa38>)
 800e070:	440b      	add	r3, r1
 800e072:	4303      	orrs	r3, r0
 800e074:	d00b      	beq.n	800e08e <__ieee754_pow+0x99e>
 800e076:	a326      	add	r3, pc, #152	; (adr r3, 800e110 <__ieee754_pow+0xa20>)
 800e078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e07c:	ec51 0b18 	vmov	r0, r1, d8
 800e080:	f7f2 faea 	bl	8000658 <__aeabi_dmul>
 800e084:	a322      	add	r3, pc, #136	; (adr r3, 800e110 <__ieee754_pow+0xa20>)
 800e086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e08a:	f7ff bbca 	b.w	800d822 <__ieee754_pow+0x132>
 800e08e:	4622      	mov	r2, r4
 800e090:	462b      	mov	r3, r5
 800e092:	f7f2 f929 	bl	80002e8 <__aeabi_dsub>
 800e096:	4642      	mov	r2, r8
 800e098:	464b      	mov	r3, r9
 800e09a:	f7f2 fd63 	bl	8000b64 <__aeabi_dcmpge>
 800e09e:	2800      	cmp	r0, #0
 800e0a0:	f43f aef0 	beq.w	800de84 <__ieee754_pow+0x794>
 800e0a4:	e7e7      	b.n	800e076 <__ieee754_pow+0x986>
 800e0a6:	f04f 0a00 	mov.w	sl, #0
 800e0aa:	e717      	b.n	800dedc <__ieee754_pow+0x7ec>
 800e0ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e0b0:	4619      	mov	r1, r3
 800e0b2:	e7d2      	b.n	800e05a <__ieee754_pow+0x96a>
 800e0b4:	491a      	ldr	r1, [pc, #104]	; (800e120 <__ieee754_pow+0xa30>)
 800e0b6:	2000      	movs	r0, #0
 800e0b8:	f7ff bb9e 	b.w	800d7f8 <__ieee754_pow+0x108>
 800e0bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e0c0:	f7ff bb9a 	b.w	800d7f8 <__ieee754_pow+0x108>
 800e0c4:	9000      	str	r0, [sp, #0]
 800e0c6:	f7ff bb76 	b.w	800d7b6 <__ieee754_pow+0xc6>
 800e0ca:	2100      	movs	r1, #0
 800e0cc:	f7ff bb60 	b.w	800d790 <__ieee754_pow+0xa0>
 800e0d0:	00000000 	.word	0x00000000
 800e0d4:	3fe62e43 	.word	0x3fe62e43
 800e0d8:	fefa39ef 	.word	0xfefa39ef
 800e0dc:	3fe62e42 	.word	0x3fe62e42
 800e0e0:	0ca86c39 	.word	0x0ca86c39
 800e0e4:	be205c61 	.word	0xbe205c61
 800e0e8:	72bea4d0 	.word	0x72bea4d0
 800e0ec:	3e663769 	.word	0x3e663769
 800e0f0:	c5d26bf1 	.word	0xc5d26bf1
 800e0f4:	3ebbbd41 	.word	0x3ebbbd41
 800e0f8:	af25de2c 	.word	0xaf25de2c
 800e0fc:	3f11566a 	.word	0x3f11566a
 800e100:	16bebd93 	.word	0x16bebd93
 800e104:	3f66c16c 	.word	0x3f66c16c
 800e108:	5555553e 	.word	0x5555553e
 800e10c:	3fc55555 	.word	0x3fc55555
 800e110:	c2f8f359 	.word	0xc2f8f359
 800e114:	01a56e1f 	.word	0x01a56e1f
 800e118:	3fe00000 	.word	0x3fe00000
 800e11c:	000fffff 	.word	0x000fffff
 800e120:	3ff00000 	.word	0x3ff00000
 800e124:	4090cbff 	.word	0x4090cbff
 800e128:	3f6f3400 	.word	0x3f6f3400
 800e12c:	652b82fe 	.word	0x652b82fe
 800e130:	3c971547 	.word	0x3c971547

0800e134 <__ieee754_sqrt>:
 800e134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e138:	ec55 4b10 	vmov	r4, r5, d0
 800e13c:	4e56      	ldr	r6, [pc, #344]	; (800e298 <__ieee754_sqrt+0x164>)
 800e13e:	43ae      	bics	r6, r5
 800e140:	ee10 0a10 	vmov	r0, s0
 800e144:	ee10 3a10 	vmov	r3, s0
 800e148:	4629      	mov	r1, r5
 800e14a:	462a      	mov	r2, r5
 800e14c:	d110      	bne.n	800e170 <__ieee754_sqrt+0x3c>
 800e14e:	ee10 2a10 	vmov	r2, s0
 800e152:	462b      	mov	r3, r5
 800e154:	f7f2 fa80 	bl	8000658 <__aeabi_dmul>
 800e158:	4602      	mov	r2, r0
 800e15a:	460b      	mov	r3, r1
 800e15c:	4620      	mov	r0, r4
 800e15e:	4629      	mov	r1, r5
 800e160:	f7f2 f8c4 	bl	80002ec <__adddf3>
 800e164:	4604      	mov	r4, r0
 800e166:	460d      	mov	r5, r1
 800e168:	ec45 4b10 	vmov	d0, r4, r5
 800e16c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e170:	2d00      	cmp	r5, #0
 800e172:	dc10      	bgt.n	800e196 <__ieee754_sqrt+0x62>
 800e174:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e178:	4330      	orrs	r0, r6
 800e17a:	d0f5      	beq.n	800e168 <__ieee754_sqrt+0x34>
 800e17c:	b15d      	cbz	r5, 800e196 <__ieee754_sqrt+0x62>
 800e17e:	ee10 2a10 	vmov	r2, s0
 800e182:	462b      	mov	r3, r5
 800e184:	ee10 0a10 	vmov	r0, s0
 800e188:	f7f2 f8ae 	bl	80002e8 <__aeabi_dsub>
 800e18c:	4602      	mov	r2, r0
 800e18e:	460b      	mov	r3, r1
 800e190:	f7f2 fb8c 	bl	80008ac <__aeabi_ddiv>
 800e194:	e7e6      	b.n	800e164 <__ieee754_sqrt+0x30>
 800e196:	1509      	asrs	r1, r1, #20
 800e198:	d076      	beq.n	800e288 <__ieee754_sqrt+0x154>
 800e19a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800e19e:	07ce      	lsls	r6, r1, #31
 800e1a0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800e1a4:	bf5e      	ittt	pl
 800e1a6:	0fda      	lsrpl	r2, r3, #31
 800e1a8:	005b      	lslpl	r3, r3, #1
 800e1aa:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800e1ae:	0fda      	lsrs	r2, r3, #31
 800e1b0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800e1b4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800e1b8:	2000      	movs	r0, #0
 800e1ba:	106d      	asrs	r5, r5, #1
 800e1bc:	005b      	lsls	r3, r3, #1
 800e1be:	f04f 0e16 	mov.w	lr, #22
 800e1c2:	4684      	mov	ip, r0
 800e1c4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e1c8:	eb0c 0401 	add.w	r4, ip, r1
 800e1cc:	4294      	cmp	r4, r2
 800e1ce:	bfde      	ittt	le
 800e1d0:	1b12      	suble	r2, r2, r4
 800e1d2:	eb04 0c01 	addle.w	ip, r4, r1
 800e1d6:	1840      	addle	r0, r0, r1
 800e1d8:	0052      	lsls	r2, r2, #1
 800e1da:	f1be 0e01 	subs.w	lr, lr, #1
 800e1de:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800e1e2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800e1e6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e1ea:	d1ed      	bne.n	800e1c8 <__ieee754_sqrt+0x94>
 800e1ec:	4671      	mov	r1, lr
 800e1ee:	2720      	movs	r7, #32
 800e1f0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800e1f4:	4562      	cmp	r2, ip
 800e1f6:	eb04 060e 	add.w	r6, r4, lr
 800e1fa:	dc02      	bgt.n	800e202 <__ieee754_sqrt+0xce>
 800e1fc:	d113      	bne.n	800e226 <__ieee754_sqrt+0xf2>
 800e1fe:	429e      	cmp	r6, r3
 800e200:	d811      	bhi.n	800e226 <__ieee754_sqrt+0xf2>
 800e202:	2e00      	cmp	r6, #0
 800e204:	eb06 0e04 	add.w	lr, r6, r4
 800e208:	da43      	bge.n	800e292 <__ieee754_sqrt+0x15e>
 800e20a:	f1be 0f00 	cmp.w	lr, #0
 800e20e:	db40      	blt.n	800e292 <__ieee754_sqrt+0x15e>
 800e210:	f10c 0801 	add.w	r8, ip, #1
 800e214:	eba2 020c 	sub.w	r2, r2, ip
 800e218:	429e      	cmp	r6, r3
 800e21a:	bf88      	it	hi
 800e21c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800e220:	1b9b      	subs	r3, r3, r6
 800e222:	4421      	add	r1, r4
 800e224:	46c4      	mov	ip, r8
 800e226:	0052      	lsls	r2, r2, #1
 800e228:	3f01      	subs	r7, #1
 800e22a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800e22e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800e232:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e236:	d1dd      	bne.n	800e1f4 <__ieee754_sqrt+0xc0>
 800e238:	4313      	orrs	r3, r2
 800e23a:	d006      	beq.n	800e24a <__ieee754_sqrt+0x116>
 800e23c:	1c4c      	adds	r4, r1, #1
 800e23e:	bf13      	iteet	ne
 800e240:	3101      	addne	r1, #1
 800e242:	3001      	addeq	r0, #1
 800e244:	4639      	moveq	r1, r7
 800e246:	f021 0101 	bicne.w	r1, r1, #1
 800e24a:	1043      	asrs	r3, r0, #1
 800e24c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800e250:	0849      	lsrs	r1, r1, #1
 800e252:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e256:	07c2      	lsls	r2, r0, #31
 800e258:	bf48      	it	mi
 800e25a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800e25e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800e262:	460c      	mov	r4, r1
 800e264:	463d      	mov	r5, r7
 800e266:	e77f      	b.n	800e168 <__ieee754_sqrt+0x34>
 800e268:	0ada      	lsrs	r2, r3, #11
 800e26a:	3815      	subs	r0, #21
 800e26c:	055b      	lsls	r3, r3, #21
 800e26e:	2a00      	cmp	r2, #0
 800e270:	d0fa      	beq.n	800e268 <__ieee754_sqrt+0x134>
 800e272:	02d7      	lsls	r7, r2, #11
 800e274:	d50a      	bpl.n	800e28c <__ieee754_sqrt+0x158>
 800e276:	f1c1 0420 	rsb	r4, r1, #32
 800e27a:	fa23 f404 	lsr.w	r4, r3, r4
 800e27e:	1e4d      	subs	r5, r1, #1
 800e280:	408b      	lsls	r3, r1
 800e282:	4322      	orrs	r2, r4
 800e284:	1b41      	subs	r1, r0, r5
 800e286:	e788      	b.n	800e19a <__ieee754_sqrt+0x66>
 800e288:	4608      	mov	r0, r1
 800e28a:	e7f0      	b.n	800e26e <__ieee754_sqrt+0x13a>
 800e28c:	0052      	lsls	r2, r2, #1
 800e28e:	3101      	adds	r1, #1
 800e290:	e7ef      	b.n	800e272 <__ieee754_sqrt+0x13e>
 800e292:	46e0      	mov	r8, ip
 800e294:	e7be      	b.n	800e214 <__ieee754_sqrt+0xe0>
 800e296:	bf00      	nop
 800e298:	7ff00000 	.word	0x7ff00000

0800e29c <__ieee754_expf>:
 800e29c:	ee10 2a10 	vmov	r2, s0
 800e2a0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800e2a4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800e2a8:	d902      	bls.n	800e2b0 <__ieee754_expf+0x14>
 800e2aa:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e2ae:	4770      	bx	lr
 800e2b0:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800e2b4:	d106      	bne.n	800e2c4 <__ieee754_expf+0x28>
 800e2b6:	eddf 7a51 	vldr	s15, [pc, #324]	; 800e3fc <__ieee754_expf+0x160>
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	bf18      	it	ne
 800e2be:	eeb0 0a67 	vmovne.f32	s0, s15
 800e2c2:	4770      	bx	lr
 800e2c4:	484e      	ldr	r0, [pc, #312]	; (800e400 <__ieee754_expf+0x164>)
 800e2c6:	4282      	cmp	r2, r0
 800e2c8:	dd04      	ble.n	800e2d4 <__ieee754_expf+0x38>
 800e2ca:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 800e404 <__ieee754_expf+0x168>
 800e2ce:	ee20 0a00 	vmul.f32	s0, s0, s0
 800e2d2:	4770      	bx	lr
 800e2d4:	2a00      	cmp	r2, #0
 800e2d6:	da03      	bge.n	800e2e0 <__ieee754_expf+0x44>
 800e2d8:	4a4b      	ldr	r2, [pc, #300]	; (800e408 <__ieee754_expf+0x16c>)
 800e2da:	4291      	cmp	r1, r2
 800e2dc:	f200 808a 	bhi.w	800e3f4 <__ieee754_expf+0x158>
 800e2e0:	4a4a      	ldr	r2, [pc, #296]	; (800e40c <__ieee754_expf+0x170>)
 800e2e2:	4291      	cmp	r1, r2
 800e2e4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800e2e8:	d954      	bls.n	800e394 <__ieee754_expf+0xf8>
 800e2ea:	4a49      	ldr	r2, [pc, #292]	; (800e410 <__ieee754_expf+0x174>)
 800e2ec:	4291      	cmp	r1, r2
 800e2ee:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800e2f2:	d836      	bhi.n	800e362 <__ieee754_expf+0xc6>
 800e2f4:	4947      	ldr	r1, [pc, #284]	; (800e414 <__ieee754_expf+0x178>)
 800e2f6:	4411      	add	r1, r2
 800e2f8:	ed91 7a00 	vldr	s14, [r1]
 800e2fc:	4946      	ldr	r1, [pc, #280]	; (800e418 <__ieee754_expf+0x17c>)
 800e2fe:	440a      	add	r2, r1
 800e300:	edd2 7a00 	vldr	s15, [r2]
 800e304:	ee30 7a47 	vsub.f32	s14, s0, s14
 800e308:	f1c3 0201 	rsb	r2, r3, #1
 800e30c:	1ad2      	subs	r2, r2, r3
 800e30e:	ee37 0a67 	vsub.f32	s0, s14, s15
 800e312:	ee60 6a00 	vmul.f32	s13, s0, s0
 800e316:	eddf 5a41 	vldr	s11, [pc, #260]	; 800e41c <__ieee754_expf+0x180>
 800e31a:	ed9f 5a41 	vldr	s10, [pc, #260]	; 800e420 <__ieee754_expf+0x184>
 800e31e:	eea6 5aa5 	vfma.f32	s10, s13, s11
 800e322:	eddf 5a40 	vldr	s11, [pc, #256]	; 800e424 <__ieee754_expf+0x188>
 800e326:	eee5 5a26 	vfma.f32	s11, s10, s13
 800e32a:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 800e428 <__ieee754_expf+0x18c>
 800e32e:	eea5 5aa6 	vfma.f32	s10, s11, s13
 800e332:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800e42c <__ieee754_expf+0x190>
 800e336:	eee5 5a26 	vfma.f32	s11, s10, s13
 800e33a:	eeb0 5a40 	vmov.f32	s10, s0
 800e33e:	eea5 5ae6 	vfms.f32	s10, s11, s13
 800e342:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800e346:	eef0 6a45 	vmov.f32	s13, s10
 800e34a:	ee20 5a05 	vmul.f32	s10, s0, s10
 800e34e:	bb92      	cbnz	r2, 800e3b6 <__ieee754_expf+0x11a>
 800e350:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800e354:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800e358:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800e35c:	ee36 0a40 	vsub.f32	s0, s12, s0
 800e360:	4770      	bx	lr
 800e362:	4b33      	ldr	r3, [pc, #204]	; (800e430 <__ieee754_expf+0x194>)
 800e364:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800e434 <__ieee754_expf+0x198>
 800e368:	4413      	add	r3, r2
 800e36a:	edd3 7a00 	vldr	s15, [r3]
 800e36e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e372:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800e438 <__ieee754_expf+0x19c>
 800e376:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e37a:	ee17 2a90 	vmov	r2, s15
 800e37e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e382:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800e386:	eeb0 7a40 	vmov.f32	s14, s0
 800e38a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800e43c <__ieee754_expf+0x1a0>
 800e38e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800e392:	e7bc      	b.n	800e30e <__ieee754_expf+0x72>
 800e394:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 800e398:	d20b      	bcs.n	800e3b2 <__ieee754_expf+0x116>
 800e39a:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800e404 <__ieee754_expf+0x168>
 800e39e:	ee70 6a26 	vadd.f32	s13, s0, s13
 800e3a2:	eef4 6ac6 	vcmpe.f32	s13, s12
 800e3a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3aa:	dd02      	ble.n	800e3b2 <__ieee754_expf+0x116>
 800e3ac:	ee30 0a06 	vadd.f32	s0, s0, s12
 800e3b0:	4770      	bx	lr
 800e3b2:	2200      	movs	r2, #0
 800e3b4:	e7ad      	b.n	800e312 <__ieee754_expf+0x76>
 800e3b6:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800e3ba:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800e3be:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800e3c2:	bfb8      	it	lt
 800e3c4:	3264      	addlt	r2, #100	; 0x64
 800e3c6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800e3ca:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800e3ce:	ee76 7a40 	vsub.f32	s15, s12, s0
 800e3d2:	ee17 3a90 	vmov	r3, s15
 800e3d6:	bfab      	itete	ge
 800e3d8:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800e3dc:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800e3e0:	ee00 3a10 	vmovge	s0, r3
 800e3e4:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 800e440 <__ieee754_expf+0x1a4>
 800e3e8:	bfbc      	itt	lt
 800e3ea:	ee00 3a10 	vmovlt	s0, r3
 800e3ee:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800e3f2:	4770      	bx	lr
 800e3f4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e3fc <__ieee754_expf+0x160>
 800e3f8:	4770      	bx	lr
 800e3fa:	bf00      	nop
 800e3fc:	00000000 	.word	0x00000000
 800e400:	42b17217 	.word	0x42b17217
 800e404:	7149f2ca 	.word	0x7149f2ca
 800e408:	42cff1b5 	.word	0x42cff1b5
 800e40c:	3eb17218 	.word	0x3eb17218
 800e410:	3f851591 	.word	0x3f851591
 800e414:	080161e8 	.word	0x080161e8
 800e418:	080161f0 	.word	0x080161f0
 800e41c:	3331bb4c 	.word	0x3331bb4c
 800e420:	b5ddea0e 	.word	0xb5ddea0e
 800e424:	388ab355 	.word	0x388ab355
 800e428:	bb360b61 	.word	0xbb360b61
 800e42c:	3e2aaaab 	.word	0x3e2aaaab
 800e430:	080161e0 	.word	0x080161e0
 800e434:	3fb8aa3b 	.word	0x3fb8aa3b
 800e438:	3f317180 	.word	0x3f317180
 800e43c:	3717f7d1 	.word	0x3717f7d1
 800e440:	0d800000 	.word	0x0d800000

0800e444 <__ieee754_logf>:
 800e444:	ee10 3a10 	vmov	r3, s0
 800e448:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800e44c:	d106      	bne.n	800e45c <__ieee754_logf+0x18>
 800e44e:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800e5e4 <__ieee754_logf+0x1a0>
 800e452:	eddf 7a65 	vldr	s15, [pc, #404]	; 800e5e8 <__ieee754_logf+0x1a4>
 800e456:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800e45a:	4770      	bx	lr
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	da02      	bge.n	800e466 <__ieee754_logf+0x22>
 800e460:	ee30 7a40 	vsub.f32	s14, s0, s0
 800e464:	e7f5      	b.n	800e452 <__ieee754_logf+0xe>
 800e466:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e46a:	db02      	blt.n	800e472 <__ieee754_logf+0x2e>
 800e46c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e470:	4770      	bx	lr
 800e472:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e476:	bfb8      	it	lt
 800e478:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 800e5ec <__ieee754_logf+0x1a8>
 800e47c:	485c      	ldr	r0, [pc, #368]	; (800e5f0 <__ieee754_logf+0x1ac>)
 800e47e:	bfbe      	ittt	lt
 800e480:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800e484:	f06f 0118 	mvnlt.w	r1, #24
 800e488:	ee17 3a90 	vmovlt	r3, s15
 800e48c:	ea4f 52e3 	mov.w	r2, r3, asr #23
 800e490:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e494:	4418      	add	r0, r3
 800e496:	bfa8      	it	ge
 800e498:	2100      	movge	r1, #0
 800e49a:	3a7f      	subs	r2, #127	; 0x7f
 800e49c:	440a      	add	r2, r1
 800e49e:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 800e4a2:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800e4a6:	4319      	orrs	r1, r3
 800e4a8:	ee00 1a10 	vmov	s0, r1
 800e4ac:	4951      	ldr	r1, [pc, #324]	; (800e5f4 <__ieee754_logf+0x1b0>)
 800e4ae:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 800e4b2:	f103 000f 	add.w	r0, r3, #15
 800e4b6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e4ba:	4001      	ands	r1, r0
 800e4bc:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e4c0:	bb89      	cbnz	r1, 800e526 <__ieee754_logf+0xe2>
 800e4c2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800e4c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4ca:	d10f      	bne.n	800e4ec <__ieee754_logf+0xa8>
 800e4cc:	2a00      	cmp	r2, #0
 800e4ce:	f000 8085 	beq.w	800e5dc <__ieee754_logf+0x198>
 800e4d2:	ee07 2a90 	vmov	s15, r2
 800e4d6:	ed9f 0a48 	vldr	s0, [pc, #288]	; 800e5f8 <__ieee754_logf+0x1b4>
 800e4da:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800e5fc <__ieee754_logf+0x1b8>
 800e4de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e4e2:	ee27 0a80 	vmul.f32	s0, s15, s0
 800e4e6:	eea7 0a87 	vfma.f32	s0, s15, s14
 800e4ea:	4770      	bx	lr
 800e4ec:	eddf 6a44 	vldr	s13, [pc, #272]	; 800e600 <__ieee754_logf+0x1bc>
 800e4f0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e4f4:	eee0 7a66 	vfms.f32	s15, s0, s13
 800e4f8:	ee20 7a00 	vmul.f32	s14, s0, s0
 800e4fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e500:	b912      	cbnz	r2, 800e508 <__ieee754_logf+0xc4>
 800e502:	ee30 0a47 	vsub.f32	s0, s0, s14
 800e506:	4770      	bx	lr
 800e508:	ee07 2a90 	vmov	s15, r2
 800e50c:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800e5f8 <__ieee754_logf+0x1b4>
 800e510:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e514:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800e518:	ee37 0a40 	vsub.f32	s0, s14, s0
 800e51c:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800e5fc <__ieee754_logf+0x1b8>
 800e520:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800e524:	4770      	bx	lr
 800e526:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800e52a:	ee70 7a27 	vadd.f32	s15, s0, s15
 800e52e:	eddf 5a35 	vldr	s11, [pc, #212]	; 800e604 <__ieee754_logf+0x1c0>
 800e532:	eddf 4a35 	vldr	s9, [pc, #212]	; 800e608 <__ieee754_logf+0x1c4>
 800e536:	4935      	ldr	r1, [pc, #212]	; (800e60c <__ieee754_logf+0x1c8>)
 800e538:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800e53c:	4419      	add	r1, r3
 800e53e:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800e542:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800e546:	430b      	orrs	r3, r1
 800e548:	2b00      	cmp	r3, #0
 800e54a:	ee07 2a90 	vmov	s15, r2
 800e54e:	ee26 5a06 	vmul.f32	s10, s12, s12
 800e552:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e556:	ee25 7a05 	vmul.f32	s14, s10, s10
 800e55a:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800e610 <__ieee754_logf+0x1cc>
 800e55e:	eee7 7a25 	vfma.f32	s15, s14, s11
 800e562:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800e614 <__ieee754_logf+0x1d0>
 800e566:	eee7 5a87 	vfma.f32	s11, s15, s14
 800e56a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800e618 <__ieee754_logf+0x1d4>
 800e56e:	eee7 7a24 	vfma.f32	s15, s14, s9
 800e572:	eddf 4a2a 	vldr	s9, [pc, #168]	; 800e61c <__ieee754_logf+0x1d8>
 800e576:	eee7 4a87 	vfma.f32	s9, s15, s14
 800e57a:	eddf 7a29 	vldr	s15, [pc, #164]	; 800e620 <__ieee754_logf+0x1dc>
 800e57e:	eee4 7a87 	vfma.f32	s15, s9, s14
 800e582:	ee67 7a85 	vmul.f32	s15, s15, s10
 800e586:	eee5 7a87 	vfma.f32	s15, s11, s14
 800e58a:	dd1c      	ble.n	800e5c6 <__ieee754_logf+0x182>
 800e58c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800e590:	ee20 7a07 	vmul.f32	s14, s0, s14
 800e594:	ee27 7a00 	vmul.f32	s14, s14, s0
 800e598:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e59c:	ee67 7a86 	vmul.f32	s15, s15, s12
 800e5a0:	b922      	cbnz	r2, 800e5ac <__ieee754_logf+0x168>
 800e5a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e5a6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e5aa:	4770      	bx	lr
 800e5ac:	ed9f 6a12 	vldr	s12, [pc, #72]	; 800e5f8 <__ieee754_logf+0x1b4>
 800e5b0:	eee6 7a86 	vfma.f32	s15, s13, s12
 800e5b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e5b8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800e5bc:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800e5fc <__ieee754_logf+0x1b8>
 800e5c0:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800e5c4:	4770      	bx	lr
 800e5c6:	ee70 7a67 	vsub.f32	s15, s0, s15
 800e5ca:	ee67 7a86 	vmul.f32	s15, s15, s12
 800e5ce:	2a00      	cmp	r2, #0
 800e5d0:	d0e9      	beq.n	800e5a6 <__ieee754_logf+0x162>
 800e5d2:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800e5f8 <__ieee754_logf+0x1b4>
 800e5d6:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800e5da:	e7ed      	b.n	800e5b8 <__ieee754_logf+0x174>
 800e5dc:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800e5e8 <__ieee754_logf+0x1a4>
 800e5e0:	4770      	bx	lr
 800e5e2:	bf00      	nop
 800e5e4:	cc000000 	.word	0xcc000000
 800e5e8:	00000000 	.word	0x00000000
 800e5ec:	4c000000 	.word	0x4c000000
 800e5f0:	004afb20 	.word	0x004afb20
 800e5f4:	007ffff0 	.word	0x007ffff0
 800e5f8:	3717f7d1 	.word	0x3717f7d1
 800e5fc:	3f317180 	.word	0x3f317180
 800e600:	3eaaaaab 	.word	0x3eaaaaab
 800e604:	3e1cd04f 	.word	0x3e1cd04f
 800e608:	3e178897 	.word	0x3e178897
 800e60c:	ffcf5c30 	.word	0xffcf5c30
 800e610:	3e638e29 	.word	0x3e638e29
 800e614:	3ecccccd 	.word	0x3ecccccd
 800e618:	3e3a3325 	.word	0x3e3a3325
 800e61c:	3e924925 	.word	0x3e924925
 800e620:	3f2aaaab 	.word	0x3f2aaaab

0800e624 <__ieee754_log10f>:
 800e624:	b508      	push	{r3, lr}
 800e626:	ee10 2a10 	vmov	r2, s0
 800e62a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800e62e:	ed2d 8b02 	vpush	{d8}
 800e632:	d108      	bne.n	800e646 <__ieee754_log10f+0x22>
 800e634:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800e6bc <__ieee754_log10f+0x98>
 800e638:	eddf 7a21 	vldr	s15, [pc, #132]	; 800e6c0 <__ieee754_log10f+0x9c>
 800e63c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800e640:	ecbd 8b02 	vpop	{d8}
 800e644:	bd08      	pop	{r3, pc}
 800e646:	2a00      	cmp	r2, #0
 800e648:	da02      	bge.n	800e650 <__ieee754_log10f+0x2c>
 800e64a:	ee30 7a40 	vsub.f32	s14, s0, s0
 800e64e:	e7f3      	b.n	800e638 <__ieee754_log10f+0x14>
 800e650:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800e654:	db02      	blt.n	800e65c <__ieee754_log10f+0x38>
 800e656:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e65a:	e7f1      	b.n	800e640 <__ieee754_log10f+0x1c>
 800e65c:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800e660:	bfbf      	itttt	lt
 800e662:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 800e6c4 <__ieee754_log10f+0xa0>
 800e666:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800e66a:	f06f 0118 	mvnlt.w	r1, #24
 800e66e:	ee17 2a90 	vmovlt	r2, s15
 800e672:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800e676:	bfa8      	it	ge
 800e678:	2100      	movge	r1, #0
 800e67a:	3b7f      	subs	r3, #127	; 0x7f
 800e67c:	440b      	add	r3, r1
 800e67e:	0fd9      	lsrs	r1, r3, #31
 800e680:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800e684:	ee07 3a90 	vmov	s15, r3
 800e688:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800e68c:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 800e690:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800e694:	ee00 3a10 	vmov	s0, r3
 800e698:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800e69c:	f7ff fed2 	bl	800e444 <__ieee754_logf>
 800e6a0:	eddf 7a09 	vldr	s15, [pc, #36]	; 800e6c8 <__ieee754_log10f+0xa4>
 800e6a4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e6a8:	eddf 7a08 	vldr	s15, [pc, #32]	; 800e6cc <__ieee754_log10f+0xa8>
 800e6ac:	eea8 0a27 	vfma.f32	s0, s16, s15
 800e6b0:	eddf 7a07 	vldr	s15, [pc, #28]	; 800e6d0 <__ieee754_log10f+0xac>
 800e6b4:	eea8 0a27 	vfma.f32	s0, s16, s15
 800e6b8:	e7c2      	b.n	800e640 <__ieee754_log10f+0x1c>
 800e6ba:	bf00      	nop
 800e6bc:	cc000000 	.word	0xcc000000
 800e6c0:	00000000 	.word	0x00000000
 800e6c4:	4c000000 	.word	0x4c000000
 800e6c8:	3ede5bd9 	.word	0x3ede5bd9
 800e6cc:	355427db 	.word	0x355427db
 800e6d0:	3e9a2080 	.word	0x3e9a2080

0800e6d4 <fabs>:
 800e6d4:	ec51 0b10 	vmov	r0, r1, d0
 800e6d8:	ee10 2a10 	vmov	r2, s0
 800e6dc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e6e0:	ec43 2b10 	vmov	d0, r2, r3
 800e6e4:	4770      	bx	lr

0800e6e6 <finite>:
 800e6e6:	b082      	sub	sp, #8
 800e6e8:	ed8d 0b00 	vstr	d0, [sp]
 800e6ec:	9801      	ldr	r0, [sp, #4]
 800e6ee:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800e6f2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e6f6:	0fc0      	lsrs	r0, r0, #31
 800e6f8:	b002      	add	sp, #8
 800e6fa:	4770      	bx	lr
 800e6fc:	0000      	movs	r0, r0
	...

0800e700 <nan>:
 800e700:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e708 <nan+0x8>
 800e704:	4770      	bx	lr
 800e706:	bf00      	nop
 800e708:	00000000 	.word	0x00000000
 800e70c:	7ff80000 	.word	0x7ff80000

0800e710 <rint>:
 800e710:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e712:	ec51 0b10 	vmov	r0, r1, d0
 800e716:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e71a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800e71e:	2e13      	cmp	r6, #19
 800e720:	ee10 4a10 	vmov	r4, s0
 800e724:	460b      	mov	r3, r1
 800e726:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800e72a:	dc58      	bgt.n	800e7de <rint+0xce>
 800e72c:	2e00      	cmp	r6, #0
 800e72e:	da2b      	bge.n	800e788 <rint+0x78>
 800e730:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800e734:	4302      	orrs	r2, r0
 800e736:	d023      	beq.n	800e780 <rint+0x70>
 800e738:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800e73c:	4302      	orrs	r2, r0
 800e73e:	4254      	negs	r4, r2
 800e740:	4314      	orrs	r4, r2
 800e742:	0c4b      	lsrs	r3, r1, #17
 800e744:	0b24      	lsrs	r4, r4, #12
 800e746:	045b      	lsls	r3, r3, #17
 800e748:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800e74c:	ea44 0103 	orr.w	r1, r4, r3
 800e750:	4b32      	ldr	r3, [pc, #200]	; (800e81c <rint+0x10c>)
 800e752:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e756:	e9d3 6700 	ldrd	r6, r7, [r3]
 800e75a:	4602      	mov	r2, r0
 800e75c:	460b      	mov	r3, r1
 800e75e:	4630      	mov	r0, r6
 800e760:	4639      	mov	r1, r7
 800e762:	f7f1 fdc3 	bl	80002ec <__adddf3>
 800e766:	e9cd 0100 	strd	r0, r1, [sp]
 800e76a:	463b      	mov	r3, r7
 800e76c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e770:	4632      	mov	r2, r6
 800e772:	f7f1 fdb9 	bl	80002e8 <__aeabi_dsub>
 800e776:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e77a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800e77e:	4639      	mov	r1, r7
 800e780:	ec41 0b10 	vmov	d0, r0, r1
 800e784:	b003      	add	sp, #12
 800e786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e788:	4a25      	ldr	r2, [pc, #148]	; (800e820 <rint+0x110>)
 800e78a:	4132      	asrs	r2, r6
 800e78c:	ea01 0702 	and.w	r7, r1, r2
 800e790:	4307      	orrs	r7, r0
 800e792:	d0f5      	beq.n	800e780 <rint+0x70>
 800e794:	0851      	lsrs	r1, r2, #1
 800e796:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800e79a:	4314      	orrs	r4, r2
 800e79c:	d00c      	beq.n	800e7b8 <rint+0xa8>
 800e79e:	ea23 0201 	bic.w	r2, r3, r1
 800e7a2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e7a6:	2e13      	cmp	r6, #19
 800e7a8:	fa43 f606 	asr.w	r6, r3, r6
 800e7ac:	bf0c      	ite	eq
 800e7ae:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800e7b2:	2400      	movne	r4, #0
 800e7b4:	ea42 0306 	orr.w	r3, r2, r6
 800e7b8:	4918      	ldr	r1, [pc, #96]	; (800e81c <rint+0x10c>)
 800e7ba:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800e7be:	4622      	mov	r2, r4
 800e7c0:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e7c4:	4620      	mov	r0, r4
 800e7c6:	4629      	mov	r1, r5
 800e7c8:	f7f1 fd90 	bl	80002ec <__adddf3>
 800e7cc:	e9cd 0100 	strd	r0, r1, [sp]
 800e7d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e7d4:	4622      	mov	r2, r4
 800e7d6:	462b      	mov	r3, r5
 800e7d8:	f7f1 fd86 	bl	80002e8 <__aeabi_dsub>
 800e7dc:	e7d0      	b.n	800e780 <rint+0x70>
 800e7de:	2e33      	cmp	r6, #51	; 0x33
 800e7e0:	dd07      	ble.n	800e7f2 <rint+0xe2>
 800e7e2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e7e6:	d1cb      	bne.n	800e780 <rint+0x70>
 800e7e8:	ee10 2a10 	vmov	r2, s0
 800e7ec:	f7f1 fd7e 	bl	80002ec <__adddf3>
 800e7f0:	e7c6      	b.n	800e780 <rint+0x70>
 800e7f2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800e7f6:	f04f 36ff 	mov.w	r6, #4294967295
 800e7fa:	40d6      	lsrs	r6, r2
 800e7fc:	4230      	tst	r0, r6
 800e7fe:	d0bf      	beq.n	800e780 <rint+0x70>
 800e800:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800e804:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800e808:	bf1f      	itttt	ne
 800e80a:	ea24 0101 	bicne.w	r1, r4, r1
 800e80e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800e812:	fa44 f202 	asrne.w	r2, r4, r2
 800e816:	ea41 0402 	orrne.w	r4, r1, r2
 800e81a:	e7cd      	b.n	800e7b8 <rint+0xa8>
 800e81c:	080161f8 	.word	0x080161f8
 800e820:	000fffff 	.word	0x000fffff
 800e824:	00000000 	.word	0x00000000

0800e828 <scalbn>:
 800e828:	b570      	push	{r4, r5, r6, lr}
 800e82a:	ec55 4b10 	vmov	r4, r5, d0
 800e82e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e832:	4606      	mov	r6, r0
 800e834:	462b      	mov	r3, r5
 800e836:	b99a      	cbnz	r2, 800e860 <scalbn+0x38>
 800e838:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e83c:	4323      	orrs	r3, r4
 800e83e:	d036      	beq.n	800e8ae <scalbn+0x86>
 800e840:	4b39      	ldr	r3, [pc, #228]	; (800e928 <scalbn+0x100>)
 800e842:	4629      	mov	r1, r5
 800e844:	ee10 0a10 	vmov	r0, s0
 800e848:	2200      	movs	r2, #0
 800e84a:	f7f1 ff05 	bl	8000658 <__aeabi_dmul>
 800e84e:	4b37      	ldr	r3, [pc, #220]	; (800e92c <scalbn+0x104>)
 800e850:	429e      	cmp	r6, r3
 800e852:	4604      	mov	r4, r0
 800e854:	460d      	mov	r5, r1
 800e856:	da10      	bge.n	800e87a <scalbn+0x52>
 800e858:	a32b      	add	r3, pc, #172	; (adr r3, 800e908 <scalbn+0xe0>)
 800e85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e85e:	e03a      	b.n	800e8d6 <scalbn+0xae>
 800e860:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e864:	428a      	cmp	r2, r1
 800e866:	d10c      	bne.n	800e882 <scalbn+0x5a>
 800e868:	ee10 2a10 	vmov	r2, s0
 800e86c:	4620      	mov	r0, r4
 800e86e:	4629      	mov	r1, r5
 800e870:	f7f1 fd3c 	bl	80002ec <__adddf3>
 800e874:	4604      	mov	r4, r0
 800e876:	460d      	mov	r5, r1
 800e878:	e019      	b.n	800e8ae <scalbn+0x86>
 800e87a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e87e:	460b      	mov	r3, r1
 800e880:	3a36      	subs	r2, #54	; 0x36
 800e882:	4432      	add	r2, r6
 800e884:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e888:	428a      	cmp	r2, r1
 800e88a:	dd08      	ble.n	800e89e <scalbn+0x76>
 800e88c:	2d00      	cmp	r5, #0
 800e88e:	a120      	add	r1, pc, #128	; (adr r1, 800e910 <scalbn+0xe8>)
 800e890:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e894:	da1c      	bge.n	800e8d0 <scalbn+0xa8>
 800e896:	a120      	add	r1, pc, #128	; (adr r1, 800e918 <scalbn+0xf0>)
 800e898:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e89c:	e018      	b.n	800e8d0 <scalbn+0xa8>
 800e89e:	2a00      	cmp	r2, #0
 800e8a0:	dd08      	ble.n	800e8b4 <scalbn+0x8c>
 800e8a2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e8a6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e8aa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e8ae:	ec45 4b10 	vmov	d0, r4, r5
 800e8b2:	bd70      	pop	{r4, r5, r6, pc}
 800e8b4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e8b8:	da19      	bge.n	800e8ee <scalbn+0xc6>
 800e8ba:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e8be:	429e      	cmp	r6, r3
 800e8c0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800e8c4:	dd0a      	ble.n	800e8dc <scalbn+0xb4>
 800e8c6:	a112      	add	r1, pc, #72	; (adr r1, 800e910 <scalbn+0xe8>)
 800e8c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d1e2      	bne.n	800e896 <scalbn+0x6e>
 800e8d0:	a30f      	add	r3, pc, #60	; (adr r3, 800e910 <scalbn+0xe8>)
 800e8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8d6:	f7f1 febf 	bl	8000658 <__aeabi_dmul>
 800e8da:	e7cb      	b.n	800e874 <scalbn+0x4c>
 800e8dc:	a10a      	add	r1, pc, #40	; (adr r1, 800e908 <scalbn+0xe0>)
 800e8de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d0b8      	beq.n	800e858 <scalbn+0x30>
 800e8e6:	a10e      	add	r1, pc, #56	; (adr r1, 800e920 <scalbn+0xf8>)
 800e8e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e8ec:	e7b4      	b.n	800e858 <scalbn+0x30>
 800e8ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e8f2:	3236      	adds	r2, #54	; 0x36
 800e8f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e8f8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e8fc:	4620      	mov	r0, r4
 800e8fe:	4b0c      	ldr	r3, [pc, #48]	; (800e930 <scalbn+0x108>)
 800e900:	2200      	movs	r2, #0
 800e902:	e7e8      	b.n	800e8d6 <scalbn+0xae>
 800e904:	f3af 8000 	nop.w
 800e908:	c2f8f359 	.word	0xc2f8f359
 800e90c:	01a56e1f 	.word	0x01a56e1f
 800e910:	8800759c 	.word	0x8800759c
 800e914:	7e37e43c 	.word	0x7e37e43c
 800e918:	8800759c 	.word	0x8800759c
 800e91c:	fe37e43c 	.word	0xfe37e43c
 800e920:	c2f8f359 	.word	0xc2f8f359
 800e924:	81a56e1f 	.word	0x81a56e1f
 800e928:	43500000 	.word	0x43500000
 800e92c:	ffff3cb0 	.word	0xffff3cb0
 800e930:	3c900000 	.word	0x3c900000

0800e934 <finitef>:
 800e934:	b082      	sub	sp, #8
 800e936:	ed8d 0a01 	vstr	s0, [sp, #4]
 800e93a:	9801      	ldr	r0, [sp, #4]
 800e93c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800e940:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800e944:	bfac      	ite	ge
 800e946:	2000      	movge	r0, #0
 800e948:	2001      	movlt	r0, #1
 800e94a:	b002      	add	sp, #8
 800e94c:	4770      	bx	lr
	...

0800e950 <nanf>:
 800e950:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e958 <nanf+0x8>
 800e954:	4770      	bx	lr
 800e956:	bf00      	nop
 800e958:	7fc00000 	.word	0x7fc00000

0800e95c <abort>:
 800e95c:	b508      	push	{r3, lr}
 800e95e:	2006      	movs	r0, #6
 800e960:	f000 fd18 	bl	800f394 <raise>
 800e964:	2001      	movs	r0, #1
 800e966:	f7f4 fe15 	bl	8003594 <_exit>
	...

0800e96c <__assert_func>:
 800e96c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e96e:	4614      	mov	r4, r2
 800e970:	461a      	mov	r2, r3
 800e972:	4b09      	ldr	r3, [pc, #36]	; (800e998 <__assert_func+0x2c>)
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	4605      	mov	r5, r0
 800e978:	68d8      	ldr	r0, [r3, #12]
 800e97a:	b14c      	cbz	r4, 800e990 <__assert_func+0x24>
 800e97c:	4b07      	ldr	r3, [pc, #28]	; (800e99c <__assert_func+0x30>)
 800e97e:	9100      	str	r1, [sp, #0]
 800e980:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e984:	4906      	ldr	r1, [pc, #24]	; (800e9a0 <__assert_func+0x34>)
 800e986:	462b      	mov	r3, r5
 800e988:	f000 f81c 	bl	800e9c4 <fiprintf>
 800e98c:	f7ff ffe6 	bl	800e95c <abort>
 800e990:	4b04      	ldr	r3, [pc, #16]	; (800e9a4 <__assert_func+0x38>)
 800e992:	461c      	mov	r4, r3
 800e994:	e7f3      	b.n	800e97e <__assert_func+0x12>
 800e996:	bf00      	nop
 800e998:	20006e60 	.word	0x20006e60
 800e99c:	08016208 	.word	0x08016208
 800e9a0:	08016215 	.word	0x08016215
 800e9a4:	08016243 	.word	0x08016243

0800e9a8 <calloc>:
 800e9a8:	4b02      	ldr	r3, [pc, #8]	; (800e9b4 <calloc+0xc>)
 800e9aa:	460a      	mov	r2, r1
 800e9ac:	4601      	mov	r1, r0
 800e9ae:	6818      	ldr	r0, [r3, #0]
 800e9b0:	f000 b882 	b.w	800eab8 <_calloc_r>
 800e9b4:	20006e60 	.word	0x20006e60

0800e9b8 <__errno>:
 800e9b8:	4b01      	ldr	r3, [pc, #4]	; (800e9c0 <__errno+0x8>)
 800e9ba:	6818      	ldr	r0, [r3, #0]
 800e9bc:	4770      	bx	lr
 800e9be:	bf00      	nop
 800e9c0:	20006e60 	.word	0x20006e60

0800e9c4 <fiprintf>:
 800e9c4:	b40e      	push	{r1, r2, r3}
 800e9c6:	b503      	push	{r0, r1, lr}
 800e9c8:	4601      	mov	r1, r0
 800e9ca:	ab03      	add	r3, sp, #12
 800e9cc:	4805      	ldr	r0, [pc, #20]	; (800e9e4 <fiprintf+0x20>)
 800e9ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9d2:	6800      	ldr	r0, [r0, #0]
 800e9d4:	9301      	str	r3, [sp, #4]
 800e9d6:	f000 f953 	bl	800ec80 <_vfiprintf_r>
 800e9da:	b002      	add	sp, #8
 800e9dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800e9e0:	b003      	add	sp, #12
 800e9e2:	4770      	bx	lr
 800e9e4:	20006e60 	.word	0x20006e60

0800e9e8 <__libc_init_array>:
 800e9e8:	b570      	push	{r4, r5, r6, lr}
 800e9ea:	4d0d      	ldr	r5, [pc, #52]	; (800ea20 <__libc_init_array+0x38>)
 800e9ec:	4c0d      	ldr	r4, [pc, #52]	; (800ea24 <__libc_init_array+0x3c>)
 800e9ee:	1b64      	subs	r4, r4, r5
 800e9f0:	10a4      	asrs	r4, r4, #2
 800e9f2:	2600      	movs	r6, #0
 800e9f4:	42a6      	cmp	r6, r4
 800e9f6:	d109      	bne.n	800ea0c <__libc_init_array+0x24>
 800e9f8:	4d0b      	ldr	r5, [pc, #44]	; (800ea28 <__libc_init_array+0x40>)
 800e9fa:	4c0c      	ldr	r4, [pc, #48]	; (800ea2c <__libc_init_array+0x44>)
 800e9fc:	f001 fa24 	bl	800fe48 <_init>
 800ea00:	1b64      	subs	r4, r4, r5
 800ea02:	10a4      	asrs	r4, r4, #2
 800ea04:	2600      	movs	r6, #0
 800ea06:	42a6      	cmp	r6, r4
 800ea08:	d105      	bne.n	800ea16 <__libc_init_array+0x2e>
 800ea0a:	bd70      	pop	{r4, r5, r6, pc}
 800ea0c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ea10:	4798      	blx	r3
 800ea12:	3601      	adds	r6, #1
 800ea14:	e7ee      	b.n	800e9f4 <__libc_init_array+0xc>
 800ea16:	f855 3b04 	ldr.w	r3, [r5], #4
 800ea1a:	4798      	blx	r3
 800ea1c:	3601      	adds	r6, #1
 800ea1e:	e7f2      	b.n	800ea06 <__libc_init_array+0x1e>
 800ea20:	080162e4 	.word	0x080162e4
 800ea24:	080162e4 	.word	0x080162e4
 800ea28:	080162e4 	.word	0x080162e4
 800ea2c:	080162ec 	.word	0x080162ec

0800ea30 <__retarget_lock_init_recursive>:
 800ea30:	4770      	bx	lr

0800ea32 <__retarget_lock_acquire_recursive>:
 800ea32:	4770      	bx	lr

0800ea34 <__retarget_lock_release_recursive>:
 800ea34:	4770      	bx	lr
	...

0800ea38 <malloc>:
 800ea38:	4b02      	ldr	r3, [pc, #8]	; (800ea44 <malloc+0xc>)
 800ea3a:	4601      	mov	r1, r0
 800ea3c:	6818      	ldr	r0, [r3, #0]
 800ea3e:	f000 b89b 	b.w	800eb78 <_malloc_r>
 800ea42:	bf00      	nop
 800ea44:	20006e60 	.word	0x20006e60

0800ea48 <free>:
 800ea48:	4b02      	ldr	r3, [pc, #8]	; (800ea54 <free+0xc>)
 800ea4a:	4601      	mov	r1, r0
 800ea4c:	6818      	ldr	r0, [r3, #0]
 800ea4e:	f000 b843 	b.w	800ead8 <_free_r>
 800ea52:	bf00      	nop
 800ea54:	20006e60 	.word	0x20006e60

0800ea58 <memcpy>:
 800ea58:	440a      	add	r2, r1
 800ea5a:	4291      	cmp	r1, r2
 800ea5c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ea60:	d100      	bne.n	800ea64 <memcpy+0xc>
 800ea62:	4770      	bx	lr
 800ea64:	b510      	push	{r4, lr}
 800ea66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ea6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ea6e:	4291      	cmp	r1, r2
 800ea70:	d1f9      	bne.n	800ea66 <memcpy+0xe>
 800ea72:	bd10      	pop	{r4, pc}

0800ea74 <memmove>:
 800ea74:	4288      	cmp	r0, r1
 800ea76:	b510      	push	{r4, lr}
 800ea78:	eb01 0402 	add.w	r4, r1, r2
 800ea7c:	d902      	bls.n	800ea84 <memmove+0x10>
 800ea7e:	4284      	cmp	r4, r0
 800ea80:	4623      	mov	r3, r4
 800ea82:	d807      	bhi.n	800ea94 <memmove+0x20>
 800ea84:	1e43      	subs	r3, r0, #1
 800ea86:	42a1      	cmp	r1, r4
 800ea88:	d008      	beq.n	800ea9c <memmove+0x28>
 800ea8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ea8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ea92:	e7f8      	b.n	800ea86 <memmove+0x12>
 800ea94:	4402      	add	r2, r0
 800ea96:	4601      	mov	r1, r0
 800ea98:	428a      	cmp	r2, r1
 800ea9a:	d100      	bne.n	800ea9e <memmove+0x2a>
 800ea9c:	bd10      	pop	{r4, pc}
 800ea9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800eaa2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800eaa6:	e7f7      	b.n	800ea98 <memmove+0x24>

0800eaa8 <memset>:
 800eaa8:	4402      	add	r2, r0
 800eaaa:	4603      	mov	r3, r0
 800eaac:	4293      	cmp	r3, r2
 800eaae:	d100      	bne.n	800eab2 <memset+0xa>
 800eab0:	4770      	bx	lr
 800eab2:	f803 1b01 	strb.w	r1, [r3], #1
 800eab6:	e7f9      	b.n	800eaac <memset+0x4>

0800eab8 <_calloc_r>:
 800eab8:	b513      	push	{r0, r1, r4, lr}
 800eaba:	434a      	muls	r2, r1
 800eabc:	4611      	mov	r1, r2
 800eabe:	9201      	str	r2, [sp, #4]
 800eac0:	f000 f85a 	bl	800eb78 <_malloc_r>
 800eac4:	4604      	mov	r4, r0
 800eac6:	b118      	cbz	r0, 800ead0 <_calloc_r+0x18>
 800eac8:	9a01      	ldr	r2, [sp, #4]
 800eaca:	2100      	movs	r1, #0
 800eacc:	f7ff ffec 	bl	800eaa8 <memset>
 800ead0:	4620      	mov	r0, r4
 800ead2:	b002      	add	sp, #8
 800ead4:	bd10      	pop	{r4, pc}
	...

0800ead8 <_free_r>:
 800ead8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eada:	2900      	cmp	r1, #0
 800eadc:	d048      	beq.n	800eb70 <_free_r+0x98>
 800eade:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eae2:	9001      	str	r0, [sp, #4]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	f1a1 0404 	sub.w	r4, r1, #4
 800eaea:	bfb8      	it	lt
 800eaec:	18e4      	addlt	r4, r4, r3
 800eaee:	f000 ff69 	bl	800f9c4 <__malloc_lock>
 800eaf2:	4a20      	ldr	r2, [pc, #128]	; (800eb74 <_free_r+0x9c>)
 800eaf4:	9801      	ldr	r0, [sp, #4]
 800eaf6:	6813      	ldr	r3, [r2, #0]
 800eaf8:	4615      	mov	r5, r2
 800eafa:	b933      	cbnz	r3, 800eb0a <_free_r+0x32>
 800eafc:	6063      	str	r3, [r4, #4]
 800eafe:	6014      	str	r4, [r2, #0]
 800eb00:	b003      	add	sp, #12
 800eb02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eb06:	f000 bf63 	b.w	800f9d0 <__malloc_unlock>
 800eb0a:	42a3      	cmp	r3, r4
 800eb0c:	d90b      	bls.n	800eb26 <_free_r+0x4e>
 800eb0e:	6821      	ldr	r1, [r4, #0]
 800eb10:	1862      	adds	r2, r4, r1
 800eb12:	4293      	cmp	r3, r2
 800eb14:	bf04      	itt	eq
 800eb16:	681a      	ldreq	r2, [r3, #0]
 800eb18:	685b      	ldreq	r3, [r3, #4]
 800eb1a:	6063      	str	r3, [r4, #4]
 800eb1c:	bf04      	itt	eq
 800eb1e:	1852      	addeq	r2, r2, r1
 800eb20:	6022      	streq	r2, [r4, #0]
 800eb22:	602c      	str	r4, [r5, #0]
 800eb24:	e7ec      	b.n	800eb00 <_free_r+0x28>
 800eb26:	461a      	mov	r2, r3
 800eb28:	685b      	ldr	r3, [r3, #4]
 800eb2a:	b10b      	cbz	r3, 800eb30 <_free_r+0x58>
 800eb2c:	42a3      	cmp	r3, r4
 800eb2e:	d9fa      	bls.n	800eb26 <_free_r+0x4e>
 800eb30:	6811      	ldr	r1, [r2, #0]
 800eb32:	1855      	adds	r5, r2, r1
 800eb34:	42a5      	cmp	r5, r4
 800eb36:	d10b      	bne.n	800eb50 <_free_r+0x78>
 800eb38:	6824      	ldr	r4, [r4, #0]
 800eb3a:	4421      	add	r1, r4
 800eb3c:	1854      	adds	r4, r2, r1
 800eb3e:	42a3      	cmp	r3, r4
 800eb40:	6011      	str	r1, [r2, #0]
 800eb42:	d1dd      	bne.n	800eb00 <_free_r+0x28>
 800eb44:	681c      	ldr	r4, [r3, #0]
 800eb46:	685b      	ldr	r3, [r3, #4]
 800eb48:	6053      	str	r3, [r2, #4]
 800eb4a:	4421      	add	r1, r4
 800eb4c:	6011      	str	r1, [r2, #0]
 800eb4e:	e7d7      	b.n	800eb00 <_free_r+0x28>
 800eb50:	d902      	bls.n	800eb58 <_free_r+0x80>
 800eb52:	230c      	movs	r3, #12
 800eb54:	6003      	str	r3, [r0, #0]
 800eb56:	e7d3      	b.n	800eb00 <_free_r+0x28>
 800eb58:	6825      	ldr	r5, [r4, #0]
 800eb5a:	1961      	adds	r1, r4, r5
 800eb5c:	428b      	cmp	r3, r1
 800eb5e:	bf04      	itt	eq
 800eb60:	6819      	ldreq	r1, [r3, #0]
 800eb62:	685b      	ldreq	r3, [r3, #4]
 800eb64:	6063      	str	r3, [r4, #4]
 800eb66:	bf04      	itt	eq
 800eb68:	1949      	addeq	r1, r1, r5
 800eb6a:	6021      	streq	r1, [r4, #0]
 800eb6c:	6054      	str	r4, [r2, #4]
 800eb6e:	e7c7      	b.n	800eb00 <_free_r+0x28>
 800eb70:	b003      	add	sp, #12
 800eb72:	bd30      	pop	{r4, r5, pc}
 800eb74:	20007508 	.word	0x20007508

0800eb78 <_malloc_r>:
 800eb78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb7a:	1ccd      	adds	r5, r1, #3
 800eb7c:	f025 0503 	bic.w	r5, r5, #3
 800eb80:	3508      	adds	r5, #8
 800eb82:	2d0c      	cmp	r5, #12
 800eb84:	bf38      	it	cc
 800eb86:	250c      	movcc	r5, #12
 800eb88:	2d00      	cmp	r5, #0
 800eb8a:	4606      	mov	r6, r0
 800eb8c:	db01      	blt.n	800eb92 <_malloc_r+0x1a>
 800eb8e:	42a9      	cmp	r1, r5
 800eb90:	d903      	bls.n	800eb9a <_malloc_r+0x22>
 800eb92:	230c      	movs	r3, #12
 800eb94:	6033      	str	r3, [r6, #0]
 800eb96:	2000      	movs	r0, #0
 800eb98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb9a:	f000 ff13 	bl	800f9c4 <__malloc_lock>
 800eb9e:	4921      	ldr	r1, [pc, #132]	; (800ec24 <_malloc_r+0xac>)
 800eba0:	680a      	ldr	r2, [r1, #0]
 800eba2:	4614      	mov	r4, r2
 800eba4:	b99c      	cbnz	r4, 800ebce <_malloc_r+0x56>
 800eba6:	4f20      	ldr	r7, [pc, #128]	; (800ec28 <_malloc_r+0xb0>)
 800eba8:	683b      	ldr	r3, [r7, #0]
 800ebaa:	b923      	cbnz	r3, 800ebb6 <_malloc_r+0x3e>
 800ebac:	4621      	mov	r1, r4
 800ebae:	4630      	mov	r0, r6
 800ebb0:	f000 fbb8 	bl	800f324 <_sbrk_r>
 800ebb4:	6038      	str	r0, [r7, #0]
 800ebb6:	4629      	mov	r1, r5
 800ebb8:	4630      	mov	r0, r6
 800ebba:	f000 fbb3 	bl	800f324 <_sbrk_r>
 800ebbe:	1c43      	adds	r3, r0, #1
 800ebc0:	d123      	bne.n	800ec0a <_malloc_r+0x92>
 800ebc2:	230c      	movs	r3, #12
 800ebc4:	6033      	str	r3, [r6, #0]
 800ebc6:	4630      	mov	r0, r6
 800ebc8:	f000 ff02 	bl	800f9d0 <__malloc_unlock>
 800ebcc:	e7e3      	b.n	800eb96 <_malloc_r+0x1e>
 800ebce:	6823      	ldr	r3, [r4, #0]
 800ebd0:	1b5b      	subs	r3, r3, r5
 800ebd2:	d417      	bmi.n	800ec04 <_malloc_r+0x8c>
 800ebd4:	2b0b      	cmp	r3, #11
 800ebd6:	d903      	bls.n	800ebe0 <_malloc_r+0x68>
 800ebd8:	6023      	str	r3, [r4, #0]
 800ebda:	441c      	add	r4, r3
 800ebdc:	6025      	str	r5, [r4, #0]
 800ebde:	e004      	b.n	800ebea <_malloc_r+0x72>
 800ebe0:	6863      	ldr	r3, [r4, #4]
 800ebe2:	42a2      	cmp	r2, r4
 800ebe4:	bf0c      	ite	eq
 800ebe6:	600b      	streq	r3, [r1, #0]
 800ebe8:	6053      	strne	r3, [r2, #4]
 800ebea:	4630      	mov	r0, r6
 800ebec:	f000 fef0 	bl	800f9d0 <__malloc_unlock>
 800ebf0:	f104 000b 	add.w	r0, r4, #11
 800ebf4:	1d23      	adds	r3, r4, #4
 800ebf6:	f020 0007 	bic.w	r0, r0, #7
 800ebfa:	1ac2      	subs	r2, r0, r3
 800ebfc:	d0cc      	beq.n	800eb98 <_malloc_r+0x20>
 800ebfe:	1a1b      	subs	r3, r3, r0
 800ec00:	50a3      	str	r3, [r4, r2]
 800ec02:	e7c9      	b.n	800eb98 <_malloc_r+0x20>
 800ec04:	4622      	mov	r2, r4
 800ec06:	6864      	ldr	r4, [r4, #4]
 800ec08:	e7cc      	b.n	800eba4 <_malloc_r+0x2c>
 800ec0a:	1cc4      	adds	r4, r0, #3
 800ec0c:	f024 0403 	bic.w	r4, r4, #3
 800ec10:	42a0      	cmp	r0, r4
 800ec12:	d0e3      	beq.n	800ebdc <_malloc_r+0x64>
 800ec14:	1a21      	subs	r1, r4, r0
 800ec16:	4630      	mov	r0, r6
 800ec18:	f000 fb84 	bl	800f324 <_sbrk_r>
 800ec1c:	3001      	adds	r0, #1
 800ec1e:	d1dd      	bne.n	800ebdc <_malloc_r+0x64>
 800ec20:	e7cf      	b.n	800ebc2 <_malloc_r+0x4a>
 800ec22:	bf00      	nop
 800ec24:	20007508 	.word	0x20007508
 800ec28:	2000750c 	.word	0x2000750c

0800ec2c <__sfputc_r>:
 800ec2c:	6893      	ldr	r3, [r2, #8]
 800ec2e:	3b01      	subs	r3, #1
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	b410      	push	{r4}
 800ec34:	6093      	str	r3, [r2, #8]
 800ec36:	da08      	bge.n	800ec4a <__sfputc_r+0x1e>
 800ec38:	6994      	ldr	r4, [r2, #24]
 800ec3a:	42a3      	cmp	r3, r4
 800ec3c:	db01      	blt.n	800ec42 <__sfputc_r+0x16>
 800ec3e:	290a      	cmp	r1, #10
 800ec40:	d103      	bne.n	800ec4a <__sfputc_r+0x1e>
 800ec42:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec46:	f000 bbe1 	b.w	800f40c <__swbuf_r>
 800ec4a:	6813      	ldr	r3, [r2, #0]
 800ec4c:	1c58      	adds	r0, r3, #1
 800ec4e:	6010      	str	r0, [r2, #0]
 800ec50:	7019      	strb	r1, [r3, #0]
 800ec52:	4608      	mov	r0, r1
 800ec54:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec58:	4770      	bx	lr

0800ec5a <__sfputs_r>:
 800ec5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec5c:	4606      	mov	r6, r0
 800ec5e:	460f      	mov	r7, r1
 800ec60:	4614      	mov	r4, r2
 800ec62:	18d5      	adds	r5, r2, r3
 800ec64:	42ac      	cmp	r4, r5
 800ec66:	d101      	bne.n	800ec6c <__sfputs_r+0x12>
 800ec68:	2000      	movs	r0, #0
 800ec6a:	e007      	b.n	800ec7c <__sfputs_r+0x22>
 800ec6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec70:	463a      	mov	r2, r7
 800ec72:	4630      	mov	r0, r6
 800ec74:	f7ff ffda 	bl	800ec2c <__sfputc_r>
 800ec78:	1c43      	adds	r3, r0, #1
 800ec7a:	d1f3      	bne.n	800ec64 <__sfputs_r+0xa>
 800ec7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ec80 <_vfiprintf_r>:
 800ec80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec84:	460d      	mov	r5, r1
 800ec86:	b09d      	sub	sp, #116	; 0x74
 800ec88:	4614      	mov	r4, r2
 800ec8a:	4698      	mov	r8, r3
 800ec8c:	4606      	mov	r6, r0
 800ec8e:	b118      	cbz	r0, 800ec98 <_vfiprintf_r+0x18>
 800ec90:	6983      	ldr	r3, [r0, #24]
 800ec92:	b90b      	cbnz	r3, 800ec98 <_vfiprintf_r+0x18>
 800ec94:	f000 fd94 	bl	800f7c0 <__sinit>
 800ec98:	4b89      	ldr	r3, [pc, #548]	; (800eec0 <_vfiprintf_r+0x240>)
 800ec9a:	429d      	cmp	r5, r3
 800ec9c:	d11b      	bne.n	800ecd6 <_vfiprintf_r+0x56>
 800ec9e:	6875      	ldr	r5, [r6, #4]
 800eca0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eca2:	07d9      	lsls	r1, r3, #31
 800eca4:	d405      	bmi.n	800ecb2 <_vfiprintf_r+0x32>
 800eca6:	89ab      	ldrh	r3, [r5, #12]
 800eca8:	059a      	lsls	r2, r3, #22
 800ecaa:	d402      	bmi.n	800ecb2 <_vfiprintf_r+0x32>
 800ecac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ecae:	f7ff fec0 	bl	800ea32 <__retarget_lock_acquire_recursive>
 800ecb2:	89ab      	ldrh	r3, [r5, #12]
 800ecb4:	071b      	lsls	r3, r3, #28
 800ecb6:	d501      	bpl.n	800ecbc <_vfiprintf_r+0x3c>
 800ecb8:	692b      	ldr	r3, [r5, #16]
 800ecba:	b9eb      	cbnz	r3, 800ecf8 <_vfiprintf_r+0x78>
 800ecbc:	4629      	mov	r1, r5
 800ecbe:	4630      	mov	r0, r6
 800ecc0:	f000 fbf6 	bl	800f4b0 <__swsetup_r>
 800ecc4:	b1c0      	cbz	r0, 800ecf8 <_vfiprintf_r+0x78>
 800ecc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ecc8:	07dc      	lsls	r4, r3, #31
 800ecca:	d50e      	bpl.n	800ecea <_vfiprintf_r+0x6a>
 800eccc:	f04f 30ff 	mov.w	r0, #4294967295
 800ecd0:	b01d      	add	sp, #116	; 0x74
 800ecd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecd6:	4b7b      	ldr	r3, [pc, #492]	; (800eec4 <_vfiprintf_r+0x244>)
 800ecd8:	429d      	cmp	r5, r3
 800ecda:	d101      	bne.n	800ece0 <_vfiprintf_r+0x60>
 800ecdc:	68b5      	ldr	r5, [r6, #8]
 800ecde:	e7df      	b.n	800eca0 <_vfiprintf_r+0x20>
 800ece0:	4b79      	ldr	r3, [pc, #484]	; (800eec8 <_vfiprintf_r+0x248>)
 800ece2:	429d      	cmp	r5, r3
 800ece4:	bf08      	it	eq
 800ece6:	68f5      	ldreq	r5, [r6, #12]
 800ece8:	e7da      	b.n	800eca0 <_vfiprintf_r+0x20>
 800ecea:	89ab      	ldrh	r3, [r5, #12]
 800ecec:	0598      	lsls	r0, r3, #22
 800ecee:	d4ed      	bmi.n	800eccc <_vfiprintf_r+0x4c>
 800ecf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ecf2:	f7ff fe9f 	bl	800ea34 <__retarget_lock_release_recursive>
 800ecf6:	e7e9      	b.n	800eccc <_vfiprintf_r+0x4c>
 800ecf8:	2300      	movs	r3, #0
 800ecfa:	9309      	str	r3, [sp, #36]	; 0x24
 800ecfc:	2320      	movs	r3, #32
 800ecfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ed02:	f8cd 800c 	str.w	r8, [sp, #12]
 800ed06:	2330      	movs	r3, #48	; 0x30
 800ed08:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800eecc <_vfiprintf_r+0x24c>
 800ed0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ed10:	f04f 0901 	mov.w	r9, #1
 800ed14:	4623      	mov	r3, r4
 800ed16:	469a      	mov	sl, r3
 800ed18:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed1c:	b10a      	cbz	r2, 800ed22 <_vfiprintf_r+0xa2>
 800ed1e:	2a25      	cmp	r2, #37	; 0x25
 800ed20:	d1f9      	bne.n	800ed16 <_vfiprintf_r+0x96>
 800ed22:	ebba 0b04 	subs.w	fp, sl, r4
 800ed26:	d00b      	beq.n	800ed40 <_vfiprintf_r+0xc0>
 800ed28:	465b      	mov	r3, fp
 800ed2a:	4622      	mov	r2, r4
 800ed2c:	4629      	mov	r1, r5
 800ed2e:	4630      	mov	r0, r6
 800ed30:	f7ff ff93 	bl	800ec5a <__sfputs_r>
 800ed34:	3001      	adds	r0, #1
 800ed36:	f000 80aa 	beq.w	800ee8e <_vfiprintf_r+0x20e>
 800ed3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed3c:	445a      	add	r2, fp
 800ed3e:	9209      	str	r2, [sp, #36]	; 0x24
 800ed40:	f89a 3000 	ldrb.w	r3, [sl]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	f000 80a2 	beq.w	800ee8e <_vfiprintf_r+0x20e>
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	f04f 32ff 	mov.w	r2, #4294967295
 800ed50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed54:	f10a 0a01 	add.w	sl, sl, #1
 800ed58:	9304      	str	r3, [sp, #16]
 800ed5a:	9307      	str	r3, [sp, #28]
 800ed5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ed60:	931a      	str	r3, [sp, #104]	; 0x68
 800ed62:	4654      	mov	r4, sl
 800ed64:	2205      	movs	r2, #5
 800ed66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed6a:	4858      	ldr	r0, [pc, #352]	; (800eecc <_vfiprintf_r+0x24c>)
 800ed6c:	f7f1 fa68 	bl	8000240 <memchr>
 800ed70:	9a04      	ldr	r2, [sp, #16]
 800ed72:	b9d8      	cbnz	r0, 800edac <_vfiprintf_r+0x12c>
 800ed74:	06d1      	lsls	r1, r2, #27
 800ed76:	bf44      	itt	mi
 800ed78:	2320      	movmi	r3, #32
 800ed7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ed7e:	0713      	lsls	r3, r2, #28
 800ed80:	bf44      	itt	mi
 800ed82:	232b      	movmi	r3, #43	; 0x2b
 800ed84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ed88:	f89a 3000 	ldrb.w	r3, [sl]
 800ed8c:	2b2a      	cmp	r3, #42	; 0x2a
 800ed8e:	d015      	beq.n	800edbc <_vfiprintf_r+0x13c>
 800ed90:	9a07      	ldr	r2, [sp, #28]
 800ed92:	4654      	mov	r4, sl
 800ed94:	2000      	movs	r0, #0
 800ed96:	f04f 0c0a 	mov.w	ip, #10
 800ed9a:	4621      	mov	r1, r4
 800ed9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eda0:	3b30      	subs	r3, #48	; 0x30
 800eda2:	2b09      	cmp	r3, #9
 800eda4:	d94e      	bls.n	800ee44 <_vfiprintf_r+0x1c4>
 800eda6:	b1b0      	cbz	r0, 800edd6 <_vfiprintf_r+0x156>
 800eda8:	9207      	str	r2, [sp, #28]
 800edaa:	e014      	b.n	800edd6 <_vfiprintf_r+0x156>
 800edac:	eba0 0308 	sub.w	r3, r0, r8
 800edb0:	fa09 f303 	lsl.w	r3, r9, r3
 800edb4:	4313      	orrs	r3, r2
 800edb6:	9304      	str	r3, [sp, #16]
 800edb8:	46a2      	mov	sl, r4
 800edba:	e7d2      	b.n	800ed62 <_vfiprintf_r+0xe2>
 800edbc:	9b03      	ldr	r3, [sp, #12]
 800edbe:	1d19      	adds	r1, r3, #4
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	9103      	str	r1, [sp, #12]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	bfbb      	ittet	lt
 800edc8:	425b      	neglt	r3, r3
 800edca:	f042 0202 	orrlt.w	r2, r2, #2
 800edce:	9307      	strge	r3, [sp, #28]
 800edd0:	9307      	strlt	r3, [sp, #28]
 800edd2:	bfb8      	it	lt
 800edd4:	9204      	strlt	r2, [sp, #16]
 800edd6:	7823      	ldrb	r3, [r4, #0]
 800edd8:	2b2e      	cmp	r3, #46	; 0x2e
 800edda:	d10c      	bne.n	800edf6 <_vfiprintf_r+0x176>
 800eddc:	7863      	ldrb	r3, [r4, #1]
 800edde:	2b2a      	cmp	r3, #42	; 0x2a
 800ede0:	d135      	bne.n	800ee4e <_vfiprintf_r+0x1ce>
 800ede2:	9b03      	ldr	r3, [sp, #12]
 800ede4:	1d1a      	adds	r2, r3, #4
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	9203      	str	r2, [sp, #12]
 800edea:	2b00      	cmp	r3, #0
 800edec:	bfb8      	it	lt
 800edee:	f04f 33ff 	movlt.w	r3, #4294967295
 800edf2:	3402      	adds	r4, #2
 800edf4:	9305      	str	r3, [sp, #20]
 800edf6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800eedc <_vfiprintf_r+0x25c>
 800edfa:	7821      	ldrb	r1, [r4, #0]
 800edfc:	2203      	movs	r2, #3
 800edfe:	4650      	mov	r0, sl
 800ee00:	f7f1 fa1e 	bl	8000240 <memchr>
 800ee04:	b140      	cbz	r0, 800ee18 <_vfiprintf_r+0x198>
 800ee06:	2340      	movs	r3, #64	; 0x40
 800ee08:	eba0 000a 	sub.w	r0, r0, sl
 800ee0c:	fa03 f000 	lsl.w	r0, r3, r0
 800ee10:	9b04      	ldr	r3, [sp, #16]
 800ee12:	4303      	orrs	r3, r0
 800ee14:	3401      	adds	r4, #1
 800ee16:	9304      	str	r3, [sp, #16]
 800ee18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee1c:	482c      	ldr	r0, [pc, #176]	; (800eed0 <_vfiprintf_r+0x250>)
 800ee1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ee22:	2206      	movs	r2, #6
 800ee24:	f7f1 fa0c 	bl	8000240 <memchr>
 800ee28:	2800      	cmp	r0, #0
 800ee2a:	d03f      	beq.n	800eeac <_vfiprintf_r+0x22c>
 800ee2c:	4b29      	ldr	r3, [pc, #164]	; (800eed4 <_vfiprintf_r+0x254>)
 800ee2e:	bb1b      	cbnz	r3, 800ee78 <_vfiprintf_r+0x1f8>
 800ee30:	9b03      	ldr	r3, [sp, #12]
 800ee32:	3307      	adds	r3, #7
 800ee34:	f023 0307 	bic.w	r3, r3, #7
 800ee38:	3308      	adds	r3, #8
 800ee3a:	9303      	str	r3, [sp, #12]
 800ee3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee3e:	443b      	add	r3, r7
 800ee40:	9309      	str	r3, [sp, #36]	; 0x24
 800ee42:	e767      	b.n	800ed14 <_vfiprintf_r+0x94>
 800ee44:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee48:	460c      	mov	r4, r1
 800ee4a:	2001      	movs	r0, #1
 800ee4c:	e7a5      	b.n	800ed9a <_vfiprintf_r+0x11a>
 800ee4e:	2300      	movs	r3, #0
 800ee50:	3401      	adds	r4, #1
 800ee52:	9305      	str	r3, [sp, #20]
 800ee54:	4619      	mov	r1, r3
 800ee56:	f04f 0c0a 	mov.w	ip, #10
 800ee5a:	4620      	mov	r0, r4
 800ee5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee60:	3a30      	subs	r2, #48	; 0x30
 800ee62:	2a09      	cmp	r2, #9
 800ee64:	d903      	bls.n	800ee6e <_vfiprintf_r+0x1ee>
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d0c5      	beq.n	800edf6 <_vfiprintf_r+0x176>
 800ee6a:	9105      	str	r1, [sp, #20]
 800ee6c:	e7c3      	b.n	800edf6 <_vfiprintf_r+0x176>
 800ee6e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ee72:	4604      	mov	r4, r0
 800ee74:	2301      	movs	r3, #1
 800ee76:	e7f0      	b.n	800ee5a <_vfiprintf_r+0x1da>
 800ee78:	ab03      	add	r3, sp, #12
 800ee7a:	9300      	str	r3, [sp, #0]
 800ee7c:	462a      	mov	r2, r5
 800ee7e:	4b16      	ldr	r3, [pc, #88]	; (800eed8 <_vfiprintf_r+0x258>)
 800ee80:	a904      	add	r1, sp, #16
 800ee82:	4630      	mov	r0, r6
 800ee84:	f3af 8000 	nop.w
 800ee88:	4607      	mov	r7, r0
 800ee8a:	1c78      	adds	r0, r7, #1
 800ee8c:	d1d6      	bne.n	800ee3c <_vfiprintf_r+0x1bc>
 800ee8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ee90:	07d9      	lsls	r1, r3, #31
 800ee92:	d405      	bmi.n	800eea0 <_vfiprintf_r+0x220>
 800ee94:	89ab      	ldrh	r3, [r5, #12]
 800ee96:	059a      	lsls	r2, r3, #22
 800ee98:	d402      	bmi.n	800eea0 <_vfiprintf_r+0x220>
 800ee9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ee9c:	f7ff fdca 	bl	800ea34 <__retarget_lock_release_recursive>
 800eea0:	89ab      	ldrh	r3, [r5, #12]
 800eea2:	065b      	lsls	r3, r3, #25
 800eea4:	f53f af12 	bmi.w	800eccc <_vfiprintf_r+0x4c>
 800eea8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eeaa:	e711      	b.n	800ecd0 <_vfiprintf_r+0x50>
 800eeac:	ab03      	add	r3, sp, #12
 800eeae:	9300      	str	r3, [sp, #0]
 800eeb0:	462a      	mov	r2, r5
 800eeb2:	4b09      	ldr	r3, [pc, #36]	; (800eed8 <_vfiprintf_r+0x258>)
 800eeb4:	a904      	add	r1, sp, #16
 800eeb6:	4630      	mov	r0, r6
 800eeb8:	f000 f880 	bl	800efbc <_printf_i>
 800eebc:	e7e4      	b.n	800ee88 <_vfiprintf_r+0x208>
 800eebe:	bf00      	nop
 800eec0:	0801629c 	.word	0x0801629c
 800eec4:	080162bc 	.word	0x080162bc
 800eec8:	0801627c 	.word	0x0801627c
 800eecc:	08016248 	.word	0x08016248
 800eed0:	08016252 	.word	0x08016252
 800eed4:	00000000 	.word	0x00000000
 800eed8:	0800ec5b 	.word	0x0800ec5b
 800eedc:	0801624e 	.word	0x0801624e

0800eee0 <_printf_common>:
 800eee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eee4:	4616      	mov	r6, r2
 800eee6:	4699      	mov	r9, r3
 800eee8:	688a      	ldr	r2, [r1, #8]
 800eeea:	690b      	ldr	r3, [r1, #16]
 800eeec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eef0:	4293      	cmp	r3, r2
 800eef2:	bfb8      	it	lt
 800eef4:	4613      	movlt	r3, r2
 800eef6:	6033      	str	r3, [r6, #0]
 800eef8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eefc:	4607      	mov	r7, r0
 800eefe:	460c      	mov	r4, r1
 800ef00:	b10a      	cbz	r2, 800ef06 <_printf_common+0x26>
 800ef02:	3301      	adds	r3, #1
 800ef04:	6033      	str	r3, [r6, #0]
 800ef06:	6823      	ldr	r3, [r4, #0]
 800ef08:	0699      	lsls	r1, r3, #26
 800ef0a:	bf42      	ittt	mi
 800ef0c:	6833      	ldrmi	r3, [r6, #0]
 800ef0e:	3302      	addmi	r3, #2
 800ef10:	6033      	strmi	r3, [r6, #0]
 800ef12:	6825      	ldr	r5, [r4, #0]
 800ef14:	f015 0506 	ands.w	r5, r5, #6
 800ef18:	d106      	bne.n	800ef28 <_printf_common+0x48>
 800ef1a:	f104 0a19 	add.w	sl, r4, #25
 800ef1e:	68e3      	ldr	r3, [r4, #12]
 800ef20:	6832      	ldr	r2, [r6, #0]
 800ef22:	1a9b      	subs	r3, r3, r2
 800ef24:	42ab      	cmp	r3, r5
 800ef26:	dc26      	bgt.n	800ef76 <_printf_common+0x96>
 800ef28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ef2c:	1e13      	subs	r3, r2, #0
 800ef2e:	6822      	ldr	r2, [r4, #0]
 800ef30:	bf18      	it	ne
 800ef32:	2301      	movne	r3, #1
 800ef34:	0692      	lsls	r2, r2, #26
 800ef36:	d42b      	bmi.n	800ef90 <_printf_common+0xb0>
 800ef38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ef3c:	4649      	mov	r1, r9
 800ef3e:	4638      	mov	r0, r7
 800ef40:	47c0      	blx	r8
 800ef42:	3001      	adds	r0, #1
 800ef44:	d01e      	beq.n	800ef84 <_printf_common+0xa4>
 800ef46:	6823      	ldr	r3, [r4, #0]
 800ef48:	68e5      	ldr	r5, [r4, #12]
 800ef4a:	6832      	ldr	r2, [r6, #0]
 800ef4c:	f003 0306 	and.w	r3, r3, #6
 800ef50:	2b04      	cmp	r3, #4
 800ef52:	bf08      	it	eq
 800ef54:	1aad      	subeq	r5, r5, r2
 800ef56:	68a3      	ldr	r3, [r4, #8]
 800ef58:	6922      	ldr	r2, [r4, #16]
 800ef5a:	bf0c      	ite	eq
 800ef5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ef60:	2500      	movne	r5, #0
 800ef62:	4293      	cmp	r3, r2
 800ef64:	bfc4      	itt	gt
 800ef66:	1a9b      	subgt	r3, r3, r2
 800ef68:	18ed      	addgt	r5, r5, r3
 800ef6a:	2600      	movs	r6, #0
 800ef6c:	341a      	adds	r4, #26
 800ef6e:	42b5      	cmp	r5, r6
 800ef70:	d11a      	bne.n	800efa8 <_printf_common+0xc8>
 800ef72:	2000      	movs	r0, #0
 800ef74:	e008      	b.n	800ef88 <_printf_common+0xa8>
 800ef76:	2301      	movs	r3, #1
 800ef78:	4652      	mov	r2, sl
 800ef7a:	4649      	mov	r1, r9
 800ef7c:	4638      	mov	r0, r7
 800ef7e:	47c0      	blx	r8
 800ef80:	3001      	adds	r0, #1
 800ef82:	d103      	bne.n	800ef8c <_printf_common+0xac>
 800ef84:	f04f 30ff 	mov.w	r0, #4294967295
 800ef88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef8c:	3501      	adds	r5, #1
 800ef8e:	e7c6      	b.n	800ef1e <_printf_common+0x3e>
 800ef90:	18e1      	adds	r1, r4, r3
 800ef92:	1c5a      	adds	r2, r3, #1
 800ef94:	2030      	movs	r0, #48	; 0x30
 800ef96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ef9a:	4422      	add	r2, r4
 800ef9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800efa0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800efa4:	3302      	adds	r3, #2
 800efa6:	e7c7      	b.n	800ef38 <_printf_common+0x58>
 800efa8:	2301      	movs	r3, #1
 800efaa:	4622      	mov	r2, r4
 800efac:	4649      	mov	r1, r9
 800efae:	4638      	mov	r0, r7
 800efb0:	47c0      	blx	r8
 800efb2:	3001      	adds	r0, #1
 800efb4:	d0e6      	beq.n	800ef84 <_printf_common+0xa4>
 800efb6:	3601      	adds	r6, #1
 800efb8:	e7d9      	b.n	800ef6e <_printf_common+0x8e>
	...

0800efbc <_printf_i>:
 800efbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800efc0:	460c      	mov	r4, r1
 800efc2:	4691      	mov	r9, r2
 800efc4:	7e27      	ldrb	r7, [r4, #24]
 800efc6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800efc8:	2f78      	cmp	r7, #120	; 0x78
 800efca:	4680      	mov	r8, r0
 800efcc:	469a      	mov	sl, r3
 800efce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800efd2:	d807      	bhi.n	800efe4 <_printf_i+0x28>
 800efd4:	2f62      	cmp	r7, #98	; 0x62
 800efd6:	d80a      	bhi.n	800efee <_printf_i+0x32>
 800efd8:	2f00      	cmp	r7, #0
 800efda:	f000 80d8 	beq.w	800f18e <_printf_i+0x1d2>
 800efde:	2f58      	cmp	r7, #88	; 0x58
 800efe0:	f000 80a3 	beq.w	800f12a <_printf_i+0x16e>
 800efe4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800efe8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800efec:	e03a      	b.n	800f064 <_printf_i+0xa8>
 800efee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800eff2:	2b15      	cmp	r3, #21
 800eff4:	d8f6      	bhi.n	800efe4 <_printf_i+0x28>
 800eff6:	a001      	add	r0, pc, #4	; (adr r0, 800effc <_printf_i+0x40>)
 800eff8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800effc:	0800f055 	.word	0x0800f055
 800f000:	0800f069 	.word	0x0800f069
 800f004:	0800efe5 	.word	0x0800efe5
 800f008:	0800efe5 	.word	0x0800efe5
 800f00c:	0800efe5 	.word	0x0800efe5
 800f010:	0800efe5 	.word	0x0800efe5
 800f014:	0800f069 	.word	0x0800f069
 800f018:	0800efe5 	.word	0x0800efe5
 800f01c:	0800efe5 	.word	0x0800efe5
 800f020:	0800efe5 	.word	0x0800efe5
 800f024:	0800efe5 	.word	0x0800efe5
 800f028:	0800f175 	.word	0x0800f175
 800f02c:	0800f099 	.word	0x0800f099
 800f030:	0800f157 	.word	0x0800f157
 800f034:	0800efe5 	.word	0x0800efe5
 800f038:	0800efe5 	.word	0x0800efe5
 800f03c:	0800f197 	.word	0x0800f197
 800f040:	0800efe5 	.word	0x0800efe5
 800f044:	0800f099 	.word	0x0800f099
 800f048:	0800efe5 	.word	0x0800efe5
 800f04c:	0800efe5 	.word	0x0800efe5
 800f050:	0800f15f 	.word	0x0800f15f
 800f054:	680b      	ldr	r3, [r1, #0]
 800f056:	1d1a      	adds	r2, r3, #4
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	600a      	str	r2, [r1, #0]
 800f05c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f060:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f064:	2301      	movs	r3, #1
 800f066:	e0a3      	b.n	800f1b0 <_printf_i+0x1f4>
 800f068:	6825      	ldr	r5, [r4, #0]
 800f06a:	6808      	ldr	r0, [r1, #0]
 800f06c:	062e      	lsls	r6, r5, #24
 800f06e:	f100 0304 	add.w	r3, r0, #4
 800f072:	d50a      	bpl.n	800f08a <_printf_i+0xce>
 800f074:	6805      	ldr	r5, [r0, #0]
 800f076:	600b      	str	r3, [r1, #0]
 800f078:	2d00      	cmp	r5, #0
 800f07a:	da03      	bge.n	800f084 <_printf_i+0xc8>
 800f07c:	232d      	movs	r3, #45	; 0x2d
 800f07e:	426d      	negs	r5, r5
 800f080:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f084:	485e      	ldr	r0, [pc, #376]	; (800f200 <_printf_i+0x244>)
 800f086:	230a      	movs	r3, #10
 800f088:	e019      	b.n	800f0be <_printf_i+0x102>
 800f08a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f08e:	6805      	ldr	r5, [r0, #0]
 800f090:	600b      	str	r3, [r1, #0]
 800f092:	bf18      	it	ne
 800f094:	b22d      	sxthne	r5, r5
 800f096:	e7ef      	b.n	800f078 <_printf_i+0xbc>
 800f098:	680b      	ldr	r3, [r1, #0]
 800f09a:	6825      	ldr	r5, [r4, #0]
 800f09c:	1d18      	adds	r0, r3, #4
 800f09e:	6008      	str	r0, [r1, #0]
 800f0a0:	0628      	lsls	r0, r5, #24
 800f0a2:	d501      	bpl.n	800f0a8 <_printf_i+0xec>
 800f0a4:	681d      	ldr	r5, [r3, #0]
 800f0a6:	e002      	b.n	800f0ae <_printf_i+0xf2>
 800f0a8:	0669      	lsls	r1, r5, #25
 800f0aa:	d5fb      	bpl.n	800f0a4 <_printf_i+0xe8>
 800f0ac:	881d      	ldrh	r5, [r3, #0]
 800f0ae:	4854      	ldr	r0, [pc, #336]	; (800f200 <_printf_i+0x244>)
 800f0b0:	2f6f      	cmp	r7, #111	; 0x6f
 800f0b2:	bf0c      	ite	eq
 800f0b4:	2308      	moveq	r3, #8
 800f0b6:	230a      	movne	r3, #10
 800f0b8:	2100      	movs	r1, #0
 800f0ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f0be:	6866      	ldr	r6, [r4, #4]
 800f0c0:	60a6      	str	r6, [r4, #8]
 800f0c2:	2e00      	cmp	r6, #0
 800f0c4:	bfa2      	ittt	ge
 800f0c6:	6821      	ldrge	r1, [r4, #0]
 800f0c8:	f021 0104 	bicge.w	r1, r1, #4
 800f0cc:	6021      	strge	r1, [r4, #0]
 800f0ce:	b90d      	cbnz	r5, 800f0d4 <_printf_i+0x118>
 800f0d0:	2e00      	cmp	r6, #0
 800f0d2:	d04d      	beq.n	800f170 <_printf_i+0x1b4>
 800f0d4:	4616      	mov	r6, r2
 800f0d6:	fbb5 f1f3 	udiv	r1, r5, r3
 800f0da:	fb03 5711 	mls	r7, r3, r1, r5
 800f0de:	5dc7      	ldrb	r7, [r0, r7]
 800f0e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f0e4:	462f      	mov	r7, r5
 800f0e6:	42bb      	cmp	r3, r7
 800f0e8:	460d      	mov	r5, r1
 800f0ea:	d9f4      	bls.n	800f0d6 <_printf_i+0x11a>
 800f0ec:	2b08      	cmp	r3, #8
 800f0ee:	d10b      	bne.n	800f108 <_printf_i+0x14c>
 800f0f0:	6823      	ldr	r3, [r4, #0]
 800f0f2:	07df      	lsls	r7, r3, #31
 800f0f4:	d508      	bpl.n	800f108 <_printf_i+0x14c>
 800f0f6:	6923      	ldr	r3, [r4, #16]
 800f0f8:	6861      	ldr	r1, [r4, #4]
 800f0fa:	4299      	cmp	r1, r3
 800f0fc:	bfde      	ittt	le
 800f0fe:	2330      	movle	r3, #48	; 0x30
 800f100:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f104:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f108:	1b92      	subs	r2, r2, r6
 800f10a:	6122      	str	r2, [r4, #16]
 800f10c:	f8cd a000 	str.w	sl, [sp]
 800f110:	464b      	mov	r3, r9
 800f112:	aa03      	add	r2, sp, #12
 800f114:	4621      	mov	r1, r4
 800f116:	4640      	mov	r0, r8
 800f118:	f7ff fee2 	bl	800eee0 <_printf_common>
 800f11c:	3001      	adds	r0, #1
 800f11e:	d14c      	bne.n	800f1ba <_printf_i+0x1fe>
 800f120:	f04f 30ff 	mov.w	r0, #4294967295
 800f124:	b004      	add	sp, #16
 800f126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f12a:	4835      	ldr	r0, [pc, #212]	; (800f200 <_printf_i+0x244>)
 800f12c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f130:	6823      	ldr	r3, [r4, #0]
 800f132:	680e      	ldr	r6, [r1, #0]
 800f134:	061f      	lsls	r7, r3, #24
 800f136:	f856 5b04 	ldr.w	r5, [r6], #4
 800f13a:	600e      	str	r6, [r1, #0]
 800f13c:	d514      	bpl.n	800f168 <_printf_i+0x1ac>
 800f13e:	07d9      	lsls	r1, r3, #31
 800f140:	bf44      	itt	mi
 800f142:	f043 0320 	orrmi.w	r3, r3, #32
 800f146:	6023      	strmi	r3, [r4, #0]
 800f148:	b91d      	cbnz	r5, 800f152 <_printf_i+0x196>
 800f14a:	6823      	ldr	r3, [r4, #0]
 800f14c:	f023 0320 	bic.w	r3, r3, #32
 800f150:	6023      	str	r3, [r4, #0]
 800f152:	2310      	movs	r3, #16
 800f154:	e7b0      	b.n	800f0b8 <_printf_i+0xfc>
 800f156:	6823      	ldr	r3, [r4, #0]
 800f158:	f043 0320 	orr.w	r3, r3, #32
 800f15c:	6023      	str	r3, [r4, #0]
 800f15e:	2378      	movs	r3, #120	; 0x78
 800f160:	4828      	ldr	r0, [pc, #160]	; (800f204 <_printf_i+0x248>)
 800f162:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f166:	e7e3      	b.n	800f130 <_printf_i+0x174>
 800f168:	065e      	lsls	r6, r3, #25
 800f16a:	bf48      	it	mi
 800f16c:	b2ad      	uxthmi	r5, r5
 800f16e:	e7e6      	b.n	800f13e <_printf_i+0x182>
 800f170:	4616      	mov	r6, r2
 800f172:	e7bb      	b.n	800f0ec <_printf_i+0x130>
 800f174:	680b      	ldr	r3, [r1, #0]
 800f176:	6826      	ldr	r6, [r4, #0]
 800f178:	6960      	ldr	r0, [r4, #20]
 800f17a:	1d1d      	adds	r5, r3, #4
 800f17c:	600d      	str	r5, [r1, #0]
 800f17e:	0635      	lsls	r5, r6, #24
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	d501      	bpl.n	800f188 <_printf_i+0x1cc>
 800f184:	6018      	str	r0, [r3, #0]
 800f186:	e002      	b.n	800f18e <_printf_i+0x1d2>
 800f188:	0671      	lsls	r1, r6, #25
 800f18a:	d5fb      	bpl.n	800f184 <_printf_i+0x1c8>
 800f18c:	8018      	strh	r0, [r3, #0]
 800f18e:	2300      	movs	r3, #0
 800f190:	6123      	str	r3, [r4, #16]
 800f192:	4616      	mov	r6, r2
 800f194:	e7ba      	b.n	800f10c <_printf_i+0x150>
 800f196:	680b      	ldr	r3, [r1, #0]
 800f198:	1d1a      	adds	r2, r3, #4
 800f19a:	600a      	str	r2, [r1, #0]
 800f19c:	681e      	ldr	r6, [r3, #0]
 800f19e:	6862      	ldr	r2, [r4, #4]
 800f1a0:	2100      	movs	r1, #0
 800f1a2:	4630      	mov	r0, r6
 800f1a4:	f7f1 f84c 	bl	8000240 <memchr>
 800f1a8:	b108      	cbz	r0, 800f1ae <_printf_i+0x1f2>
 800f1aa:	1b80      	subs	r0, r0, r6
 800f1ac:	6060      	str	r0, [r4, #4]
 800f1ae:	6863      	ldr	r3, [r4, #4]
 800f1b0:	6123      	str	r3, [r4, #16]
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f1b8:	e7a8      	b.n	800f10c <_printf_i+0x150>
 800f1ba:	6923      	ldr	r3, [r4, #16]
 800f1bc:	4632      	mov	r2, r6
 800f1be:	4649      	mov	r1, r9
 800f1c0:	4640      	mov	r0, r8
 800f1c2:	47d0      	blx	sl
 800f1c4:	3001      	adds	r0, #1
 800f1c6:	d0ab      	beq.n	800f120 <_printf_i+0x164>
 800f1c8:	6823      	ldr	r3, [r4, #0]
 800f1ca:	079b      	lsls	r3, r3, #30
 800f1cc:	d413      	bmi.n	800f1f6 <_printf_i+0x23a>
 800f1ce:	68e0      	ldr	r0, [r4, #12]
 800f1d0:	9b03      	ldr	r3, [sp, #12]
 800f1d2:	4298      	cmp	r0, r3
 800f1d4:	bfb8      	it	lt
 800f1d6:	4618      	movlt	r0, r3
 800f1d8:	e7a4      	b.n	800f124 <_printf_i+0x168>
 800f1da:	2301      	movs	r3, #1
 800f1dc:	4632      	mov	r2, r6
 800f1de:	4649      	mov	r1, r9
 800f1e0:	4640      	mov	r0, r8
 800f1e2:	47d0      	blx	sl
 800f1e4:	3001      	adds	r0, #1
 800f1e6:	d09b      	beq.n	800f120 <_printf_i+0x164>
 800f1e8:	3501      	adds	r5, #1
 800f1ea:	68e3      	ldr	r3, [r4, #12]
 800f1ec:	9903      	ldr	r1, [sp, #12]
 800f1ee:	1a5b      	subs	r3, r3, r1
 800f1f0:	42ab      	cmp	r3, r5
 800f1f2:	dcf2      	bgt.n	800f1da <_printf_i+0x21e>
 800f1f4:	e7eb      	b.n	800f1ce <_printf_i+0x212>
 800f1f6:	2500      	movs	r5, #0
 800f1f8:	f104 0619 	add.w	r6, r4, #25
 800f1fc:	e7f5      	b.n	800f1ea <_printf_i+0x22e>
 800f1fe:	bf00      	nop
 800f200:	08016259 	.word	0x08016259
 800f204:	0801626a 	.word	0x0801626a

0800f208 <iprintf>:
 800f208:	b40f      	push	{r0, r1, r2, r3}
 800f20a:	4b0a      	ldr	r3, [pc, #40]	; (800f234 <iprintf+0x2c>)
 800f20c:	b513      	push	{r0, r1, r4, lr}
 800f20e:	681c      	ldr	r4, [r3, #0]
 800f210:	b124      	cbz	r4, 800f21c <iprintf+0x14>
 800f212:	69a3      	ldr	r3, [r4, #24]
 800f214:	b913      	cbnz	r3, 800f21c <iprintf+0x14>
 800f216:	4620      	mov	r0, r4
 800f218:	f000 fad2 	bl	800f7c0 <__sinit>
 800f21c:	ab05      	add	r3, sp, #20
 800f21e:	9a04      	ldr	r2, [sp, #16]
 800f220:	68a1      	ldr	r1, [r4, #8]
 800f222:	9301      	str	r3, [sp, #4]
 800f224:	4620      	mov	r0, r4
 800f226:	f7ff fd2b 	bl	800ec80 <_vfiprintf_r>
 800f22a:	b002      	add	sp, #8
 800f22c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f230:	b004      	add	sp, #16
 800f232:	4770      	bx	lr
 800f234:	20006e60 	.word	0x20006e60

0800f238 <_puts_r>:
 800f238:	b570      	push	{r4, r5, r6, lr}
 800f23a:	460e      	mov	r6, r1
 800f23c:	4605      	mov	r5, r0
 800f23e:	b118      	cbz	r0, 800f248 <_puts_r+0x10>
 800f240:	6983      	ldr	r3, [r0, #24]
 800f242:	b90b      	cbnz	r3, 800f248 <_puts_r+0x10>
 800f244:	f000 fabc 	bl	800f7c0 <__sinit>
 800f248:	69ab      	ldr	r3, [r5, #24]
 800f24a:	68ac      	ldr	r4, [r5, #8]
 800f24c:	b913      	cbnz	r3, 800f254 <_puts_r+0x1c>
 800f24e:	4628      	mov	r0, r5
 800f250:	f000 fab6 	bl	800f7c0 <__sinit>
 800f254:	4b2c      	ldr	r3, [pc, #176]	; (800f308 <_puts_r+0xd0>)
 800f256:	429c      	cmp	r4, r3
 800f258:	d120      	bne.n	800f29c <_puts_r+0x64>
 800f25a:	686c      	ldr	r4, [r5, #4]
 800f25c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f25e:	07db      	lsls	r3, r3, #31
 800f260:	d405      	bmi.n	800f26e <_puts_r+0x36>
 800f262:	89a3      	ldrh	r3, [r4, #12]
 800f264:	0598      	lsls	r0, r3, #22
 800f266:	d402      	bmi.n	800f26e <_puts_r+0x36>
 800f268:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f26a:	f7ff fbe2 	bl	800ea32 <__retarget_lock_acquire_recursive>
 800f26e:	89a3      	ldrh	r3, [r4, #12]
 800f270:	0719      	lsls	r1, r3, #28
 800f272:	d51d      	bpl.n	800f2b0 <_puts_r+0x78>
 800f274:	6923      	ldr	r3, [r4, #16]
 800f276:	b1db      	cbz	r3, 800f2b0 <_puts_r+0x78>
 800f278:	3e01      	subs	r6, #1
 800f27a:	68a3      	ldr	r3, [r4, #8]
 800f27c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f280:	3b01      	subs	r3, #1
 800f282:	60a3      	str	r3, [r4, #8]
 800f284:	bb39      	cbnz	r1, 800f2d6 <_puts_r+0x9e>
 800f286:	2b00      	cmp	r3, #0
 800f288:	da38      	bge.n	800f2fc <_puts_r+0xc4>
 800f28a:	4622      	mov	r2, r4
 800f28c:	210a      	movs	r1, #10
 800f28e:	4628      	mov	r0, r5
 800f290:	f000 f8bc 	bl	800f40c <__swbuf_r>
 800f294:	3001      	adds	r0, #1
 800f296:	d011      	beq.n	800f2bc <_puts_r+0x84>
 800f298:	250a      	movs	r5, #10
 800f29a:	e011      	b.n	800f2c0 <_puts_r+0x88>
 800f29c:	4b1b      	ldr	r3, [pc, #108]	; (800f30c <_puts_r+0xd4>)
 800f29e:	429c      	cmp	r4, r3
 800f2a0:	d101      	bne.n	800f2a6 <_puts_r+0x6e>
 800f2a2:	68ac      	ldr	r4, [r5, #8]
 800f2a4:	e7da      	b.n	800f25c <_puts_r+0x24>
 800f2a6:	4b1a      	ldr	r3, [pc, #104]	; (800f310 <_puts_r+0xd8>)
 800f2a8:	429c      	cmp	r4, r3
 800f2aa:	bf08      	it	eq
 800f2ac:	68ec      	ldreq	r4, [r5, #12]
 800f2ae:	e7d5      	b.n	800f25c <_puts_r+0x24>
 800f2b0:	4621      	mov	r1, r4
 800f2b2:	4628      	mov	r0, r5
 800f2b4:	f000 f8fc 	bl	800f4b0 <__swsetup_r>
 800f2b8:	2800      	cmp	r0, #0
 800f2ba:	d0dd      	beq.n	800f278 <_puts_r+0x40>
 800f2bc:	f04f 35ff 	mov.w	r5, #4294967295
 800f2c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f2c2:	07da      	lsls	r2, r3, #31
 800f2c4:	d405      	bmi.n	800f2d2 <_puts_r+0x9a>
 800f2c6:	89a3      	ldrh	r3, [r4, #12]
 800f2c8:	059b      	lsls	r3, r3, #22
 800f2ca:	d402      	bmi.n	800f2d2 <_puts_r+0x9a>
 800f2cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f2ce:	f7ff fbb1 	bl	800ea34 <__retarget_lock_release_recursive>
 800f2d2:	4628      	mov	r0, r5
 800f2d4:	bd70      	pop	{r4, r5, r6, pc}
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	da04      	bge.n	800f2e4 <_puts_r+0xac>
 800f2da:	69a2      	ldr	r2, [r4, #24]
 800f2dc:	429a      	cmp	r2, r3
 800f2de:	dc06      	bgt.n	800f2ee <_puts_r+0xb6>
 800f2e0:	290a      	cmp	r1, #10
 800f2e2:	d004      	beq.n	800f2ee <_puts_r+0xb6>
 800f2e4:	6823      	ldr	r3, [r4, #0]
 800f2e6:	1c5a      	adds	r2, r3, #1
 800f2e8:	6022      	str	r2, [r4, #0]
 800f2ea:	7019      	strb	r1, [r3, #0]
 800f2ec:	e7c5      	b.n	800f27a <_puts_r+0x42>
 800f2ee:	4622      	mov	r2, r4
 800f2f0:	4628      	mov	r0, r5
 800f2f2:	f000 f88b 	bl	800f40c <__swbuf_r>
 800f2f6:	3001      	adds	r0, #1
 800f2f8:	d1bf      	bne.n	800f27a <_puts_r+0x42>
 800f2fa:	e7df      	b.n	800f2bc <_puts_r+0x84>
 800f2fc:	6823      	ldr	r3, [r4, #0]
 800f2fe:	250a      	movs	r5, #10
 800f300:	1c5a      	adds	r2, r3, #1
 800f302:	6022      	str	r2, [r4, #0]
 800f304:	701d      	strb	r5, [r3, #0]
 800f306:	e7db      	b.n	800f2c0 <_puts_r+0x88>
 800f308:	0801629c 	.word	0x0801629c
 800f30c:	080162bc 	.word	0x080162bc
 800f310:	0801627c 	.word	0x0801627c

0800f314 <puts>:
 800f314:	4b02      	ldr	r3, [pc, #8]	; (800f320 <puts+0xc>)
 800f316:	4601      	mov	r1, r0
 800f318:	6818      	ldr	r0, [r3, #0]
 800f31a:	f7ff bf8d 	b.w	800f238 <_puts_r>
 800f31e:	bf00      	nop
 800f320:	20006e60 	.word	0x20006e60

0800f324 <_sbrk_r>:
 800f324:	b538      	push	{r3, r4, r5, lr}
 800f326:	4d06      	ldr	r5, [pc, #24]	; (800f340 <_sbrk_r+0x1c>)
 800f328:	2300      	movs	r3, #0
 800f32a:	4604      	mov	r4, r0
 800f32c:	4608      	mov	r0, r1
 800f32e:	602b      	str	r3, [r5, #0]
 800f330:	f7f4 f9a8 	bl	8003684 <_sbrk>
 800f334:	1c43      	adds	r3, r0, #1
 800f336:	d102      	bne.n	800f33e <_sbrk_r+0x1a>
 800f338:	682b      	ldr	r3, [r5, #0]
 800f33a:	b103      	cbz	r3, 800f33e <_sbrk_r+0x1a>
 800f33c:	6023      	str	r3, [r4, #0]
 800f33e:	bd38      	pop	{r3, r4, r5, pc}
 800f340:	20007520 	.word	0x20007520

0800f344 <_raise_r>:
 800f344:	291f      	cmp	r1, #31
 800f346:	b538      	push	{r3, r4, r5, lr}
 800f348:	4604      	mov	r4, r0
 800f34a:	460d      	mov	r5, r1
 800f34c:	d904      	bls.n	800f358 <_raise_r+0x14>
 800f34e:	2316      	movs	r3, #22
 800f350:	6003      	str	r3, [r0, #0]
 800f352:	f04f 30ff 	mov.w	r0, #4294967295
 800f356:	bd38      	pop	{r3, r4, r5, pc}
 800f358:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f35a:	b112      	cbz	r2, 800f362 <_raise_r+0x1e>
 800f35c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f360:	b94b      	cbnz	r3, 800f376 <_raise_r+0x32>
 800f362:	4620      	mov	r0, r4
 800f364:	f000 f830 	bl	800f3c8 <_getpid_r>
 800f368:	462a      	mov	r2, r5
 800f36a:	4601      	mov	r1, r0
 800f36c:	4620      	mov	r0, r4
 800f36e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f372:	f000 b817 	b.w	800f3a4 <_kill_r>
 800f376:	2b01      	cmp	r3, #1
 800f378:	d00a      	beq.n	800f390 <_raise_r+0x4c>
 800f37a:	1c59      	adds	r1, r3, #1
 800f37c:	d103      	bne.n	800f386 <_raise_r+0x42>
 800f37e:	2316      	movs	r3, #22
 800f380:	6003      	str	r3, [r0, #0]
 800f382:	2001      	movs	r0, #1
 800f384:	e7e7      	b.n	800f356 <_raise_r+0x12>
 800f386:	2400      	movs	r4, #0
 800f388:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f38c:	4628      	mov	r0, r5
 800f38e:	4798      	blx	r3
 800f390:	2000      	movs	r0, #0
 800f392:	e7e0      	b.n	800f356 <_raise_r+0x12>

0800f394 <raise>:
 800f394:	4b02      	ldr	r3, [pc, #8]	; (800f3a0 <raise+0xc>)
 800f396:	4601      	mov	r1, r0
 800f398:	6818      	ldr	r0, [r3, #0]
 800f39a:	f7ff bfd3 	b.w	800f344 <_raise_r>
 800f39e:	bf00      	nop
 800f3a0:	20006e60 	.word	0x20006e60

0800f3a4 <_kill_r>:
 800f3a4:	b538      	push	{r3, r4, r5, lr}
 800f3a6:	4d07      	ldr	r5, [pc, #28]	; (800f3c4 <_kill_r+0x20>)
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	4604      	mov	r4, r0
 800f3ac:	4608      	mov	r0, r1
 800f3ae:	4611      	mov	r1, r2
 800f3b0:	602b      	str	r3, [r5, #0]
 800f3b2:	f7f4 f8df 	bl	8003574 <_kill>
 800f3b6:	1c43      	adds	r3, r0, #1
 800f3b8:	d102      	bne.n	800f3c0 <_kill_r+0x1c>
 800f3ba:	682b      	ldr	r3, [r5, #0]
 800f3bc:	b103      	cbz	r3, 800f3c0 <_kill_r+0x1c>
 800f3be:	6023      	str	r3, [r4, #0]
 800f3c0:	bd38      	pop	{r3, r4, r5, pc}
 800f3c2:	bf00      	nop
 800f3c4:	20007520 	.word	0x20007520

0800f3c8 <_getpid_r>:
 800f3c8:	f7f4 b8cc 	b.w	8003564 <_getpid>

0800f3cc <_vsiprintf_r>:
 800f3cc:	b500      	push	{lr}
 800f3ce:	b09b      	sub	sp, #108	; 0x6c
 800f3d0:	9100      	str	r1, [sp, #0]
 800f3d2:	9104      	str	r1, [sp, #16]
 800f3d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f3d8:	9105      	str	r1, [sp, #20]
 800f3da:	9102      	str	r1, [sp, #8]
 800f3dc:	4905      	ldr	r1, [pc, #20]	; (800f3f4 <_vsiprintf_r+0x28>)
 800f3de:	9103      	str	r1, [sp, #12]
 800f3e0:	4669      	mov	r1, sp
 800f3e2:	f000 fb7d 	bl	800fae0 <_svfiprintf_r>
 800f3e6:	9b00      	ldr	r3, [sp, #0]
 800f3e8:	2200      	movs	r2, #0
 800f3ea:	701a      	strb	r2, [r3, #0]
 800f3ec:	b01b      	add	sp, #108	; 0x6c
 800f3ee:	f85d fb04 	ldr.w	pc, [sp], #4
 800f3f2:	bf00      	nop
 800f3f4:	ffff0208 	.word	0xffff0208

0800f3f8 <vsiprintf>:
 800f3f8:	4613      	mov	r3, r2
 800f3fa:	460a      	mov	r2, r1
 800f3fc:	4601      	mov	r1, r0
 800f3fe:	4802      	ldr	r0, [pc, #8]	; (800f408 <vsiprintf+0x10>)
 800f400:	6800      	ldr	r0, [r0, #0]
 800f402:	f7ff bfe3 	b.w	800f3cc <_vsiprintf_r>
 800f406:	bf00      	nop
 800f408:	20006e60 	.word	0x20006e60

0800f40c <__swbuf_r>:
 800f40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f40e:	460e      	mov	r6, r1
 800f410:	4614      	mov	r4, r2
 800f412:	4605      	mov	r5, r0
 800f414:	b118      	cbz	r0, 800f41e <__swbuf_r+0x12>
 800f416:	6983      	ldr	r3, [r0, #24]
 800f418:	b90b      	cbnz	r3, 800f41e <__swbuf_r+0x12>
 800f41a:	f000 f9d1 	bl	800f7c0 <__sinit>
 800f41e:	4b21      	ldr	r3, [pc, #132]	; (800f4a4 <__swbuf_r+0x98>)
 800f420:	429c      	cmp	r4, r3
 800f422:	d12b      	bne.n	800f47c <__swbuf_r+0x70>
 800f424:	686c      	ldr	r4, [r5, #4]
 800f426:	69a3      	ldr	r3, [r4, #24]
 800f428:	60a3      	str	r3, [r4, #8]
 800f42a:	89a3      	ldrh	r3, [r4, #12]
 800f42c:	071a      	lsls	r2, r3, #28
 800f42e:	d52f      	bpl.n	800f490 <__swbuf_r+0x84>
 800f430:	6923      	ldr	r3, [r4, #16]
 800f432:	b36b      	cbz	r3, 800f490 <__swbuf_r+0x84>
 800f434:	6923      	ldr	r3, [r4, #16]
 800f436:	6820      	ldr	r0, [r4, #0]
 800f438:	1ac0      	subs	r0, r0, r3
 800f43a:	6963      	ldr	r3, [r4, #20]
 800f43c:	b2f6      	uxtb	r6, r6
 800f43e:	4283      	cmp	r3, r0
 800f440:	4637      	mov	r7, r6
 800f442:	dc04      	bgt.n	800f44e <__swbuf_r+0x42>
 800f444:	4621      	mov	r1, r4
 800f446:	4628      	mov	r0, r5
 800f448:	f000 f926 	bl	800f698 <_fflush_r>
 800f44c:	bb30      	cbnz	r0, 800f49c <__swbuf_r+0x90>
 800f44e:	68a3      	ldr	r3, [r4, #8]
 800f450:	3b01      	subs	r3, #1
 800f452:	60a3      	str	r3, [r4, #8]
 800f454:	6823      	ldr	r3, [r4, #0]
 800f456:	1c5a      	adds	r2, r3, #1
 800f458:	6022      	str	r2, [r4, #0]
 800f45a:	701e      	strb	r6, [r3, #0]
 800f45c:	6963      	ldr	r3, [r4, #20]
 800f45e:	3001      	adds	r0, #1
 800f460:	4283      	cmp	r3, r0
 800f462:	d004      	beq.n	800f46e <__swbuf_r+0x62>
 800f464:	89a3      	ldrh	r3, [r4, #12]
 800f466:	07db      	lsls	r3, r3, #31
 800f468:	d506      	bpl.n	800f478 <__swbuf_r+0x6c>
 800f46a:	2e0a      	cmp	r6, #10
 800f46c:	d104      	bne.n	800f478 <__swbuf_r+0x6c>
 800f46e:	4621      	mov	r1, r4
 800f470:	4628      	mov	r0, r5
 800f472:	f000 f911 	bl	800f698 <_fflush_r>
 800f476:	b988      	cbnz	r0, 800f49c <__swbuf_r+0x90>
 800f478:	4638      	mov	r0, r7
 800f47a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f47c:	4b0a      	ldr	r3, [pc, #40]	; (800f4a8 <__swbuf_r+0x9c>)
 800f47e:	429c      	cmp	r4, r3
 800f480:	d101      	bne.n	800f486 <__swbuf_r+0x7a>
 800f482:	68ac      	ldr	r4, [r5, #8]
 800f484:	e7cf      	b.n	800f426 <__swbuf_r+0x1a>
 800f486:	4b09      	ldr	r3, [pc, #36]	; (800f4ac <__swbuf_r+0xa0>)
 800f488:	429c      	cmp	r4, r3
 800f48a:	bf08      	it	eq
 800f48c:	68ec      	ldreq	r4, [r5, #12]
 800f48e:	e7ca      	b.n	800f426 <__swbuf_r+0x1a>
 800f490:	4621      	mov	r1, r4
 800f492:	4628      	mov	r0, r5
 800f494:	f000 f80c 	bl	800f4b0 <__swsetup_r>
 800f498:	2800      	cmp	r0, #0
 800f49a:	d0cb      	beq.n	800f434 <__swbuf_r+0x28>
 800f49c:	f04f 37ff 	mov.w	r7, #4294967295
 800f4a0:	e7ea      	b.n	800f478 <__swbuf_r+0x6c>
 800f4a2:	bf00      	nop
 800f4a4:	0801629c 	.word	0x0801629c
 800f4a8:	080162bc 	.word	0x080162bc
 800f4ac:	0801627c 	.word	0x0801627c

0800f4b0 <__swsetup_r>:
 800f4b0:	4b32      	ldr	r3, [pc, #200]	; (800f57c <__swsetup_r+0xcc>)
 800f4b2:	b570      	push	{r4, r5, r6, lr}
 800f4b4:	681d      	ldr	r5, [r3, #0]
 800f4b6:	4606      	mov	r6, r0
 800f4b8:	460c      	mov	r4, r1
 800f4ba:	b125      	cbz	r5, 800f4c6 <__swsetup_r+0x16>
 800f4bc:	69ab      	ldr	r3, [r5, #24]
 800f4be:	b913      	cbnz	r3, 800f4c6 <__swsetup_r+0x16>
 800f4c0:	4628      	mov	r0, r5
 800f4c2:	f000 f97d 	bl	800f7c0 <__sinit>
 800f4c6:	4b2e      	ldr	r3, [pc, #184]	; (800f580 <__swsetup_r+0xd0>)
 800f4c8:	429c      	cmp	r4, r3
 800f4ca:	d10f      	bne.n	800f4ec <__swsetup_r+0x3c>
 800f4cc:	686c      	ldr	r4, [r5, #4]
 800f4ce:	89a3      	ldrh	r3, [r4, #12]
 800f4d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f4d4:	0719      	lsls	r1, r3, #28
 800f4d6:	d42c      	bmi.n	800f532 <__swsetup_r+0x82>
 800f4d8:	06dd      	lsls	r5, r3, #27
 800f4da:	d411      	bmi.n	800f500 <__swsetup_r+0x50>
 800f4dc:	2309      	movs	r3, #9
 800f4de:	6033      	str	r3, [r6, #0]
 800f4e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f4e4:	81a3      	strh	r3, [r4, #12]
 800f4e6:	f04f 30ff 	mov.w	r0, #4294967295
 800f4ea:	e03e      	b.n	800f56a <__swsetup_r+0xba>
 800f4ec:	4b25      	ldr	r3, [pc, #148]	; (800f584 <__swsetup_r+0xd4>)
 800f4ee:	429c      	cmp	r4, r3
 800f4f0:	d101      	bne.n	800f4f6 <__swsetup_r+0x46>
 800f4f2:	68ac      	ldr	r4, [r5, #8]
 800f4f4:	e7eb      	b.n	800f4ce <__swsetup_r+0x1e>
 800f4f6:	4b24      	ldr	r3, [pc, #144]	; (800f588 <__swsetup_r+0xd8>)
 800f4f8:	429c      	cmp	r4, r3
 800f4fa:	bf08      	it	eq
 800f4fc:	68ec      	ldreq	r4, [r5, #12]
 800f4fe:	e7e6      	b.n	800f4ce <__swsetup_r+0x1e>
 800f500:	0758      	lsls	r0, r3, #29
 800f502:	d512      	bpl.n	800f52a <__swsetup_r+0x7a>
 800f504:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f506:	b141      	cbz	r1, 800f51a <__swsetup_r+0x6a>
 800f508:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f50c:	4299      	cmp	r1, r3
 800f50e:	d002      	beq.n	800f516 <__swsetup_r+0x66>
 800f510:	4630      	mov	r0, r6
 800f512:	f7ff fae1 	bl	800ead8 <_free_r>
 800f516:	2300      	movs	r3, #0
 800f518:	6363      	str	r3, [r4, #52]	; 0x34
 800f51a:	89a3      	ldrh	r3, [r4, #12]
 800f51c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f520:	81a3      	strh	r3, [r4, #12]
 800f522:	2300      	movs	r3, #0
 800f524:	6063      	str	r3, [r4, #4]
 800f526:	6923      	ldr	r3, [r4, #16]
 800f528:	6023      	str	r3, [r4, #0]
 800f52a:	89a3      	ldrh	r3, [r4, #12]
 800f52c:	f043 0308 	orr.w	r3, r3, #8
 800f530:	81a3      	strh	r3, [r4, #12]
 800f532:	6923      	ldr	r3, [r4, #16]
 800f534:	b94b      	cbnz	r3, 800f54a <__swsetup_r+0x9a>
 800f536:	89a3      	ldrh	r3, [r4, #12]
 800f538:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f53c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f540:	d003      	beq.n	800f54a <__swsetup_r+0x9a>
 800f542:	4621      	mov	r1, r4
 800f544:	4630      	mov	r0, r6
 800f546:	f000 f9fd 	bl	800f944 <__smakebuf_r>
 800f54a:	89a0      	ldrh	r0, [r4, #12]
 800f54c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f550:	f010 0301 	ands.w	r3, r0, #1
 800f554:	d00a      	beq.n	800f56c <__swsetup_r+0xbc>
 800f556:	2300      	movs	r3, #0
 800f558:	60a3      	str	r3, [r4, #8]
 800f55a:	6963      	ldr	r3, [r4, #20]
 800f55c:	425b      	negs	r3, r3
 800f55e:	61a3      	str	r3, [r4, #24]
 800f560:	6923      	ldr	r3, [r4, #16]
 800f562:	b943      	cbnz	r3, 800f576 <__swsetup_r+0xc6>
 800f564:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f568:	d1ba      	bne.n	800f4e0 <__swsetup_r+0x30>
 800f56a:	bd70      	pop	{r4, r5, r6, pc}
 800f56c:	0781      	lsls	r1, r0, #30
 800f56e:	bf58      	it	pl
 800f570:	6963      	ldrpl	r3, [r4, #20]
 800f572:	60a3      	str	r3, [r4, #8]
 800f574:	e7f4      	b.n	800f560 <__swsetup_r+0xb0>
 800f576:	2000      	movs	r0, #0
 800f578:	e7f7      	b.n	800f56a <__swsetup_r+0xba>
 800f57a:	bf00      	nop
 800f57c:	20006e60 	.word	0x20006e60
 800f580:	0801629c 	.word	0x0801629c
 800f584:	080162bc 	.word	0x080162bc
 800f588:	0801627c 	.word	0x0801627c

0800f58c <__sflush_r>:
 800f58c:	898a      	ldrh	r2, [r1, #12]
 800f58e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f592:	4605      	mov	r5, r0
 800f594:	0710      	lsls	r0, r2, #28
 800f596:	460c      	mov	r4, r1
 800f598:	d458      	bmi.n	800f64c <__sflush_r+0xc0>
 800f59a:	684b      	ldr	r3, [r1, #4]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	dc05      	bgt.n	800f5ac <__sflush_r+0x20>
 800f5a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	dc02      	bgt.n	800f5ac <__sflush_r+0x20>
 800f5a6:	2000      	movs	r0, #0
 800f5a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f5ae:	2e00      	cmp	r6, #0
 800f5b0:	d0f9      	beq.n	800f5a6 <__sflush_r+0x1a>
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f5b8:	682f      	ldr	r7, [r5, #0]
 800f5ba:	602b      	str	r3, [r5, #0]
 800f5bc:	d032      	beq.n	800f624 <__sflush_r+0x98>
 800f5be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f5c0:	89a3      	ldrh	r3, [r4, #12]
 800f5c2:	075a      	lsls	r2, r3, #29
 800f5c4:	d505      	bpl.n	800f5d2 <__sflush_r+0x46>
 800f5c6:	6863      	ldr	r3, [r4, #4]
 800f5c8:	1ac0      	subs	r0, r0, r3
 800f5ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f5cc:	b10b      	cbz	r3, 800f5d2 <__sflush_r+0x46>
 800f5ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f5d0:	1ac0      	subs	r0, r0, r3
 800f5d2:	2300      	movs	r3, #0
 800f5d4:	4602      	mov	r2, r0
 800f5d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f5d8:	6a21      	ldr	r1, [r4, #32]
 800f5da:	4628      	mov	r0, r5
 800f5dc:	47b0      	blx	r6
 800f5de:	1c43      	adds	r3, r0, #1
 800f5e0:	89a3      	ldrh	r3, [r4, #12]
 800f5e2:	d106      	bne.n	800f5f2 <__sflush_r+0x66>
 800f5e4:	6829      	ldr	r1, [r5, #0]
 800f5e6:	291d      	cmp	r1, #29
 800f5e8:	d82c      	bhi.n	800f644 <__sflush_r+0xb8>
 800f5ea:	4a2a      	ldr	r2, [pc, #168]	; (800f694 <__sflush_r+0x108>)
 800f5ec:	40ca      	lsrs	r2, r1
 800f5ee:	07d6      	lsls	r6, r2, #31
 800f5f0:	d528      	bpl.n	800f644 <__sflush_r+0xb8>
 800f5f2:	2200      	movs	r2, #0
 800f5f4:	6062      	str	r2, [r4, #4]
 800f5f6:	04d9      	lsls	r1, r3, #19
 800f5f8:	6922      	ldr	r2, [r4, #16]
 800f5fa:	6022      	str	r2, [r4, #0]
 800f5fc:	d504      	bpl.n	800f608 <__sflush_r+0x7c>
 800f5fe:	1c42      	adds	r2, r0, #1
 800f600:	d101      	bne.n	800f606 <__sflush_r+0x7a>
 800f602:	682b      	ldr	r3, [r5, #0]
 800f604:	b903      	cbnz	r3, 800f608 <__sflush_r+0x7c>
 800f606:	6560      	str	r0, [r4, #84]	; 0x54
 800f608:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f60a:	602f      	str	r7, [r5, #0]
 800f60c:	2900      	cmp	r1, #0
 800f60e:	d0ca      	beq.n	800f5a6 <__sflush_r+0x1a>
 800f610:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f614:	4299      	cmp	r1, r3
 800f616:	d002      	beq.n	800f61e <__sflush_r+0x92>
 800f618:	4628      	mov	r0, r5
 800f61a:	f7ff fa5d 	bl	800ead8 <_free_r>
 800f61e:	2000      	movs	r0, #0
 800f620:	6360      	str	r0, [r4, #52]	; 0x34
 800f622:	e7c1      	b.n	800f5a8 <__sflush_r+0x1c>
 800f624:	6a21      	ldr	r1, [r4, #32]
 800f626:	2301      	movs	r3, #1
 800f628:	4628      	mov	r0, r5
 800f62a:	47b0      	blx	r6
 800f62c:	1c41      	adds	r1, r0, #1
 800f62e:	d1c7      	bne.n	800f5c0 <__sflush_r+0x34>
 800f630:	682b      	ldr	r3, [r5, #0]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d0c4      	beq.n	800f5c0 <__sflush_r+0x34>
 800f636:	2b1d      	cmp	r3, #29
 800f638:	d001      	beq.n	800f63e <__sflush_r+0xb2>
 800f63a:	2b16      	cmp	r3, #22
 800f63c:	d101      	bne.n	800f642 <__sflush_r+0xb6>
 800f63e:	602f      	str	r7, [r5, #0]
 800f640:	e7b1      	b.n	800f5a6 <__sflush_r+0x1a>
 800f642:	89a3      	ldrh	r3, [r4, #12]
 800f644:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f648:	81a3      	strh	r3, [r4, #12]
 800f64a:	e7ad      	b.n	800f5a8 <__sflush_r+0x1c>
 800f64c:	690f      	ldr	r7, [r1, #16]
 800f64e:	2f00      	cmp	r7, #0
 800f650:	d0a9      	beq.n	800f5a6 <__sflush_r+0x1a>
 800f652:	0793      	lsls	r3, r2, #30
 800f654:	680e      	ldr	r6, [r1, #0]
 800f656:	bf08      	it	eq
 800f658:	694b      	ldreq	r3, [r1, #20]
 800f65a:	600f      	str	r7, [r1, #0]
 800f65c:	bf18      	it	ne
 800f65e:	2300      	movne	r3, #0
 800f660:	eba6 0807 	sub.w	r8, r6, r7
 800f664:	608b      	str	r3, [r1, #8]
 800f666:	f1b8 0f00 	cmp.w	r8, #0
 800f66a:	dd9c      	ble.n	800f5a6 <__sflush_r+0x1a>
 800f66c:	6a21      	ldr	r1, [r4, #32]
 800f66e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f670:	4643      	mov	r3, r8
 800f672:	463a      	mov	r2, r7
 800f674:	4628      	mov	r0, r5
 800f676:	47b0      	blx	r6
 800f678:	2800      	cmp	r0, #0
 800f67a:	dc06      	bgt.n	800f68a <__sflush_r+0xfe>
 800f67c:	89a3      	ldrh	r3, [r4, #12]
 800f67e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f682:	81a3      	strh	r3, [r4, #12]
 800f684:	f04f 30ff 	mov.w	r0, #4294967295
 800f688:	e78e      	b.n	800f5a8 <__sflush_r+0x1c>
 800f68a:	4407      	add	r7, r0
 800f68c:	eba8 0800 	sub.w	r8, r8, r0
 800f690:	e7e9      	b.n	800f666 <__sflush_r+0xda>
 800f692:	bf00      	nop
 800f694:	20400001 	.word	0x20400001

0800f698 <_fflush_r>:
 800f698:	b538      	push	{r3, r4, r5, lr}
 800f69a:	690b      	ldr	r3, [r1, #16]
 800f69c:	4605      	mov	r5, r0
 800f69e:	460c      	mov	r4, r1
 800f6a0:	b913      	cbnz	r3, 800f6a8 <_fflush_r+0x10>
 800f6a2:	2500      	movs	r5, #0
 800f6a4:	4628      	mov	r0, r5
 800f6a6:	bd38      	pop	{r3, r4, r5, pc}
 800f6a8:	b118      	cbz	r0, 800f6b2 <_fflush_r+0x1a>
 800f6aa:	6983      	ldr	r3, [r0, #24]
 800f6ac:	b90b      	cbnz	r3, 800f6b2 <_fflush_r+0x1a>
 800f6ae:	f000 f887 	bl	800f7c0 <__sinit>
 800f6b2:	4b14      	ldr	r3, [pc, #80]	; (800f704 <_fflush_r+0x6c>)
 800f6b4:	429c      	cmp	r4, r3
 800f6b6:	d11b      	bne.n	800f6f0 <_fflush_r+0x58>
 800f6b8:	686c      	ldr	r4, [r5, #4]
 800f6ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d0ef      	beq.n	800f6a2 <_fflush_r+0xa>
 800f6c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f6c4:	07d0      	lsls	r0, r2, #31
 800f6c6:	d404      	bmi.n	800f6d2 <_fflush_r+0x3a>
 800f6c8:	0599      	lsls	r1, r3, #22
 800f6ca:	d402      	bmi.n	800f6d2 <_fflush_r+0x3a>
 800f6cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f6ce:	f7ff f9b0 	bl	800ea32 <__retarget_lock_acquire_recursive>
 800f6d2:	4628      	mov	r0, r5
 800f6d4:	4621      	mov	r1, r4
 800f6d6:	f7ff ff59 	bl	800f58c <__sflush_r>
 800f6da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f6dc:	07da      	lsls	r2, r3, #31
 800f6de:	4605      	mov	r5, r0
 800f6e0:	d4e0      	bmi.n	800f6a4 <_fflush_r+0xc>
 800f6e2:	89a3      	ldrh	r3, [r4, #12]
 800f6e4:	059b      	lsls	r3, r3, #22
 800f6e6:	d4dd      	bmi.n	800f6a4 <_fflush_r+0xc>
 800f6e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f6ea:	f7ff f9a3 	bl	800ea34 <__retarget_lock_release_recursive>
 800f6ee:	e7d9      	b.n	800f6a4 <_fflush_r+0xc>
 800f6f0:	4b05      	ldr	r3, [pc, #20]	; (800f708 <_fflush_r+0x70>)
 800f6f2:	429c      	cmp	r4, r3
 800f6f4:	d101      	bne.n	800f6fa <_fflush_r+0x62>
 800f6f6:	68ac      	ldr	r4, [r5, #8]
 800f6f8:	e7df      	b.n	800f6ba <_fflush_r+0x22>
 800f6fa:	4b04      	ldr	r3, [pc, #16]	; (800f70c <_fflush_r+0x74>)
 800f6fc:	429c      	cmp	r4, r3
 800f6fe:	bf08      	it	eq
 800f700:	68ec      	ldreq	r4, [r5, #12]
 800f702:	e7da      	b.n	800f6ba <_fflush_r+0x22>
 800f704:	0801629c 	.word	0x0801629c
 800f708:	080162bc 	.word	0x080162bc
 800f70c:	0801627c 	.word	0x0801627c

0800f710 <std>:
 800f710:	2300      	movs	r3, #0
 800f712:	b510      	push	{r4, lr}
 800f714:	4604      	mov	r4, r0
 800f716:	e9c0 3300 	strd	r3, r3, [r0]
 800f71a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f71e:	6083      	str	r3, [r0, #8]
 800f720:	8181      	strh	r1, [r0, #12]
 800f722:	6643      	str	r3, [r0, #100]	; 0x64
 800f724:	81c2      	strh	r2, [r0, #14]
 800f726:	6183      	str	r3, [r0, #24]
 800f728:	4619      	mov	r1, r3
 800f72a:	2208      	movs	r2, #8
 800f72c:	305c      	adds	r0, #92	; 0x5c
 800f72e:	f7ff f9bb 	bl	800eaa8 <memset>
 800f732:	4b05      	ldr	r3, [pc, #20]	; (800f748 <std+0x38>)
 800f734:	6263      	str	r3, [r4, #36]	; 0x24
 800f736:	4b05      	ldr	r3, [pc, #20]	; (800f74c <std+0x3c>)
 800f738:	62a3      	str	r3, [r4, #40]	; 0x28
 800f73a:	4b05      	ldr	r3, [pc, #20]	; (800f750 <std+0x40>)
 800f73c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f73e:	4b05      	ldr	r3, [pc, #20]	; (800f754 <std+0x44>)
 800f740:	6224      	str	r4, [r4, #32]
 800f742:	6323      	str	r3, [r4, #48]	; 0x30
 800f744:	bd10      	pop	{r4, pc}
 800f746:	bf00      	nop
 800f748:	0800fce1 	.word	0x0800fce1
 800f74c:	0800fd03 	.word	0x0800fd03
 800f750:	0800fd3b 	.word	0x0800fd3b
 800f754:	0800fd5f 	.word	0x0800fd5f

0800f758 <_cleanup_r>:
 800f758:	4901      	ldr	r1, [pc, #4]	; (800f760 <_cleanup_r+0x8>)
 800f75a:	f000 b8af 	b.w	800f8bc <_fwalk_reent>
 800f75e:	bf00      	nop
 800f760:	0800f699 	.word	0x0800f699

0800f764 <__sfmoreglue>:
 800f764:	b570      	push	{r4, r5, r6, lr}
 800f766:	1e4a      	subs	r2, r1, #1
 800f768:	2568      	movs	r5, #104	; 0x68
 800f76a:	4355      	muls	r5, r2
 800f76c:	460e      	mov	r6, r1
 800f76e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f772:	f7ff fa01 	bl	800eb78 <_malloc_r>
 800f776:	4604      	mov	r4, r0
 800f778:	b140      	cbz	r0, 800f78c <__sfmoreglue+0x28>
 800f77a:	2100      	movs	r1, #0
 800f77c:	e9c0 1600 	strd	r1, r6, [r0]
 800f780:	300c      	adds	r0, #12
 800f782:	60a0      	str	r0, [r4, #8]
 800f784:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f788:	f7ff f98e 	bl	800eaa8 <memset>
 800f78c:	4620      	mov	r0, r4
 800f78e:	bd70      	pop	{r4, r5, r6, pc}

0800f790 <__sfp_lock_acquire>:
 800f790:	4801      	ldr	r0, [pc, #4]	; (800f798 <__sfp_lock_acquire+0x8>)
 800f792:	f7ff b94e 	b.w	800ea32 <__retarget_lock_acquire_recursive>
 800f796:	bf00      	nop
 800f798:	20007518 	.word	0x20007518

0800f79c <__sfp_lock_release>:
 800f79c:	4801      	ldr	r0, [pc, #4]	; (800f7a4 <__sfp_lock_release+0x8>)
 800f79e:	f7ff b949 	b.w	800ea34 <__retarget_lock_release_recursive>
 800f7a2:	bf00      	nop
 800f7a4:	20007518 	.word	0x20007518

0800f7a8 <__sinit_lock_acquire>:
 800f7a8:	4801      	ldr	r0, [pc, #4]	; (800f7b0 <__sinit_lock_acquire+0x8>)
 800f7aa:	f7ff b942 	b.w	800ea32 <__retarget_lock_acquire_recursive>
 800f7ae:	bf00      	nop
 800f7b0:	20007517 	.word	0x20007517

0800f7b4 <__sinit_lock_release>:
 800f7b4:	4801      	ldr	r0, [pc, #4]	; (800f7bc <__sinit_lock_release+0x8>)
 800f7b6:	f7ff b93d 	b.w	800ea34 <__retarget_lock_release_recursive>
 800f7ba:	bf00      	nop
 800f7bc:	20007517 	.word	0x20007517

0800f7c0 <__sinit>:
 800f7c0:	b510      	push	{r4, lr}
 800f7c2:	4604      	mov	r4, r0
 800f7c4:	f7ff fff0 	bl	800f7a8 <__sinit_lock_acquire>
 800f7c8:	69a3      	ldr	r3, [r4, #24]
 800f7ca:	b11b      	cbz	r3, 800f7d4 <__sinit+0x14>
 800f7cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f7d0:	f7ff bff0 	b.w	800f7b4 <__sinit_lock_release>
 800f7d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f7d8:	6523      	str	r3, [r4, #80]	; 0x50
 800f7da:	4b13      	ldr	r3, [pc, #76]	; (800f828 <__sinit+0x68>)
 800f7dc:	4a13      	ldr	r2, [pc, #76]	; (800f82c <__sinit+0x6c>)
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	62a2      	str	r2, [r4, #40]	; 0x28
 800f7e2:	42a3      	cmp	r3, r4
 800f7e4:	bf04      	itt	eq
 800f7e6:	2301      	moveq	r3, #1
 800f7e8:	61a3      	streq	r3, [r4, #24]
 800f7ea:	4620      	mov	r0, r4
 800f7ec:	f000 f820 	bl	800f830 <__sfp>
 800f7f0:	6060      	str	r0, [r4, #4]
 800f7f2:	4620      	mov	r0, r4
 800f7f4:	f000 f81c 	bl	800f830 <__sfp>
 800f7f8:	60a0      	str	r0, [r4, #8]
 800f7fa:	4620      	mov	r0, r4
 800f7fc:	f000 f818 	bl	800f830 <__sfp>
 800f800:	2200      	movs	r2, #0
 800f802:	60e0      	str	r0, [r4, #12]
 800f804:	2104      	movs	r1, #4
 800f806:	6860      	ldr	r0, [r4, #4]
 800f808:	f7ff ff82 	bl	800f710 <std>
 800f80c:	68a0      	ldr	r0, [r4, #8]
 800f80e:	2201      	movs	r2, #1
 800f810:	2109      	movs	r1, #9
 800f812:	f7ff ff7d 	bl	800f710 <std>
 800f816:	68e0      	ldr	r0, [r4, #12]
 800f818:	2202      	movs	r2, #2
 800f81a:	2112      	movs	r1, #18
 800f81c:	f7ff ff78 	bl	800f710 <std>
 800f820:	2301      	movs	r3, #1
 800f822:	61a3      	str	r3, [r4, #24]
 800f824:	e7d2      	b.n	800f7cc <__sinit+0xc>
 800f826:	bf00      	nop
 800f828:	08016244 	.word	0x08016244
 800f82c:	0800f759 	.word	0x0800f759

0800f830 <__sfp>:
 800f830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f832:	4607      	mov	r7, r0
 800f834:	f7ff ffac 	bl	800f790 <__sfp_lock_acquire>
 800f838:	4b1e      	ldr	r3, [pc, #120]	; (800f8b4 <__sfp+0x84>)
 800f83a:	681e      	ldr	r6, [r3, #0]
 800f83c:	69b3      	ldr	r3, [r6, #24]
 800f83e:	b913      	cbnz	r3, 800f846 <__sfp+0x16>
 800f840:	4630      	mov	r0, r6
 800f842:	f7ff ffbd 	bl	800f7c0 <__sinit>
 800f846:	3648      	adds	r6, #72	; 0x48
 800f848:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f84c:	3b01      	subs	r3, #1
 800f84e:	d503      	bpl.n	800f858 <__sfp+0x28>
 800f850:	6833      	ldr	r3, [r6, #0]
 800f852:	b30b      	cbz	r3, 800f898 <__sfp+0x68>
 800f854:	6836      	ldr	r6, [r6, #0]
 800f856:	e7f7      	b.n	800f848 <__sfp+0x18>
 800f858:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f85c:	b9d5      	cbnz	r5, 800f894 <__sfp+0x64>
 800f85e:	4b16      	ldr	r3, [pc, #88]	; (800f8b8 <__sfp+0x88>)
 800f860:	60e3      	str	r3, [r4, #12]
 800f862:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f866:	6665      	str	r5, [r4, #100]	; 0x64
 800f868:	f7ff f8e2 	bl	800ea30 <__retarget_lock_init_recursive>
 800f86c:	f7ff ff96 	bl	800f79c <__sfp_lock_release>
 800f870:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f874:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f878:	6025      	str	r5, [r4, #0]
 800f87a:	61a5      	str	r5, [r4, #24]
 800f87c:	2208      	movs	r2, #8
 800f87e:	4629      	mov	r1, r5
 800f880:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f884:	f7ff f910 	bl	800eaa8 <memset>
 800f888:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f88c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f890:	4620      	mov	r0, r4
 800f892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f894:	3468      	adds	r4, #104	; 0x68
 800f896:	e7d9      	b.n	800f84c <__sfp+0x1c>
 800f898:	2104      	movs	r1, #4
 800f89a:	4638      	mov	r0, r7
 800f89c:	f7ff ff62 	bl	800f764 <__sfmoreglue>
 800f8a0:	4604      	mov	r4, r0
 800f8a2:	6030      	str	r0, [r6, #0]
 800f8a4:	2800      	cmp	r0, #0
 800f8a6:	d1d5      	bne.n	800f854 <__sfp+0x24>
 800f8a8:	f7ff ff78 	bl	800f79c <__sfp_lock_release>
 800f8ac:	230c      	movs	r3, #12
 800f8ae:	603b      	str	r3, [r7, #0]
 800f8b0:	e7ee      	b.n	800f890 <__sfp+0x60>
 800f8b2:	bf00      	nop
 800f8b4:	08016244 	.word	0x08016244
 800f8b8:	ffff0001 	.word	0xffff0001

0800f8bc <_fwalk_reent>:
 800f8bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8c0:	4606      	mov	r6, r0
 800f8c2:	4688      	mov	r8, r1
 800f8c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f8c8:	2700      	movs	r7, #0
 800f8ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f8ce:	f1b9 0901 	subs.w	r9, r9, #1
 800f8d2:	d505      	bpl.n	800f8e0 <_fwalk_reent+0x24>
 800f8d4:	6824      	ldr	r4, [r4, #0]
 800f8d6:	2c00      	cmp	r4, #0
 800f8d8:	d1f7      	bne.n	800f8ca <_fwalk_reent+0xe>
 800f8da:	4638      	mov	r0, r7
 800f8dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8e0:	89ab      	ldrh	r3, [r5, #12]
 800f8e2:	2b01      	cmp	r3, #1
 800f8e4:	d907      	bls.n	800f8f6 <_fwalk_reent+0x3a>
 800f8e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f8ea:	3301      	adds	r3, #1
 800f8ec:	d003      	beq.n	800f8f6 <_fwalk_reent+0x3a>
 800f8ee:	4629      	mov	r1, r5
 800f8f0:	4630      	mov	r0, r6
 800f8f2:	47c0      	blx	r8
 800f8f4:	4307      	orrs	r7, r0
 800f8f6:	3568      	adds	r5, #104	; 0x68
 800f8f8:	e7e9      	b.n	800f8ce <_fwalk_reent+0x12>

0800f8fa <__swhatbuf_r>:
 800f8fa:	b570      	push	{r4, r5, r6, lr}
 800f8fc:	460e      	mov	r6, r1
 800f8fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f902:	2900      	cmp	r1, #0
 800f904:	b096      	sub	sp, #88	; 0x58
 800f906:	4614      	mov	r4, r2
 800f908:	461d      	mov	r5, r3
 800f90a:	da07      	bge.n	800f91c <__swhatbuf_r+0x22>
 800f90c:	2300      	movs	r3, #0
 800f90e:	602b      	str	r3, [r5, #0]
 800f910:	89b3      	ldrh	r3, [r6, #12]
 800f912:	061a      	lsls	r2, r3, #24
 800f914:	d410      	bmi.n	800f938 <__swhatbuf_r+0x3e>
 800f916:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f91a:	e00e      	b.n	800f93a <__swhatbuf_r+0x40>
 800f91c:	466a      	mov	r2, sp
 800f91e:	f000 fa45 	bl	800fdac <_fstat_r>
 800f922:	2800      	cmp	r0, #0
 800f924:	dbf2      	blt.n	800f90c <__swhatbuf_r+0x12>
 800f926:	9a01      	ldr	r2, [sp, #4]
 800f928:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f92c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f930:	425a      	negs	r2, r3
 800f932:	415a      	adcs	r2, r3
 800f934:	602a      	str	r2, [r5, #0]
 800f936:	e7ee      	b.n	800f916 <__swhatbuf_r+0x1c>
 800f938:	2340      	movs	r3, #64	; 0x40
 800f93a:	2000      	movs	r0, #0
 800f93c:	6023      	str	r3, [r4, #0]
 800f93e:	b016      	add	sp, #88	; 0x58
 800f940:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f944 <__smakebuf_r>:
 800f944:	898b      	ldrh	r3, [r1, #12]
 800f946:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f948:	079d      	lsls	r5, r3, #30
 800f94a:	4606      	mov	r6, r0
 800f94c:	460c      	mov	r4, r1
 800f94e:	d507      	bpl.n	800f960 <__smakebuf_r+0x1c>
 800f950:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f954:	6023      	str	r3, [r4, #0]
 800f956:	6123      	str	r3, [r4, #16]
 800f958:	2301      	movs	r3, #1
 800f95a:	6163      	str	r3, [r4, #20]
 800f95c:	b002      	add	sp, #8
 800f95e:	bd70      	pop	{r4, r5, r6, pc}
 800f960:	ab01      	add	r3, sp, #4
 800f962:	466a      	mov	r2, sp
 800f964:	f7ff ffc9 	bl	800f8fa <__swhatbuf_r>
 800f968:	9900      	ldr	r1, [sp, #0]
 800f96a:	4605      	mov	r5, r0
 800f96c:	4630      	mov	r0, r6
 800f96e:	f7ff f903 	bl	800eb78 <_malloc_r>
 800f972:	b948      	cbnz	r0, 800f988 <__smakebuf_r+0x44>
 800f974:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f978:	059a      	lsls	r2, r3, #22
 800f97a:	d4ef      	bmi.n	800f95c <__smakebuf_r+0x18>
 800f97c:	f023 0303 	bic.w	r3, r3, #3
 800f980:	f043 0302 	orr.w	r3, r3, #2
 800f984:	81a3      	strh	r3, [r4, #12]
 800f986:	e7e3      	b.n	800f950 <__smakebuf_r+0xc>
 800f988:	4b0d      	ldr	r3, [pc, #52]	; (800f9c0 <__smakebuf_r+0x7c>)
 800f98a:	62b3      	str	r3, [r6, #40]	; 0x28
 800f98c:	89a3      	ldrh	r3, [r4, #12]
 800f98e:	6020      	str	r0, [r4, #0]
 800f990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f994:	81a3      	strh	r3, [r4, #12]
 800f996:	9b00      	ldr	r3, [sp, #0]
 800f998:	6163      	str	r3, [r4, #20]
 800f99a:	9b01      	ldr	r3, [sp, #4]
 800f99c:	6120      	str	r0, [r4, #16]
 800f99e:	b15b      	cbz	r3, 800f9b8 <__smakebuf_r+0x74>
 800f9a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f9a4:	4630      	mov	r0, r6
 800f9a6:	f000 fa13 	bl	800fdd0 <_isatty_r>
 800f9aa:	b128      	cbz	r0, 800f9b8 <__smakebuf_r+0x74>
 800f9ac:	89a3      	ldrh	r3, [r4, #12]
 800f9ae:	f023 0303 	bic.w	r3, r3, #3
 800f9b2:	f043 0301 	orr.w	r3, r3, #1
 800f9b6:	81a3      	strh	r3, [r4, #12]
 800f9b8:	89a0      	ldrh	r0, [r4, #12]
 800f9ba:	4305      	orrs	r5, r0
 800f9bc:	81a5      	strh	r5, [r4, #12]
 800f9be:	e7cd      	b.n	800f95c <__smakebuf_r+0x18>
 800f9c0:	0800f759 	.word	0x0800f759

0800f9c4 <__malloc_lock>:
 800f9c4:	4801      	ldr	r0, [pc, #4]	; (800f9cc <__malloc_lock+0x8>)
 800f9c6:	f7ff b834 	b.w	800ea32 <__retarget_lock_acquire_recursive>
 800f9ca:	bf00      	nop
 800f9cc:	20007514 	.word	0x20007514

0800f9d0 <__malloc_unlock>:
 800f9d0:	4801      	ldr	r0, [pc, #4]	; (800f9d8 <__malloc_unlock+0x8>)
 800f9d2:	f7ff b82f 	b.w	800ea34 <__retarget_lock_release_recursive>
 800f9d6:	bf00      	nop
 800f9d8:	20007514 	.word	0x20007514

0800f9dc <_realloc_r>:
 800f9dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9de:	4607      	mov	r7, r0
 800f9e0:	4614      	mov	r4, r2
 800f9e2:	460e      	mov	r6, r1
 800f9e4:	b921      	cbnz	r1, 800f9f0 <_realloc_r+0x14>
 800f9e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f9ea:	4611      	mov	r1, r2
 800f9ec:	f7ff b8c4 	b.w	800eb78 <_malloc_r>
 800f9f0:	b922      	cbnz	r2, 800f9fc <_realloc_r+0x20>
 800f9f2:	f7ff f871 	bl	800ead8 <_free_r>
 800f9f6:	4625      	mov	r5, r4
 800f9f8:	4628      	mov	r0, r5
 800f9fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9fc:	f000 fa0a 	bl	800fe14 <_malloc_usable_size_r>
 800fa00:	42a0      	cmp	r0, r4
 800fa02:	d20f      	bcs.n	800fa24 <_realloc_r+0x48>
 800fa04:	4621      	mov	r1, r4
 800fa06:	4638      	mov	r0, r7
 800fa08:	f7ff f8b6 	bl	800eb78 <_malloc_r>
 800fa0c:	4605      	mov	r5, r0
 800fa0e:	2800      	cmp	r0, #0
 800fa10:	d0f2      	beq.n	800f9f8 <_realloc_r+0x1c>
 800fa12:	4631      	mov	r1, r6
 800fa14:	4622      	mov	r2, r4
 800fa16:	f7ff f81f 	bl	800ea58 <memcpy>
 800fa1a:	4631      	mov	r1, r6
 800fa1c:	4638      	mov	r0, r7
 800fa1e:	f7ff f85b 	bl	800ead8 <_free_r>
 800fa22:	e7e9      	b.n	800f9f8 <_realloc_r+0x1c>
 800fa24:	4635      	mov	r5, r6
 800fa26:	e7e7      	b.n	800f9f8 <_realloc_r+0x1c>

0800fa28 <__ssputs_r>:
 800fa28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa2c:	688e      	ldr	r6, [r1, #8]
 800fa2e:	429e      	cmp	r6, r3
 800fa30:	4682      	mov	sl, r0
 800fa32:	460c      	mov	r4, r1
 800fa34:	4690      	mov	r8, r2
 800fa36:	461f      	mov	r7, r3
 800fa38:	d838      	bhi.n	800faac <__ssputs_r+0x84>
 800fa3a:	898a      	ldrh	r2, [r1, #12]
 800fa3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fa40:	d032      	beq.n	800faa8 <__ssputs_r+0x80>
 800fa42:	6825      	ldr	r5, [r4, #0]
 800fa44:	6909      	ldr	r1, [r1, #16]
 800fa46:	eba5 0901 	sub.w	r9, r5, r1
 800fa4a:	6965      	ldr	r5, [r4, #20]
 800fa4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fa50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fa54:	3301      	adds	r3, #1
 800fa56:	444b      	add	r3, r9
 800fa58:	106d      	asrs	r5, r5, #1
 800fa5a:	429d      	cmp	r5, r3
 800fa5c:	bf38      	it	cc
 800fa5e:	461d      	movcc	r5, r3
 800fa60:	0553      	lsls	r3, r2, #21
 800fa62:	d531      	bpl.n	800fac8 <__ssputs_r+0xa0>
 800fa64:	4629      	mov	r1, r5
 800fa66:	f7ff f887 	bl	800eb78 <_malloc_r>
 800fa6a:	4606      	mov	r6, r0
 800fa6c:	b950      	cbnz	r0, 800fa84 <__ssputs_r+0x5c>
 800fa6e:	230c      	movs	r3, #12
 800fa70:	f8ca 3000 	str.w	r3, [sl]
 800fa74:	89a3      	ldrh	r3, [r4, #12]
 800fa76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa7a:	81a3      	strh	r3, [r4, #12]
 800fa7c:	f04f 30ff 	mov.w	r0, #4294967295
 800fa80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa84:	6921      	ldr	r1, [r4, #16]
 800fa86:	464a      	mov	r2, r9
 800fa88:	f7fe ffe6 	bl	800ea58 <memcpy>
 800fa8c:	89a3      	ldrh	r3, [r4, #12]
 800fa8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fa92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa96:	81a3      	strh	r3, [r4, #12]
 800fa98:	6126      	str	r6, [r4, #16]
 800fa9a:	6165      	str	r5, [r4, #20]
 800fa9c:	444e      	add	r6, r9
 800fa9e:	eba5 0509 	sub.w	r5, r5, r9
 800faa2:	6026      	str	r6, [r4, #0]
 800faa4:	60a5      	str	r5, [r4, #8]
 800faa6:	463e      	mov	r6, r7
 800faa8:	42be      	cmp	r6, r7
 800faaa:	d900      	bls.n	800faae <__ssputs_r+0x86>
 800faac:	463e      	mov	r6, r7
 800faae:	4632      	mov	r2, r6
 800fab0:	6820      	ldr	r0, [r4, #0]
 800fab2:	4641      	mov	r1, r8
 800fab4:	f7fe ffde 	bl	800ea74 <memmove>
 800fab8:	68a3      	ldr	r3, [r4, #8]
 800faba:	6822      	ldr	r2, [r4, #0]
 800fabc:	1b9b      	subs	r3, r3, r6
 800fabe:	4432      	add	r2, r6
 800fac0:	60a3      	str	r3, [r4, #8]
 800fac2:	6022      	str	r2, [r4, #0]
 800fac4:	2000      	movs	r0, #0
 800fac6:	e7db      	b.n	800fa80 <__ssputs_r+0x58>
 800fac8:	462a      	mov	r2, r5
 800faca:	f7ff ff87 	bl	800f9dc <_realloc_r>
 800face:	4606      	mov	r6, r0
 800fad0:	2800      	cmp	r0, #0
 800fad2:	d1e1      	bne.n	800fa98 <__ssputs_r+0x70>
 800fad4:	6921      	ldr	r1, [r4, #16]
 800fad6:	4650      	mov	r0, sl
 800fad8:	f7fe fffe 	bl	800ead8 <_free_r>
 800fadc:	e7c7      	b.n	800fa6e <__ssputs_r+0x46>
	...

0800fae0 <_svfiprintf_r>:
 800fae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fae4:	4698      	mov	r8, r3
 800fae6:	898b      	ldrh	r3, [r1, #12]
 800fae8:	061b      	lsls	r3, r3, #24
 800faea:	b09d      	sub	sp, #116	; 0x74
 800faec:	4607      	mov	r7, r0
 800faee:	460d      	mov	r5, r1
 800faf0:	4614      	mov	r4, r2
 800faf2:	d50e      	bpl.n	800fb12 <_svfiprintf_r+0x32>
 800faf4:	690b      	ldr	r3, [r1, #16]
 800faf6:	b963      	cbnz	r3, 800fb12 <_svfiprintf_r+0x32>
 800faf8:	2140      	movs	r1, #64	; 0x40
 800fafa:	f7ff f83d 	bl	800eb78 <_malloc_r>
 800fafe:	6028      	str	r0, [r5, #0]
 800fb00:	6128      	str	r0, [r5, #16]
 800fb02:	b920      	cbnz	r0, 800fb0e <_svfiprintf_r+0x2e>
 800fb04:	230c      	movs	r3, #12
 800fb06:	603b      	str	r3, [r7, #0]
 800fb08:	f04f 30ff 	mov.w	r0, #4294967295
 800fb0c:	e0d1      	b.n	800fcb2 <_svfiprintf_r+0x1d2>
 800fb0e:	2340      	movs	r3, #64	; 0x40
 800fb10:	616b      	str	r3, [r5, #20]
 800fb12:	2300      	movs	r3, #0
 800fb14:	9309      	str	r3, [sp, #36]	; 0x24
 800fb16:	2320      	movs	r3, #32
 800fb18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fb1c:	f8cd 800c 	str.w	r8, [sp, #12]
 800fb20:	2330      	movs	r3, #48	; 0x30
 800fb22:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fccc <_svfiprintf_r+0x1ec>
 800fb26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fb2a:	f04f 0901 	mov.w	r9, #1
 800fb2e:	4623      	mov	r3, r4
 800fb30:	469a      	mov	sl, r3
 800fb32:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fb36:	b10a      	cbz	r2, 800fb3c <_svfiprintf_r+0x5c>
 800fb38:	2a25      	cmp	r2, #37	; 0x25
 800fb3a:	d1f9      	bne.n	800fb30 <_svfiprintf_r+0x50>
 800fb3c:	ebba 0b04 	subs.w	fp, sl, r4
 800fb40:	d00b      	beq.n	800fb5a <_svfiprintf_r+0x7a>
 800fb42:	465b      	mov	r3, fp
 800fb44:	4622      	mov	r2, r4
 800fb46:	4629      	mov	r1, r5
 800fb48:	4638      	mov	r0, r7
 800fb4a:	f7ff ff6d 	bl	800fa28 <__ssputs_r>
 800fb4e:	3001      	adds	r0, #1
 800fb50:	f000 80aa 	beq.w	800fca8 <_svfiprintf_r+0x1c8>
 800fb54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fb56:	445a      	add	r2, fp
 800fb58:	9209      	str	r2, [sp, #36]	; 0x24
 800fb5a:	f89a 3000 	ldrb.w	r3, [sl]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	f000 80a2 	beq.w	800fca8 <_svfiprintf_r+0x1c8>
 800fb64:	2300      	movs	r3, #0
 800fb66:	f04f 32ff 	mov.w	r2, #4294967295
 800fb6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fb6e:	f10a 0a01 	add.w	sl, sl, #1
 800fb72:	9304      	str	r3, [sp, #16]
 800fb74:	9307      	str	r3, [sp, #28]
 800fb76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fb7a:	931a      	str	r3, [sp, #104]	; 0x68
 800fb7c:	4654      	mov	r4, sl
 800fb7e:	2205      	movs	r2, #5
 800fb80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb84:	4851      	ldr	r0, [pc, #324]	; (800fccc <_svfiprintf_r+0x1ec>)
 800fb86:	f7f0 fb5b 	bl	8000240 <memchr>
 800fb8a:	9a04      	ldr	r2, [sp, #16]
 800fb8c:	b9d8      	cbnz	r0, 800fbc6 <_svfiprintf_r+0xe6>
 800fb8e:	06d0      	lsls	r0, r2, #27
 800fb90:	bf44      	itt	mi
 800fb92:	2320      	movmi	r3, #32
 800fb94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fb98:	0711      	lsls	r1, r2, #28
 800fb9a:	bf44      	itt	mi
 800fb9c:	232b      	movmi	r3, #43	; 0x2b
 800fb9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fba2:	f89a 3000 	ldrb.w	r3, [sl]
 800fba6:	2b2a      	cmp	r3, #42	; 0x2a
 800fba8:	d015      	beq.n	800fbd6 <_svfiprintf_r+0xf6>
 800fbaa:	9a07      	ldr	r2, [sp, #28]
 800fbac:	4654      	mov	r4, sl
 800fbae:	2000      	movs	r0, #0
 800fbb0:	f04f 0c0a 	mov.w	ip, #10
 800fbb4:	4621      	mov	r1, r4
 800fbb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fbba:	3b30      	subs	r3, #48	; 0x30
 800fbbc:	2b09      	cmp	r3, #9
 800fbbe:	d94e      	bls.n	800fc5e <_svfiprintf_r+0x17e>
 800fbc0:	b1b0      	cbz	r0, 800fbf0 <_svfiprintf_r+0x110>
 800fbc2:	9207      	str	r2, [sp, #28]
 800fbc4:	e014      	b.n	800fbf0 <_svfiprintf_r+0x110>
 800fbc6:	eba0 0308 	sub.w	r3, r0, r8
 800fbca:	fa09 f303 	lsl.w	r3, r9, r3
 800fbce:	4313      	orrs	r3, r2
 800fbd0:	9304      	str	r3, [sp, #16]
 800fbd2:	46a2      	mov	sl, r4
 800fbd4:	e7d2      	b.n	800fb7c <_svfiprintf_r+0x9c>
 800fbd6:	9b03      	ldr	r3, [sp, #12]
 800fbd8:	1d19      	adds	r1, r3, #4
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	9103      	str	r1, [sp, #12]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	bfbb      	ittet	lt
 800fbe2:	425b      	neglt	r3, r3
 800fbe4:	f042 0202 	orrlt.w	r2, r2, #2
 800fbe8:	9307      	strge	r3, [sp, #28]
 800fbea:	9307      	strlt	r3, [sp, #28]
 800fbec:	bfb8      	it	lt
 800fbee:	9204      	strlt	r2, [sp, #16]
 800fbf0:	7823      	ldrb	r3, [r4, #0]
 800fbf2:	2b2e      	cmp	r3, #46	; 0x2e
 800fbf4:	d10c      	bne.n	800fc10 <_svfiprintf_r+0x130>
 800fbf6:	7863      	ldrb	r3, [r4, #1]
 800fbf8:	2b2a      	cmp	r3, #42	; 0x2a
 800fbfa:	d135      	bne.n	800fc68 <_svfiprintf_r+0x188>
 800fbfc:	9b03      	ldr	r3, [sp, #12]
 800fbfe:	1d1a      	adds	r2, r3, #4
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	9203      	str	r2, [sp, #12]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	bfb8      	it	lt
 800fc08:	f04f 33ff 	movlt.w	r3, #4294967295
 800fc0c:	3402      	adds	r4, #2
 800fc0e:	9305      	str	r3, [sp, #20]
 800fc10:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fcdc <_svfiprintf_r+0x1fc>
 800fc14:	7821      	ldrb	r1, [r4, #0]
 800fc16:	2203      	movs	r2, #3
 800fc18:	4650      	mov	r0, sl
 800fc1a:	f7f0 fb11 	bl	8000240 <memchr>
 800fc1e:	b140      	cbz	r0, 800fc32 <_svfiprintf_r+0x152>
 800fc20:	2340      	movs	r3, #64	; 0x40
 800fc22:	eba0 000a 	sub.w	r0, r0, sl
 800fc26:	fa03 f000 	lsl.w	r0, r3, r0
 800fc2a:	9b04      	ldr	r3, [sp, #16]
 800fc2c:	4303      	orrs	r3, r0
 800fc2e:	3401      	adds	r4, #1
 800fc30:	9304      	str	r3, [sp, #16]
 800fc32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc36:	4826      	ldr	r0, [pc, #152]	; (800fcd0 <_svfiprintf_r+0x1f0>)
 800fc38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fc3c:	2206      	movs	r2, #6
 800fc3e:	f7f0 faff 	bl	8000240 <memchr>
 800fc42:	2800      	cmp	r0, #0
 800fc44:	d038      	beq.n	800fcb8 <_svfiprintf_r+0x1d8>
 800fc46:	4b23      	ldr	r3, [pc, #140]	; (800fcd4 <_svfiprintf_r+0x1f4>)
 800fc48:	bb1b      	cbnz	r3, 800fc92 <_svfiprintf_r+0x1b2>
 800fc4a:	9b03      	ldr	r3, [sp, #12]
 800fc4c:	3307      	adds	r3, #7
 800fc4e:	f023 0307 	bic.w	r3, r3, #7
 800fc52:	3308      	adds	r3, #8
 800fc54:	9303      	str	r3, [sp, #12]
 800fc56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc58:	4433      	add	r3, r6
 800fc5a:	9309      	str	r3, [sp, #36]	; 0x24
 800fc5c:	e767      	b.n	800fb2e <_svfiprintf_r+0x4e>
 800fc5e:	fb0c 3202 	mla	r2, ip, r2, r3
 800fc62:	460c      	mov	r4, r1
 800fc64:	2001      	movs	r0, #1
 800fc66:	e7a5      	b.n	800fbb4 <_svfiprintf_r+0xd4>
 800fc68:	2300      	movs	r3, #0
 800fc6a:	3401      	adds	r4, #1
 800fc6c:	9305      	str	r3, [sp, #20]
 800fc6e:	4619      	mov	r1, r3
 800fc70:	f04f 0c0a 	mov.w	ip, #10
 800fc74:	4620      	mov	r0, r4
 800fc76:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fc7a:	3a30      	subs	r2, #48	; 0x30
 800fc7c:	2a09      	cmp	r2, #9
 800fc7e:	d903      	bls.n	800fc88 <_svfiprintf_r+0x1a8>
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d0c5      	beq.n	800fc10 <_svfiprintf_r+0x130>
 800fc84:	9105      	str	r1, [sp, #20]
 800fc86:	e7c3      	b.n	800fc10 <_svfiprintf_r+0x130>
 800fc88:	fb0c 2101 	mla	r1, ip, r1, r2
 800fc8c:	4604      	mov	r4, r0
 800fc8e:	2301      	movs	r3, #1
 800fc90:	e7f0      	b.n	800fc74 <_svfiprintf_r+0x194>
 800fc92:	ab03      	add	r3, sp, #12
 800fc94:	9300      	str	r3, [sp, #0]
 800fc96:	462a      	mov	r2, r5
 800fc98:	4b0f      	ldr	r3, [pc, #60]	; (800fcd8 <_svfiprintf_r+0x1f8>)
 800fc9a:	a904      	add	r1, sp, #16
 800fc9c:	4638      	mov	r0, r7
 800fc9e:	f3af 8000 	nop.w
 800fca2:	1c42      	adds	r2, r0, #1
 800fca4:	4606      	mov	r6, r0
 800fca6:	d1d6      	bne.n	800fc56 <_svfiprintf_r+0x176>
 800fca8:	89ab      	ldrh	r3, [r5, #12]
 800fcaa:	065b      	lsls	r3, r3, #25
 800fcac:	f53f af2c 	bmi.w	800fb08 <_svfiprintf_r+0x28>
 800fcb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fcb2:	b01d      	add	sp, #116	; 0x74
 800fcb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcb8:	ab03      	add	r3, sp, #12
 800fcba:	9300      	str	r3, [sp, #0]
 800fcbc:	462a      	mov	r2, r5
 800fcbe:	4b06      	ldr	r3, [pc, #24]	; (800fcd8 <_svfiprintf_r+0x1f8>)
 800fcc0:	a904      	add	r1, sp, #16
 800fcc2:	4638      	mov	r0, r7
 800fcc4:	f7ff f97a 	bl	800efbc <_printf_i>
 800fcc8:	e7eb      	b.n	800fca2 <_svfiprintf_r+0x1c2>
 800fcca:	bf00      	nop
 800fccc:	08016248 	.word	0x08016248
 800fcd0:	08016252 	.word	0x08016252
 800fcd4:	00000000 	.word	0x00000000
 800fcd8:	0800fa29 	.word	0x0800fa29
 800fcdc:	0801624e 	.word	0x0801624e

0800fce0 <__sread>:
 800fce0:	b510      	push	{r4, lr}
 800fce2:	460c      	mov	r4, r1
 800fce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fce8:	f000 f89c 	bl	800fe24 <_read_r>
 800fcec:	2800      	cmp	r0, #0
 800fcee:	bfab      	itete	ge
 800fcf0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fcf2:	89a3      	ldrhlt	r3, [r4, #12]
 800fcf4:	181b      	addge	r3, r3, r0
 800fcf6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fcfa:	bfac      	ite	ge
 800fcfc:	6563      	strge	r3, [r4, #84]	; 0x54
 800fcfe:	81a3      	strhlt	r3, [r4, #12]
 800fd00:	bd10      	pop	{r4, pc}

0800fd02 <__swrite>:
 800fd02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd06:	461f      	mov	r7, r3
 800fd08:	898b      	ldrh	r3, [r1, #12]
 800fd0a:	05db      	lsls	r3, r3, #23
 800fd0c:	4605      	mov	r5, r0
 800fd0e:	460c      	mov	r4, r1
 800fd10:	4616      	mov	r6, r2
 800fd12:	d505      	bpl.n	800fd20 <__swrite+0x1e>
 800fd14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd18:	2302      	movs	r3, #2
 800fd1a:	2200      	movs	r2, #0
 800fd1c:	f000 f868 	bl	800fdf0 <_lseek_r>
 800fd20:	89a3      	ldrh	r3, [r4, #12]
 800fd22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fd26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fd2a:	81a3      	strh	r3, [r4, #12]
 800fd2c:	4632      	mov	r2, r6
 800fd2e:	463b      	mov	r3, r7
 800fd30:	4628      	mov	r0, r5
 800fd32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fd36:	f000 b817 	b.w	800fd68 <_write_r>

0800fd3a <__sseek>:
 800fd3a:	b510      	push	{r4, lr}
 800fd3c:	460c      	mov	r4, r1
 800fd3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd42:	f000 f855 	bl	800fdf0 <_lseek_r>
 800fd46:	1c43      	adds	r3, r0, #1
 800fd48:	89a3      	ldrh	r3, [r4, #12]
 800fd4a:	bf15      	itete	ne
 800fd4c:	6560      	strne	r0, [r4, #84]	; 0x54
 800fd4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fd52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fd56:	81a3      	strheq	r3, [r4, #12]
 800fd58:	bf18      	it	ne
 800fd5a:	81a3      	strhne	r3, [r4, #12]
 800fd5c:	bd10      	pop	{r4, pc}

0800fd5e <__sclose>:
 800fd5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd62:	f000 b813 	b.w	800fd8c <_close_r>
	...

0800fd68 <_write_r>:
 800fd68:	b538      	push	{r3, r4, r5, lr}
 800fd6a:	4d07      	ldr	r5, [pc, #28]	; (800fd88 <_write_r+0x20>)
 800fd6c:	4604      	mov	r4, r0
 800fd6e:	4608      	mov	r0, r1
 800fd70:	4611      	mov	r1, r2
 800fd72:	2200      	movs	r2, #0
 800fd74:	602a      	str	r2, [r5, #0]
 800fd76:	461a      	mov	r2, r3
 800fd78:	f7f3 fc33 	bl	80035e2 <_write>
 800fd7c:	1c43      	adds	r3, r0, #1
 800fd7e:	d102      	bne.n	800fd86 <_write_r+0x1e>
 800fd80:	682b      	ldr	r3, [r5, #0]
 800fd82:	b103      	cbz	r3, 800fd86 <_write_r+0x1e>
 800fd84:	6023      	str	r3, [r4, #0]
 800fd86:	bd38      	pop	{r3, r4, r5, pc}
 800fd88:	20007520 	.word	0x20007520

0800fd8c <_close_r>:
 800fd8c:	b538      	push	{r3, r4, r5, lr}
 800fd8e:	4d06      	ldr	r5, [pc, #24]	; (800fda8 <_close_r+0x1c>)
 800fd90:	2300      	movs	r3, #0
 800fd92:	4604      	mov	r4, r0
 800fd94:	4608      	mov	r0, r1
 800fd96:	602b      	str	r3, [r5, #0]
 800fd98:	f7f3 fc3f 	bl	800361a <_close>
 800fd9c:	1c43      	adds	r3, r0, #1
 800fd9e:	d102      	bne.n	800fda6 <_close_r+0x1a>
 800fda0:	682b      	ldr	r3, [r5, #0]
 800fda2:	b103      	cbz	r3, 800fda6 <_close_r+0x1a>
 800fda4:	6023      	str	r3, [r4, #0]
 800fda6:	bd38      	pop	{r3, r4, r5, pc}
 800fda8:	20007520 	.word	0x20007520

0800fdac <_fstat_r>:
 800fdac:	b538      	push	{r3, r4, r5, lr}
 800fdae:	4d07      	ldr	r5, [pc, #28]	; (800fdcc <_fstat_r+0x20>)
 800fdb0:	2300      	movs	r3, #0
 800fdb2:	4604      	mov	r4, r0
 800fdb4:	4608      	mov	r0, r1
 800fdb6:	4611      	mov	r1, r2
 800fdb8:	602b      	str	r3, [r5, #0]
 800fdba:	f7f3 fc3a 	bl	8003632 <_fstat>
 800fdbe:	1c43      	adds	r3, r0, #1
 800fdc0:	d102      	bne.n	800fdc8 <_fstat_r+0x1c>
 800fdc2:	682b      	ldr	r3, [r5, #0]
 800fdc4:	b103      	cbz	r3, 800fdc8 <_fstat_r+0x1c>
 800fdc6:	6023      	str	r3, [r4, #0]
 800fdc8:	bd38      	pop	{r3, r4, r5, pc}
 800fdca:	bf00      	nop
 800fdcc:	20007520 	.word	0x20007520

0800fdd0 <_isatty_r>:
 800fdd0:	b538      	push	{r3, r4, r5, lr}
 800fdd2:	4d06      	ldr	r5, [pc, #24]	; (800fdec <_isatty_r+0x1c>)
 800fdd4:	2300      	movs	r3, #0
 800fdd6:	4604      	mov	r4, r0
 800fdd8:	4608      	mov	r0, r1
 800fdda:	602b      	str	r3, [r5, #0]
 800fddc:	f7f3 fc39 	bl	8003652 <_isatty>
 800fde0:	1c43      	adds	r3, r0, #1
 800fde2:	d102      	bne.n	800fdea <_isatty_r+0x1a>
 800fde4:	682b      	ldr	r3, [r5, #0]
 800fde6:	b103      	cbz	r3, 800fdea <_isatty_r+0x1a>
 800fde8:	6023      	str	r3, [r4, #0]
 800fdea:	bd38      	pop	{r3, r4, r5, pc}
 800fdec:	20007520 	.word	0x20007520

0800fdf0 <_lseek_r>:
 800fdf0:	b538      	push	{r3, r4, r5, lr}
 800fdf2:	4d07      	ldr	r5, [pc, #28]	; (800fe10 <_lseek_r+0x20>)
 800fdf4:	4604      	mov	r4, r0
 800fdf6:	4608      	mov	r0, r1
 800fdf8:	4611      	mov	r1, r2
 800fdfa:	2200      	movs	r2, #0
 800fdfc:	602a      	str	r2, [r5, #0]
 800fdfe:	461a      	mov	r2, r3
 800fe00:	f7f3 fc32 	bl	8003668 <_lseek>
 800fe04:	1c43      	adds	r3, r0, #1
 800fe06:	d102      	bne.n	800fe0e <_lseek_r+0x1e>
 800fe08:	682b      	ldr	r3, [r5, #0]
 800fe0a:	b103      	cbz	r3, 800fe0e <_lseek_r+0x1e>
 800fe0c:	6023      	str	r3, [r4, #0]
 800fe0e:	bd38      	pop	{r3, r4, r5, pc}
 800fe10:	20007520 	.word	0x20007520

0800fe14 <_malloc_usable_size_r>:
 800fe14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe18:	1f18      	subs	r0, r3, #4
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	bfbc      	itt	lt
 800fe1e:	580b      	ldrlt	r3, [r1, r0]
 800fe20:	18c0      	addlt	r0, r0, r3
 800fe22:	4770      	bx	lr

0800fe24 <_read_r>:
 800fe24:	b538      	push	{r3, r4, r5, lr}
 800fe26:	4d07      	ldr	r5, [pc, #28]	; (800fe44 <_read_r+0x20>)
 800fe28:	4604      	mov	r4, r0
 800fe2a:	4608      	mov	r0, r1
 800fe2c:	4611      	mov	r1, r2
 800fe2e:	2200      	movs	r2, #0
 800fe30:	602a      	str	r2, [r5, #0]
 800fe32:	461a      	mov	r2, r3
 800fe34:	f7f3 fbb8 	bl	80035a8 <_read>
 800fe38:	1c43      	adds	r3, r0, #1
 800fe3a:	d102      	bne.n	800fe42 <_read_r+0x1e>
 800fe3c:	682b      	ldr	r3, [r5, #0]
 800fe3e:	b103      	cbz	r3, 800fe42 <_read_r+0x1e>
 800fe40:	6023      	str	r3, [r4, #0]
 800fe42:	bd38      	pop	{r3, r4, r5, pc}
 800fe44:	20007520 	.word	0x20007520

0800fe48 <_init>:
 800fe48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe4a:	bf00      	nop
 800fe4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe4e:	bc08      	pop	{r3}
 800fe50:	469e      	mov	lr, r3
 800fe52:	4770      	bx	lr

0800fe54 <_fini>:
 800fe54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe56:	bf00      	nop
 800fe58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe5a:	bc08      	pop	{r3}
 800fe5c:	469e      	mov	lr, r3
 800fe5e:	4770      	bx	lr
